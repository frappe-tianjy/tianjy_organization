frappe.dom.set_style("/* sfc-style-css:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue?type=style-css&index=0 */\n.toggle-btn[data-v-c3964969] {\n  display: flex;\n  margin-right: var(--margin-sm);\n  cursor: pointer;\n  --icon-stroke: var(--gray-500);\n}\n.toggle-btn .sidebar-toggle-placeholder[data-v-c3964969] {\n  transition: all 0.5s ease-in-out;\n}\n.toggle-btn .sidebar-toggle-icon[data-v-c3964969] {\n  transition: all 0.5s ease-in-out;\n  display: none;\n}\n.toggle-btn:hover .sidebar-toggle-placeholder[data-v-c3964969] {\n  display: none;\n}\n.toggle-btn:hover .sidebar-toggle-icon[data-v-c3964969] {\n  display: block;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=style-css&index=0 */\n.title[data-v-2cbdb5e9] {\n  height: 75px;\n  display: flex;\n  align-items: center;\n  line-height: 75px;\n}\n.guigu-container[data-v-2cbdb5e9] {\n  height: var(--2cbdb5e9-height);\n  display: flex;\n  flex-direction: column;\n  background-color: #fff;\n}\n.guigu-container .main-container[data-v-2cbdb5e9] {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n.guigu-container .main-container .sider[data-v-2cbdb5e9] {\n  min-width: 50px;\n  min-height: 50px;\n}\n.guigu-container .main-container.horizon[data-v-2cbdb5e9] {\n  flex-direction: row;\n}\n.guigu-container .main-container.horizon .sider[data-v-2cbdb5e9] {\n  width: 300px;\n}\n.guigu-container .main-container.horizon .sider.onlySider[data-v-2cbdb5e9] {\n  width: 100%;\n}\n.guigu-container .main-container.vertical[data-v-2cbdb5e9] {\n  flex-direction: column;\n}\n.guigu-container .main-container.vertical .sider[data-v-2cbdb5e9] {\n  height: 300px;\n}\n.guigu-container .main-container.vertical .sider.onlySider[data-v-2cbdb5e9] {\n  height: 100%;\n}\n.guigu-container .main-container .resizer-container[data-v-2cbdb5e9] {\n  position: relative;\n  border: 0;\n}\n.guigu-container .main-container .resizer-container .resizer[data-v-2cbdb5e9] {\n  position: absolute;\n  z-index: 1;\n  background-color: #d9d9d9;\n  opacity: 0.5;\n}\n.guigu-container .main-container .resizer-container.horizon[data-v-2cbdb5e9] {\n  padding: 0 4px;\n  width: 12px;\n  height: 100%;\n}\n.guigu-container .main-container .resizer-container.horizon .resizer[data-v-2cbdb5e9] {\n  width: 2px;\n  height: 100%;\n  cursor: col-resize;\n}\n.guigu-container .main-container .resizer-container.vertical[data-v-2cbdb5e9] {\n  padding: 4px 0;\n  width: 100%;\n  height: 12px;\n}\n.guigu-container .main-container .resizer-container.vertical .resizer[data-v-2cbdb5e9] {\n  height: 2px;\n  width: 100%;\n  cursor: row-resize;\n}\n.guigu-container .main-container .right[data-v-2cbdb5e9] {\n  display: flex;\n  flex: 1;\n  overflow: auto;\n}\n.guigu-container .main-container .right.horizon[data-v-2cbdb5e9] {\n  flex-direction: row;\n}\n.guigu-container .main-container .right.horizon .main[data-v-2cbdb5e9] {\n  width: 50%;\n}\n.guigu-container .main-container .right.horizon .main.noDetail[data-v-2cbdb5e9] {\n  width: 100%;\n}\n.guigu-container .main-container .right.horizon .detail[data-v-2cbdb5e9] {\n  flex: 1;\n  min-width: 150px;\n}\n.guigu-container .main-container .right.vertical[data-v-2cbdb5e9] {\n  flex-direction: column;\n}\n.guigu-container .main-container .right.vertical .main[data-v-2cbdb5e9] {\n  height: 50%;\n}\n.guigu-container .main-container .right.vertical .main.noDetail[data-v-2cbdb5e9] {\n  height: 100%;\n}\n.guigu-container .main-container .right.vertical .detail[data-v-2cbdb5e9] {\n  flex: 1;\n  min-height: 150px;\n}\n.tools[data-v-2cbdb5e9] {\n  padding: 8px 0;\n}\n.small-meta_tools[data-v-2cbdb5e9] {\n  display: flex;\n  justify-content: space-between;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue?type=style-css&index=0 */\n[data-v-a835aba7] .delete {\n  color: #f00;\n}\n.create_type[data-v-a835aba7] {\n  height: 24px;\n}\n.create-menu[data-v-a835aba7] {\n  border-right: 0;\n  padding: 0;\n}\n.custom-tree-node[data-v-a835aba7] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n  padding-right: 8px;\n}\n.custom-tree-node .el-dropdown-link[data-v-a835aba7] {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  visibility: hidden;\n}\n.custom-tree-node:hover .el-dropdown-link[data-v-a835aba7] {\n  visibility: visible;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=style-css&index=0 */\n.sider-container[data-v-7ff9d4db] {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding-top: 8px;\n}\n.sider-container .btn-container[data-v-7ff9d4db] {\n  margin-bottom: 8px;\n}\n.sider-container .tree-container[data-v-7ff9d4db] {\n  overflow-y: auto;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Header.vue?type=style-css&index=0 */\n._header_pve6u_1 {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  z-index: 6;\n  position: sticky;\n  top: 0;\n  box-shadow: var(--shadow-sm);\n  background-color: var(--card-bg);\n  margin-bottom: 5px;\n  height: 48px;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=style-css&index=0 */\n.form-container[data-v-c54e1258] {\n  border: 1px solid #eee;\n  height: 100%;\n  overflow: auto;\n}\n.form-container[data-v-c54e1258] .form-section .form-column:first-child {\n  padding-left: 15px;\n}\n.form-container .placeholder[data-v-c54e1258] {\n  height: 500px;\n  line-height: 500px;\n  text-align: center;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=style-css&index=0 */\n.content[data-v-89a027f3] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.content[data-v-89a027f3] .page-body {\n  overflow: auto;\n}\n.content[data-v-89a027f3] .page-head {\n  position: static;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=style-css&index=0 */\n.member[data-v-b487dc22] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.member .btn-container[data-v-b487dc22] {\n  text-align: right;\n  margin-bottom: 8px;\n}\n.member .role[data-v-b487dc22] {\n  cursor: pointer;\n  margin-right: 4px;\n}\n.member .role[data-v-b487dc22]:hover {\n  text-decoration: underline;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue?type=style-css&index=0 */\n.inheritable-organization[data-v-4e2c9cb6] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.inheritable-organization .btn-container[data-v-4e2c9cb6] {\n  text-align: right;\n  margin-bottom: 8px;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/InheritMember.vue?type=style-css&index=0 */\n.member[data-v-b28ae675] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.member .btn-container[data-v-b28ae675] {\n  text-align: right;\n  margin-bottom: 8px;\n}\n.member .role[data-v-b28ae675] {\n  cursor: pointer;\n  margin-right: 4px;\n}\n.member .role[data-v-b28ae675]:hover {\n  text-decoration: underline;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=style-css&index=0 */\n.title[data-v-cb280acd] {\n  margin-bottom: 0;\n}\n.organization-tabs[data-v-cb280acd] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.tab-container[data-v-cb280acd] {\n  height: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64, */\n");
(function(){
"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key2 of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to2, key2) && key2 !== except)
          __defProp(to2, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../frappe/node_modules/editorjs-undo/dist/bundle.js
  var require_bundle = __commonJS({
    "../frappe/node_modules/editorjs-undo/dist/bundle.js"(exports, module) {
      !function(t, e) {
        "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.Undo = e() : t.Undo = e();
      }(window, function() {
        return function(t) {
          var e = {};
          function n(i) {
            if (e[i])
              return e[i].exports;
            var o = e[i] = { i, l: false, exports: {} };
            return t[i].call(o.exports, o, o.exports, n), o.l = true, o.exports;
          }
          return n.m = t, n.c = e, n.d = function(t2, e2, i) {
            n.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: i });
          }, n.r = function(t2) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
          }, n.t = function(t2, e2) {
            if (1 & e2 && (t2 = n(t2)), 8 & e2)
              return t2;
            if (4 & e2 && "object" == typeof t2 && t2 && t2.__esModule)
              return t2;
            var i = /* @__PURE__ */ Object.create(null);
            if (n.r(i), Object.defineProperty(i, "default", { enumerable: true, value: t2 }), 2 & e2 && "string" != typeof t2)
              for (var o in t2)
                n.d(i, o, function(e3) {
                  return t2[e3];
                }.bind(null, o));
            return i;
          }, n.n = function(t2) {
            var e2 = t2 && t2.__esModule ? function() {
              return t2.default;
            } : function() {
              return t2;
            };
            return n.d(e2, "a", e2), e2;
          }, n.o = function(t2, e2) {
            return Object.prototype.hasOwnProperty.call(t2, e2);
          }, n.p = "/", n(n.s = 0);
        }([function(t, e, n) {
          "use strict";
          function i(t2, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
            }
          }
          n.r(e), n.d(e, "default", function() {
            return s;
          });
          var o = function() {
            function t2(e3, n3) {
              !function(t3, e4) {
                if (!(t3 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t2), this.holder = "string" == typeof n3 ? document.getElementById(n3) : n3, this.observer = null, this.debounceTimer = 200, this.mutationDebouncer = this.debounce(function() {
                e3();
              }, this.debounceTimer);
            }
            var e2, n2, o2;
            return e2 = t2, (n2 = [{ key: "setMutationObserver", value: function() {
              var t3 = this, e3 = this.holder;
              this.observer = new MutationObserver(function(e4) {
                t3.mutationHandler(e4);
              }), this.observer.observe(e3, { childList: true, attributes: true, subtree: true, characterData: true, characterDataOldValue: true });
            } }, { key: "mutationHandler", value: function(t3) {
              var e3 = this, n3 = false;
              t3.forEach(function(t4) {
                switch (t4.type) {
                  case "childList":
                    t4.target === e3.holder ? e3.onDestroy() : n3 = true;
                    break;
                  case "characterData":
                    n3 = true;
                    break;
                  case "attributes":
                    t4.target.classList.contains("ce-block") || (n3 = true);
                }
              }), n3 && this.mutationDebouncer();
            } }, { key: "debounce", value: function(t3, e3) {
              var n3, i2 = this;
              return function() {
                for (var o3 = arguments.length, r2 = new Array(o3), s2 = 0; s2 < o3; s2++)
                  r2[s2] = arguments[s2];
                var a = i2;
                clearTimeout(n3), n3 = setTimeout(function() {
                  return t3.apply(a, r2);
                }, e3);
              };
            } }, { key: "onDestroy", value: function() {
              var t3 = new CustomEvent("destroy");
              document.dispatchEvent(t3), this.observer.disconnect();
            } }]) && i(e2.prototype, n2), o2 && i(e2, o2), t2;
          }();
          function r(t2, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
            }
          }
          var s = function() {
            function t2(e3) {
              var n3 = this, i3 = e3.editor, r2 = e3.onUpdate, s2 = e3.maxLength;
              !function(t3, e4) {
                if (!(t3 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t2);
              var a = { maxLength: 30, onUpdate: function() {
              } }, u = i3.configuration;
              this.editor = i3, this.shouldSaveHistory = true, this.readOnly = u.readOnly, this.maxLength = s2 || a.maxLength, this.onUpdate = r2 || a.onUpdate, new o(function() {
                return n3.registerChange();
              }, u.holder).setMutationObserver(), this.setEventListeners(), this.initialItem = null, this.clear();
            }
            var e2, n2, i2;
            return e2 = t2, i2 = [{ key: "isReadOnlySupported", get: function() {
              return true;
            } }], (n2 = [{ key: "truncate", value: function(t3, e3) {
              for (; t3.length > e3; )
                t3.shift();
            } }, { key: "initialize", value: function(t3) {
              var e3 = "blocks" in t3 ? t3.blocks : t3, n3 = { index: e3.length - 1, state: e3 };
              this.stack[0] = n3, this.initialItem = n3;
            } }, { key: "clear", value: function() {
              this.stack = this.initialItem ? [this.initialItem] : [{ index: 0, state: [] }], this.position = 0, this.onUpdate();
            } }, { key: "registerChange", value: function() {
              var t3 = this;
              this.readOnly || (this.editor && this.editor.save && this.shouldSaveHistory && this.editor.save().then(function(e3) {
                t3.editorDidUpdate(e3.blocks) && t3.save(e3.blocks);
              }), this.shouldSaveHistory = true);
            } }, { key: "editorDidUpdate", value: function(t3) {
              var e3 = this.stack[this.position].state;
              return t3.length !== e3.length || JSON.stringify(e3) !== JSON.stringify(t3);
            } }, { key: "save", value: function(t3) {
              this.position >= this.maxLength && this.truncate(this.stack, this.maxLength), this.position = Math.min(this.position, this.stack.length - 1), this.stack = this.stack.slice(0, this.position + 1);
              var e3 = this.editor.blocks.getCurrentBlockIndex();
              this.stack.push({ index: e3, state: t3 }), this.position += 1, this.onUpdate();
            } }, { key: "undo", value: function() {
              var t3 = this;
              if (this.canUndo()) {
                this.shouldSaveHistory = false;
                var e3 = this.stack[this.position -= 1], n3 = e3.index, i3 = e3.state;
                this.onUpdate(), this.editor.blocks.render({ blocks: i3 }).then(function() {
                  return t3.editor.caret.setToBlock(n3, "end");
                });
              }
            } }, { key: "redo", value: function() {
              var t3 = this;
              if (this.canRedo()) {
                this.shouldSaveHistory = false;
                var e3 = this.stack[this.position += 1], n3 = e3.index, i3 = e3.state;
                this.onUpdate(), this.editor.blocks.render({ blocks: i3 }).then(function() {
                  return t3.editor.caret.setToBlock(n3, "end");
                });
              }
            } }, { key: "canUndo", value: function() {
              return !this.readOnly && this.position > 0;
            } }, { key: "canRedo", value: function() {
              return !this.readOnly && this.position < this.count();
            } }, { key: "count", value: function() {
              return this.stack.length - 1;
            } }, { key: "setEventListeners", value: function() {
              var t3 = this, e3 = /(Mac)/i.test(navigator.platform) ? "metaKey" : "ctrlKey", n3 = function(n4) {
                n4[e3] && "z" === n4.key && (n4.preventDefault(), t3.undo());
              }, i3 = function(n4) {
                n4[e3] && "y" === n4.key && (n4.preventDefault(), t3.redo());
              };
              document.addEventListener("keydown", n3), document.addEventListener("keydown", i3), document.addEventListener("destroy", function() {
                document.removeEventListener("keydown", n3), document.removeEventListener("keydown", i3);
              });
            } }]) && r(e2.prototype, n2), i2 && r(e2, i2), t2;
          }();
        }]).default;
      });
    }
  });

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.ts
  var import_vue41 = __require("vue");

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=script
  var import_vue38 = __require("vue");
  var import_vue39 = __require("vue");

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=script
  var import_vue4 = __require("vue");
  var import_vue5 = __require("vue");
  var import_icons_vue = __require("@element-plus/icons-vue");

  // ../guigu_pm/guigu_pm/public/js/components/page/useMetaQuery.ts
  var import_vue = __require("vue");
  function useMetaQuery() {
    const smallMeta = (0, import_vue.ref)("ontouchstart" in document.documentElement);
    let mQuery;
    function mediaChange() {
      if (mQuery.matches) {
        smallMeta.value = true;
      } else {
        smallMeta.value = false;
      }
    }
    (0, import_vue.onMounted)(() => {
      mQuery = window.matchMedia("(max-width: 640px)");
      if (mQuery.matches) {
        smallMeta.value = true;
      } else {
        smallMeta.value = false;
      }
      mQuery.addEventListener("change", mediaChange);
    });
    (0, import_vue.onUnmounted)(() => {
      mQuery.removeEventListener("change", mediaChange);
    });
    return smallMeta;
  }

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue?type=script
  var import_vue2 = __require("vue");
  var ToggleBtn_default = /* @__PURE__ */ (0, import_vue2.defineComponent)({
    __name: "ToggleBtn",
    props: {
      expand: { type: Boolean, required: true }
    },
    emits: ["update:expand"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      function toggleSider() {
        emit("update:expand", !props.expand);
      }
      const __returned__ = { props, emit, toggleSider };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue?type=style&index=0
  var ToggleBtn_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue?type=template
  var import_vue3 = __require("vue");
  var _withScopeId = (n) => ((0, import_vue3.pushScopeId)("data-v-c3964969"), n = n(), (0, import_vue3.popScopeId)(), n);
  var _hoisted_1 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ (0, import_vue3.createElementVNode)("svg", { class: "icon icon-md sidebar-toggle-placeholder" }, [
    /* @__PURE__ */ (0, import_vue3.createElementVNode)("use", { href: "#icon-menu" })
  ], -1));
  var _hoisted_2 = { class: "sidebar-toggle-icon" };
  var _hoisted_3 = { class: "icon icon-md" };
  var _hoisted_4 = ["href"];
  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue3.openBlock)(), (0, import_vue3.createElementBlock)("span", {
      class: "toggle-btn",
      title: "\u5207\u6362\u8FB9\u680F",
      onClick: $setup.toggleSider
    }, [
      _hoisted_1,
      (0, import_vue3.createElementVNode)("span", _hoisted_2, [
        ((0, import_vue3.openBlock)(), (0, import_vue3.createElementBlock)("svg", _hoisted_3, [
          (0, import_vue3.createElementVNode)("use", {
            href: $props.expand ? "#icon-sidebar-collapse" : "#icon-sidebar-expand"
          }, null, 8, _hoisted_4)
        ]))
      ])
    ]);
  }

  // ../guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue
  ToggleBtn_default2(ToggleBtn_default);
  ToggleBtn_default.render = render;
  ToggleBtn_default.__file = "../guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue";
  ToggleBtn_default.__scopeId = "data-v-c3964969";
  var ToggleBtn_default3 = ToggleBtn_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=script
  var page_default = /* @__PURE__ */ (0, import_vue4.defineComponent)({
    __name: "index",
    props: {
      mode: { type: String, required: false },
      rightMode: { type: String, required: false },
      siderStyle: { type: null, required: false },
      mainStyle: { type: null, required: false },
      detailStyle: { type: null, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      (0, import_vue4.useCssVars)((_ctx) => ({
        "2cbdb5e9-height": height.value
      }));
      const smallMeta = useMetaQuery();
      const sider = (0, import_vue5.ref)();
      const main = (0, import_vue5.ref)();
      const container = (0, import_vue5.ref)();
      const resizerContainer = (0, import_vue5.ref)();
      const mainResizerContainer = (0, import_vue5.ref)();
      const rightContainer = (0, import_vue5.ref)();
      const hasTitle = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().title));
      const hasTools = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().tools));
      const hasSider = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().sider));
      const hasMain = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().default));
      const hasDetail = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().detail));
      const height = (0, import_vue5.computed)(() => hasTitle.value ? `calc(100vh - 135px)` : `calc(100vh - 60px)`);
      const showSider = (0, import_vue5.ref)(true);
      function dragLRController(dragEvent) {
        var _a;
        if (!dragEvent.target) {
          return;
        }
        dragEvent.target.setPointerCapture(true);
        dragEvent.stopPropagation();
        dragEvent.target.style.background = "#999";
        let resizerContainerElement;
        let leftElement;
        let containerElement;
        const isSiderResize = dragEvent.target === ((_a = resizerContainer.value) == null ? void 0 : _a.firstChild);
        const mode = isSiderResize ? "mode" : "rightMode";
        if (isSiderResize) {
          resizerContainerElement = resizerContainer.value;
          leftElement = sider.value;
          containerElement = container.value;
        } else {
          resizerContainerElement = mainResizerContainer.value;
          leftElement = main.value;
          containerElement = rightContainer.value;
        }
        let startPo = 0;
        let containerClientSize = 0;
        let oldSiderSize = 0;
        let resizerContainerElementSize = 0;
        if (props[mode] === "vertical") {
          startPo = dragEvent.clientY;
          dragEvent.target.top = dragEvent.target.offsetTop;
          containerClientSize = (containerElement == null ? void 0 : containerElement.clientHeight) || 0;
          oldSiderSize = ((resizerContainerElement == null ? void 0 : resizerContainerElement.offsetTop) || 0) - ((containerElement == null ? void 0 : containerElement.offsetTop) || 0);
          resizerContainerElementSize = (resizerContainerElement == null ? void 0 : resizerContainerElement.clientHeight) || 0;
        } else {
          startPo = dragEvent.clientX;
          dragEvent.target.left = dragEvent.target.offsetLeft;
          containerClientSize = (containerElement == null ? void 0 : containerElement.clientWidth) || 0;
          oldSiderSize = ((resizerContainerElement == null ? void 0 : resizerContainerElement.offsetLeft) || 0) - ((containerElement == null ? void 0 : containerElement.offsetLeft) || 0);
          resizerContainerElementSize = (resizerContainerElement == null ? void 0 : resizerContainerElement.clientWidth) || 0;
        }
        let newSiderSize = oldSiderSize;
        document.onpointermove = function(moveEvent) {
          var _a2, _b, _c, _d;
          if (!dragEvent.target) {
            return;
          }
          let endPo = 0;
          if (props[mode] === "vertical") {
            endPo = moveEvent.clientY;
          } else {
            endPo = moveEvent.clientX;
          }
          let resizerDiff = endPo - startPo;
          newSiderSize = oldSiderSize + resizerDiff;
          const mainSize = containerClientSize - newSiderSize - resizerContainerElementSize;
          let mainMaxSize = isSiderResize ? 250 : 150;
          if (isSiderResize && props.mode === "vertical" && props.rightMode === "vertical" && ((_b = (_a2 = main.value) == null ? void 0 : _a2.style) == null ? void 0 : _b.height)) {
            const alreadyMainHeight = parseFloat(main.value.style.height.replaceAll("px", "") || "0");
            mainMaxSize = alreadyMainHeight + 150 + resizerContainerElementSize;
          } else if (isSiderResize && props.mode !== "vertical" && props.rightMode !== "vertical" && ((_d = (_c = main.value) == null ? void 0 : _c.style) == null ? void 0 : _d.width)) {
            const alreadyMainWidth = parseFloat(main.value.style.width.replaceAll("px", "") || "0");
            mainMaxSize = alreadyMainWidth + 150 + resizerContainerElementSize;
          }
          if (newSiderSize < 50) {
            newSiderSize = 50;
            resizerDiff = newSiderSize - oldSiderSize;
          }
          if (mainSize < mainMaxSize) {
            newSiderSize = containerClientSize - mainMaxSize - resizerContainerElementSize;
            resizerDiff = newSiderSize - oldSiderSize;
          }
          if (props[mode] === "vertical") {
            dragEvent.target.style.top = `${resizerDiff}px`;
          } else {
            dragEvent.target.style.left = `${resizerDiff}px`;
          }
        };
        document.onpointerup = function(evt) {
          if (!dragEvent.target) {
            return;
          }
          dragEvent.target.style.background = "#d9d9d9";
          dragEvent.target.style.left = "auto";
          dragEvent.target.style.top = "auto";
          if (!leftElement) {
            return;
          }
          if (props[mode] === "vertical") {
            leftElement.style.height = `${newSiderSize}px`;
          } else {
            leftElement.style.width = `${newSiderSize}px`;
          }
          document.onpointermove = null;
          document.onpointerup = null;
        };
      }
      (0, import_vue5.watch)(() => smallMeta.value, () => {
        if (smallMeta.value) {
          showSider.value = false;
        }
      }, { immediate: true });
      const showDrawer = (0, import_vue5.computed)(() => showSider.value && smallMeta.value);
      function closeDrawer() {
        showSider.value = false;
      }
      function toggleSider() {
        showSider.value = !showSider.value;
      }
      const __returned__ = { smallMeta, props, sider, main, container, resizerContainer, mainResizerContainer, rightContainer, hasTitle, hasTools, hasSider, hasMain, hasDetail, height, showSider, dragLRController, showDrawer, closeDrawer, toggleSider, get MoreFilled() {
        return import_icons_vue.MoreFilled;
      }, ToggleBtn: ToggleBtn_default3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=style&index=0
  var page_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=template
  var import_vue6 = __require("vue");
  var _hoisted_12 = {
    key: 0,
    class: "title container"
  };
  var _hoisted_22 = { class: "container guigu-container" };
  var _hoisted_32 = { class: "tools" };
  var _hoisted_42 = {
    key: 0,
    class: "tools small-meta_tools"
  };
  var _hoisted_5 = { key: 1 };
  var _hoisted_6 = { class: "popover-tools" };
  function render2(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_icon = (0, import_vue6.resolveComponent)("el-icon");
    const _component_el_popover = (0, import_vue6.resolveComponent)("el-popover");
    const _component_el_drawer = (0, import_vue6.resolveComponent)("el-drawer");
    return (0, import_vue6.openBlock)(), (0, import_vue6.createElementBlock)(import_vue6.Fragment, null, [
      $setup.hasTitle ? ((0, import_vue6.openBlock)(), (0, import_vue6.createElementBlock)("div", _hoisted_12, [
        (0, import_vue6.createVNode)($setup["ToggleBtn"], {
          expand: $setup.showSider,
          "onUpdate:expand": _cache[0] || (_cache[0] = ($event) => $setup.showSider = $event)
        }, null, 8, ["expand"]),
        (0, import_vue6.renderSlot)(_ctx.$slots, "title", {}, void 0, true)
      ])) : (0, import_vue6.createCommentVNode)("v-if", true),
      (0, import_vue6.createElementVNode)("div", _hoisted_22, [
        (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", _hoisted_32, [
          (0, import_vue6.renderSlot)(_ctx.$slots, "tools", {}, void 0, true)
        ], 512), [
          [import_vue6.vShow, $setup.hasTools && !$setup.smallMeta]
        ]),
        $setup.smallMeta ? ((0, import_vue6.openBlock)(), (0, import_vue6.createElementBlock)("div", _hoisted_42, [
          !$setup.hasTitle ? ((0, import_vue6.openBlock)(), (0, import_vue6.createBlock)($setup["ToggleBtn"], {
            key: 0,
            expand: $setup.showSider,
            "onUpdate:expand": _cache[1] || (_cache[1] = ($event) => $setup.showSider = $event)
          }, null, 8, ["expand"])) : ((0, import_vue6.openBlock)(), (0, import_vue6.createElementBlock)("div", _hoisted_5)),
          (0, import_vue6.createVNode)(_component_el_popover, {
            placement: "bottom-start",
            width: 300,
            trigger: "click"
          }, {
            reference: (0, import_vue6.withCtx)(() => [
              (0, import_vue6.createVNode)(_component_el_icon, { size: "20px" }, {
                default: (0, import_vue6.withCtx)(() => [
                  (0, import_vue6.createVNode)($setup["MoreFilled"])
                ]),
                _: 1
              })
            ]),
            default: (0, import_vue6.withCtx)(() => [
              (0, import_vue6.createElementVNode)("div", _hoisted_6, [
                (0, import_vue6.renderSlot)(_ctx.$slots, "tools", {}, void 0, true)
              ])
            ]),
            _: 3
          })
        ])) : (0, import_vue6.createCommentVNode)("v-if", true),
        (0, import_vue6.createElementVNode)("div", {
          class: (0, import_vue6.normalizeClass)([$props.mode === "vertical" ? "vertical" : "horizon", "main-container"]),
          ref: "container"
        }, [
          (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
            style: (0, import_vue6.normalizeStyle)($props.siderStyle),
            class: (0, import_vue6.normalizeClass)(["sider", { onlySider: $setup.hasSider && !$setup.hasDetail && !$setup.hasMain }]),
            ref: "sider"
          }, [
            (0, import_vue6.renderSlot)(_ctx.$slots, "sider", {}, void 0, true)
          ], 6), [
            [import_vue6.vShow, $setup.hasSider && !$setup.smallMeta && $setup.showSider]
          ]),
          (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
            class: (0, import_vue6.normalizeClass)([$props.mode === "vertical" ? "vertical" : "horizon", "resizer-container"]),
            ref: "resizerContainer"
          }, [
            (0, import_vue6.createElementVNode)("div", {
              class: "resizer",
              title: "\u4FA7\u8FB9\u680Fresizer",
              onPointerdown: $setup.dragLRController
            }, null, 32)
          ], 2), [
            [import_vue6.vShow, $setup.hasSider && ($setup.hasDetail || $setup.hasMain) && !$setup.smallMeta && $setup.showSider]
          ]),
          (0, import_vue6.createElementVNode)("div", {
            class: (0, import_vue6.normalizeClass)([$props.rightMode === "vertical" ? "vertical" : "horizon", "right"]),
            ref: "rightContainer"
          }, [
            (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
              style: (0, import_vue6.normalizeStyle)($props.mainStyle),
              class: (0, import_vue6.normalizeClass)(["main", { noDetail: !$setup.hasDetail }]),
              ref: "main"
            }, [
              (0, import_vue6.renderSlot)(_ctx.$slots, "default", {}, void 0, true)
            ], 6), [
              [import_vue6.vShow, $setup.hasMain]
            ]),
            (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
              class: (0, import_vue6.normalizeClass)([$props.rightMode === "vertical" ? "vertical" : "horizon", "resizer-container"]),
              ref: "mainResizerContainer"
            }, [
              (0, import_vue6.createElementVNode)("div", {
                class: "resizer",
                title: "main resizer",
                onPointerdown: $setup.dragLRController
              }, null, 32)
            ], 2), [
              [import_vue6.vShow, $setup.hasDetail && $setup.hasMain]
            ]),
            (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
              style: (0, import_vue6.normalizeStyle)($props.detailStyle),
              class: "detail"
            }, [
              (0, import_vue6.renderSlot)(_ctx.$slots, "detail", {}, void 0, true)
            ], 4), [
              [import_vue6.vShow, $setup.hasDetail]
            ])
          ], 2)
        ], 2)
      ]),
      (0, import_vue6.createVNode)(_component_el_drawer, {
        modelValue: $setup.showDrawer,
        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.showDrawer = $event),
        onClose: $setup.closeDrawer,
        title: "",
        direction: "ltr",
        size: "50%"
      }, {
        default: (0, import_vue6.withCtx)(() => [
          (0, import_vue6.renderSlot)(_ctx.$slots, "sider", {}, void 0, true)
        ]),
        _: 3
      }, 8, ["modelValue"])
    ], 64);
  }

  // ../guigu_pm/guigu_pm/public/js/components/page/index.vue
  page_default2(page_default);
  page_default.render = render2;
  page_default.__file = "../guigu_pm/guigu_pm/public/js/components/page/index.vue";
  page_default.__scopeId = "data-v-2cbdb5e9";
  var page_default3 = page_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=script
  var import_vue10 = __require("vue");
  var import_vue11 = __require("vue");

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/helper.ts
  function list2Tree(listData, parentField) {
    const listDataCopy = structuredClone(listData);
    const treeData = [];
    const map = {};
    listDataCopy.forEach((item2) => {
      map[item2.name] = item2;
    });
    listDataCopy.forEach((item2) => {
      const parent = map[item2[parentField] || 0];
      if (parent) {
        (parent.children || (parent.children = [])).push(item2);
      } else {
        treeData.push(item2);
      }
    });
    return treeData;
  }

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue?type=script
  var import_vue7 = __require("vue");
  var import_vue8 = __require("vue");
  var import_icons_vue2 = __require("@element-plus/icons-vue");
  var import_element_plus = __require("element-plus");
  var TreeItem_default = /* @__PURE__ */ (0, import_vue7.defineComponent)({
    __name: "TreeItem",
    props: {
      node: { type: null, required: true }
    },
    emits: ["update:modelValue", "reload"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      const tt2 = __;
      async function deleteOrganization() {
        import_element_plus.ElMessageBox.confirm(
          "\u60A8\u786E\u8BA4\u5220\u9664\u6B64\u7EC4\u7EC7\u5417?",
          "\u8BF7\u786E\u8BA4",
          {
            confirmButtonText: "\u786E\u5B9A",
            cancelButtonText: "\u53D6\u6D88",
            type: "warning"
          }
        ).then(async () => {
          await frappe.db.delete_doc("Tianjy Organization", props.node.data.name);
          emit("reload");
          (0, import_element_plus.ElMessage)({
            type: "success",
            message: "\u5220\u9664\u6210\u529F"
          });
        }).catch(() => {
          (0, import_element_plus.ElMessage)({
            type: "info",
            message: "\u53D6\u6D88\u5220\u9664"
          });
        });
      }
      const childTypes = (0, import_vue8.computed)(() => props.node.data.child_type_list);
      function command(v) {
        switch (v) {
          case "delete":
            return deleteOrganization();
        }
      }
      function createByType(type) {
        const newDoc = frappe.model.make_new_doc_and_get_name("Tianjy Organization");
        frappe.model.set_value("Tianjy Organization", newDoc, "type", type.name);
        frappe.model.set_value("Tianjy Organization", newDoc, "parent_organization", props.node.data.name);
        frappe.set_route(["form", "Tianjy Organization", newDoc]);
      }
      const __returned__ = { props, tt: tt2, emit, deleteOrganization, childTypes, command, createByType, get MoreFilled() {
        return import_icons_vue2.MoreFilled;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue?type=style&index=0
  var TreeItem_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue?type=template
  var import_vue9 = __require("vue");
  var _withScopeId2 = (n) => ((0, import_vue9.pushScopeId)("data-v-a835aba7"), n = n(), (0, import_vue9.popScopeId)(), n);
  var _hoisted_13 = { class: "custom-tree-node" };
  var _hoisted_23 = { class: "el-dropdown-link" };
  var _hoisted_33 = /* @__PURE__ */ _withScopeId2(() => /* @__PURE__ */ (0, import_vue9.createElementVNode)("span", { class: "delete" }, "\u5220\u9664", -1));
  function render3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_icon = (0, import_vue9.resolveComponent)("el-icon");
    const _component_el_dropdown_item = (0, import_vue9.resolveComponent)("el-dropdown-item");
    const _component_el_dropdown_menu = (0, import_vue9.resolveComponent)("el-dropdown-menu");
    const _component_el_dropdown = (0, import_vue9.resolveComponent)("el-dropdown");
    return (0, import_vue9.openBlock)(), (0, import_vue9.createElementBlock)("div", _hoisted_13, [
      (0, import_vue9.createElementVNode)("span", null, (0, import_vue9.toDisplayString)($props.node.label), 1),
      $props.node.data.permissions.createPermission || $props.node.data.permissions.deletePermission ? ((0, import_vue9.openBlock)(), (0, import_vue9.createBlock)(_component_el_dropdown, {
        key: 0,
        onCommand: $setup.command
      }, {
        dropdown: (0, import_vue9.withCtx)(() => [
          (0, import_vue9.createVNode)(_component_el_dropdown_menu, null, {
            default: (0, import_vue9.withCtx)(() => {
              var _a;
              return [
                $setup.childTypes.length > 0 && $props.node.data.permissions.createPermission ? ((0, import_vue9.openBlock)(true), (0, import_vue9.createElementBlock)(import_vue9.Fragment, { key: 0 }, (0, import_vue9.renderList)($setup.childTypes, (type) => {
                  return (0, import_vue9.openBlock)(), (0, import_vue9.createBlock)(_component_el_dropdown_item, {
                    command: "add",
                    onClick: ($event) => $setup.createByType(type)
                  }, {
                    default: (0, import_vue9.withCtx)(() => [
                      (0, import_vue9.createTextVNode)(" \u65B0\u5EFA" + (0, import_vue9.toDisplayString)($setup.tt(type.name)), 1)
                    ]),
                    _: 2
                  }, 1032, ["onClick"]);
                }), 256)) : (0, import_vue9.createCommentVNode)("v-if", true),
                $props.node.data.permissions.deletePermission && !((_a = $props.node.data.children) == null ? void 0 : _a.length) ? ((0, import_vue9.openBlock)(), (0, import_vue9.createBlock)(_component_el_dropdown_item, {
                  key: 1,
                  command: "delete"
                }, {
                  default: (0, import_vue9.withCtx)(() => [
                    _hoisted_33
                  ]),
                  _: 1
                })) : (0, import_vue9.createCommentVNode)("v-if", true)
              ];
            }),
            _: 1
          })
        ]),
        default: (0, import_vue9.withCtx)(() => [
          (0, import_vue9.createElementVNode)("span", _hoisted_23, [
            (0, import_vue9.createVNode)(_component_el_icon, {
              class: "el-icon--right",
              onClick: _cache[0] || (_cache[0] = (e) => e.stopPropagation())
            }, {
              default: (0, import_vue9.withCtx)(() => [
                (0, import_vue9.createVNode)($setup["MoreFilled"])
              ]),
              _: 1
            })
          ])
        ]),
        _: 1
      })) : (0, import_vue9.createCommentVNode)("v-if", true)
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue
  TreeItem_default2(TreeItem_default);
  TreeItem_default.render = render3;
  TreeItem_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue";
  TreeItem_default.__scopeId = "data-v-a835aba7";
  var TreeItem_default3 = TreeItem_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=script
  var OrganizationTree_default = /* @__PURE__ */ (0, import_vue10.defineComponent)({
    __name: "OrganizationTree",
    props: {
      modelValue: { type: null, required: false },
      permissions: { type: null, required: true }
    },
    emits: ["update:modelValue"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      const organizationList = (0, import_vue11.ref)([]);
      const currentNodeKey = (0, import_vue11.ref)("");
      const loading = (0, import_vue11.ref)(false);
      (0, import_vue11.onMounted)(() => {
        getOrganizations();
      });
      async function getOrganizations() {
        var _a;
        loading.value = true;
        const res = await frappe.call({
          method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_organizations"
        });
        organizationList.value = (res == null ? void 0 : res.message) || [];
        if (!currentNodeKey.value || !organizationList.value.some((item2) => item2.name === currentNodeKey.value)) {
          currentNodeKey.value = (_a = organizationList.value[0]) == null ? void 0 : _a.name;
          emit("update:modelValue", organizationList.value[0]);
        }
        loading.value = false;
      }
      const organizationTree = (0, import_vue11.computed)(() => {
        for (const org of organizationList.value) {
          org.permissions = props.permissions;
        }
        return list2Tree((0, import_vue11.toRaw)(organizationList.value), "parent_organization");
      });
      function handleNodeClick(data) {
        currentNodeKey.value = data.name;
        emit("update:modelValue", data);
      }
      function createOrganization() {
        const newDoc = frappe.model.make_new_doc_and_get_name("Tianjy Organization");
        frappe.set_route(["form", "Tianjy Organization", newDoc]);
      }
      async function handleDrop(draggingNode, dropNode, dropType, ev) {
        const before2 = dropType === "inner" ? false : dropType === "before";
        const children = dropType === "inner";
        loading.value = true;
        await frappe.call("guigu.tree.tree_sort", {
          doctype: "Tianjy Organization",
          target: dropNode.data.name,
          docs: [draggingNode.data.name],
          before: before2,
          children
        });
        getOrganizations();
      }
      function allowDrop(draggingNode, dropNode, dropType) {
        switch (dropType) {
          case "next":
          case "prev":
            return before(draggingNode, dropNode);
          case "inner":
            return inner(draggingNode, dropNode);
          default:
            return true;
        }
      }
      function inner(draggingNode, dropNode) {
        if (!dropNode.data.child_type_list.some((type) => type.name === draggingNode.data.type)) {
          return false;
        }
        return true;
      }
      function before(draggingNode, dropNode) {
        if (dropNode.parent.level === 0 && draggingNode.data.type_doc.root_only !== 1) {
          console.log(dropNode.parent.level, draggingNode.data.type_doc.root_only, "false");
          return false;
        }
        if (dropNode.parent.level !== 0 && !dropNode.parent.data.child_type_list.some((type) => type.name === draggingNode.data.type)) {
          console.log(dropNode.parent.level, "false");
          return false;
        }
        return true;
      }
      frappe.socketio.doctype_subscribe("Tianjy Organization");
      frappe.realtime.on("list_update", (p) => {
        if (p.doctype !== "Tianjy Organization") {
          return;
        }
        getOrganizations();
      });
      const __returned__ = { props, emit, organizationList, currentNodeKey, loading, getOrganizations, organizationTree, handleNodeClick, createOrganization, handleDrop, allowDrop, inner, before, TreeItem: TreeItem_default3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=style&index=0
  var OrganizationTree_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=template
  var import_vue12 = __require("vue");
  var _hoisted_14 = { class: "sider-container" };
  var _hoisted_24 = { class: "btn-container" };
  var _hoisted_34 = { class: "tree-container" };
  function render4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_button = (0, import_vue12.resolveComponent)("el-button");
    const _component_el_tree = (0, import_vue12.resolveComponent)("el-tree");
    const _directive_loading = (0, import_vue12.resolveDirective)("loading");
    return (0, import_vue12.withDirectives)(((0, import_vue12.openBlock)(), (0, import_vue12.createElementBlock)("div", _hoisted_14, [
      (0, import_vue12.createElementVNode)("div", _hoisted_24, [
        $props.permissions.createPermission ? ((0, import_vue12.openBlock)(), (0, import_vue12.createBlock)(_component_el_button, {
          key: 0,
          type: "primary",
          onClick: $setup.createOrganization
        }, {
          default: (0, import_vue12.withCtx)(() => [
            (0, import_vue12.createTextVNode)("\u65B0\u5EFA\u7EC4\u7EC7")
          ]),
          _: 1
        })) : (0, import_vue12.createCommentVNode)("v-if", true)
      ]),
      (0, import_vue12.createElementVNode)("div", _hoisted_34, [
        $setup.organizationTree.length > 0 ? ((0, import_vue12.openBlock)(), (0, import_vue12.createBlock)(_component_el_tree, {
          key: 0,
          data: $setup.organizationTree,
          onNodeClick: $setup.handleNodeClick,
          defaultExpandAll: "",
          highlightCurrent: "",
          nodeKey: "name",
          currentNodeKey: $setup.currentNodeKey,
          expandOnClickNode: false,
          draggable: "",
          onNodeDrop: $setup.handleDrop,
          allowDrop: $setup.allowDrop
        }, {
          default: (0, import_vue12.withCtx)(({ node, data }) => [
            (0, import_vue12.createVNode)($setup["TreeItem"], {
              node,
              onReload: $setup.getOrganizations
            }, null, 8, ["node"])
          ]),
          _: 1
        }, 8, ["data", "currentNodeKey"])) : (0, import_vue12.createCommentVNode)("v-if", true)
      ])
    ])), [
      [_directive_loading, $setup.loading]
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue
  OrganizationTree_default2(OrganizationTree_default);
  OrganizationTree_default.render = render4;
  OrganizationTree_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue";
  OrganizationTree_default.__scopeId = "data-v-7ff9d4db";
  var OrganizationTree_default3 = OrganizationTree_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=script
  var import_vue23 = __require("vue");
  var import_vue24 = __require("vue");

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/index.vue?type=script
  var import_vue20 = __require("vue");
  var import_vue21 = __require("vue");

  // guigu/public/js/utils/getLink.ts
  function getLink(data, meta, linkField) {
    if (!data) {
      return;
    }
    if (!meta) {
      return;
    }
    if (!linkField) {
      return;
    }
    const { fields } = meta;
    if (!fields) {
      return;
    }
    const link = data[linkField];
    const name = typeof link === "string" && link;
    if (!name) {
      return;
    }
    const field = fields.find((v) => v.fieldname === linkField);
    if (!field) {
      return;
    }
    const option = field.options;
    if (!option) {
      return;
    }
    if (field.fieldtype === "Link") {
      return [option, name];
    }
    if (field.fieldtype !== "Dynamic Link") {
      return;
    }
    const dynamicLinkField = fields.find((v) => v.fieldname === option);
    if (!dynamicLinkField) {
      return;
    }
    if (dynamicLinkField.fieldtype !== "Link") {
      return;
    }
    if (dynamicLinkField.options !== "DocType") {
      return;
    }
    const doctype = data[option];
    if (typeof doctype !== "string" || !doctype) {
      return;
    }
    return [doctype, name];
  }

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Main.vue?type=script
  var import_vue17 = __require("vue");
  var import_vue18 = __require("vue");
  var import_core = __require("@vueuse/core");

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Header.vue?type=script
  var import_vue13 = __require("vue");
  var import_vue14 = __require("vue");
  var Header_default = /* @__PURE__ */ (0, import_vue13.defineComponent)({
    __name: "Header",
    props: {
      hasSider: { type: Boolean, required: false },
      open: { type: Boolean, required: false },
      isHideClose: { type: Boolean, required: false }
    },
    emits: ["hide", "refresh", "update:open"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      function hide() {
        emit("hide");
      }
      const opened = (0, import_vue14.computed)({
        get: () => props.open,
        set(v) {
          emit("update:open", Boolean(v));
        }
      });
      const tt2 = __;
      const __returned__ = { props, emit, hide, opened, tt: tt2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Header.vue?type=style&index=0
  var key = "$style";
  var cssModule = { "header": "_header_pve6u_1" };
  var Header_default2 = (script) => {
    if (!script.__cssModules) {
      script.__cssModules = {};
    }
    const cssModules = script.__cssModules;
    const value = key in cssModules && cssModules[key];
    if (value && typeof value === "object") {
      Object.assign(value, cssModule);
    } else {
      cssModules[key] = cssModule;
    }
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Header.vue?type=template
  var import_vue15 = __require("vue");
  var _hoisted_15 = { class: "col-md-4 col-sm-6 col-xs-8 page-title" };
  var _hoisted_25 = ["title"];
  var _hoisted_35 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("svg", { class: "icon icon-md sidebar-toggle-placeholder" }, [
    /* @__PURE__ */ (0, import_vue15.createElementVNode)("use", { href: "#icon-menu" })
  ], -1);
  var _hoisted_43 = { class: "icon icon-md" };
  var _hoisted_52 = {
    key: 0,
    href: "#icon-sidebar-expand"
  };
  var _hoisted_62 = {
    key: 1,
    href: "#icon-sidebar-collapse"
  };
  var _hoisted_7 = /* @__PURE__ */ (0, import_vue15.createStaticVNode)('<div class="flex fill-width title-area"><div><div class="flex"><h3 class="ellipsis title-text"></h3><span class="indicator-pill whitespace-nowrap"></span></div><div class="ellipsis sub-heading hide text-muted"></div></div><button class="btn btn-default more-button hide"><svg class="icon icon-sm"><use href="#icon-dot-horizontal"></use></svg></button></div>', 1);
  var _hoisted_8 = { class: "flex col page-actions justify-content-end" };
  var _hoisted_9 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("div", { class: "custom-actions hide hidden-xs hidden-md" }, null, -1);
  var _hoisted_10 = { class: "standard-actions flex" };
  var _hoisted_11 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("span", { class: "page-icon-group hide hidden-xs hidden-sm" }, null, -1);
  var _hoisted_122 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("div", { class: "menu-btn-group hide" }, [
    /* @__PURE__ */ (0, import_vue15.createElementVNode)("button", {
      type: "button",
      class: "btn btn-default icon-btn",
      "data-toggle": "dropdown",
      "aria-expanded": "false"
    }, [
      /* @__PURE__ */ (0, import_vue15.createElementVNode)("span", null, [
        /* @__PURE__ */ (0, import_vue15.createElementVNode)("span", { class: "menu-btn-group-label" }, [
          /* @__PURE__ */ (0, import_vue15.createElementVNode)("svg", { class: "icon icon-sm" }, [
            /* @__PURE__ */ (0, import_vue15.createElementVNode)("use", { href: "#icon-dot-horizontal" })
          ])
        ])
      ])
    ]),
    /* @__PURE__ */ (0, import_vue15.createElementVNode)("ul", {
      class: "dropdown-menu dropdown-menu-right",
      role: "menu"
    })
  ], -1);
  var _hoisted_132 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("button", { class: "btn btn-secondary btn-default btn-sm hide" }, null, -1);
  var _hoisted_142 = { class: "actions-btn-group hide" };
  var _hoisted_152 = {
    type: "button",
    class: "btn btn-primary btn-sm",
    "data-toggle": "dropdown",
    "aria-expanded": "false"
  };
  var _hoisted_16 = { class: "actions-btn-group-label" };
  var _hoisted_17 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("svg", { class: "icon icon-xs" }, [
    /* @__PURE__ */ (0, import_vue15.createElementVNode)("use", { href: "#icon-select" })
  ], -1);
  var _hoisted_18 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("ul", {
    class: "dropdown-menu dropdown-menu-right",
    role: "menu"
  }, null, -1);
  var _hoisted_19 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("button", { class: "btn btn-primary btn-sm hide primary-action" }, null, -1);
  function render5(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("div", {
      class: (0, import_vue15.normalizeClass)(_ctx.$style.header)
    }, [
      (0, import_vue15.createElementVNode)("div", _hoisted_15, [
        (0, import_vue15.createCommentVNode)(' <div class="title-image hide hidden-md hidden-lg"></div> '),
        (0, import_vue15.createCommentVNode)(" title "),
        $props.hasSider ? ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("span", {
          key: 0,
          class: "sidebar-toggle-btn",
          title: $setup.tt("Toggle Sidebar")
        }, [
          _hoisted_35,
          (0, import_vue15.createElementVNode)("span", {
            class: "sidebar-toggle-icon",
            onClick: _cache[0] || (_cache[0] = ($event) => $setup.opened = !$setup.opened)
          }, [
            ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("svg", _hoisted_43, [
              $props.open ? ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("use", _hoisted_52)) : ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("use", _hoisted_62))
            ]))
          ])
        ], 8, _hoisted_25)) : (0, import_vue15.createCommentVNode)("v-if", true),
        _hoisted_7
      ]),
      (0, import_vue15.createElementVNode)("div", _hoisted_8, [
        (0, import_vue15.createCommentVNode)(" buttons "),
        _hoisted_9,
        (0, import_vue15.createElementVNode)("div", _hoisted_10, [
          _hoisted_11,
          _hoisted_122,
          _hoisted_132,
          (0, import_vue15.createElementVNode)("div", _hoisted_142, [
            (0, import_vue15.createElementVNode)("button", _hoisted_152, [
              (0, import_vue15.createElementVNode)("span", null, [
                (0, import_vue15.createElementVNode)("span", _hoisted_16, (0, import_vue15.toDisplayString)($setup.tt("Actions")), 1),
                _hoisted_17
              ])
            ]),
            _hoisted_18
          ]),
          _hoisted_19,
          !$props.isHideClose ? ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("button", {
            key: 0,
            class: "btn btn-sm",
            onClick: $setup.hide
          }, (0, import_vue15.toDisplayString)($setup.tt("Close")), 1)) : (0, import_vue15.createCommentVNode)("v-if", true)
        ])
      ])
    ], 2);
  }

  // guigu/public/js/FormDetail/Header.vue
  Header_default2(Header_default);
  Header_default.render = render5;
  Header_default.__file = "guigu/public/js/FormDetail/Header.vue";
  var Header_default3 = Header_default;

  // guigu/public/js/FormDetail/Footer.ts
  var Footer = class {
    constructor(opts) {
      $.extend(this, opts);
      this.make();
      this.make_comment_box();
      this.make_timeline();
      $(this.frm.wrapper).on("render_complete", () => {
        this.refresh();
      });
    }
    make() {
      const wrapper = $(`<div class="form-footer">
	<div class="after-save">
		<div class="comment-box"></div>
		<div class="timeline"></div>
	</div>
</div>`).appendTo(this.parent);
      const toTop = document.createElement("button");
      toTop.className = "scroll-to-top btn btn-default icon-btn";
      toTop.innerHTML = '<svg class="icon icon-xs"><use href="#icon-up-line"></use></svg>';
      toTop.addEventListener("click", () => {
        let e = toTop;
        while (e = e.parentElement) {
          if (e.scrollTop) {
            break;
          }
        }
        if (e) {
          frappe.utils.scroll_to(0, true, 0, $(e));
        }
      });
      wrapper.append(toTop);
      this.wrapper = wrapper;
      wrapper.find(".btn-save").on("click", () => {
        this.frm.save("Save", null, this);
      });
    }
    make_comment_box() {
      frappe.ui.form.Footer.prototype.make_comment_box.call(this);
    }
    make_timeline() {
      frappe.ui.form.Footer.prototype.make_timeline.call(this);
    }
    refresh() {
      frappe.ui.form.Footer.prototype.refresh.call(this);
    }
  };
  var Footer_default = Footer;

  // guigu/public/js/FormDetail/Page.ts
  var Page = class {
    constructor(parent, single_column) {
      this.set_document_title = true;
      this.buttons = {};
      this.fields_dict = {};
      this.views = {};
      this.parent = parent;
      this.single_column = single_column ? true : false;
      this.wrapper = $(parent);
      const mainView = $(this.wrapper).find(".page-content").find(".row.layout-main");
      this.views.main = mainView;
      this.current_view = mainView;
      this.setup_page();
      this.setup_scroll_handler();
      this.setup_sidebar_toggle();
    }
    setup_scroll_handler() {
    }
    get_empty_state(title, message, primary_action) {
      let $empty_state = $(`<div class="page-card-container">
			<div class="page-card">
				<div class="page-card-head">
					<span class="indicator blue">
						${title}</span>
				</div>
				<p>${message}</p>
				<div>
					<button class="btn btn-primary btn-sm">${primary_action}</button>
				</div>
			</div>
		</div>`);
      return $empty_state;
    }
    load_lib(callback) {
      frappe.require(this.required_libs, callback);
    }
    add_main_section() {
    }
    setup_page() {
      this.$title_area = this.wrapper.find(".title-area");
      this.$sub_title_area = this.wrapper.find("h6");
      this.body = this.main = this.wrapper.find(".layout-main-section");
      this.container = this.wrapper.find(".page-body");
      this.sidebar = this.wrapper.find(".layout-side-section");
      this.footer = this.wrapper.find(".layout-footer");
      this.indicator = this.wrapper.find(".indicator-pill");
      this.page_actions = this.wrapper.find(".page-actions");
      this.btn_primary = this.page_actions.find(".primary-action");
      this.btn_secondary = this.page_actions.find(".btn-secondary");
      this.menu = this.page_actions.find(".menu-btn-group .dropdown-menu");
      this.menu_btn_group = this.page_actions.find(".menu-btn-group");
      this.actions = this.page_actions.find(".actions-btn-group .dropdown-menu");
      this.actions_btn_group = this.page_actions.find(".actions-btn-group");
      this.standard_actions = this.page_actions.find(".standard-actions");
      this.custom_actions = this.page_actions.find(".custom-actions");
      this.page_form = $('<div class="page-form row hide"></div>').prependTo(this.main);
      this.inner_toolbar = this.custom_actions;
      this.icon_group = this.page_actions.find(".page-icon-group");
      this.card_layout && this.main.addClass("frappe-card");
      let menu_btn = this.menu_btn_group.find("button");
      menu_btn.attr("title", __("Menu")).tooltip({ delay: { show: 600, hide: 100 } });
      frappe.ui.keys.get_shortcut_group(this.page_actions[0]).add(menu_btn, menu_btn.find(".menu-btn-group-label"));
      let action_btn = this.actions_btn_group.find("button");
      frappe.ui.keys.get_shortcut_group(this.page_actions[0]).add(action_btn, action_btn.find(".actions-btn-group-label"));
    }
    setup_sidebar_toggle() {
      let sidebar_toggle = this.wrapper.find(".guigu-form-detail-page-head ").find(".sidebar-toggle-btn");
      let sidebar_wrapper = this.wrapper.find(".layout-side-section");
      sidebar_toggle.click(() => {
        $(document.body).trigger("toggleSidebar");
        this.update_sidebar_icon();
      });
    }
    setup_overlay_sidebar() {
    }
    update_sidebar_icon() {
      let sidebar_toggle = $(".page-head").find(".sidebar-toggle-btn");
      let sidebar_toggle_icon = sidebar_toggle.find(".sidebar-toggle-icon");
      let sidebar_wrapper = this.wrapper.find(".layout-side-section");
      let is_sidebar_visible = $(sidebar_wrapper).is(":visible");
      sidebar_toggle_icon.html(
        frappe.utils.icon(is_sidebar_visible ? "sidebar-collapse" : "sidebar-expand", "md")
      );
    }
    set_indicator(label, color) {
      this.clear_indicator().removeClass("hide").html(`<span>${label}</span>`).addClass(color);
    }
    add_action_icon(icon, click, css_class = "", tooltip_label) {
      const button = $(`
			<button class="text-muted btn btn-default ${css_class} icon-btn">
				${frappe.utils.icon(icon)}
			</button>
		`);
      button.appendTo(this.icon_group.removeClass("hide"));
      button.click(click);
      button.attr("title", __(tooltip_label || frappe.unscrub(icon))).tooltip({ delay: { show: 600, hide: 100 }, trigger: "hover" });
      return button;
    }
    clear_indicator() {
      return this.indicator.removeClass().addClass("indicator-pill whitespace-nowrap hide");
    }
    get_icon_label(icon, label) {
      let icon_name = icon;
      let size = "xs";
      if (typeof icon === "object") {
        icon_name = icon.icon;
        size = icon.size || "xs";
      }
      return `${icon ? frappe.utils.icon(icon_name, size) : ""} <span class="hidden-xs"> ${__(
        label
      )} </span>`;
    }
    set_action(btn, opts) {
      let me2 = this;
      if (opts.icon) {
        opts.label = this.get_icon_label(opts.icon, opts.label);
      }
      this.clear_action_of(btn);
      btn.removeClass("hide").prop("disabled", false).html(opts.label).on("click", function() {
        let response = opts.click.apply(this, [btn]);
        me2.btn_disable_enable(btn, response);
      });
      if (opts.working_label) {
        btn.attr("data-working-label", opts.working_label);
      }
      let text_span = btn.find("span");
      frappe.ui.keys.get_shortcut_group(this).add(btn, text_span.length ? text_span : btn);
    }
    set_primary_action(label, click, icon, working_label) {
      this.set_action(this.btn_primary, {
        label,
        click,
        icon,
        working_label
      });
      return this.btn_primary;
    }
    set_secondary_action(label, click, icon, working_label) {
      this.set_action(this.btn_secondary, {
        label,
        click,
        icon,
        working_label
      });
      return this.btn_secondary;
    }
    clear_action_of(btn) {
      btn.addClass("hide").unbind("click").removeAttr("data-working-label");
    }
    clear_primary_action() {
      this.clear_action_of(this.btn_primary);
    }
    clear_secondary_action() {
      this.clear_action_of(this.btn_secondary);
    }
    clear_actions() {
      this.clear_primary_action();
      this.clear_secondary_action();
    }
    clear_custom_actions() {
      this.custom_actions.addClass("hide").empty();
    }
    clear_icons() {
      this.icon_group.addClass("hide").empty();
    }
    add_menu_item(label, click, standard, shortcut, show_parent) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent: this.menu,
        shortcut,
        show_parent
      });
    }
    add_custom_menu_item(parent, label, click, standard, shortcut, icon = null) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent,
        shortcut,
        icon
      });
    }
    clear_menu() {
      this.clear_btn_group(this.menu);
    }
    show_menu() {
      this.menu_btn_group.removeClass("hide");
    }
    hide_menu() {
      this.menu_btn_group.addClass("hide");
    }
    show_icon_group() {
      this.icon_group.removeClass("hide");
    }
    hide_icon_group() {
      this.icon_group.addClass("hide");
    }
    show_actions_menu() {
      this.actions_btn_group.removeClass("hide");
    }
    hide_actions_menu() {
      this.actions_btn_group.addClass("hide");
    }
    add_action_item(label, click, standard) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent: this.actions
      });
    }
    add_actions_menu_item(label, click, standard, shortcut) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        shortcut,
        parent: this.actions,
        show_parent: false
      });
    }
    clear_actions_menu() {
      this.clear_btn_group(this.actions);
    }
    add_dropdown_item({
      label,
      click,
      standard,
      parent,
      shortcut,
      show_parent = true,
      icon = null
    }) {
      if (show_parent) {
        parent.parent().removeClass("hide hidden-xl");
      }
      let $link = this.is_in_group_button_dropdown(parent, "li > a.grey-link > span", label);
      if ($link) {
        return $link;
      }
      let $li;
      let $icon = ``;
      if (icon) {
        $icon = `<span class="menu-item-icon">${frappe.utils.icon(icon)}</span>`;
      }
      if (shortcut) {
        let shortcut_obj = this.prepare_shortcut_obj(shortcut, click, label);
        $li = $(`
				<li>
					<a class="grey-link dropdown-item" href="#" onClick="return false;">
						${$icon}
						<span class="menu-item-label">${label}</span>
						<kbd class="pull-right">
							<span>${shortcut_obj.shortcut_label}</span>
						</kbd>
					</a>
				</li>
			`);
        frappe.ui.keys.add_shortcut(shortcut_obj);
      } else {
        $li = $(`
				<li>
					<a class="grey-link dropdown-item" href="#" onClick="return false;">
						${$icon}
						<span class="menu-item-label">${label}</span>
					</a>
				</li>
			`);
      }
      $link = $li.find("a").on("click", (e) => {
        if (e.ctrlKey || e.metaKey) {
          frappe.open_in_new_tab = true;
        }
        return click();
      });
      if (standard) {
        $li.appendTo(parent);
      } else {
        this.divider = parent.find(".dropdown-divider");
        if (!this.divider.length) {
          this.divider = $('<li class="dropdown-divider user-action"></li>').prependTo(
            parent
          );
        }
        $li.addClass("user-action").insertBefore(this.divider);
      }
      frappe.ui.keys.get_shortcut_group(parent.get(0)).add($link, $link.find(".menu-item-label"));
      return $link;
    }
    prepare_shortcut_obj(shortcut, click, label) {
      let shortcut_obj;
      if (typeof shortcut === "string") {
        shortcut_obj = { shortcut };
      } else {
        shortcut_obj = shortcut;
      }
      if (frappe.utils.is_mac()) {
        shortcut_obj.shortcut_label = shortcut_obj.shortcut.replace("Ctrl", "\u2318");
      } else {
        shortcut_obj.shortcut_label = shortcut_obj.shortcut;
      }
      shortcut_obj.shortcut = shortcut_obj.shortcut.toLowerCase();
      if (!shortcut_obj.action) {
        shortcut_obj.action = click;
      }
      if (!shortcut_obj.description) {
        shortcut_obj.description = label;
      }
      shortcut_obj.page = this;
      return shortcut_obj;
    }
    is_in_group_button_dropdown(parent, selector, label) {
      if (!selector) {
        selector = "li";
      }
      if (!label || !parent) {
        return false;
      }
      const item_selector = `${selector}[data-label="${encodeURIComponent(label)}"]`;
      const existing_items = $(parent).find(item_selector);
      return (existing_items == null ? void 0 : existing_items.length) > 0 && existing_items;
    }
    clear_btn_group(parent) {
      parent.empty();
      parent.parent().addClass("hide");
    }
    add_divider() {
      return $('<li class="dropdown-divider"></li>').appendTo(this.menu);
    }
    get_or_add_inner_group_button(label) {
      let $group = this.inner_toolbar.find(
        `.inner-group-button[data-label="${encodeURIComponent(label)}"]`
      );
      if (!$group.length) {
        $group = $(
          `<div class="inner-group-button" data-label="${encodeURIComponent(label)}">
					<button type="button" class="btn btn-default ellipsis" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
						${label}
						${frappe.utils.icon("select", "xs")}
					</button>
					<div role="menu" class="dropdown-menu"></div>
				</div>`
        ).appendTo(this.inner_toolbar);
      }
      return $group;
    }
    get_inner_group_button(label) {
      return this.inner_toolbar.find(
        `.inner-group-button[data-label="${encodeURIComponent(label)}"]`
      );
    }
    set_inner_btn_group_as_primary(label) {
      this.get_or_add_inner_group_button(label).find("button").removeClass("btn-default").addClass("btn-primary");
    }
    btn_disable_enable(btn, response) {
      if (response && response.then) {
        btn.prop("disabled", true);
        response.then(() => {
          btn.prop("disabled", false);
        });
      } else if (response && response.always) {
        btn.prop("disabled", true);
        response.always(() => {
          btn.prop("disabled", false);
        });
      }
    }
    add_inner_button(label, action, group, type = "default") {
      let me2 = this;
      let _action = function() {
        let btn = $(this);
        let response = action();
        me2.btn_disable_enable(btn, response);
      };
      let menu_item_label = group ? `${group} > ${label}` : label;
      let menu_item = this.add_menu_item(menu_item_label, _action, false, false, false);
      menu_item.parent().addClass("hidden-xl");
      if (this.menu_btn_group.hasClass("hide")) {
        this.menu_btn_group.removeClass("hide").addClass("hidden-xl");
      }
      if (group) {
        let $group = this.get_or_add_inner_group_button(group);
        $(this.inner_toolbar).removeClass("hide");
        if (!this.is_in_group_button_dropdown($group.find(".dropdown-menu"), "a", label)) {
          return $(
            `<a class="dropdown-item" href="#" onclick="return false;" data-label="${encodeURIComponent(
              label
            )}">${label}</a>`
          ).on("click", _action).appendTo($group.find(".dropdown-menu"));
        }
      } else {
        let button = this.inner_toolbar.find(
          `button[data-label="${encodeURIComponent(label)}"]`
        );
        if (button.length == 0) {
          button = $(`<button data-label="${encodeURIComponent(
            label
          )}" class="btn btn-${type} ellipsis">
					${__(label)}
				</button>`);
          button.on("click", _action);
          button.appendTo(this.inner_toolbar.removeClass("hide"));
        }
        return button;
      }
    }
    remove_inner_button(label, group) {
      if (typeof label === "string") {
        label = [label];
      }
      label = label.map((l) => __(l));
      if (group) {
        let $group = this.get_inner_group_button(__(group));
        if ($group.length) {
          $group.find(`.dropdown-item[data-label="${encodeURIComponent(label)}"]`).remove();
        }
        if ($group.find(".dropdown-item").length === 0) {
          $group.remove();
        }
      } else {
        this.inner_toolbar.find(`button[data-label="${encodeURIComponent(label)}"]`).remove();
      }
    }
    change_inner_button_type(label, group, type) {
      let btn;
      if (group) {
        let $group = this.get_inner_group_button(__(group));
        if ($group.length) {
          btn = $group.find(`.dropdown-item[data-label="${encodeURIComponent(label)}"]`);
        }
      } else {
        btn = this.inner_toolbar.find(`button[data-label="${encodeURIComponent(label)}"]`);
      }
      if (btn) {
        btn.removeClass().addClass(`btn btn-${type} ellipsis`);
      }
    }
    add_inner_message(message) {
      let $message = $(`<span class='inner-page-message text-muted small'>${message}</div>`);
      this.inner_toolbar.find(".inner-page-message").remove();
      this.inner_toolbar.removeClass("hide").prepend($message);
      return $message;
    }
    clear_inner_toolbar() {
      this.inner_toolbar.empty().addClass("hide");
    }
    add_sidebar_item(label, action, insert_after, prepend) {
      let parent = this.sidebar.find(".sidebar-menu.standard-actions");
      let li2 = $("<li>");
      let link = $("<a>").html(label).on("click", action).appendTo(li2);
      if (insert_after) {
        li2.insertAfter(parent.find(insert_after));
      } else if (prepend) {
        li2.prependTo(parent);
      } else {
        li2.appendTo(parent);
      }
      return link;
    }
    clear_user_actions() {
      this.menu.find(".user-action").remove();
    }
    get_title_area() {
      return this.$title_area;
    }
    set_title(title, icon = null, strip = true, tab_title = "") {
      if (!title) {
        title = "";
      }
      if (strip) {
        title = strip_html(title);
      }
      this.title = title;
      if (icon) {
        title = `${frappe.utils.icon(icon)} ${title}`;
      }
      let title_wrapper = this.$title_area.find(".title-text");
      title_wrapper.html(title);
      title_wrapper.attr("title", this.title);
    }
    set_title_sub(txt) {
      this.$sub_title_area.html(txt).toggleClass("hide", Boolean(!txt));
    }
    get_main_icon(icon) {
      return this.$title_area.find(".title-icon").html(`<i class="${icon} fa-fw"></i> `).toggle(true);
    }
    add_help_button(txt) {
    }
    add_button(label, click, opts) {
      if (!opts) {
        opts = {};
      }
      let button = $(`<button
			class="btn ${opts.btn_class || "btn-default"} ${opts.btn_size || "btn-sm"} ellipsis">
				${opts.icon ? frappe.utils.icon(opts.icon) : ""}
				${label}
		</button>`);
      let menu_item = this.add_menu_item(label, click, false);
      menu_item.parent().addClass("hidden-xl");
      button.appendTo(this.custom_actions);
      button.on("click", click);
      this.custom_actions.removeClass("hide");
      return button;
    }
    add_custom_button_group(label, icon, parent) {
      let dropdown_label = `<span class="hidden-xs">
			<span class="custom-btn-group-label">${__(label)}</span>
			${frappe.utils.icon("select", "xs")}
		</span>`;
      if (icon) {
        dropdown_label = `<span class="hidden-xs">
				${frappe.utils.icon(icon)}
				<span class="custom-btn-group-label">${__(label)}</span>
				${frappe.utils.icon("select", "xs")}
			</span>
			<span class="visible-xs">
				${frappe.utils.icon(icon)}
			</span>`;
      }
      let custom_btn_group = $(`
			<div class="custom-btn-group">
				<button type="button" class="btn btn-default btn-sm ellipsis" data-toggle="dropdown" aria-expanded="false">
					${dropdown_label}
				</button>
				<ul class="dropdown-menu" role="menu"></ul>
			</div>
		`);
      if (!parent) {
        parent = this.custom_actions;
      }
      parent.removeClass("hide").append(custom_btn_group);
      return custom_btn_group.find(".dropdown-menu");
    }
    add_dropdown_button(parent, label, click, icon) {
      frappe.ui.toolbar.add_dropdown_button(parent, label, click, icon);
    }
    add_label(label) {
      this.show_form();
      return $(`<label class='col-md-1 page-only-label'>${label} </label>`).appendTo(
        this.page_form
      );
    }
    add_select(label, options) {
      let field = this.add_field({ label, fieldtype: "Select" });
      return field.$wrapper.find("select").empty().add_options(options);
    }
    add_data(label) {
      let field = this.add_field({ label, fieldtype: "Data" });
      return field.$wrapper.find("input").attr("placeholder", label);
    }
    add_date(label, date) {
      let field = this.add_field({ label, fieldtype: "Date", default: date });
      return field.$wrapper.find("input").attr("placeholder", label);
    }
    add_check(label) {
      return $(`<div class='checkbox'><label><input type='checkbox'>${label}</label></div>`).appendTo(this.page_form).find("input");
    }
    add_break() {
      this.page_form.append('<div class="clearfix invisible-xs"></div>');
    }
    add_field(df, parent) {
      this.show_form();
      if (!df.placeholder) {
        df.placeholder = df.label;
      }
      df.input_class = "input-xs";
      let f = frappe.ui.form.make_control({
        df,
        parent: parent || this.page_form,
        only_input: df.fieldtype == "Check" ? false : true
      });
      f.refresh();
      $(f.wrapper).addClass("col-md-2").attr("title", __(df.label)).tooltip({
        delay: { show: 600, hide: 100 },
        trigger: "hover"
      });
      if (df.fieldtype == "HTML") {
        return;
      }
      if (!f.$input) {
        f.make_input();
      }
      f.$input.attr("placeholder", __(df.label));
      if (df.fieldtype === "Check") {
        $(f.wrapper).find(":first-child").removeClass("col-md-offset-4 col-md-8");
      }
      if (df.fieldtype == "Button") {
        $(f.wrapper).find(".page-control-label").html("&nbsp;");
        f.$input.addClass("btn-xs").css({ width: "100%", "margin-top": "-1px" });
      }
      if (df.default) {
        f.set_input(df.default);
      }
      this.fields_dict[df.fieldname || df.label] = f;
      return f;
    }
    clear_fields() {
      this.page_form.empty();
    }
    show_form() {
      this.page_form.removeClass("hide");
    }
    hide_form() {
      this.page_form.addClass("hide");
    }
    get_form_values() {
      let values = {};
      for (let fieldname in this.fields_dict) {
        let field = this.fields_dict[fieldname];
        values[fieldname] = field.get_value();
      }
      return values;
    }
    add_view(name, html) {
      let element = html;
      if (typeof html === "string") {
        element = $(html);
      }
      this.views[name] = element.appendTo($(this.wrapper).find(".page-content"));
      if (this.current_view) {
        this.views[name].toggle(false);
      } else {
        this.current_view = this.views[name];
      }
      return this.views[name];
    }
    set_view(name) {
      var _a;
      if (this.current_view_name === name) {
        return;
      }
      (_a = this.current_view) == null ? void 0 : _a.toggle(false);
      this.current_view = this.views[name];
      this.previous_view_name = this.current_view_name;
      this.current_view_name = name;
      this.views[name].toggle(true);
      this.wrapper.trigger("view-change");
    }
  };
  var Page_default = Page;

  // guigu/public/js/FormDetail/Toolbar.ts
  var Toolbar = class {
    constructor(frm, page) {
      this.frm = frm;
      this.page = page;
      this.refresh();
      this.add_update_button_on_dirty();
      this.setup_editable_title();
    }
    refresh() {
      this.make_menu();
      this.make_viewers();
      this.set_title();
      this.page.clear_user_actions();
      this.show_title_as_dirty();
      this.set_primary_action();
      if (this.frm.meta.hide_toolbar) {
        this.page.hide_menu();
      } else if (this.frm.doc.__islocal) {
        this.page.hide_menu();
        this.print_icon && this.print_icon.addClass("hide");
      } else {
        this.page.show_menu();
        this.print_icon && this.print_icon.removeClass("hide");
      }
    }
    set_title() {
      if (this.frm.is_new()) {
        var title = __("New {0}", [__(this.frm.meta.name)]);
      } else if (this.frm.meta.title_field) {
        let title_field = (this.frm.doc[this.frm.meta.title_field] || "").toString().trim();
        var title = strip_html(title_field || this.frm.docname);
        if (this.frm.doc.__islocal || title === this.frm.docname || this.frm.meta.autoname === "hash") {
          this.page.set_title_sub("");
        } else {
          this.page.set_title_sub(this.frm.docname);
          this.page.$sub_title_area.css("cursor", "copy");
          this.page.$sub_title_area.on("click", (event) => {
            event.stopImmediatePropagation();
            frappe.utils.copy_to_clipboard(this.frm.docname);
          });
        }
      } else {
        var title = this.frm.docname;
      }
      let me2 = this;
      title = __(title);
      this.page.set_title(title);
      if (this.frm.meta.title_field) {
        frappe.utils.set_title(`${title} - ${this.frm.docname}`);
      }
      this.page.$title_area.toggleClass(
        "editable-title",
        Boolean(this.is_title_editable() || this.can_rename())
      );
      this.set_indicator();
    }
    is_title_editable() {
      let { title_field } = this.frm.meta;
      let doc_field = this.frm.get_docfield(title_field);
      if (title_field && this.frm.perm[0].write && !this.frm.doc.__islocal && doc_field.fieldtype === "Data" && !doc_field.read_only) {
        return true;
      }
      return false;
    }
    can_rename() {
      return false;
    }
    show_unchanged_document_alert() {
      frappe.show_alert({
        indicator: "info",
        message: __("Unchanged")
      });
    }
    rename_document_title(input_name, input_title, merge = false) {
      let confirm_message = null;
      const docname = this.frm.doc.name;
      const title_field = this.frm.meta.title_field || "";
      const { doctype } = this.frm;
      let queue;
      if (this.frm.__rename_queue) {
        queue = this.frm.__rename_queue;
      }
      if (input_name) {
        const warning = __("This cannot be undone");
        const message = __("Are you sure you want to merge {0} with {1}?", [
          docname.bold(),
          input_name.bold()
        ]);
        confirm_message = `${message}<br><b>${warning}<b>`;
      }
      let rename_document = () => frappe.xcall("frappe.model.rename_doc.update_document_title", {
        doctype,
        docname,
        name: input_name,
        title: input_title,
        enqueue: true,
        merge,
        freeze: true,
        freeze_message: __("Updating related fields..."),
        queue
      }).then((new_docname) => {
        const reload_form = (input_name2) => {
          $(document).trigger("rename", [doctype, docname, input_name2]);
          if (locals[doctype] && locals[doctype][docname]) {
            delete locals[doctype][docname];
          }
          this.frm.reload_doc();
        };
        if (input_name && new_docname == docname) {
          frappe.socketio.doc_subscribe(doctype, input_name);
          frappe.realtime.on("doc_update", (data) => {
            if (data.doctype == doctype && data.name == input_name) {
              reload_form(input_name);
              frappe.show_alert({
                message: __("Document renamed from {0} to {1}", [
                  docname.bold(),
                  input_name.bold()
                ]),
                indicator: "success"
              });
            }
          });
          frappe.show_alert(
            __("Document renaming from {0} to {1} has been queued", [
              docname.bold(),
              input_name.bold()
            ])
          );
        }
        if (input_name && (new_docname || input_name) != docname) {
          reload_form(new_docname || input_name);
        }
      });
      return new Promise((resolve, reject) => {
        if (input_title === this.frm.doc[title_field] && input_name === docname) {
          this.show_unchanged_document_alert();
          resolve();
        } else if (merge) {
          frappe.confirm(
            confirm_message,
            () => {
              rename_document().then(resolve).catch(reject);
            },
            reject
          );
        } else {
          rename_document().then(resolve).catch(reject);
        }
      });
    }
    setup_editable_title() {
    }
    get_dropdown_menu(label) {
      return this.page.add_dropdown(label);
    }
    set_indicator() {
      let indicator = frappe.get_indicator(this.frm.doc);
      if (this.frm.save_disabled && indicator && [__("Saved"), __("Not Saved")].includes(indicator[0])) {
        return;
      }
      if (indicator) {
        this.page.set_indicator(indicator[0], indicator[1]);
      } else {
        this.page.clear_indicator();
      }
    }
    make_menu() {
      this.page.clear_icons();
      this.page.clear_menu();
      if (frappe.boot.desk_settings.form_sidebar) {
        this.make_navigation();
        this.make_menu_items();
      }
    }
    make_viewers() {
      if (this.frm.viewers) {
        return;
      }
      this.frm.viewers = new frappe.ui.form.FormViewers({
        frm: this.frm,
        parent: $('<div class="form-viewers d-flex"></div>').prependTo(
          this.frm.page.page_actions
        )
      });
    }
    make_navigation() {
    }
    make_menu_items() {
      const me2 = this;
      const p = this.frm.perm[0];
      const docstatus = cint(this.frm.doc.docstatus);
      const is_submittable = frappe.model.is_submittable(this.frm.doc.doctype);
      const print_settings = frappe.model.get_doc(":Print Settings", "Print Settings");
      const allow_print_for_draft = cint(print_settings.allow_print_for_draft);
      const allow_print_for_cancelled = cint(print_settings.allow_print_for_cancelled);
      if (!is_submittable || docstatus == 1 || allow_print_for_cancelled && docstatus == 2 || allow_print_for_draft && docstatus == 0) {
        if (frappe.model.can_print(null, me2.frm) && !this.frm.meta.issingle) {
          this.page.add_menu_item(
            __("Print"),
            function() {
              me2.frm.print_doc();
            },
            true
          );
          this.print_icon = this.page.add_action_icon(
            "printer",
            function() {
              me2.frm.print_doc();
            },
            "",
            __("Print")
          );
        }
      }
      if (frappe.model.can_email(null, me2.frm) && me2.frm.doc.docstatus < 2) {
        this.page.add_menu_item(
          __("Email"),
          function() {
            me2.frm.email_doc();
          },
          true,
          {
            shortcut: "Ctrl+E",
            condition: () => !this.frm.is_new()
          }
        );
      }
      this.page.add_menu_item(
        __("Jump to field"),
        function() {
          me2.show_jump_to_field_dialog();
        },
        true,
        "Ctrl+J"
      );
      if (!me2.frm.meta.issingle) {
        this.page.add_menu_item(
          __("Links"),
          function() {
            me2.show_linked_with();
          },
          true
        );
      }
      if (in_list(frappe.boot.user.can_create, me2.frm.doctype) && !me2.frm.meta.allow_copy) {
        this.page.add_menu_item(
          __("Duplicate"),
          function() {
            me2.frm.copy_doc();
          },
          true
        );
      }
      this.page.add_menu_item(
        __("Copy to Clipboard"),
        function() {
          frappe.utils.copy_to_clipboard(JSON.stringify(me2.frm.doc));
        },
        true
      );
      this.page.add_menu_item(
        __("Reload"),
        function() {
          me2.frm.reload_doc();
        },
        true
      );
      if (cint(me2.frm.doc.docstatus) != 1 && !me2.frm.doc.__islocal && frappe.model.can_delete(me2.frm.doctype)) {
        this.page.add_menu_item(
          __("Delete"),
          function() {
            me2.frm.savetrash();
          },
          true,
          {
            shortcut: "Shift+Ctrl+D",
            condition: () => !this.frm.is_new()
          }
        );
      }
      this.make_customize_buttons();
      if (this.can_repeat()) {
        this.page.add_menu_item(
          __("Repeat"),
          function() {
            frappe.utils.new_auto_repeat_prompt(me2.frm);
          },
          true
        );
      }
      if (p[CREATE] && !this.frm.meta.issingle && !this.frm.meta.in_create) {
        this.page.add_menu_item(
          __("New {0}", [__(me2.frm.doctype)]),
          function() {
            frappe.new_doc(me2.frm.doctype, true);
          },
          true,
          {
            shortcut: "Ctrl+B",
            condition: () => !this.frm.is_new()
          }
        );
      }
    }
    make_customize_buttons() {
      let is_doctype_form = this.frm.doctype === "DocType";
      if (frappe.model.can_create("Custom Field") && frappe.model.can_create("Property Setter")) {
        let doctype = is_doctype_form ? this.frm.docname : this.frm.doctype;
        let is_doctype_custom = is_doctype_form ? this.frm.doc.custom : false;
        if (doctype != "DocType" && !is_doctype_custom && this.frm.meta.issingle === 0) {
          this.page.add_menu_item(
            __("Customize"),
            () => {
              if (this.frm.meta && this.frm.meta.custom) {
                frappe.set_route("Form", "DocType", doctype);
              } else {
                frappe.set_route("Form", "Customize Form", {
                  doc_type: doctype
                });
              }
            },
            true
          );
        }
      }
      if (frappe.model.can_create("DocType")) {
        if (frappe.boot.developer_mode === 1 && !is_doctype_form) {
          this.page.add_menu_item(
            __("Edit DocType"),
            () => {
              frappe.set_route("Form", "DocType", this.frm.doctype);
            },
            true
          );
        }
      }
    }
    can_repeat() {
      return this.frm.meta.allow_auto_repeat && !this.frm.is_new() && !this.frm.doc.auto_repeat;
    }
    can_save() {
      return this.get_docstatus() === 0;
    }
    can_submit() {
      return this.get_docstatus() === 0 && !this.frm.doc.__islocal && !this.frm.doc.__unsaved && this.frm.perm[0].submit && !this.has_workflow();
    }
    can_update() {
      return this.get_docstatus() === 1 && !this.frm.doc.__islocal && this.frm.perm[0].submit && this.frm.doc.__unsaved;
    }
    can_cancel() {
      return this.get_docstatus() === 1 && this.frm.perm[0].cancel && !this.read_only;
    }
    can_amend() {
      return this.get_docstatus() === 2 && this.frm.perm[0].amend && !this.read_only;
    }
    has_workflow() {
      if (this._has_workflow === void 0) {
        this._has_workflow = frappe.get_list("Workflow", {
          document_type: this.frm.doctype
        }).length;
      }
      return this._has_workflow;
    }
    get_docstatus() {
      return cint(this.frm.doc.docstatus);
    }
    show_linked_with() {
      if (!this.frm.linked_with) {
        this.frm.linked_with = new frappe.ui.form.LinkedWith({
          frm: this.frm
        });
      }
      this.frm.linked_with.show();
    }
    set_primary_action(dirty) {
      if (!dirty) {
        this.page.clear_user_actions();
      }
      let status = this.get_action_status();
      if (status) {
        if (status !== this.current_status && status === "Amend") {
          let { doc } = this.frm;
          frappe.xcall("frappe.client.is_document_amended", {
            doctype: doc.doctype,
            docname: doc.name
          }).then((is_amended) => {
            if (is_amended) {
              this.page.clear_actions();
              return;
            }
            this.set_page_actions(status);
          });
        } else {
          this.set_page_actions(status);
        }
      } else {
        this.page.clear_actions();
        this.current_status = null;
      }
    }
    get_action_status() {
      let status = null;
      if (this.frm.page.current_view_name === "print" || this.frm.hidden) {
        status = "Edit";
      } else if (this.can_submit()) {
        status = "Submit";
      } else if (this.can_save()) {
        if (!this.frm.save_disabled) {
          if (this.has_workflow() ? this.frm.doc.__unsaved : true) {
            status = "Save";
          }
        }
      } else if (this.can_update()) {
        status = "Update";
      } else if (this.can_cancel()) {
        status = "Cancel";
      } else if (this.can_amend()) {
        status = "Amend";
      }
      return status;
    }
    set_page_actions(status) {
      let me2 = this;
      this.page.clear_actions();
      if (status !== "Edit") {
        let perm_to_check = this.frm.action_perm_type_map[status];
        if (!this.frm.perm[0][perm_to_check]) {
          return;
        }
      }
      if (status === "Edit") {
        this.page.set_primary_action(
          __("Edit"),
          function() {
            me2.frm.page.set_view("main");
          },
          "edit"
        );
      } else if (status === "Cancel") {
        let add_cancel_button = () => {
          this.page.set_secondary_action(__(status), function() {
            me2.frm.savecancel(this);
          });
        };
        if (this.has_workflow()) {
          frappe.xcall("frappe.model.workflow.can_cancel_document", {
            doctype: this.frm.doc.doctype
          }).then((can_cancel) => {
            if (can_cancel) {
              add_cancel_button();
            }
          });
        } else {
          add_cancel_button();
        }
      } else {
        let click = {
          Save() {
            return me2.frm.save("Save", null, this);
          },
          Submit() {
            return me2.frm.savesubmit(this);
          },
          Update() {
            return me2.frm.save("Update", null, this);
          },
          Amend() {
            return me2.frm.amend_doc();
          }
        }[status];
        let icon = {
          Update: "edit"
        }[status];
        this.page.set_primary_action(__(status), click, icon);
      }
      this.current_status = status;
    }
    add_update_button_on_dirty() {
      let me2 = this;
      $(this.frm.wrapper).on("dirty", function() {
        me2.show_title_as_dirty();
        me2.frm.page.clear_actions_menu();
        if (!me2.frm.save_disabled) {
          me2.set_primary_action(true);
        }
      });
    }
    show_title_as_dirty() {
      if (this.frm.save_disabled && !this.frm.set_dirty) {
        return;
      }
      if (this.frm.is_dirty()) {
        this.page.set_indicator(__("Not Saved"), "orange");
      }
      $(this.frm.wrapper).attr("data-state", this.frm.is_dirty() ? "dirty" : "clean");
    }
    show_jump_to_field_dialog() {
      let visible_fields_filter = (f) => !["Section Break", "Column Break", "Tab Break"].includes(f.df.fieldtype) && !f.df.hidden && f.disp_status !== "None";
      let fields = this.frm.fields.filter(visible_fields_filter).map((f) => ({ label: __(f.df.label), value: f.df.fieldname }));
      let dialog = new frappe.ui.Dialog({
        title: __("Jump to field"),
        fields: [
          {
            fieldtype: "Autocomplete",
            fieldname: "fieldname",
            label: __("Select Field"),
            options: fields,
            reqd: 1
          }
        ],
        primary_action_label: __("Go"),
        primary_action: ({ fieldname }) => {
          dialog.hide();
          this.frm.scroll_to_field(fieldname);
        },
        animate: false
      });
      dialog.show();
    }
  };
  var Toolbar_default = Toolbar;

  // guigu/public/js/FormDetail/undo_manager.ts
  var UndoManager = class {
    constructor({ frm }) {
      this.frm = frm;
      this.undo_stack = [];
      this.redo_stack = [];
    }
    record_change({ fieldname, old_value, new_value, doctype, docname, is_child }) {
      if (old_value == new_value) {
        return;
      }
      this.undo_stack.push({
        fieldname,
        old_value,
        new_value,
        doctype,
        docname,
        is_child
      });
    }
    erase_history() {
      this.undo_stack = [];
      this.redo_stack = [];
    }
    undo() {
      const change = this.undo_stack.pop();
      if (change) {
        this._apply_change(change);
        this._push_reverse_entry(change, this.redo_stack);
      } else {
        this._show_alert(__("Nothing left to undo"));
      }
    }
    redo() {
      const change = this.redo_stack.pop();
      if (change) {
        this._apply_change(change);
        this._push_reverse_entry(change, this.undo_stack);
      } else {
        this._show_alert(__("Nothing left to redo"));
      }
    }
    _push_reverse_entry(change, stack) {
      stack.push(__spreadProps(__spreadValues({}, change), {
        new_value: change.old_value,
        old_value: change.new_value
      }));
    }
    _apply_change(change) {
      if (change.is_child) {
        frappe.model.set_value(
          change.doctype,
          change.docname,
          change.fieldname,
          change.old_value
        );
      } else {
        this.frm.set_value(change.fieldname, change.old_value);
        this.frm.scroll_to_field(change.fieldname, false);
      }
    }
    _show_alert(msg) {
      frappe.show_alert(msg, 3);
    }
  };

  // guigu/public/js/FormDetail/Layout/Section.ts
  var Section = class {
    constructor(parent, df, card_layout, layout) {
      this.layout = layout;
      this.card_layout = card_layout;
      this.parent = parent;
      this.df = df || {};
      this.columns = [];
      this.fields_list = [];
      this.fields_dict = {};
      this.make();
      if (this.df.label && this.df.collapsible && localStorage.getItem(`${df.css_class}-closed`)) {
        this.collapse();
      }
      this.row = {
        wrapper: this.wrapper
      };
      this.refresh();
    }
    make() {
      let make_card = this.card_layout;
      this.wrapper = $(`<div class="row
				${this.df.is_dashboard_section ? "form-dashboard-section" : "form-section"}
				${make_card ? "card-section" : ""}" data-fieldname="${this.df.fieldname}">
			`).appendTo(this.parent);
      if (this.df) {
        if (this.df.label) {
          this.make_head();
        }
        if (this.df.description) {
          this.description_wrapper = $(
            `<div class="col-sm-12 form-section-description">
						${__(this.df.description)}
					</div>`
          );
          this.wrapper.append(this.description_wrapper);
        }
        if (this.df.css_class) {
          this.wrapper.addClass(this.df.css_class);
        }
        if (this.df.hide_border) {
          this.wrapper.toggleClass("hide-border", true);
        }
      }
      this.body = $('<div class="section-body">').appendTo(this.wrapper);
      if (this.df.body_html) {
        this.body.append(this.df.body_html);
      }
    }
    make_head() {
      this.head = $(`
			<div class="section-head">
				${__(this.df.label)}
				<span class="ml-2 collapse-indicator mb-1"></span>
			</div>
		`);
      this.head.appendTo(this.wrapper);
      this.indicator = this.head.find(".collapse-indicator");
      this.indicator.hide();
      if (this.df.collapsible) {
        this.collapse_link = this.head.on("click", () => {
          this.collapse();
        });
        this.set_icon();
        this.indicator.show();
      }
    }
    add_field(fieldobj) {
      this.fields_list.push(fieldobj);
      this.fields_dict[fieldobj.fieldname] = fieldobj;
      fieldobj.section = this;
    }
    replace_field(fieldname, fieldobj) {
      var _a;
      if ((_a = this.fields_dict[fieldname]) == null ? void 0 : _a.df) {
        const olfldobj = this.fields_dict[fieldname];
        const idx = this.fields_list.findIndex((e) => e == olfldobj);
        this.fields_list.splice(idx, 1, fieldobj);
        this.fields_dict[fieldname] = fieldobj;
        fieldobj.section = this;
      }
    }
    refresh(hide) {
      if (!this.df) {
        return;
      }
      hide = hide || this.df.hidden || this.df.hidden_due_to_dependency;
      this.wrapper.toggleClass("hide-control", Boolean(hide));
    }
    collapse(hide) {
      if (!(this.head && this.body)) {
        return;
      }
      if (hide === void 0) {
        hide = !this.body.hasClass("hide");
      }
      this.body.toggleClass("hide", hide);
      this.head && this.head.toggleClass("collapsed", hide);
      this.set_icon(hide);
      for (const f of this.fields_list) {
        f.on_section_collapse && f.on_section_collapse(hide);
      }
      if (this.df.css_class) {
        localStorage.setItem(`${this.df.css_class}-closed`, hide ? "1" : "");
      }
    }
    set_icon(hide) {
      let indicator_icon = hide ? "down" : "up-line";
      this.indicator && this.indicator.html(frappe.utils.icon(indicator_icon, "sm", "mb-1"));
    }
    is_collapsed() {
      return this.body.hasClass("hide");
    }
    has_missing_mandatory() {
      let missing_mandatory = false;
      for (let j2 = 0, l = this.fields_list.length; j2 < l; j2++) {
        const section_df = this.fields_list[j2].df;
        if (section_df.reqd && this.layout.doc[section_df.fieldname] == null) {
          missing_mandatory = true;
          break;
        }
      }
      return missing_mandatory;
    }
    hide() {
      this.on_section_toggle(false);
    }
    show() {
      this.on_section_toggle(true);
    }
    on_section_toggle(show) {
      this.wrapper.toggleClass("hide-control", !show);
    }
  };
  var Section_default = Section;

  // guigu/public/js/FormDetail/Layout/Tab.ts
  var Tab = class {
    constructor(layout, df, frm, tab_link_container, tabs_content) {
      this.layout = layout;
      this.df = df || {};
      this.frm = frm;
      this.doctype = this.frm.doctype;
      this.label = this.df && this.df.label;
      this.tab_link_container = tab_link_container;
      this.tabs_content = tabs_content;
      this.fields_list = [];
      this.fields_dict = {};
      this.make();
      this.setup_listeners();
      this.refresh();
    }
    make() {
      const id = `form-detail-${frappe.scrub(this.doctype, "-")}-${this.df.fieldname}`;
      this.tab_link = $(`
			<li class="nav-item">
				<a class="nav-link ${this.df.active ? "active" : ""}" id="${id}-tab"
					data-toggle="tab"
					data-fieldname="${this.df.fieldname}"
					href="#${id}"
					role="tab"
					aria-controls="${this.label}">
						${__(this.label)}
				</a>
			</li>
		`).appendTo(this.tab_link_container);
      this.wrapper = $(`<div class="tab-pane fade show ${this.df.active ? "active" : ""}"
			id="${id}" role="tabpanel" aria-labelledby="${id}-tab">`).appendTo(this.tabs_content);
    }
    refresh() {
      if (!this.df) {
        return;
      }
      let hide = this.df.hidden || this.df.hidden_due_to_dependency;
      if (!hide && this.df.show_dashboard && this.frm.is_new()) {
        hide = true;
      }
      if (!hide && this.frm && !this.frm.get_perm(this.df.permlevel || 0, "read")) {
        hide = true;
      }
      if (!hide) {
        hide = true;
        if (this.wrapper.find(
          ".form-section:not(.hide-control, .empty-section), .form-dashboard-section:not(.hide-control, .empty-section)"
        ).length) {
          hide = false;
        }
      }
      this.toggle(!hide);
    }
    toggle(show) {
      this.tab_link.toggleClass("hide", !show);
      this.wrapper.toggleClass("hide", !show);
      this.tab_link.toggleClass("show", show);
      this.wrapper.toggleClass("show", show);
      this.hidden = !show;
    }
    show() {
      this.tab_link.show();
    }
    hide() {
      this.tab_link.hide();
    }
    replace_field(fieldobj) {
      fieldobj.tab = this;
    }
    add_field(fieldobj) {
      fieldobj.tab = this;
    }
    set_active() {
      this.tab_link.find(".nav-link").tab("show");
      this.wrapper.addClass("show");
      this.frm.active_tab = this;
    }
    is_active() {
      return this.wrapper.hasClass("active");
    }
    is_hidden() {
      return this.wrapper.hasClass("hide") && this.tab_link.hasClass("hide");
    }
    setup_listeners() {
      this.tab_link.find(".nav-link").on("shown.bs.tab", () => {
        var _a, _b;
        (_b = this == null ? void 0 : (_a = this.frm).set_active_tab) == null ? void 0 : _b.call(_a, this);
      });
    }
    setup_switch_on_hover() {
      this.tab_link.on("dragenter", () => {
        this.action = setTimeout(() => {
          this.set_active();
        }, 2e3);
      });
      this.tab_link.on("dragout", () => {
        if (this.action) {
          clearTimeout(this.action);
          this.action = null;
        }
      });
    }
  };
  var Tab_default = Tab;

  // guigu/public/js/FormDetail/Layout/Column.ts
  var Column = class {
    constructor(section, df) {
      this.df = df || {};
      this.section = section;
      this.section.columns.push(this);
      this.make();
      this.resize_all_columns();
    }
    make() {
      this.wrapper = $(`
			<div class="form-column" data-fieldname="${this.df.fieldname}">
				<form>
				</form>
			</div>
		`).appendTo(this.section.body);
      this.form = this.wrapper.find("form").on("submit", function() {
        return false;
      });
      if (this.df.label) {
        $(`
				<label class="control-label">
					${__(this.df.label)}
				</label>
			`).appendTo(this.wrapper);
      }
    }
    resize_all_columns() {
      let columns = this.section.wrapper.find(".form-column").length;
      let colspan = cint(12 / columns);
      if (columns == 5) {
        colspan = 20;
      }
      this.section.wrapper.find(".form-column").removeClass().addClass("form-column").addClass(`col-sm-${colspan}`);
    }
    add_field() {
    }
    refresh() {
      this.section.refresh();
    }
  };
  var Column_default = Column;

  // guigu/public/js/FormDetail/Layout/index.ts
  var Layout = class {
    constructor(parent, doctype, doctype_layout, frm, currentTab) {
      this.views = {};
      this.pages = [];
      this.tabs = [];
      this.sections = [];
      this.page_breaks = [];
      this.sections_dict = {};
      this.fields_list = [];
      this.fields_dict = {};
      this.section_count = 0;
      this.column_count = 0;
      this.with_dashboard = true;
      this.card_layout = true;
      this.formTabsList = document.createElement("div");
      this.tabsContent = document.createElement("div");
      var _a, _b;
      this.parent = $(parent);
      this.doctype = doctype;
      this.doctype_layout = doctype_layout;
      this.frm = frm;
      this.currentTab = currentTab;
      const wrapper = parent.querySelector(".form-layout");
      const message = parent.querySelector(".form-message");
      const page = parent.querySelector(".form-page");
      this.wrapper = $(wrapper);
      this.message = $(message);
      this.page = $(page);
      message.innerHTML = "";
      page.innerHTML = "";
      if (!this.fields) {
        this.fields = this.get_doctype_fields();
      }
      if (this.is_tabbed_layout()) {
        this.setup_tabbed_layout();
      }
      this.setup_tab_events();
      this.render();
      const tab = currentTab.value;
      const current = tab && ((_b = (_a = this.tab_link_container) == null ? void 0 : _a[0]) == null ? void 0 : _b.querySelector(`.nav-link[data-fieldname=${tab}]`));
      if (current) {
        $(current).tab("show");
      }
    }
    setup_tabbed_layout() {
      const tab_link_container = $('<ul class="nav form-tabs" id="form-tabs" role="tablist"></ul>');
      const { formTabsList } = this;
      formTabsList.className = "form-tabs-list";
      tab_link_container.appendTo(formTabsList);
      $(formTabsList).appendTo(this.page);
      this.tab_link_container = tab_link_container;
      const { tabsContent } = this;
      tabsContent.className = "form-tab-content tab-content";
      this.tabs_content = $(tabsContent).appendTo(
        this.page
      );
      this.setup_events();
    }
    get_doctype_fields() {
      let fields = [this.get_new_name_field()];
      if (this.doctype_layout) {
        fields = fields.concat(this.get_fields_from_layout());
      } else {
        fields = fields.concat(
          frappe.meta.sort_docfields(frappe.meta.docfield_map[this.doctype])
        );
      }
      return fields;
    }
    get_new_name_field() {
      return {
        parent: this.frm.doctype,
        fieldtype: "Data",
        fieldname: "__newname",
        reqd: 1,
        hidden: 1,
        label: __("Name"),
        get_status(field) {
          if (field.frm && field.frm.is_new() && field.frm.meta.autoname && ["prompt", "name"].includes(field.frm.meta.autoname.toLowerCase())) {
            return "Write";
          }
          return "None";
        }
      };
    }
    get_fields_from_layout() {
      const fields = [];
      for (let f of this.doctype_layout.fields) {
        const docfield = copy_dict(frappe.meta.docfield_map[this.doctype][f.fieldname]);
        docfield.label = f.label;
        fields.push(docfield);
      }
      return fields;
    }
    show_message(html, color) {
      if (this.message_color) {
        this.message.removeClass(this.message_color);
      }
      this.message_color = color && ["yellow", "blue", "red", "green", "orange"].includes(color) ? color : "blue";
      if (html) {
        if (html.substr(0, 1) !== "<") {
          html = `<div>${html}</div>`;
        }
        this.message.removeClass("hidden").addClass(this.message_color);
        $(html).appendTo(this.message);
      } else {
        this.message.empty().addClass("hidden");
      }
    }
    render(new_fields) {
      let fields = new_fields || this.fields;
      this.section = null;
      this.column = null;
      if (this.no_opening_section() && !this.is_tabbed_layout()) {
        this.fields.unshift({ fieldtype: "Section Break" });
      }
      if (this.is_tabbed_layout()) {
        let default_tab = {
          label: __("Details"),
          fieldtype: "Tab Break",
          fieldname: "__details"
        };
        let first_field_visible = this.fields.find((element) => element.hidden == false);
        let first_tab = (first_field_visible == null ? void 0 : first_field_visible.fieldtype) === "Tab Break" ? first_field_visible : null;
        if (first_tab) {
          let newname_field = this.fields.find((df) => df.fieldname === "__newname");
          if (newname_field && newname_field.get_status(this) === "Write") {
            this.fields.splice(0, 1);
            this.fields.splice(1, 0, newname_field);
          }
        } else {
          this.fields.splice(0, 0, default_tab);
        }
      }
      for (const df of fields) {
        switch (df.fieldtype) {
          case "Fold":
            this.make_page(df);
            break;
          case "Page Break":
            this.make_page_break();
            this.make_section(df);
            break;
          case "Section Break":
            this.make_section(df);
            break;
          case "Column Break":
            this.make_column(df);
            break;
          case "Tab Break":
            this.make_tab(df);
            break;
          default:
            this.make_field(df);
        }
      }
    }
    no_opening_section() {
      return this.fields[0] && this.fields[0].fieldtype != "Section Break" || !this.fields.length;
    }
    no_opening_tab() {
      return this.fields[1] && this.fields[1].fieldtype != "Tab Break" || !this.fields.length;
    }
    is_tabbed_layout() {
      return this.fields.find((f) => f.fieldtype === "Tab Break");
    }
    replace_field(fieldname, df, render14) {
      var _a;
      df.fieldname = fieldname;
      if (this.fields_dict[fieldname] && this.fields_dict[fieldname].df) {
        const prev_fieldobj = this.fields_dict[fieldname];
        const fieldobj = this.init_field(df, prev_fieldobj.parent, render14);
        prev_fieldobj.$wrapper.replaceWith(fieldobj.$wrapper);
        const idx = this.fields_list.findIndex((e) => e == prev_fieldobj);
        this.fields_list.splice(idx, 1, fieldobj);
        this.fields_dict[fieldname] = fieldobj;
        for (const section of this.sections) {
          section.replace_field(fieldname, fieldobj);
        }
        (_a = prev_fieldobj.tab) == null ? void 0 : _a.replace_field(fieldobj);
        this.refresh_fields([df]);
      }
    }
    make_field(df, colspan, render14) {
      !this.section && this.make_section();
      !this.column && this.make_column();
      const parent = this.column.wrapper.get(0);
      const fieldobj = this.init_field(df, parent, render14);
      this.fields_list.push(fieldobj);
      this.fields_dict[df.fieldname] = fieldobj;
      this.section.add_field(fieldobj);
      this.column.add_field(fieldobj);
      if (this.current_tab) {
        this.current_tab.add_field(fieldobj);
      }
    }
    init_field(df, parent, render14 = false) {
      const fieldobj = frappe.ui.form.make_control({
        df,
        doctype: this.doctype,
        parent,
        frm: this.frm,
        render_input: render14,
        doc: this.doc,
        layout: this
      });
      fieldobj.layout = this;
      return fieldobj;
    }
    make_page_break() {
      this.page = $('<div class="form-page page-break"></div>').appendTo(this.wrapper);
    }
    make_page(df) {
      let me2 = this;
      let head = $(`
			<div class="form-clickable-section text-center">
				<a class="btn-fold h6 text-muted">
					${__("Show more details")}
				</a>
			</div>
		`).appendTo(this.wrapper);
      this.page = $('<div class="form-page second-page hide"></div>').appendTo(this.wrapper);
      this.fold_btn = head.find(".btn-fold").on("click", function() {
        let page = $(this).parent().next();
        if (page.hasClass("hide")) {
          $(this).removeClass("btn-fold").html(__("Hide details"));
          page.removeClass("hide");
          frappe.utils.scroll_to($(this), true, 30);
          me2.folded = false;
        } else {
          $(this).addClass("btn-fold").html(__("Show more details"));
          page.addClass("hide");
          me2.folded = true;
        }
      });
      this.section = null;
      this.folded = true;
    }
    unfold() {
      this.fold_btn.trigger("click");
    }
    make_section(df = {}) {
      var _a;
      this.section_count++;
      if (!df.fieldname) {
        df.fieldname = `__section_${this.section_count}`;
        df.fieldtype = "Section Break";
      }
      this.section = new Section_default(
        ((_a = this.current_tab) == null ? void 0 : _a.wrapper) || this.page,
        df,
        this.card_layout,
        this
      );
      this.sections.push(this.section);
      this.sections_dict[df.fieldname] = this.section;
      if (df) {
        this.fields_dict[df.fieldname] = this.section;
        this.fields_list.push(this.section);
      }
      this.column = null;
    }
    make_column(df = {}) {
      this.column_count++;
      if (!df.fieldname) {
        df.fieldname = `__column_${this.section_count}`;
        df.fieldtype = "Column Break";
      }
      this.column = new Column_default(this.section, df);
      if (df && df.fieldname) {
        this.fields_list.push(this.column);
      }
    }
    make_tab(df) {
      this.section = null;
      let tab = new Tab_default(this, df, this.frm, this.tab_link_container, this.tabs_content);
      this.current_tab = tab;
      this.make_section({ fieldtype: "Section Break" });
      this.tabs.push(tab);
      return tab;
    }
    refresh(doc) {
      if (doc) {
        this.doc = doc;
      }
      if (this.frm) {
        this.wrapper.find(".empty-form-alert").remove();
      }
      this.attach_doc_and_docfields(true);
      if (this.frm && this.frm.wrapper) {
        $(this.frm.wrapper).trigger("refresh-fields");
      }
      this.refresh_dependency();
      this.refresh_sections();
      if (this.frm) {
        this.refresh_section_collapse();
      }
      if (document.activeElement) {
        if (document.activeElement.tagName == "INPUT" && this.is_numeric_field_active()) {
          document.activeElement.select();
        }
      }
    }
    is_numeric_field_active() {
      const control = $(document.activeElement).closest(".frappe-control");
      const { fieldtype } = control.data() || {};
      return frappe.model.numeric_fieldtypes.includes(fieldtype);
    }
    refresh_sections() {
      this.wrapper.find(".form-section:not(.hide-control)").each(function() {
        const section = $(this).removeClass("empty-section visible-section");
        if (section.find(".frappe-control:not(.hide-control)").length) {
          section.addClass("visible-section");
        } else {
          section.addClass("empty-section");
        }
      });
      this.is_tabbed_layout() && this.refresh_tabs();
    }
    refresh_tabs() {
      for (let tab of this.tabs) {
        tab.refresh();
      }
      const visible_tabs = this.tabs.filter((tab) => !tab.hidden);
      if (visible_tabs && visible_tabs.length == 1) {
        visible_tabs[0].tab_link.toggleClass("hide show");
      }
      this.set_tab_as_active();
    }
    set_tab_as_active() {
      var _a, _b;
      let frm_active_tab = (_b = this == null ? void 0 : (_a = this.frm).get_active_tab) == null ? void 0 : _b.call(_a);
      if (frm_active_tab) {
        frm_active_tab.set_active();
      } else if (this.tabs.length) {
        let first_visible_tab = this.tabs.find((tab) => !tab.is_hidden());
        first_visible_tab && first_visible_tab.set_active();
      }
    }
    refresh_fields(fields) {
      let fieldnames = fields.map((field) => {
        if (field.fieldname) {
          return field.fieldname;
        }
      });
      this.fields_list.map((fieldobj) => {
        if (fieldnames.includes(fieldobj.df.fieldname)) {
          fieldobj.refresh();
          if (fieldobj.df.default) {
            fieldobj.set_input(fieldobj.df.default);
          }
        }
      });
    }
    add_fields(fields) {
      this.render(fields);
      this.refresh_fields(fields);
    }
    refresh_section_collapse() {
      if (!(this.sections && this.sections.length)) {
        return;
      }
      for (let i = 0; i < this.sections.length; i++) {
        let section = this.sections[i];
        let { df } = section;
        if (df && df.collapsible) {
          let collapse = true;
          if (df.collapsible_depends_on) {
            collapse = !this.evaluate_depends_on_value(df.collapsible_depends_on);
          }
          if (collapse && section.has_missing_mandatory()) {
            collapse = false;
          }
          section.collapse(collapse);
        }
      }
    }
    attach_doc_and_docfields(refresh) {
      let me2 = this;
      for (let i = 0, l = this.fields_list.length; i < l; i++) {
        let fieldobj = this.fields_list[i];
        if (me2.doc) {
          fieldobj.doc = me2.doc;
          fieldobj.doctype = me2.doc.doctype;
          fieldobj.docname = me2.doc.name;
          fieldobj.df = frappe.meta.get_docfield(me2.doc.doctype, fieldobj.df.fieldname, me2.doc.name) || fieldobj.df;
        }
        refresh && fieldobj.df && fieldobj.refresh && fieldobj.refresh();
      }
    }
    refresh_section_count() {
      this.wrapper.find(".section-count-label:visible").each(function(i) {
        $(this).html(i + 1);
      });
    }
    setup_events() {
      let last_scroll = 0;
      const { formTabsList } = this;
      let { tabsContent } = this;
      const eventListener = frappe.utils.throttle(() => {
        let current_scroll = document.documentElement.scrollTop;
        if (current_scroll > 0 && last_scroll <= current_scroll) {
          formTabsList.classList.remove("form-tabs-sticky-down");
          formTabsList.classList.add("form-tabs-sticky-up");
        } else {
          formTabsList.classList.remove("form-tabs-sticky-up");
          formTabsList.classList.add("form-tabs-sticky-down");
        }
        last_scroll = current_scroll;
      }, 500);
      window.addEventListener("scroll", eventListener);
      this.tab_link_container.off("click").on("click", ".nav-link", (e) => {
        e.preventDefault();
        e.stopImmediatePropagation();
        const el = e.currentTarget;
        $(el).tab("show");
        const { fieldname } = el.dataset;
        if (fieldname) {
          this.currentTab.value = fieldname;
        }
        if (tabsContent.getBoundingClientRect().top < 100) {
          tabsContent.scrollIntoView();
          setTimeout(() => {
            $(".page-head").css("top", "-15px");
            formTabsList.classList.remove("form-tabs-sticky-down");
            formTabsList.classList.add("form-tabs-sticky-up");
          }, 3);
        }
      });
    }
    setup_tab_events() {
      this.wrapper.on("keydown", (ev) => {
        if (ev.which == 9) {
          let current = $(ev.target);
          let doctype = current.attr("data-doctype");
          let fieldname = current.attr("data-fieldname");
          if (doctype) {
            return this.handle_tab(doctype, fieldname, ev.shiftKey);
          }
        }
      });
    }
    handle_tab(doctype, fieldname, shift) {
      let grid_row = null, prev = null, fields = this.fields_list, focused = false;
      if (doctype != this.doctype) {
        grid_row = this.get_open_grid_row();
        if (!grid_row || !grid_row.layout) {
          return;
        }
        fields = grid_row.layout.fields_list;
      }
      for (let i = 0, len = fields.length; i < len; i++) {
        if (fields[i].df.fieldname == fieldname) {
          if (shift) {
            if (prev) {
              this.set_focus(prev);
            } else {
              $(this.primary_button).focus();
            }
            break;
          }
          if (i < len - 1) {
            focused = this.focus_on_next_field(i, fields);
          }
          if (focused) {
            break;
          }
        }
        if (this.is_visible(fields[i])) {
          prev = fields[i];
        }
      }
      if (!focused) {
        if (grid_row) {
          if (grid_row.doc.idx == grid_row.grid.grid_rows.length) {
            grid_row.toggle_view(false, function() {
              grid_row.grid.frm.layout.handle_tab(
                grid_row.grid.df.parent,
                grid_row.grid.df.fieldname
              );
            });
          } else {
            grid_row.grid.grid_rows[grid_row.doc.idx].toggle_view(true);
          }
        } else if (!shift) {
          $(this.primary_button).focus();
        }
      }
      return false;
    }
    focus_on_next_field(start_idx, fields) {
      for (let i = start_idx + 1, len = fields.length; i < len; i++) {
        let field = fields[i];
        if (this.is_visible(field)) {
          if (field.df.fieldtype === "Table") {
            if (!(field.grid.grid_rows && field.grid.grid_rows.length)) {
              field.grid.add_new_row();
            }
            field.grid.grid_rows[0].show_form();
            return true;
          } else if (!in_list(frappe.model.no_value_type, field.df.fieldtype)) {
            this.set_focus(field);
            return true;
          }
        }
      }
    }
    is_visible(field) {
      return field.disp_status === "Write" && field.df && "hidden" in field.df && !field.df.hidden;
    }
    set_focus(field) {
      if (field.tab) {
        field.tab.set_active();
      }
      if (field.df.fieldtype == "Table") {
        if (field.grid.grid_rows.length) {
          field.grid.grid_rows[0].toggle_view(true);
        } else {
          field.grid.add_new_row(1);
        }
      } else if (field.editor) {
        field.editor.set_focus();
      } else if (field.$input) {
        field.$input.focus();
      }
    }
    get_open_grid_row() {
      return $(".grid-row-open").data("grid_row");
    }
    refresh_dependency() {
      let has_dep = false;
      const fields = this.fields_list.concat(this.tabs);
      for (let fkey in fields) {
        let f = fields[fkey];
        if (f.df.depends_on || f.df.mandatory_depends_on || f.df.read_only_depends_on) {
          has_dep = true;
          break;
        }
      }
      if (!has_dep) {
        return;
      }
      for (let i = fields.length - 1; i >= 0; i--) {
        let f = fields[i];
        f.guardian_has_value = true;
        if (f.df.depends_on) {
          f.guardian_has_value = this.evaluate_depends_on_value(f.df.depends_on);
          if (f.guardian_has_value) {
            if (f.df.hidden_due_to_dependency) {
              f.df.hidden_due_to_dependency = false;
              f.refresh();
            }
          } else if (!f.df.hidden_due_to_dependency) {
            f.df.hidden_due_to_dependency = true;
            f.refresh();
          }
        }
        if (f.df.mandatory_depends_on) {
          this.set_dependant_property(f.df.mandatory_depends_on, f.df.fieldname, "reqd");
        }
        if (f.df.read_only_depends_on) {
          this.set_dependant_property(
            f.df.read_only_depends_on,
            f.df.fieldname,
            "read_only"
          );
        }
      }
      this.refresh_section_count();
    }
    set_dependant_property(condition, fieldname, property) {
      let set_property = this.evaluate_depends_on_value(condition);
      let value = set_property ? 1 : 0;
      let form_obj;
      if (this.frm) {
        form_obj = this.frm;
      } else if (this.is_dialog || this.doctype === "Web Form") {
        form_obj = this;
      }
      if (form_obj) {
        if (this.doc && this.doc.parent && this.doc.parentfield) {
          form_obj.setting_dependency = true;
          form_obj.set_df_property(
            this.doc.parentfield,
            property,
            value,
            this.doc.parent,
            fieldname,
            this.doc.name
          );
          form_obj.setting_dependency = false;
          this.fields_dict[fieldname] && this.fields_dict[fieldname].refresh();
        } else {
          form_obj.set_df_property(fieldname, property, value);
        }
      }
    }
    evaluate_depends_on_value(expression) {
      let out = null;
      let { doc } = this;
      if (!doc && this.get_values) {
        doc = this.get_values(true);
      }
      if (!doc) {
        return;
      }
      let parent = this.frm ? this.frm.doc : this.doc || null;
      if (typeof expression === "boolean") {
        out = expression;
      } else if (typeof expression === "function") {
        out = expression(doc);
      } else if (expression.substr(0, 5) == "eval:") {
        try {
          out = frappe.utils.eval(expression.substr(5), { doc, parent });
          if (parent && parent.istable && expression.includes("is_submittable")) {
            out = true;
          }
        } catch (e) {
          frappe.throw(__('Invalid "depends_on" expression'));
        }
      } else if (expression.substr(0, 3) == "fn:" && this.frm) {
        out = this.frm.script_manager.trigger(
          expression.substr(3),
          this.doctype,
          this.docname
        );
      } else {
        let value = doc[expression];
        if ($.isArray(value)) {
          out = Boolean(value.length);
        } else {
          out = Boolean(value);
        }
      }
      return out;
    }
  };
  var Layout_default = Layout;

  // guigu/public/js/FormDetail/Form.ts
  frappe.provide("frappe.ui.form");
  frappe.provide("frappe.model.docinfo");
  var Form = class {
    constructor(doctype, name, parent, deleted, currentTab, in_form = true, doctype_layout = frappe.router.doctype_layout || doctype, doctype_layout_name) {
      this.docname = "";
      this.hidden = false;
      this.refresh_if_stale_for = 120;
      this.opendocs = {};
      this.custom_buttons = {};
      this.sections = [];
      this.grids = [];
      this.cscript = new frappe.ui.form.Controller({ frm: this });
      this.events = {};
      this.fetch_dict = {};
      this.undo_manager = new UndoManager({ frm: this });
      this.beforeUnloadListener = (event) => {
        event.preventDefault();
        return event.returnValue = "There are unsaved changes, are you sure you want to exit?";
      };
      this.action_perm_type_map = {
        Create: "create",
        Save: "write",
        Submit: "submit",
        Update: "submit",
        Cancel: "cancel",
        Amend: "amend",
        Delete: "delete"
      };
      this.currentTab = currentTab;
      this.__deleted = deleted;
      this.doctype = doctype;
      this.doctype_layout_name = doctype_layout_name;
      this.in_form = in_form ? true : false;
      this.parent = parent;
      this.doctype_layout = frappe.get_doc("DocType Layout", doctype_layout_name);
      this.meta = frappe.get_doc("DocType", this.doctype);
      if (this.meta.istable) {
        this.meta.in_dialog = 1;
      }
      this.perm = frappe.perm.get_perm(this.doctype);
      this.debounced_reload_doc = frappe.utils.debounce(this.reload_doc.bind(this), 1e3);
    }
    setup() {
      this.setup_done = true;
      this.fields = [];
      this.fields_dict = {};
      this.state_fieldname = frappe.workflow.get_state_fieldname(this.doctype);
      this.wrapper = this.parent;
      this.$wrapper = $(this.wrapper);
      const page = new Page_default(this.wrapper, this.meta.hide_toolbar);
      this.page = page;
      this.layout_main = this.parent.querySelector(".layout-main-section");
      this.$wrapper.on("hide", () => {
        this.script_manager.trigger("on_hide");
      });
      this.toolbar = new Toolbar_default(this, page);
      this.add_form_keyboard_shortcuts();
      this.setup_std_layout();
      this.script_manager = new frappe.ui.form.ScriptManager({
        frm: this
      });
      this.script_manager.setup();
      this.watch_model_updates();
      const [mainParent] = page.main.parent();
      if (mainParent) {
        const footer = [...mainParent.children].find((v) => v.classList.contains("layout-footer"));
        if (footer) {
          for (let next; next = footer.nextSibling; ) {
            next == null ? void 0 : next.remove();
          }
        }
      }
      if (!this.meta.hide_toolbar && frappe.boot.desk_settings.timeline) {
        this.footer = new Footer_default({
          frm: this,
          parent: $("<div>").appendTo(page.main.parent())
        });
        $("body").attr("data-sidebar", 1);
      }
      this.setup_file_drop();
      this.setup_doctype_actions();
      this.setup_notify_on_rename();
      this.setup_done = true;
    }
    add_form_keyboard_shortcuts() {
      frappe.ui.keys.add_shortcut({
        shortcut: "shift+ctrl+>",
        action: () => this.navigate_records(0),
        page: this.page,
        description: __("Go to next record"),
        ignore_inputs: true,
        condition: () => !this.is_new()
      });
      frappe.ui.keys.add_shortcut({
        shortcut: "shift+ctrl+<",
        action: () => this.navigate_records(1),
        page: this.page,
        description: __("Go to previous record"),
        ignore_inputs: true,
        condition: () => !this.is_new()
      });
      frappe.ui.keys.add_shortcut({
        shortcut: "ctrl+z",
        action: () => this.undo_manager.undo(),
        page: this.page,
        description: __("Undo last action")
      });
      frappe.ui.keys.add_shortcut({
        shortcut: "shift+ctrl+z",
        action: () => this.undo_manager.redo(),
        page: this.page,
        description: __("Redo last action")
      });
      frappe.ui.keys.add_shortcut({
        shortcut: "ctrl+y",
        action: () => this.undo_manager.redo(),
        page: this.page,
        description: __("Redo last action")
      });
      let grid_shortcut_keys = [
        {
          shortcut: "Up Arrow",
          description: __("Move cursor to above row")
        },
        {
          shortcut: "Down Arrow",
          description: __("Move cursor to below row")
        },
        {
          shortcut: "tab",
          description: __("Move cursor to next column")
        },
        {
          shortcut: "shift+tab",
          description: __("Move cursor to previous column")
        },
        {
          shortcut: "Ctrl+up",
          description: __("Add a row above the current row")
        },
        {
          shortcut: "Ctrl+down",
          description: __("Add a row below the current row")
        },
        {
          shortcut: "Ctrl+shift+up",
          description: __("Add a row at the top")
        },
        {
          shortcut: "Ctrl+shift+down",
          description: __("Add a row at the bottom")
        },
        {
          shortcut: "shift+alt+down",
          description: __("Duplicate current row")
        }
      ];
      for (const row of grid_shortcut_keys) {
        frappe.ui.keys.add_shortcut({
          shortcut: row.shortcut,
          page: this.page,
          description: __(row.description),
          ignore_inputs: true,
          condition: () => !this.is_new()
        });
      }
    }
    setup_std_layout() {
      const main = this.parent.querySelector(".layout-main-section");
      this.form_wrapper = $(main.querySelector("div"));
      const body = main.querySelector(".std-form-layout");
      this.body = $(body);
      this.meta.section_style = "Simple";
      this.layout = new Layout_default(
        body,
        this.doctype,
        this.doctype_layout,
        this,
        this.currentTab
      );
      this.fields_dict = this.layout.fields_dict;
      this.fields = this.layout.fields_list;
      let dashboard_parent = $('<div class="form-dashboard">');
      let dashboard_added = false;
      if (this.layout.tabs.length) {
        this.layout.tabs.every((tab) => {
          if (tab.df.show_dashboard) {
            tab.wrapper.prepend(dashboard_parent);
            dashboard_added = true;
            return false;
          }
          return true;
        });
        if (!dashboard_added) {
          this.layout.tabs[0].wrapper.prepend(dashboard_parent);
        }
      } else {
        this.layout.wrapper.find(".form-page").prepend(dashboard_parent);
      }
      this.dashboard = new frappe.ui.form.Dashboard(dashboard_parent, this);
      this.tour = new frappe.ui.form.FormTour({
        frm: this
      });
      this.states = new frappe.ui.form.States({
        frm: this
      });
    }
    watch_model_updates() {
      let me2 = this;
      frappe.model.on(
        me2.doctype,
        "*",
        function(fieldname, value, doc, skip_dirty_trigger = false) {
          if (doc.name == me2.docname) {
            if (!skip_dirty_trigger) {
              me2.dirty();
            }
            let field = me2.fields_dict[fieldname];
            field && field.refresh(fieldname);
            field && ["Link", "Dynamic Link"].includes(field.df.fieldtype) && field.validate && field.validate(value);
            me2.layout.refresh_dependency();
            me2.layout.refresh_sections();
            return me2.script_manager.trigger(fieldname, doc.doctype, doc.name);
          }
        }
      );
      let table_fields = frappe.get_children("DocType", me2.doctype, "fields", {
        fieldtype: ["in", frappe.model.table_fields]
      });
      $.each(table_fields, function(i, df) {
        frappe.model.on(df.options, "*", function(fieldname, value, doc) {
          if (doc.parent == me2.docname && doc.parentfield === df.fieldname) {
            me2.dirty();
            me2.fields_dict[df.fieldname].grid.set_value(fieldname, value, doc);
            return me2.script_manager.trigger(fieldname, doc.doctype, doc.name);
          }
        });
      });
    }
    setup_notify_on_rename() {
      $(document).on("rename", (ev, dt2, old_name, new_name) => {
        if (dt2 == this.doctype) {
          this.rename_notify(dt2, old_name, new_name);
        }
      });
    }
    setup_file_drop() {
      let me2 = this;
      this.$wrapper.on("dragenter dragover", false).on("drop", function(e) {
        let { dataTransfer } = e.originalEvent;
        if (!(dataTransfer && dataTransfer.files && dataTransfer.files.length > 0)) {
          return;
        }
        e.stopPropagation();
        e.preventDefault();
        if (me2.doc.__islocal) {
          frappe.msgprint(__("Please save before attaching."));
          throw "attach error";
        }
        new frappe.ui.FileUploader({
          doctype: me2.doctype,
          docname: me2.docname,
          frm: me2,
          files: dataTransfer.files,
          folder: "Home/Attachments",
          on_success(file_doc) {
            me2.attachments.attachment_uploaded(file_doc);
          }
        });
      });
    }
    setup_image_autocompletions_in_markdown() {
      this.fields.map((field) => {
        if (field.df.fieldtype === "Markdown Editor") {
          this.set_df_property(field.df.fieldname, "autocompletions", () => {
            let attachments = this.attachments.get_attachments();
            return attachments.filter((file) => frappe.utils.is_image_file(file.file_url)).map((file) => ({
              caption: `image: ${file.file_name}`,
              value: `![](${file.file_url})`,
              meta: "image"
            }));
          });
        }
      });
    }
    refresh(docname) {
      let switched = docname ? true : false;
      removeEventListener("beforeunload", this.beforeUnloadListener, { capture: true });
      if (docname) {
        this.switch_doc(docname);
      }
      cur_frm = this;
      this.undo_manager.erase_history();
      if (!this.docname) {
        return;
      }
      this.save_disabled = false;
      this.doc = frappe.get_doc(this.doctype, this.docname);
      this.fetch_permissions();
      if (!this.has_read_permission()) {
        frappe.show_not_permitted(`${__(this.doctype)} ${__(cstr(this.docname))}`);
        return;
      }
      for (const table of this.grids) {
        table.grid.refresh();
      }
      this.read_only = frappe.workflow.is_read_only(this.doctype, this.docname);
      if (this.read_only) {
        this.set_read_only(true);
        frappe.show_alert(__("This form is not editable due to a Workflow."));
      }
      if (!this.opendocs[this.docname]) {
        this.check_doctype_conflict(this.docname);
      } else if (this.check_reload()) {
        return;
      }
      if (!this.setup_done) {
        this.setup();
      }
      this.trigger_onload(switched);
      if (switched) {
        if (this.show_print_first && this.doc.docstatus === 1) {
          this.print_doc();
        }
      }
      this.$wrapper.removeClass("validated-form").toggleClass("editable-form", this.doc.docstatus === 0).toggleClass("submitted-form", this.doc.docstatus === 1).toggleClass("cancelled-form", this.doc.docstatus === 2);
      this.show_conflict_message();
      if (frappe.boot.read_only) {
        this.disable_form();
      }
    }
    setup_doctype_actions() {
      if (this.meta.actions) {
        for (let action of this.meta.actions) {
          frappe.ui.form.on(this.doctype, "refresh", () => {
            if (!this.is_new()) {
              if (!action.hidden) {
                this.add_custom_button(
                  action.label,
                  () => {
                    this.execute_action(action);
                  },
                  action.group
                );
              }
            }
          });
        }
      }
    }
    execute_action(action) {
      if (typeof action === "string") {
        for (let _action of this.meta.actions) {
          if (_action.label === action) {
            action = _action;
            break;
          }
        }
        if (typeof action === "string") {
          frappe.throw(`Action ${action} not found`);
        }
      }
      if (action.action_type === "Server Action") {
        return frappe.xcall(action.action, { doc: this.doc }).then((doc) => {
          if (doc.doctype) {
            frappe.model.sync(doc);
            this.refresh();
          }
          frappe.msgprint({
            message: __("{} Complete", [action.label]),
            alert: true
          });
        });
      } else if (action.action_type === "Route") {
        return frappe.set_route(action.action);
      }
    }
    switch_doc(docname) {
      for (const grid_obj of this.grids) {
        grid_obj.grid.visible_columns = null;
        grid_obj.grid.grid_pagination.go_to_page(1, true);
      }
      frappe.ui.form.close_grid_form();
      this.viewers && this.viewers.parent.empty();
      this.docname = docname;
      this.setup_docinfo_change_listener();
    }
    check_reload() {
      if (this.doc && !this.doc.__unsaved && this.doc.__last_sync_on && new Date() - this.doc.__last_sync_on > this.refresh_if_stale_for * 1e3) {
        this.debounced_reload_doc();
        return true;
      }
    }
    trigger_onload(switched) {
      this.cscript.is_onload = false;
      if (this.opendocs[this.docname]) {
        this.render_form(switched);
        if (this.doc.localname) {
          delete this.doc.localname;
          $(document).trigger("form-rename", [this]);
        }
      } else {
        let me2 = this;
        this.cscript.is_onload = true;
        this.initialize_new_doc();
        $(document).trigger("form-load", [this]);
        $(this.page.wrapper).on("hide", function() {
          $(document).trigger("form-unload", [me2]);
        });
      }
    }
    initialize_new_doc() {
      let me2 = this;
      this.script_manager.trigger("before_load", this.doctype, this.docname).then(() => {
        me2.script_manager.trigger("onload");
        me2.opendocs[me2.docname] = true;
        me2.render_form();
        frappe.after_ajax(function() {
          me2.trigger_link_fields();
        });
        frappe.breadcrumbs.add(me2.meta.module, me2.doctype);
      });
      if (this.meta.track_seen) {
        $(`.list-id[data-name="${me2.docname}"]`).addClass("seen");
      }
    }
    render_form(switched) {
      if (this.meta.istable) {
        this.refresh_header(switched);
      } else {
        this.layout.doc = this.doc;
        this.layout.attach_doc_and_docfields();
        if (frappe.boot.desk_settings.form_sidebar) {
          this.sidebar = new frappe.ui.form.Sidebar({
            frm: this,
            page: this.page
          });
          this.sidebar.make();
        }
        this.layout.show_message();
        frappe.run_serially([
          () => this.refresh_header(switched),
          () => $(document).trigger("form-refresh", [this]),
          () => this.refresh_fields(),
          () => this.script_manager.trigger("refresh"),
          () => {
            if (this.cscript.is_onload) {
              this.onload_post_render();
              return this.script_manager.trigger("onload_post_render");
            }
          },
          () => this.cscript.is_onload && this.is_new() && this.focus_on_first_input(),
          () => this.run_after_load_hook(),
          () => this.dashboard.after_refresh()
        ]);
      }
      this.$wrapper.trigger("render_complete");
      frappe.after_ajax(() => {
        $(document).ready(() => {
          this.scroll_to_element();
        });
      });
    }
    onload_post_render() {
      this.setup_image_autocompletions_in_markdown();
    }
    focus_on_first_input() {
      let first = this.form_wrapper.find(".form-layout :input:visible:first");
      if (!in_list(["Date", "Datetime"], first.attr("data-fieldtype"))) {
        first.focus();
      }
    }
    run_after_load_hook() {
      if (frappe.route_hooks.after_load) {
        let route_callback = frappe.route_hooks.after_load;
        delete frappe.route_hooks.after_load;
        route_callback(this);
      }
    }
    refresh_fields() {
      this.layout.refresh(this.doc);
      this.layout.primary_button = this.$wrapper.find(".btn-primary");
    }
    cleanup_refresh() {
      if (this.fields_dict.amended_from) {
        if (this.doc.amended_from) {
          unhide_field("amended_from");
          if (this.fields_dict.amendment_date) {
            unhide_field("amendment_date");
          }
        } else {
          hide_field("amended_from");
          if (this.fields_dict.amendment_date) {
            hide_field("amendment_date");
          }
        }
      }
      if (this.fields_dict.trash_reason) {
        if (this.doc.trash_reason && this.doc.docstatus == 2) {
          unhide_field("trash_reason");
        } else {
          hide_field("trash_reason");
        }
      }
      if (this.meta.autoname && this.meta.autoname.substr(0, 6) == "field:" && !this.doc.__islocal) {
        let fn = this.meta.autoname.substr(6);
        if (this.doc[fn]) {
          this.toggle_display(fn, false);
        }
      }
      if (this.meta.autoname == "naming_series:" && !this.doc.__islocal) {
        this.toggle_display("naming_series", false);
      }
    }
    refresh_header(switched) {
      if (this.toolbar) {
        if (switched) {
          this.toolbar.current_status = void 0;
        }
        this.toolbar.refresh();
      }
      this.dashboard.refresh();
      frappe.breadcrumbs.update();
      this.show_submit_message();
      this.clear_custom_buttons();
      this.show_web_link();
    }
    save_or_update() {
      if (this.save_disabled) {
        return;
      }
      if (this.doc.docstatus === 0) {
        this.save();
      } else if (this.doc.docstatus === 1 && this.doc.__unsaved) {
        this.save("Update");
      }
    }
    save(save_action, callback, btn, on_error) {
      let me2 = this;
      return new Promise((resolve, reject) => {
        btn && $(btn).prop("disabled", true);
        frappe.ui.form.close_grid_form();
        me2.validate_and_save(save_action, callback, btn, on_error, resolve, reject);
      }).then(() => {
        me2.show_success_action();
      }).catch((e) => {
        console.error(e);
      });
    }
    validate_and_save(save_action, callback, btn, on_error, resolve, reject) {
      let me2 = this;
      if (!save_action) {
        save_action = "Save";
      }
      this.validate_form_action(save_action, resolve);
      let after_save = function(r) {
        history.replaceState(null, null, " ");
        if (!r.exc) {
          if (["Save", "Update", "Amend"].indexOf(save_action) !== -1) {
            frappe.utils.play_sound("click");
          }
          me2.script_manager.trigger("after_save");
          if (frappe.route_hooks.after_save) {
            let route_callback = frappe.route_hooks.after_save;
            delete frappe.route_hooks.after_save;
            route_callback(me2);
          }
          if (me2.comment_box) {
            me2.comment_box.submit();
          }
          me2.refresh();
        } else if (on_error) {
          on_error();
          reject();
        }
        callback && callback(r);
        resolve();
      };
      let fail = (e) => {
        if (e) {
          console.error(e);
        }
        btn && $(btn).prop("disabled", false);
        if (on_error) {
          on_error();
          reject();
        }
      };
      if (save_action == "Update") {
        frappe.ui.form.save(me2, save_action, after_save, btn);
      } else {
        frappe.validated = true;
        frappe.run_serially([
          () => this.script_manager.trigger("validate"),
          () => this.script_manager.trigger("before_save"),
          () => {
            if (!frappe.validated) {
              fail();
              return;
            }
            frappe.ui.form.save(me2, save_action, after_save, btn);
          }
        ]).catch(fail);
      }
    }
    savesubmit(btn, callback, on_error) {
      let me2 = this;
      return new Promise((resolve) => {
        this.validate_form_action("Submit");
        frappe.confirm(
          __("Permanently Submit {0}?", [this.docname]),
          function() {
            frappe.validated = true;
            me2.script_manager.trigger("before_submit").then(function() {
              if (!frappe.validated) {
                return me2.handle_save_fail(btn, on_error);
              }
              me2.save(
                "Submit",
                function(r) {
                  if (r.exc) {
                    me2.handle_save_fail(btn, on_error);
                  } else {
                    frappe.utils.play_sound("submit");
                    callback && callback();
                    me2.script_manager.trigger("on_submit").then(() => resolve(me2)).then(() => {
                      if (frappe.route_hooks.after_submit) {
                        let route_callback = frappe.route_hooks.after_submit;
                        delete frappe.route_hooks.after_submit;
                        route_callback(me2);
                      }
                    });
                  }
                },
                btn,
                () => me2.handle_save_fail(btn, on_error),
                resolve
              );
            });
          },
          () => me2.handle_save_fail(btn, on_error)
        );
      });
    }
    savecancel(btn, callback, on_error) {
      const me2 = this;
      this.validate_form_action("Cancel");
      me2.ignore_doctypes_on_cancel_all = me2.ignore_doctypes_on_cancel_all || [];
      frappe.call({
        method: "frappe.desk.form.linked_with.get_submitted_linked_docs",
        args: {
          doctype: me2.doc.doctype,
          name: me2.doc.name
        },
        freeze: true
      }).then((r) => {
        if (!r.exc) {
          let doctypes_to_cancel = (r.message.docs || []).map((value) => value.doctype).filter((value) => !me2.ignore_doctypes_on_cancel_all.includes(value));
          if (doctypes_to_cancel.length) {
            return me2._cancel_all(r, btn, callback, on_error);
          }
        }
        return me2._cancel(btn, callback, on_error, false);
      });
    }
    _cancel_all(r, btn, callback, on_error) {
      const me2 = this;
      let links_text = "";
      let links = r.message.docs;
      const doctypes = Array.from(new Set(links.map((link) => link.doctype)));
      me2.ignore_doctypes_on_cancel_all = me2.ignore_doctypes_on_cancel_all || [];
      for (let doctype of doctypes) {
        if (!me2.ignore_doctypes_on_cancel_all.includes(doctype)) {
          let docnames = links.filter((link) => link.doctype == doctype).map((link) => frappe.utils.get_form_link(link.doctype, link.name, true)).join(", ");
          links_text += `<li><strong>${__(doctype)}</strong>: ${docnames}</li>`;
        }
      }
      links_text = `<ul>${links_text}</ul>`;
      let confirm_message = __("{0} {1} is linked with the following submitted documents: {2}", [
        __(me2.doc.doctype).bold(),
        me2.doc.name,
        links_text
      ]);
      let can_cancel = links.every((link) => frappe.model.can_cancel(link.doctype));
      if (can_cancel) {
        confirm_message += __("Do you want to cancel all linked documents?");
      } else {
        confirm_message += __("You do not have permissions to cancel all linked documents.");
      }
      let d2 = new frappe.ui.Dialog(
        {
          title: __("Cancel All Documents"),
          fields: [
            {
              fieldtype: "HTML",
              options: `<p class="frappe-confirm-message">${confirm_message}</p>`
            }
          ]
        },
        () => me2.handle_save_fail(btn, on_error)
      );
      if (can_cancel) {
        d2.set_primary_action(__("Cancel All"), () => {
          d2.hide();
          frappe.call({
            method: "frappe.desk.form.linked_with.cancel_all_linked_docs",
            args: {
              docs: links,
              ignore_doctypes_on_cancel_all: me2.ignore_doctypes_on_cancel_all || []
            },
            freeze: true,
            callback: (resp) => {
              if (!resp.exc) {
                me2.reload_doc();
                me2._cancel(btn, callback, on_error, true);
              }
            }
          });
        });
      }
      d2.show();
    }
    _cancel(btn, callback, on_error, skip_confirm) {
      const me2 = this;
      const cancel_doc = () => {
        frappe.validated = true;
        me2.script_manager.trigger("before_cancel").then(() => {
          if (!frappe.validated) {
            return me2.handle_save_fail(btn, on_error);
          }
          let after_cancel = function(r) {
            if (r.exc) {
              me2.handle_save_fail(btn, on_error);
            } else {
              frappe.utils.play_sound("cancel");
              me2.refresh();
              callback && callback();
              me2.script_manager.trigger("after_cancel");
            }
          };
          frappe.ui.form.save(me2, "cancel", after_cancel, btn);
        });
      };
      if (skip_confirm) {
        cancel_doc();
      } else {
        frappe.confirm(
          __("Permanently Cancel {0}?", [this.docname]),
          cancel_doc,
          me2.handle_save_fail(btn, on_error)
        );
      }
    }
    savetrash() {
      this.validate_form_action("Delete");
      frappe.model.delete_doc(this.doctype, this.docname, () => {
        this.__deleted();
      });
    }
    amend_doc() {
      if (!this.fields_dict.amended_from) {
        frappe.msgprint(__('"amended_from" field must be present to do an amendment.'));
        return;
      }
      frappe.xcall("frappe.client.is_document_amended", {
        doctype: this.doc.doctype,
        docname: this.doc.name
      }).then((is_amended) => {
        if (is_amended) {
          frappe.throw(
            __("This document is already amended, you cannot ammend it again")
          );
        }
        this.validate_form_action("Amend");
        let me2 = this;
        let fn = function(newdoc) {
          newdoc.amended_from = me2.docname;
          if (me2.fields_dict && me2.fields_dict.amendment_date) {
            newdoc.amendment_date = frappe.datetime.obj_to_str(new Date());
          }
        };
        this.copy_doc(fn, 1);
        frappe.utils.play_sound("click");
      });
    }
    validate_form_action(action, resolve) {
      let perm_to_check = this.action_perm_type_map[action];
      let allowed_for_workflow = false;
      let perms = frappe.perm.get_perm(this.doc.doctype)[0];
      if (frappe.workflow.is_read_only(this.doctype, this.docname) && (perms.write || perms.create || perms.submit || perms.cancel) || !frappe.workflow.is_read_only(this.doctype, this.docname)) {
        allowed_for_workflow = true;
      }
      if (!this.perm[0][perm_to_check] && !allowed_for_workflow) {
        if (resolve) {
          resolve();
        }
        frappe.throw(
          __(
            "No permission to '{0}' {1}",
            [__(action), __(this.doc.doctype)],
            "{0} = verb, {1} = object"
          )
        );
      }
    }
    enable_save() {
      this.save_disabled = false;
      this.toolbar.set_primary_action();
    }
    disable_save(set_dirty = false) {
      this.save_disabled = true;
      this.toolbar.current_status = null;
      this.set_dirty = set_dirty;
      this.page.clear_primary_action();
    }
    disable_form() {
      this.set_read_only();
      for (const field of this.fields) {
        this.set_df_property(field.df.fieldname, "read_only", "1");
      }
      this.disable_save();
    }
    handle_save_fail(btn, on_error) {
      $(btn).prop("disabled", false);
      if (on_error) {
        on_error();
      }
    }
    trigger_link_fields() {
      if (this.is_new() && this.doc.__run_link_triggers) {
        $.each(this.fields_dict, function(fieldname, field) {
          if (field.df.fieldtype == "Link" && this.doc[fieldname]) {
            field.set_value(this.doc[fieldname], true);
          }
        });
        delete this.doc.__run_link_triggers;
      }
    }
    show_conflict_message() {
      if (this.doc.__needs_refresh) {
        if (this.doc.__unsaved) {
          this.dashboard.clear_headline();
          this.dashboard.set_headline_alert(
            `${__("This form has been modified after you have loaded it")}<button class="btn btn-xs btn-primary pull-right" onclick="cur_frm.reload_doc()">${__("Refresh")}</button>`,
            "alert-warning"
          );
        } else {
          this.debounced_reload_doc();
        }
      }
    }
    show_submit_message() {
      if (this.meta.is_submittable && this.perm[0] && this.perm[0].submit && !this.is_dirty() && !this.is_new() && !frappe.model.has_workflow(this.doctype) && this.doc.docstatus === 0) {
        this.dashboard.add_comment(__("Submit this document to confirm"), "blue", true);
      }
    }
    show_web_link() {
      if (!this.doc.__islocal && this.doc.__onload && this.doc.__onload.is_website_generator) {
        this.web_link && this.web_link.remove();
        if (this.doc.__onload.published) {
          this.add_web_link(`/${this.doc.route}`);
        }
      }
    }
    add_web_link(path, label) {
      label = __(label) || __("See on Website");
      this.web_link = this.sidebar.add_user_action(__(label), function() {
      }).attr("href", path || this.doc.route).attr("target", "_blank");
    }
    fetch_permissions() {
      let dt2 = this.parent_doctype ? this.parent_doctype : this.doctype;
      this.perm = frappe.perm.get_perm(dt2, this.doc);
    }
    has_read_permission() {
      if (!this.perm[0].read) {
        return 0;
      }
      return 1;
    }
    check_doctype_conflict(docname) {
      if (this.doctype == "DocType" && docname == "DocType") {
        frappe.msgprint(__("Allowing DocType, DocType. Be careful!"));
      } else if (this.doctype == "DocType") {
        if (frappe.views.formview[docname] || frappe.pages[`List/${docname}`]) {
          window.location.reload();
        }
      } else if (frappe.views.formview.DocType && frappe.views.formview.DocType.frm.opendocs[this.doctype]) {
        window.location.reload();
      }
    }
    rename_notify(dt2, old, name) {
      if (this.meta.istable) {
        return;
      }
      if (this.docname == old) {
        this.docname = name;
      } else {
        return;
      }
      if (this && this.opendocs[old] && frappe.meta.docfield_copy[dt2]) {
        frappe.meta.docfield_copy[dt2][name] = frappe.meta.docfield_copy[dt2][old];
        delete frappe.meta.docfield_copy[dt2][old];
      }
      delete this.opendocs[old];
      this.opendocs[name] = true;
    }
    print_doc() {
      frappe.route_options = {
        frm: this
      };
      frappe.set_route("print", this.doctype, this.doc.name);
    }
    navigate_records(prev) {
      let filters, sort_field, sort_order;
      let list_view = frappe.get_list_view(this.doctype);
      if (list_view) {
        filters = list_view.get_filters_for_args();
        sort_field = list_view.sort_by;
        sort_order = list_view.sort_order;
      } else {
        let list_settings = frappe.get_user_settings(this.doctype).List;
        if (list_settings) {
          filters = list_settings.filters;
          sort_field = list_settings.sort_by;
          sort_order = list_settings.sort_order;
        }
      }
      let args = {
        doctype: this.doctype,
        value: this.docname,
        filters,
        sort_order,
        sort_field,
        prev
      };
      frappe.call("frappe.desk.form.utils.get_next", args).then((r) => {
        if (r.message) {
          frappe.set_route("Form", this.doctype, r.message);
          this.focus_on_first_input();
        }
      });
    }
    rename_doc() {
      frappe.model.rename_doc(this.doctype, this.docname, () => this.refresh_header());
    }
    share_doc() {
      this.shared.show();
    }
    email_doc(message) {
      new frappe.views.CommunicationComposer({
        doc: this.doc,
        frm: this,
        subject: `${__(this.meta.name)}: ${this.docname}`,
        recipients: this.doc.email || this.doc.email_id || this.doc.contact_email,
        attach_document_print: true,
        message
      });
    }
    copy_doc(onload, from_amend) {
      this.validate_form_action("Create");
      let newdoc = frappe.model.copy_doc(this.doc, from_amend);
      newdoc.idx = null;
      newdoc.__run_link_triggers = false;
      if (onload) {
        onload(newdoc);
      }
      frappe.set_route("Form", newdoc.doctype, newdoc.name);
    }
    reload_doc() {
      this.check_doctype_conflict(this.docname);
      if (!this.doc.__islocal) {
        frappe.model.remove_from_locals(this.doctype, this.docname);
        return frappe.model.with_doc(this.doctype, this.docname, () => {
          this.refresh();
        });
      }
    }
    refresh_field(fname) {
      if (this.fields_dict[fname] && this.fields_dict[fname].refresh) {
        this.fields_dict[fname].refresh();
        this.layout.refresh_dependency();
        this.layout.refresh_sections();
      }
    }
    add_fetch(link_field, source_field, target_field, target_doctype) {
      if (!target_doctype) {
        target_doctype = "*";
      }
      this.fetch_dict.setDefault(target_doctype, {}).setDefault(link_field, {})[target_field] = source_field;
    }
    has_perm(ptype) {
      return frappe.perm.has_perm(this.doctype, 0, ptype, this.doc);
    }
    dirty() {
      this.doc.__unsaved = 1;
      this.$wrapper.trigger("dirty");
      if (!frappe.boot.developer_mode) {
        addEventListener("beforeunload", this.beforeUnloadListener, { capture: true });
      }
    }
    get_docinfo() {
      return frappe.model.docinfo[this.doctype][this.docname];
    }
    is_dirty() {
      return Boolean(this.doc.__unsaved);
    }
    is_new() {
      return this.doc.__islocal;
    }
    get_perm(permlevel, access_type) {
      return this.perm[permlevel] ? this.perm[permlevel][access_type] : null;
    }
    set_intro(txt, color) {
      this.dashboard.set_headline_alert(txt, color);
    }
    set_footnote(txt) {
      this.footnote_area = frappe.utils.set_footnote(this.footnote_area, this.body, txt);
    }
    add_custom_button(label, fn, group) {
      if (group && group.indexOf("fa fa-") !== -1) {
        group = null;
      }
      let btn = this.page.add_inner_button(label, fn, group);
      if (btn) {
        let menu_item_label = group ? `${group} > ${label}` : label;
        let menu_item = this.page.add_menu_item(menu_item_label, fn, false);
        menu_item.parent().addClass("hidden-xl");
        this.custom_buttons[label] = btn;
      }
      return btn;
    }
    change_custom_button_type(label, group, type) {
      this.page.change_inner_button_type(label, group, type);
    }
    clear_custom_buttons() {
      this.page.clear_inner_toolbar();
      this.page.clear_user_actions();
      this.custom_buttons = {};
    }
    remove_custom_button(label, group) {
      this.page.remove_inner_button(label, group);
    }
    scroll_to_element() {
      if (frappe.route_options && frappe.route_options.scroll_to) {
        let { scroll_to } = frappe.route_options;
        delete frappe.route_options.scroll_to;
        let selector = [];
        for (let key2 in scroll_to) {
          let value = scroll_to[key2];
          selector.push(repl('[data-%(key)s="%(value)s"]', { key: key2, value }));
        }
        selector = $(selector.join(" "));
        if (selector.length) {
          frappe.utils.scroll_to(selector);
        }
      } else if (window.location.hash) {
        if ($(window.location.hash).length) {
          frappe.utils.scroll_to(window.location.hash, true, 200, null, null, true);
        } else {
          this.scroll_to_field(window.location.hash.replace("#", "")) && history.replaceState(null, null, " ");
        }
      }
    }
    show_success_action() {
      const route = frappe.get_route();
      if (route[0] !== "Form") {
        return;
      }
      if (this.meta.is_submittable && this.doc.docstatus !== 1) {
        return;
      }
      const success_action = new frappe.ui.form.SuccessAction(this);
      success_action.show();
    }
    get_doc() {
      return locals[this.doctype][this.docname];
    }
    set_currency_labels(fields_list, currency, parentfield) {
      if (!currency) {
        return;
      }
      let me2 = this;
      let doctype = parentfield ? this.fields_dict[parentfield].grid.doctype : this.doc.doctype;
      let field_label_map = {};
      let grid_field_label_map = {};
      $.each(fields_list, function(i, fname) {
        let docfield = frappe.meta.docfield_map[doctype][fname];
        if (docfield) {
          var label = __(docfield.label || "").replace(/\([^\)]*\)/g, "");
          if (parentfield) {
            grid_field_label_map[`${doctype}-${fname}`] = `${label.trim()} (${__(currency)})`;
          } else {
            field_label_map[fname] = `${label.trim()} (${currency})`;
          }
        }
      });
      $.each(field_label_map, function(fname, label) {
        me2.fields_dict[fname].set_label(label);
      });
      $.each(grid_field_label_map, function(fname, label) {
        fname = fname.split("-");
        me2.fields_dict[parentfield].grid.update_docfield_property(fname[1], "label", label);
      });
    }
    field_map(fnames, fn) {
      if (typeof fnames === "string") {
        if (fnames == "*") {
          fnames = Object.keys(this.fields_dict);
        } else {
          fnames = [fnames];
        }
      }
      for (let i = 0, l = fnames.length; i < l; i++) {
        let fieldname = fnames[i];
        let field = frappe.meta.get_docfield(this.doctype, fieldname, this.docname);
        if (field) {
          fn(field);
          this.refresh_field(fieldname);
        }
      }
    }
    get_docfield(fieldname1, fieldname2) {
      if (fieldname2) {
        let doctype = this.get_docfield(fieldname1).options;
        return frappe.meta.get_docfield(doctype, fieldname2, this.docname);
      }
      return frappe.meta.get_docfield(this.doctype, fieldname1, this.docname);
    }
    set_df_property(fieldname, property, value, docname, table_field, table_row_name = null) {
      let df;
      if (!docname || !table_field) {
        df = this.get_docfield(fieldname);
      } else {
        const { grid } = this.fields_dict[fieldname];
        const filtered_fields = frappe.utils.filter_dict(grid.docfields, {
          fieldname: table_field
        });
        if (filtered_fields.length) {
          df = frappe.meta.get_docfield(
            filtered_fields[0].parent,
            table_field,
            table_row_name
          );
        }
      }
      if (df && df[property] != value) {
        df[property] = value;
        if (table_field && table_row_name) {
          if (this.fields_dict[fieldname].grid.grid_rows_by_docname[table_row_name]) {
            this.fields_dict[fieldname].grid.grid_rows_by_docname[table_row_name].refresh_field(fieldname);
          }
        } else {
          this.refresh_field(fieldname);
        }
      }
    }
    toggle_enable(fnames, enable) {
      this.field_map(fnames, function(field) {
        field.read_only = enable ? 0 : 1;
      });
    }
    toggle_reqd(fnames, mandatory) {
      this.field_map(fnames, function(field) {
        field.reqd = mandatory ? true : false;
      });
    }
    toggle_display(fnames, show) {
      this.field_map(fnames, function(field) {
        field.hidden = show ? 0 : 1;
      });
    }
    get_files() {
      return this.attachments ? frappe.utils.sort(this.attachments.get_attachments(), "file_name", "string") : [];
    }
    set_query(fieldname, opt1, opt2) {
      if (opt2) {
        this.fields_dict[opt1].grid.get_field(fieldname).get_query = opt2;
      } else {
        if (this.fields_dict[fieldname]) {
          this.fields_dict[fieldname].get_query = opt1;
        }
      }
    }
    clear_table(fieldname) {
      frappe.model.clear_table(this.doc, fieldname);
    }
    add_child(fieldname, values) {
      let doc = frappe.model.add_child(
        this.doc,
        frappe.meta.get_docfield(this.doctype, fieldname).options,
        fieldname
      );
      if (values) {
        let d2 = {};
        let unique_keys = ["idx", "name"];
        Object.keys(values).map((key2) => {
          if (!unique_keys.includes(key2)) {
            d2[key2] = values[key2];
          }
        });
        $.extend(doc, d2);
      }
      return doc;
    }
    set_value(field, value, if_missing, skip_dirty_trigger = false) {
      let me2 = this;
      let _set = function(f, v) {
        let fieldobj = me2.fields_dict[f];
        if (fieldobj) {
          if (!if_missing || !frappe.model.has_value(me2.doctype, me2.doc.name, f)) {
            if (frappe.model.table_fields.includes(fieldobj.df.fieldtype) && $.isArray(v)) {
              frappe.model.clear_table(me2.doc, fieldobj.df.fieldname);
              const standard_fields = [
                ...frappe.model.std_fields_list,
                ...frappe.model.child_table_field_list
              ];
              for (const [idx, d2] of v.entries()) {
                let child = frappe.model.add_child(
                  me2.doc,
                  fieldobj.df.options,
                  fieldobj.df.fieldname,
                  idx + 1
                );
                let doc_copy = __spreadValues({}, d2);
                for (const field2 of standard_fields) {
                  delete doc_copy[field2];
                }
                $.extend(child, doc_copy);
              }
              me2.refresh_field(f);
              return Promise.resolve();
            }
            return frappe.model.set_value(
              me2.doctype,
              me2.doc.name,
              f,
              v,
              me2.fieldtype,
              skip_dirty_trigger
            );
          }
        } else {
          frappe.msgprint(__("Field {0} not found.", [f]));
          throw "frm.set_value";
        }
      };
      if (typeof field === "string") {
        return _set(field, value);
      } else if ($.isPlainObject(field)) {
        let tasks = [];
        for (let f in field) {
          let v = field[f];
          if (me2.get_field(f)) {
            tasks.push(() => _set(f, v));
          }
        }
        return frappe.run_serially(tasks);
      }
    }
    call(opts, args, callback) {
      let me2 = this;
      if (typeof opts === "string") {
        opts = {
          method: opts,
          doc: this.doc,
          args,
          callback
        };
      }
      if (opts.doc) {
        opts.original_callback = opts.callback;
        opts.callback = function(r) {
          if (!r.exc) {
            me2.refresh_fields();
          }
          opts.original_callback && opts.original_callback(r);
        };
      } else {
        if (opts.method.indexOf(".") === -1) {
          opts.method = `${frappe.model.get_server_module_name(me2.doctype)}.${opts.method}`;
        }
        opts.original_callback = opts.callback;
        opts.callback = function(r) {
          if ($.isPlainObject(r.message)) {
            if (opts.child) {
              opts.child = locals[opts.child.doctype][opts.child.name];
              let std_field_list = ["doctype"].concat(frappe.model.std_fields_list).concat(frappe.model.child_table_field_list);
              for (let key2 in r.message) {
                if (std_field_list.indexOf(key2) === -1) {
                  opts.child[key2] = r.message[key2];
                }
              }
              me2.fields_dict[opts.child.parentfield].refresh();
            } else {
              me2.set_value(r.message);
            }
          }
          opts.original_callback && opts.original_callback(r);
        };
      }
      return frappe.call(opts);
    }
    get_field(field) {
      return this.fields_dict[field];
    }
    set_read_only() {
      const docperms = frappe.perm.get_perm(this.doc.doctype);
      this.perm = docperms.map((p) => ({
        read: p.read,
        cancel: p.cancel,
        share: p.share,
        print: p.print,
        email: p.email
      }));
    }
    trigger(event, doctype, docname) {
      return this.script_manager.trigger(event, doctype, docname);
    }
    get_formatted(fieldname) {
      return frappe.format(
        this.doc[fieldname],
        frappe.meta.get_docfield(this.doctype, fieldname, this.docname),
        { no_icon: true },
        this.doc
      );
    }
    open_grid_row() {
      return frappe.ui.form.get_open_grid_form();
    }
    get_title() {
      if (this.meta.title_field) {
        return this.doc[this.meta.title_field];
      }
      return String(this.doc.name);
    }
    get_selected() {
      let selected = {}, me2 = this;
      for (const df of frappe.meta.get_table_fields(this.doctype)) {
        let _selected = [];
        if (me2.fields_dict[df.fieldname].grid) {
          _selected = me2.fields_dict[df.fieldname].grid.get_selected();
        }
        if (_selected.length) {
          selected[df.fieldname] = _selected;
        }
      }
      return selected;
    }
    set_indicator_formatter(fieldname, get_color, get_text) {
      let doctype;
      if (frappe.meta.docfield_map[this.doctype][fieldname]) {
        doctype = this.doctype;
      } else {
        frappe.meta.get_table_fields(this.doctype).every(function(df) {
          if (frappe.meta.docfield_map[df.options][fieldname]) {
            doctype = df.options;
            return false;
          }
          return true;
        });
      }
      frappe.meta.docfield_map[doctype][fieldname].formatter = function(value, df, options, doc) {
        if (value) {
          let label;
          if (get_text) {
            label = get_text(doc);
          } else if (frappe.form.link_formatters[df.options]) {
            label = frappe.form.link_formatters[df.options](value, doc);
          } else {
            label = value;
          }
          const escaped_name = encodeURIComponent(value);
          return `
						<a class="indicator ${get_color(doc || {})}"
							href="/app/${frappe.router.slug(df.options)}/${escaped_name}"
							data-doctype="${df.options}"
							data-name="${value}">
							${label}
						</a>
					`;
        }
        return "";
      };
    }
    can_create(doctype) {
      if (!frappe.model.can_create(doctype)) {
        return false;
      }
      if (this.custom_make_buttons && this.custom_make_buttons[doctype]) {
        const key2 = __(this.custom_make_buttons[doctype]);
        return Boolean(this.custom_buttons[key2]);
      }
      if (this.can_make_methods && this.can_make_methods[doctype]) {
        return this.can_make_methods[doctype](this);
      }
      if (this.meta.is_submittable && !this.doc.docstatus == 1) {
        return false;
      }
      return true;
    }
    make_new(doctype) {
      let me2 = this;
      if (this.make_methods && this.make_methods[doctype]) {
        return this.make_methods[doctype](this);
      } else if (this.custom_make_buttons && this.custom_make_buttons[doctype]) {
        this.custom_buttons[__(this.custom_make_buttons[doctype])].trigger("click");
      } else {
        frappe.model.with_doctype(doctype, function() {
          let new_doc = frappe.model.get_new_doc(doctype, null, null, true);
          me2.set_link_field(doctype, new_doc);
          frappe.ui.form.make_quick_entry(doctype, null, null, new_doc);
        });
      }
    }
    set_link_field(doctype, new_doc) {
      let me2 = this;
      for (const df of frappe.get_meta(doctype).fields) {
        if (df.fieldtype === "Link" && df.options === me2.doctype) {
          new_doc[df.fieldname] = me2.doc.name;
        } else if (["Link", "Dynamic Link"].includes(df.fieldtype) && me2.doc[df.fieldname]) {
          new_doc[df.fieldname] = me2.doc[df.fieldname];
        } else if (df.fieldtype === "Table" && df.options && df.reqd) {
          let row = new_doc[df.fieldname][0];
          me2.set_link_field(df.options, row);
        }
      }
    }
    update_in_all_rows(table_fieldname, fieldname, value) {
      if (value === void 0) {
        return;
      }
      for (const child of frappe.model.get_children(this.doc, table_fieldname).filter((child2) => !frappe.model.has_value(child2.doctype, child2.name, fieldname))) {
        frappe.model.set_value(child.doctype, child.name, fieldname, value);
      }
    }
    get_sum(table_fieldname, fieldname) {
      let sum = 0;
      for (let d2 of this.doc[table_fieldname] || []) {
        sum += d2[fieldname];
      }
      return sum;
    }
    scroll_to_field(fieldname, focus = true) {
      var _a;
      let field = this.get_field(fieldname);
      if (!field) {
        return;
      }
      let $el = field.$wrapper;
      if (field.tab && !field.tab.is_active()) {
        field.tab.set_active();
      }
      if ((_a = field.section) == null ? void 0 : _a.is_collapsed()) {
        field.section.collapse(false);
      }
      frappe.utils.scroll_to($el, true, 15);
      if (focus) {
        setTimeout(() => {
          $el.find("input, select, textarea").focus();
        }, 500);
      }
      let control_element = $el.closest(".frappe-control");
      control_element.addClass("highlight");
      setTimeout(() => {
        control_element.removeClass("highlight");
      }, 2e3);
      return true;
    }
    setup_docinfo_change_listener() {
      let { doctype } = this;
      let { docname } = this;
      if (this.doc && !this.is_new()) {
        frappe.socketio.doc_subscribe(doctype, docname);
      }
      frappe.realtime.off("docinfo_update");
      frappe.realtime.on("docinfo_update", ({ doc, key: key2, action = "update" }) => {
        if (!doc.reference_doctype || !doc.reference_name || doc.reference_doctype !== doctype || doc.reference_name !== docname) {
          return;
        }
        let doc_list = frappe.model.docinfo[doctype][docname][key2] || [];
        let docindex = doc_list.findIndex((old_doc) => old_doc.name === doc.name);
        if (action === "add") {
          frappe.model.docinfo[doctype][docname][key2].push(doc);
        }
        if (docindex > -1) {
          if (action === "update") {
            frappe.model.docinfo[doctype][docname][key2].splice(docindex, 1, doc);
          }
          if (action === "delete") {
            frappe.model.docinfo[doctype][docname][key2].splice(docindex, 1);
          }
        }
        if (!(["add", "update"].includes(action) && doc.doctype === "Comment" && doc.owner === frappe.session.user)) {
          this.timeline && this.timeline.refresh();
        }
      });
    }
    set_fields_as_options(fieldname, reference_doctype, filter_function, default_options = [], table_fieldname) {
      if (!reference_doctype) {
        return Promise.resolve();
      }
      let options = default_options || [];
      if (!filter_function) {
        filter_function = (f) => f;
      }
      return new Promise((resolve) => {
        frappe.model.with_doctype(reference_doctype, () => {
          frappe.get_meta(reference_doctype).fields.map((df) => {
            filter_function(df) && options.push({ label: df.label || df.fieldname, value: df.fieldname });
          });
          options && this.set_df_property(
            fieldname,
            "options",
            options,
            this.doc.name,
            table_fieldname
          );
          resolve(options);
        });
      });
    }
    set_active_tab(tab) {
      if (!this.active_tab_map) {
        this.active_tab_map = {};
      }
      this.active_tab_map[this.docname] = tab;
    }
    get_active_tab() {
      return this.active_tab_map && this.active_tab_map[this.docname];
    }
    get_involved_users() {
      let user_fields = this.meta.fields.filter((d2) => d2.fieldtype === "Link" && d2.options === "User").map((d2) => d2.fieldname);
      user_fields = [...user_fields, "owner", "modified_by"];
      let involved_users = user_fields.map((field) => this.doc[field]);
      const docinfo = this.get_docinfo();
      involved_users = involved_users.concat(
        docinfo.communications.map((d2) => d2.sender && d2.delivery_status === "sent"),
        docinfo.comments.map((d2) => d2.owner),
        docinfo.versions.map((d2) => d2.owner),
        docinfo.assignments.map((d2) => d2.owner)
      );
      return involved_users.uniqBy((u) => u).filter((user) => !["Administrator", frappe.session.user].includes(user)).filter(Boolean);
    }
  };
  var Form_default = Form;

  // guigu/public/js/FormDetail/loadDoc.ts
  async function loadDoc(doctype, name) {
    const doc = frappe.get_doc(doctype, name);
    if (doc && frappe.model.get_docinfo(doctype, name) && (doc.__islocal || frappe.model.is_fresh(doc))) {
      return true;
    }
    return new Promise((resolve) => {
      frappe.model.with_doc(doctype, name, (name2, r) => {
        if (r && r["403"]) {
          return resolve(false);
        }
        if (!(locals[doctype] && locals[doctype][name2])) {
          return resolve(false);
        }
        resolve(true);
      });
    });
  }

  // guigu/public/js/FormDetail/useStore.ts
  var import_vue16 = __require("vue");
  var import_pinia = __require("pinia");
  var useStore_default = (0, import_pinia.defineStore)("Guigu:GlobalView:FormDetail", () => {
    const currentTab = (0, import_vue16.shallowRef)("");
    return { currentTab };
  });

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Main.vue?type=script
  var Main_default = /* @__PURE__ */ (0, import_vue17.defineComponent)(__spreadProps(__spreadValues({}, { name: "FormDetail" }), {
    __name: "Main",
    props: {
      meta: { type: null, required: true },
      options: { type: Object, required: true },
      value: { type: null, required: true },
      name: { type: String, required: true },
      loading: { type: Boolean, required: false },
      isHideClose: { type: Boolean, required: false }
    },
    emits: ["refresh", "update:value"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      function hide() {
        emit("update:value");
      }
      const detailState = useStore_default();
      const currentTab = (0, import_vue18.computed)({
        get: () => detailState.currentTab,
        set: (s) => {
          detailState.currentTab = s;
        }
      });
      const single_column = (0, import_vue18.computed)(() => {
        var _a;
        return Boolean((_a = props.meta) == null ? void 0 : _a.hide_toolbar);
      });
      const open = (0, import_core.useStorage)(`mainView:FormDetail:sider:${props.meta.name}`, true);
      const tt2 = __;
      const root = (0, import_vue18.shallowRef)();
      let layout;
      const onUpdate = ({ doctype, name, modified }) => {
        if (doctype !== props.meta.name) {
          return;
        }
        if (name !== props.name) {
          return;
        }
        if (!layout) {
          return;
        }
        if (modified === layout.doc.modified) {
          return;
        }
        if (layout.is_dirty()) {
          layout.show_conflict_message();
        } else {
          layout.reload_doc();
        }
      };
      (0, import_vue18.onMounted)(() => {
        const body = root.value;
        if (!body) {
          return;
        }
        const doctype = props.meta.name;
        const { name } = props;
        loadDoc(doctype, name).then((r) => {
          if (!r) {
            return;
          }
          layout = new Form_default(doctype, name, body, hide, currentTab);
          layout.refresh(name);
        });
        frappe.realtime.on("doc_update", onUpdate);
      });
      (0, import_vue18.onUnmounted)(() => {
        frappe.realtime.off("doc_update", onUpdate);
      });
      const __returned__ = { props, emit, hide, detailState, currentTab, single_column, open, tt: tt2, root, get layout() {
        return layout;
      }, set layout(v) {
        layout = v;
      }, onUpdate, Header: Header_default3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  }));

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Main.vue?type=template
  var import_vue19 = __require("vue");
  var _hoisted_110 = { ref: "root" };
  var _hoisted_26 = { class: "container page-body" };
  var _hoisted_36 = /* @__PURE__ */ (0, import_vue19.createElementVNode)("div", { class: "page-toolbar hide" }, [
    /* @__PURE__ */ (0, import_vue19.createElementVNode)("div", { class: "container" })
  ], -1);
  var _hoisted_44 = { class: "page-wrapper" };
  var _hoisted_53 = { class: "page-content" };
  var _hoisted_63 = /* @__PURE__ */ (0, import_vue19.createElementVNode)("div", { class: "workflow-button-area btn-group pull-right hide" }, null, -1);
  var _hoisted_72 = /* @__PURE__ */ (0, import_vue19.createElementVNode)("div", { class: "clearfix" }, null, -1);
  var _hoisted_82 = { class: "row layout-main" };
  var _hoisted_92 = /* @__PURE__ */ (0, import_vue19.createStaticVNode)('<div class="col layout-main-section-wrapper"><div class="layout-main-section"><div><div class="std-form-layout"><div class="form-layout"><div class="form-message hidden"></div><div class="form-page"></div></div></div></div></div><div class="layout-footer hide"></div></div>', 1);
  var _hoisted_102 = ["hidden"];
  function render6(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue19.openBlock)(), (0, import_vue19.createElementBlock)("div", _hoisted_110, [
      (0, import_vue19.createVNode)($setup["Header"], {
        open: $setup.open,
        "onUpdate:open": _cache[0] || (_cache[0] = ($event) => $setup.open = $event),
        hasSider: !$setup.single_column,
        isHideClose: $props.isHideClose,
        onHide: $setup.hide
      }, null, 8, ["open", "hasSider", "isHideClose"]),
      (0, import_vue19.createElementVNode)("div", _hoisted_26, [
        _hoisted_36,
        (0, import_vue19.createElementVNode)("div", _hoisted_44, [
          (0, import_vue19.createElementVNode)("div", _hoisted_53, [
            _hoisted_63,
            _hoisted_72,
            (0, import_vue19.createElementVNode)("div", _hoisted_82, [
              _hoisted_92,
              !$setup.single_column ? ((0, import_vue19.openBlock)(), (0, import_vue19.createElementBlock)("div", {
                key: 0,
                hidden: !$setup.open,
                class: "col-lg-2 layout-side-section"
              }, null, 8, _hoisted_102)) : (0, import_vue19.createCommentVNode)("v-if", true)
            ])
          ])
        ])
      ])
    ], 512);
  }

  // guigu/public/js/FormDetail/Main.vue
  Main_default.render = render6;
  Main_default.__file = "guigu/public/js/FormDetail/Main.vue";
  var Main_default2 = Main_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/index.vue?type=script
  var FormDetail_default = /* @__PURE__ */ (0, import_vue20.defineComponent)(__spreadProps(__spreadValues({}, { name: "FormDetail:Root", inheritAttrs: false }), {
    __name: "index",
    props: {
      meta: { type: null, required: true },
      options: { type: Object, required: true },
      value: { type: null, required: false },
      loading: { type: Boolean, required: false },
      linkField: { type: String, required: false },
      isHideClose: { type: Boolean, required: false }
    },
    emits: ["refresh", "update:value"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      function refresh() {
        emit("refresh");
      }
      const doc = (0, import_vue21.computed)({
        get: () => props.value,
        set: (v) => emit("update:value", v)
      });
      let docMetaLoadingDoctype = "";
      let DocTypeLoadingId = 0;
      const linkField = (0, import_vue21.computed)(() => props.linkField);
      const docMetaLoading = (0, import_vue21.shallowRef)();
      const link = (0, import_vue21.computed)(() => getLink(doc.value, props.meta, linkField.value));
      const name = (0, import_vue21.computed)(() => {
        var _a, _b;
        return ((_a = link.value) == null ? void 0 : _a[1]) || ((_b = doc.value) == null ? void 0 : _b.name);
      });
      (0, import_vue21.watch)(() => {
        var _a;
        return (_a = link.value) == null ? void 0 : _a[0];
      }, (doctype) => {
        if (!doctype) {
          return;
        }
        if (doctype === docMetaLoadingDoctype) {
          return;
        }
        docMetaLoadingDoctype = doctype;
        docMetaLoading.value = void 0;
        DocTypeLoadingId++;
        const id = DocTypeLoadingId;
        (async () => {
          await new Promise((r) => frappe.model.with_doctype(doctype, r));
          const meta = frappe.get_doc("DocType", doctype);
          if (id !== DocTypeLoadingId) {
            return;
          }
          if (docMetaLoadingDoctype !== doctype) {
            return;
          }
          docMetaLoading.value = meta || void 0;
        })();
      }, { immediate: true });
      const docMeta = (0, import_vue21.computed)(() => {
        var _a;
        const doctype = (_a = link.value) == null ? void 0 : _a[0];
        if (!doctype) {
          return props.meta;
        }
        if (doctype !== docMetaLoadingDoctype) {
          return;
        }
        return docMetaLoading.value;
      });
      const __returned__ = { props, emit, refresh, doc, get docMetaLoadingDoctype() {
        return docMetaLoadingDoctype;
      }, set docMetaLoadingDoctype(v) {
        docMetaLoadingDoctype = v;
      }, get DocTypeLoadingId() {
        return DocTypeLoadingId;
      }, set DocTypeLoadingId(v) {
        DocTypeLoadingId = v;
      }, linkField, docMetaLoading, link, name, docMeta, Main: Main_default2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  }));

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/index.vue?type=template
  var import_vue22 = __require("vue");
  function render7(_ctx, _cache, $props, $setup, $data, $options) {
    return $props.value && $setup.docMeta && $setup.name ? ((0, import_vue22.openBlock)(), (0, import_vue22.createBlock)($setup["Main"], {
      key: `${$setup.docMeta.name}:${$props.value.name}`,
      meta: $setup.docMeta,
      options: $props.options,
      loading: $props.loading,
      name: $setup.name,
      isHideClose: $props.isHideClose,
      value: $setup.doc,
      "onUpdate:value": _cache[0] || (_cache[0] = ($event) => $setup.doc = $event),
      onRefresh: $setup.refresh
    }, null, 8, ["meta", "options", "loading", "name", "isHideClose", "value"])) : (0, import_vue22.createCommentVNode)("v-if", true);
  }

  // guigu/public/js/FormDetail/index.vue
  FormDetail_default.render = render7;
  FormDetail_default.__file = "guigu/public/js/FormDetail/index.vue";
  var FormDetail_default2 = FormDetail_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=script
  var Detail_default = /* @__PURE__ */ (0, import_vue23.defineComponent)({
    __name: "Detail",
    props: {
      doctype: { type: String, required: true },
      name: { type: String, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const meta = (0, import_vue24.shallowRef)();
      const detail = (0, import_vue24.ref)();
      const loading = (0, import_vue24.ref)(false);
      (0, import_vue24.watch)(() => props.doctype, () => {
        getMeta(props.doctype);
      }, { immediate: true });
      (0, import_vue24.watch)(() => props.name, () => {
        getDetail();
      }, { immediate: true });
      async function getDetail() {
        loading.value = true;
        if (!props.name) {
          detail.value = void 0;
          loading.value = false;
          return;
        }
        detail.value = await frappe.db.get_doc(props.doctype, props.name);
        loading.value = false;
      }
      async function getMeta(doctype) {
        if (!doctype) {
          return;
        }
        let local_meta = frappe.get_meta(doctype);
        if (local_meta) {
          local_meta.hide_toolbar = true;
          meta.value = local_meta;
          return;
        }
        await frappe.model.with_doctype(doctype);
        local_meta = frappe.get_meta(doctype);
        local_meta.hide_toolbar = true;
        meta.value = local_meta || void 0;
      }
      const __returned__ = { meta, props, detail, loading, getDetail, getMeta, get FormDetail() {
        return FormDetail_default2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=style&index=0
  var Detail_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=template
  var import_vue25 = __require("vue");
  var _hoisted_111 = { class: "form-container" };
  function render8(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue25.openBlock)(), (0, import_vue25.createElementBlock)("div", _hoisted_111, [
      $setup.meta && $setup.detail ? ((0, import_vue25.openBlock)(), (0, import_vue25.createBlock)($setup["FormDetail"], {
        key: 0,
        loading: $setup.loading,
        meta: $setup.meta,
        options: {},
        value: $setup.detail,
        isHideClose: ""
      }, null, 8, ["loading", "meta", "value"])) : (0, import_vue25.createCommentVNode)("v-if", true)
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue
  Detail_default2(Detail_default);
  Detail_default.render = render8;
  Detail_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue";
  Detail_default.__scopeId = "data-v-c54e1258";
  var Detail_default3 = Detail_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=script
  var import_vue26 = __require("vue");
  var import_vue27 = __require("vue");

  // ../frappe/node_modules/@editorjs/editorjs/dist/editorjs.mjs
  var Lt = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
  function xe(s) {
    return s && s.__esModule && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s;
  }
  function Be() {
  }
  Object.assign(Be, {
    default: Be,
    register: Be,
    revert: function() {
    },
    __esModule: true
  });
  Element.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function(s) {
    const e = (this.document || this.ownerDocument).querySelectorAll(s);
    let t = e.length;
    for (; --t >= 0 && e.item(t) !== this; )
      ;
    return t > -1;
  });
  Element.prototype.closest || (Element.prototype.closest = function(s) {
    let e = this;
    if (!document.documentElement.contains(e))
      return null;
    do {
      if (e.matches(s))
        return e;
      e = e.parentElement || e.parentNode;
    } while (e !== null);
    return null;
  });
  Element.prototype.prepend || (Element.prototype.prepend = function(e) {
    const t = document.createDocumentFragment();
    Array.isArray(e) || (e = [e]), e.forEach((o) => {
      const i = o instanceof Node;
      t.appendChild(i ? o : document.createTextNode(o));
    }), this.insertBefore(t, this.firstChild);
  });
  Element.prototype.scrollIntoViewIfNeeded || (Element.prototype.scrollIntoViewIfNeeded = function(s) {
    s = arguments.length === 0 ? true : !!s;
    const e = this.parentNode, t = window.getComputedStyle(e, null), o = parseInt(t.getPropertyValue("border-top-width")), i = parseInt(t.getPropertyValue("border-left-width")), n = this.offsetTop - e.offsetTop < e.scrollTop, r = this.offsetTop - e.offsetTop + this.clientHeight - o > e.scrollTop + e.clientHeight, a = this.offsetLeft - e.offsetLeft < e.scrollLeft, l = this.offsetLeft - e.offsetLeft + this.clientWidth - i > e.scrollLeft + e.clientWidth, c = n && !r;
    (n || r) && s && (e.scrollTop = this.offsetTop - e.offsetTop - e.clientHeight / 2 - o + this.clientHeight / 2), (a || l) && s && (e.scrollLeft = this.offsetLeft - e.offsetLeft - e.clientWidth / 2 - i + this.clientWidth / 2), (n || r || a || l) && !s && this.scrollIntoView(c);
  });
  var Ot = (s = 21) => crypto.getRandomValues(new Uint8Array(s)).reduce((e, t) => (t &= 63, t < 36 ? e += t.toString(36) : t < 62 ? e += (t - 26).toString(36).toUpperCase() : t > 62 ? e += "-" : e += "_", e), "");
  var et = /* @__PURE__ */ ((s) => (s.VERBOSE = "VERBOSE", s.INFO = "INFO", s.WARN = "WARN", s.ERROR = "ERROR", s))(et || {});
  var B = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    DOWN: 40,
    RIGHT: 39,
    DELETE: 46,
    META: 91
  };
  var _t = {
    LEFT: 0,
    WHEEL: 1,
    RIGHT: 2,
    BACKWARD: 3,
    FORWARD: 4
  };
  function ge(s, e, t = "log", o, i = "color: inherit") {
    if (!("console" in window) || !window.console[t])
      return;
    const n = ["info", "log", "warn", "error"].includes(t), r = [];
    switch (ge.logLevel) {
      case "ERROR":
        if (t !== "error")
          return;
        break;
      case "WARN":
        if (!["error", "warn"].includes(t))
          return;
        break;
      case "INFO":
        if (!n || s)
          return;
        break;
    }
    o && r.push(o);
    const a = "Editor.js 2.27.0", l = `line-height: 1em;
            color: #006FEA;
            display: inline-block;
            font-size: 11px;
            line-height: 1em;
            background-color: #fff;
            padding: 4px 9px;
            border-radius: 30px;
            border: 1px solid rgba(56, 138, 229, 0.16);
            margin: 4px 5px 4px 0;`;
    s && (n ? (r.unshift(l, i), e = `%c${a}%c ${e}`) : e = `( ${a} )${e}`);
    try {
      n ? o ? console[t](`${e} %o`, ...r) : console[t](e, ...r) : console[t](e);
    } catch (e2) {
    }
  }
  ge.logLevel = "VERBOSE";
  function At(s) {
    ge.logLevel = s;
  }
  var T = ge.bind(window, false);
  var K = ge.bind(window, true);
  function te(s) {
    return Object.prototype.toString.call(s).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
  }
  function D(s) {
    return te(s) === "function" || te(s) === "asyncfunction";
  }
  function j(s) {
    return te(s) === "object";
  }
  function J(s) {
    return te(s) === "string";
  }
  function Nt(s) {
    return te(s) === "boolean";
  }
  function Ve(s) {
    return te(s) === "number";
  }
  function Ze(s) {
    return te(s) === "undefined";
  }
  function V(s) {
    return s ? Object.keys(s).length === 0 && s.constructor === Object : true;
  }
  function tt(s) {
    return s > 47 && s < 58 || s === 32 || s === 13 || s === 229 || s > 64 && s < 91 || s > 95 && s < 112 || s > 185 && s < 193 || s > 218 && s < 223;
  }
  async function ot(s, e = () => {
  }, t = () => {
  }) {
    async function o(i, n, r) {
      try {
        await i.function(i.data), await n(Ze(i.data) ? {} : i.data);
      } catch (e2) {
        r(Ze(i.data) ? {} : i.data);
      }
    }
    return s.reduce(async (i, n) => (await i, o(n, e, t)), Promise.resolve());
  }
  function it(s) {
    return Array.prototype.slice.call(s);
  }
  function oe(s, e) {
    return function() {
      const t = this, o = arguments;
      window.setTimeout(() => s.apply(t, o), e);
    };
  }
  function Rt(s) {
    return s.name.split(".").pop();
  }
  function Dt(s) {
    return /^[-\w]+\/([-+\w]+|\*)$/.test(s);
  }
  function Pt(s, e, t) {
    let o;
    return (...i) => {
      const n = this, r = () => {
        o = null, t || s.apply(n, i);
      }, a = t && !o;
      window.clearTimeout(o), o = window.setTimeout(r, e), a && s.apply(n, i);
    };
  }
  function Te(s, e, t = void 0) {
    let o, i, n, r = null, a = 0;
    t || (t = {});
    const l = function() {
      a = t.leading === false ? 0 : Date.now(), r = null, n = s.apply(o, i), r || (o = i = null);
    };
    return function() {
      const c = Date.now();
      !a && t.leading === false && (a = c);
      const u = e - (c - a);
      return o = this, i = arguments, u <= 0 || u > e ? (r && (clearTimeout(r), r = null), a = c, n = s.apply(o, i), r || (o = i = null)) : !r && t.trailing !== false && (r = setTimeout(l, u)), n;
    };
  }
  function Ft() {
    const s = {
      win: false,
      mac: false,
      x11: false,
      linux: false
    }, e = Object.keys(s).find((t) => window.navigator.appVersion.toLowerCase().indexOf(t) !== -1);
    return e && (s[e] = true), s;
  }
  function ke(s) {
    return s[0].toUpperCase() + s.slice(1);
  }
  function Se(s, ...e) {
    if (!e.length)
      return s;
    const t = e.shift();
    if (j(s) && j(t))
      for (const o in t)
        j(t[o]) ? (s[o] || Object.assign(s, { [o]: {} }), Se(s[o], t[o])) : Object.assign(s, { [o]: t[o] });
    return Se(s, ...e);
  }
  function nt(s) {
    const e = Ft();
    return s = s.replace(/shift/gi, "\u21E7").replace(/backspace/gi, "\u232B").replace(/enter/gi, "\u23CE").replace(/up/gi, "\u2191").replace(/left/gi, "\u2192").replace(/down/gi, "\u2193").replace(/right/gi, "\u2190").replace(/escape/gi, "\u238B").replace(/insert/gi, "Ins").replace(/delete/gi, "\u2421").replace(/\+/gi, " + "), e.mac ? s = s.replace(/ctrl|cmd/gi, "\u2318").replace(/alt/gi, "\u2325") : s = s.replace(/cmd/gi, "Ctrl").replace(/windows/gi, "WIN"), s;
  }
  function Ht(s) {
    try {
      return new URL(s).href;
    } catch (e) {
    }
    return s.substring(0, 2) === "//" ? window.location.protocol + s : window.location.origin + s;
  }
  function zt() {
    return Ot(10);
  }
  function jt(s) {
    window.open(s, "_blank");
  }
  function Ut(s = "") {
    return `${s}${Math.floor(Math.random() * 1e8).toString(16)}`;
  }
  function Ie(s, e, t) {
    const o = `\xAB${e}\xBB is deprecated and will be removed in the next major release. Please use the \xAB${t}\xBB instead.`;
    s && K(o, "warn");
  }
  function ae(s, e, t) {
    const o = t.value ? "value" : "get", i = t[o], n = `#${e}Cache`;
    if (t[o] = function(...r) {
      return this[n] === void 0 && (this[n] = i.apply(this, ...r)), this[n];
    }, o === "get" && t.set) {
      const r = t.set;
      t.set = function(a) {
        delete s[n], r.apply(this, a);
      };
    }
    return t;
  }
  var st = 650;
  function ee() {
    return window.matchMedia(`(max-width: ${st}px)`).matches;
  }
  var Ge = typeof window < "u" && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === "MacIntel" && window.navigator.maxTouchPoints > 1);
  function $t(s, e) {
    const t = Array.isArray(s) || j(s), o = Array.isArray(e) || j(e);
    return t || o ? JSON.stringify(s) === JSON.stringify(e) : s === e;
  }
  var d = class {
    static isSingleTag(e) {
      return e.tagName && [
        "AREA",
        "BASE",
        "BR",
        "COL",
        "COMMAND",
        "EMBED",
        "HR",
        "IMG",
        "INPUT",
        "KEYGEN",
        "LINK",
        "META",
        "PARAM",
        "SOURCE",
        "TRACK",
        "WBR"
      ].includes(e.tagName);
    }
    static isLineBreakTag(e) {
      return e && e.tagName && [
        "BR",
        "WBR"
      ].includes(e.tagName);
    }
    static make(e, t = null, o = {}) {
      const i = document.createElement(e);
      Array.isArray(t) ? i.classList.add(...t) : t && i.classList.add(t);
      for (const n in o)
        Object.prototype.hasOwnProperty.call(o, n) && (i[n] = o[n]);
      return i;
    }
    static text(e) {
      return document.createTextNode(e);
    }
    static append(e, t) {
      Array.isArray(t) ? t.forEach((o) => e.appendChild(o)) : e.appendChild(t);
    }
    static prepend(e, t) {
      Array.isArray(t) ? (t = t.reverse(), t.forEach((o) => e.prepend(o))) : e.prepend(t);
    }
    static swap(e, t) {
      const o = document.createElement("div"), i = e.parentNode;
      i.insertBefore(o, e), i.insertBefore(e, t), i.insertBefore(t, o), i.removeChild(o);
    }
    static find(e = document, t) {
      return e.querySelector(t);
    }
    static get(e) {
      return document.getElementById(e);
    }
    static findAll(e = document, t) {
      return e.querySelectorAll(t);
    }
    static get allInputsSelector() {
      return "[contenteditable=true], textarea, input:not([type]), " + ["text", "password", "email", "number", "search", "tel", "url"].map((t) => `input[type="${t}"]`).join(", ");
    }
    static findAllInputs(e) {
      return it(e.querySelectorAll(d.allInputsSelector)).reduce((t, o) => d.isNativeInput(o) || d.containsOnlyInlineElements(o) ? [...t, o] : [...t, ...d.getDeepestBlockElements(o)], []);
    }
    static getDeepestNode(e, t = false) {
      const o = t ? "lastChild" : "firstChild", i = t ? "previousSibling" : "nextSibling";
      if (e && e.nodeType === Node.ELEMENT_NODE && e[o]) {
        let n = e[o];
        if (d.isSingleTag(n) && !d.isNativeInput(n) && !d.isLineBreakTag(n))
          if (n[i])
            n = n[i];
          else if (n.parentNode[i])
            n = n.parentNode[i];
          else
            return n.parentNode;
        return this.getDeepestNode(n, t);
      }
      return e;
    }
    static isElement(e) {
      return Ve(e) ? false : e && e.nodeType && e.nodeType === Node.ELEMENT_NODE;
    }
    static isFragment(e) {
      return Ve(e) ? false : e && e.nodeType && e.nodeType === Node.DOCUMENT_FRAGMENT_NODE;
    }
    static isContentEditable(e) {
      return e.contentEditable === "true";
    }
    static isNativeInput(e) {
      const t = [
        "INPUT",
        "TEXTAREA"
      ];
      return e && e.tagName ? t.includes(e.tagName) : false;
    }
    static canSetCaret(e) {
      let t = true;
      if (d.isNativeInput(e))
        switch (e.type) {
          case "file":
          case "checkbox":
          case "radio":
          case "hidden":
          case "submit":
          case "button":
          case "image":
          case "reset":
            t = false;
            break;
        }
      else
        t = d.isContentEditable(e);
      return t;
    }
    static isNodeEmpty(e) {
      let t;
      return this.isSingleTag(e) && !this.isLineBreakTag(e) ? false : (this.isElement(e) && this.isNativeInput(e) ? t = e.value : t = e.textContent.replace("\u200B", ""), t.trim().length === 0);
    }
    static isLeaf(e) {
      return e ? e.childNodes.length === 0 : false;
    }
    static isEmpty(e) {
      e.normalize();
      const t = [e];
      for (; t.length > 0; )
        if (e = t.shift(), !!e) {
          if (this.isLeaf(e) && !this.isNodeEmpty(e))
            return false;
          e.childNodes && t.push(...Array.from(e.childNodes));
        }
      return true;
    }
    static isHTMLString(e) {
      const t = d.make("div");
      return t.innerHTML = e, t.childElementCount > 0;
    }
    static getContentLength(e) {
      return d.isNativeInput(e) ? e.value.length : e.nodeType === Node.TEXT_NODE ? e.length : e.textContent.length;
    }
    static get blockElements() {
      return [
        "address",
        "article",
        "aside",
        "blockquote",
        "canvas",
        "div",
        "dl",
        "dt",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "header",
        "hgroup",
        "hr",
        "li",
        "main",
        "nav",
        "noscript",
        "ol",
        "output",
        "p",
        "pre",
        "ruby",
        "section",
        "table",
        "tbody",
        "thead",
        "tr",
        "tfoot",
        "ul",
        "video"
      ];
    }
    static containsOnlyInlineElements(e) {
      let t;
      J(e) ? (t = document.createElement("div"), t.innerHTML = e) : t = e;
      const o = (i) => !d.blockElements.includes(i.tagName.toLowerCase()) && Array.from(i.children).every(o);
      return Array.from(t.children).every(o);
    }
    static getDeepestBlockElements(e) {
      return d.containsOnlyInlineElements(e) ? [e] : Array.from(e.children).reduce((t, o) => [...t, ...d.getDeepestBlockElements(o)], []);
    }
    static getHolder(e) {
      return J(e) ? document.getElementById(e) : e;
    }
    static isAnchor(e) {
      return e.tagName.toLowerCase() === "a";
    }
    static offset(e) {
      const t = e.getBoundingClientRect(), o = window.pageXOffset || document.documentElement.scrollLeft, i = window.pageYOffset || document.documentElement.scrollTop, n = t.top + i, r = t.left + o;
      return {
        top: n,
        left: r,
        bottom: n + t.height,
        right: r + t.width
      };
    }
  };
  var Wt = {
    blockTunes: {
      toggler: {
        "Click to tune": "",
        "or drag to move": ""
      }
    },
    inlineToolbar: {
      converter: {
        "Convert to": ""
      }
    },
    toolbar: {
      toolbox: {
        Add: ""
      }
    },
    popover: {
      Filter: "",
      "Nothing found": ""
    }
  };
  var Yt = {
    Text: "",
    Link: "",
    Bold: "",
    Italic: ""
  };
  var Kt = {
    link: {
      "Add a link": ""
    },
    stub: {
      "The block can not be displayed correctly.": ""
    }
  };
  var Xt = {
    delete: {
      Delete: "",
      "Click to delete": ""
    },
    moveUp: {
      "Move up": ""
    },
    moveDown: {
      "Move down": ""
    }
  };
  var rt = {
    ui: Wt,
    toolNames: Yt,
    tools: Kt,
    blockTunes: Xt
  };
  var ie = class {
    static ui(s, e) {
      return ie._t(s, e);
    }
    static t(s, e) {
      return ie._t(s, e);
    }
    static setDictionary(s) {
      ie.currentDictionary = s;
    }
    static _t(s, e) {
      const t = ie.getNamespace(s);
      return !t || !t[e] ? e : t[e];
    }
    static getNamespace(s) {
      return s.split(".").reduce((t, o) => !t || !Object.keys(t).length ? {} : t[o], ie.currentDictionary);
    }
  };
  var $2 = ie;
  $2.currentDictionary = rt;
  var at = class extends Error {
  };
  var we = class {
    constructor() {
      this.subscribers = {};
    }
    on(e, t) {
      e in this.subscribers || (this.subscribers[e] = []), this.subscribers[e].push(t);
    }
    once(e, t) {
      e in this.subscribers || (this.subscribers[e] = []);
      const o = (i) => {
        const n = t(i), r = this.subscribers[e].indexOf(o);
        return r !== -1 && this.subscribers[e].splice(r, 1), n;
      };
      this.subscribers[e].push(o);
    }
    emit(e, t) {
      V(this.subscribers) || !this.subscribers[e] || this.subscribers[e].reduce((o, i) => {
        const n = i(o);
        return n !== void 0 ? n : o;
      }, t);
    }
    off(e, t) {
      for (let o = 0; o < this.subscribers[e].length; o++)
        if (this.subscribers[e][o] === t) {
          delete this.subscribers[e][o];
          break;
        }
    }
    destroy() {
      this.subscribers = null;
    }
  };
  function he(s) {
    Object.setPrototypeOf(this, {
      get id() {
        return s.id;
      },
      get name() {
        return s.name;
      },
      get config() {
        return s.config;
      },
      get holder() {
        return s.holder;
      },
      get isEmpty() {
        return s.isEmpty;
      },
      get selected() {
        return s.selected;
      },
      set stretched(t) {
        s.stretched = t;
      },
      get stretched() {
        return s.stretched;
      },
      call(t, o) {
        return s.call(t, o);
      },
      save() {
        return s.save();
      },
      validate(t) {
        return s.validate(t);
      },
      dispatchChange() {
        s.dispatchChange();
      }
    });
  }
  var Re = class {
    constructor() {
      this.allListeners = [];
    }
    on(e, t, o, i = false) {
      const n = Ut("l"), r = {
        id: n,
        element: e,
        eventType: t,
        handler: o,
        options: i
      };
      if (!this.findOne(e, t, o))
        return this.allListeners.push(r), e.addEventListener(t, o, i), n;
    }
    off(e, t, o, i) {
      const n = this.findAll(e, t, o);
      n.forEach((r, a) => {
        const l = this.allListeners.indexOf(n[a]);
        l > -1 && (this.allListeners.splice(l, 1), r.element.removeEventListener(r.eventType, r.handler, r.options));
      });
    }
    offById(e) {
      const t = this.findById(e);
      t && t.element.removeEventListener(t.eventType, t.handler, t.options);
    }
    findOne(e, t, o) {
      const i = this.findAll(e, t, o);
      return i.length > 0 ? i[0] : null;
    }
    findAll(e, t, o) {
      let i;
      const n = e ? this.findByEventTarget(e) : [];
      return e && t && o ? i = n.filter((r) => r.eventType === t && r.handler === o) : e && t ? i = n.filter((r) => r.eventType === t) : i = n, i;
    }
    removeAll() {
      this.allListeners.map((e) => {
        e.element.removeEventListener(e.eventType, e.handler, e.options);
      }), this.allListeners = [];
    }
    destroy() {
      this.removeAll();
    }
    findByEventTarget(e) {
      return this.allListeners.filter((t) => {
        if (t.element === e)
          return t;
      });
    }
    findByType(e) {
      return this.allListeners.filter((t) => {
        if (t.eventType === e)
          return t;
      });
    }
    findByHandler(e) {
      return this.allListeners.filter((t) => {
        if (t.handler === e)
          return t;
      });
    }
    findById(e) {
      return this.allListeners.find((t) => t.id === e);
    }
  };
  var S = class {
    constructor({ config: e, eventsDispatcher: t }) {
      if (this.nodes = {}, this.listeners = new Re(), this.readOnlyMutableListeners = {
        on: (o, i, n, r = false) => {
          this.mutableListenerIds.push(
            this.listeners.on(o, i, n, r)
          );
        },
        clearAll: () => {
          for (const o of this.mutableListenerIds)
            this.listeners.offById(o);
          this.mutableListenerIds = [];
        }
      }, this.mutableListenerIds = [], new.target === S)
        throw new TypeError("Constructors for abstract class Module are not allowed.");
      this.config = e, this.eventsDispatcher = t;
    }
    set state(e) {
      this.Editor = e;
    }
    removeAllNodes() {
      for (const e in this.nodes) {
        const t = this.nodes[e];
        t instanceof HTMLElement && t.remove();
      }
    }
    get isRtl() {
      return this.config.i18n.direction === "rtl";
    }
  };
  var m = class {
    constructor() {
      this.instance = null, this.selection = null, this.savedSelectionRange = null, this.isFakeBackgroundEnabled = false, this.commandBackground = "backColor", this.commandRemoveFormat = "removeFormat";
    }
    static get CSS() {
      return {
        editorWrapper: "codex-editor",
        editorZone: "codex-editor__redactor"
      };
    }
    static get anchorNode() {
      const e = window.getSelection();
      return e ? e.anchorNode : null;
    }
    static get anchorElement() {
      const e = window.getSelection();
      if (!e)
        return null;
      const t = e.anchorNode;
      return t ? d.isElement(t) ? t : t.parentElement : null;
    }
    static get anchorOffset() {
      const e = window.getSelection();
      return e ? e.anchorOffset : null;
    }
    static get isCollapsed() {
      const e = window.getSelection();
      return e ? e.isCollapsed : null;
    }
    static get isAtEditor() {
      return this.isSelectionAtEditor(m.get());
    }
    static isSelectionAtEditor(e) {
      if (!e)
        return false;
      let t = e.anchorNode || e.focusNode;
      t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);
      let o = null;
      return t && t instanceof Element && (o = t.closest(`.${m.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : false;
    }
    static isRangeAtEditor(e) {
      if (!e)
        return;
      let t = e.startContainer;
      t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);
      let o = null;
      return t && t instanceof Element && (o = t.closest(`.${m.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : false;
    }
    static get isSelectionExists() {
      return !!m.get().anchorNode;
    }
    static get range() {
      return this.getRangeFromSelection(this.get());
    }
    static getRangeFromSelection(e) {
      return e && e.rangeCount ? e.getRangeAt(0) : null;
    }
    static get rect() {
      let e = document.selection, t, o = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      if (e && e.type !== "Control")
        return e = e, t = e.createRange(), o.x = t.boundingLeft, o.y = t.boundingTop, o.width = t.boundingWidth, o.height = t.boundingHeight, o;
      if (!window.getSelection)
        return T("Method window.getSelection is not supported", "warn"), o;
      if (e = window.getSelection(), e.rangeCount === null || isNaN(e.rangeCount))
        return T("Method SelectionUtils.rangeCount is not supported", "warn"), o;
      if (e.rangeCount === 0)
        return o;
      if (t = e.getRangeAt(0).cloneRange(), t.getBoundingClientRect && (o = t.getBoundingClientRect()), o.x === 0 && o.y === 0) {
        const i = document.createElement("span");
        if (i.getBoundingClientRect) {
          i.appendChild(document.createTextNode("\u200B")), t.insertNode(i), o = i.getBoundingClientRect();
          const n = i.parentNode;
          n.removeChild(i), n.normalize();
        }
      }
      return o;
    }
    static get text() {
      return window.getSelection ? window.getSelection().toString() : "";
    }
    static get() {
      return window.getSelection();
    }
    static setCursor(e, t = 0) {
      const o = document.createRange(), i = window.getSelection();
      return d.isNativeInput(e) ? d.canSetCaret(e) ? (e.focus(), e.selectionStart = e.selectionEnd = t, e.getBoundingClientRect()) : void 0 : (o.setStart(e, t), o.setEnd(e, t), i.removeAllRanges(), i.addRange(o), o.getBoundingClientRect());
    }
    static isRangeInsideContainer(e) {
      const t = m.range;
      return t === null ? false : e.contains(t.startContainer);
    }
    static addFakeCursor() {
      const e = m.range;
      if (e === null)
        return;
      const t = d.make("span", "codex-editor__fake-cursor");
      t.dataset.mutationFree = "true", e.collapse(), e.insertNode(t);
    }
    static isFakeCursorInsideContainer(e) {
      return d.find(e, ".codex-editor__fake-cursor") !== null;
    }
    static removeFakeCursor(e = document.body) {
      const t = d.find(e, ".codex-editor__fake-cursor");
      t && t.remove();
    }
    removeFakeBackground() {
      this.isFakeBackgroundEnabled && (this.isFakeBackgroundEnabled = false, document.execCommand(this.commandRemoveFormat));
    }
    setFakeBackground() {
      document.execCommand(this.commandBackground, false, "#a8d6ff"), this.isFakeBackgroundEnabled = true;
    }
    save() {
      this.savedSelectionRange = m.range;
    }
    restore() {
      if (!this.savedSelectionRange)
        return;
      const e = window.getSelection();
      e.removeAllRanges(), e.addRange(this.savedSelectionRange);
    }
    clearSaved() {
      this.savedSelectionRange = null;
    }
    collapseToEnd() {
      const e = window.getSelection(), t = document.createRange();
      t.selectNodeContents(e.focusNode), t.collapse(false), e.removeAllRanges(), e.addRange(t);
    }
    findParentTag(e, t, o = 10) {
      const i = window.getSelection();
      let n = null;
      return !i || !i.anchorNode || !i.focusNode ? null : ([
        i.anchorNode,
        i.focusNode
      ].forEach((a) => {
        let l = o;
        for (; l > 0 && a.parentNode && !(a.tagName === e && (n = a, t && a.classList && !a.classList.contains(t) && (n = null), n)); )
          a = a.parentNode, l--;
      }), n);
    }
    expandToTag(e) {
      const t = window.getSelection();
      t.removeAllRanges();
      const o = document.createRange();
      o.selectNodeContents(e), t.addRange(o);
    }
  };
  function Vt(s, e) {
    const { type: t, target: o, addedNodes: i, removedNodes: n } = s;
    if (["characterData", "attributes"].includes(t)) {
      const l = o.nodeType === Node.TEXT_NODE ? o.parentNode : o;
      return e.contains(l);
    }
    const r = Array.from(i).some((l) => e.contains(l)), a = Array.from(n).some((l) => e.contains(l));
    return r || a;
  }
  var Me = "redactor dom changed";
  var lt = "block changed";
  var ct = "fake cursor is about to be toggled";
  var dt = "fake cursor have been set";
  var q = /* @__PURE__ */ ((s) => (s.APPEND_CALLBACK = "appendCallback", s.RENDERED = "rendered", s.MOVED = "moved", s.UPDATED = "updated", s.REMOVED = "removed", s.ON_PASTE = "onPaste", s))(q || {});
  var F = class extends we {
    constructor({
      id: e = zt(),
      data: t,
      tool: o,
      api: i,
      readOnly: n,
      tunesData: r
    }, a) {
      super(), this.cachedInputs = [], this.toolRenderedElement = null, this.tunesInstances = /* @__PURE__ */ new Map(), this.defaultTunesInstances = /* @__PURE__ */ new Map(), this.unavailableTunesData = {}, this.inputIndex = 0, this.editorEventBus = null, this.handleFocus = () => {
        this.dropInputsCache(), this.updateCurrentInput();
      }, this.didMutated = (l = void 0) => {
        const c = l === void 0, u = l instanceof InputEvent;
        !c && !u && this.detectToolRootChange(l);
        let h;
        c || u ? h = true : h = !(l.length > 0 && l.every((v) => {
          const { addedNodes: p, removedNodes: k } = v;
          return [
            ...Array.from(p),
            ...Array.from(k)
          ].some((A) => d.isElement(A) ? A.dataset.mutationFree === "true" : false);
        })), h && (this.dropInputsCache(), this.updateCurrentInput(), this.call(
          "updated"
        ), this.emit("didMutated", this));
      }, this.name = o.name, this.id = e, this.settings = o.settings, this.config = o.settings.config || {}, this.api = i, this.editorEventBus = a || null, this.blockAPI = new he(this), this.tool = o, this.toolInstance = o.create(t, this.blockAPI, n), this.tunes = o.tunes, this.composeTunes(r), this.holder = this.compose(), this.watchBlockMutations(), this.addInputEvents();
    }
    static get CSS() {
      return {
        wrapper: "ce-block",
        wrapperStretched: "ce-block--stretched",
        content: "ce-block__content",
        focused: "ce-block--focused",
        selected: "ce-block--selected",
        dropTarget: "ce-block--drop-target"
      };
    }
    get inputs() {
      if (this.cachedInputs.length !== 0)
        return this.cachedInputs;
      const e = d.findAllInputs(this.holder);
      return this.inputIndex > e.length - 1 && (this.inputIndex = e.length - 1), this.cachedInputs = e, e;
    }
    get currentInput() {
      return this.inputs[this.inputIndex];
    }
    set currentInput(e) {
      const t = this.inputs.findIndex((o) => o === e || o.contains(e));
      t !== -1 && (this.inputIndex = t);
    }
    get firstInput() {
      return this.inputs[0];
    }
    get lastInput() {
      const e = this.inputs;
      return e[e.length - 1];
    }
    get nextInput() {
      return this.inputs[this.inputIndex + 1];
    }
    get previousInput() {
      return this.inputs[this.inputIndex - 1];
    }
    get data() {
      return this.save().then((e) => e && !V(e.data) ? e.data : {});
    }
    get sanitize() {
      return this.tool.sanitizeConfig;
    }
    get mergeable() {
      return D(this.toolInstance.merge);
    }
    get isEmpty() {
      const e = d.isEmpty(this.pluginsContent), t = !this.hasMedia;
      return e && t;
    }
    get hasMedia() {
      const e = [
        "img",
        "iframe",
        "video",
        "audio",
        "source",
        "input",
        "textarea",
        "twitterwidget"
      ];
      return !!this.holder.querySelector(e.join(","));
    }
    set focused(e) {
      this.holder.classList.toggle(F.CSS.focused, e);
    }
    get focused() {
      return this.holder.classList.contains(F.CSS.focused);
    }
    set selected(e) {
      var i, n;
      this.holder.classList.toggle(F.CSS.selected, e);
      const t = e === true && m.isRangeInsideContainer(this.holder), o = e === false && m.isFakeCursorInsideContainer(this.holder);
      (t || o) && ((i = this.editorEventBus) == null || i.emit(ct, { state: e }), t ? m.addFakeCursor() : m.removeFakeCursor(this.holder), (n = this.editorEventBus) == null || n.emit(dt, { state: e }));
    }
    get selected() {
      return this.holder.classList.contains(F.CSS.selected);
    }
    set stretched(e) {
      this.holder.classList.toggle(F.CSS.wrapperStretched, e);
    }
    get stretched() {
      return this.holder.classList.contains(F.CSS.wrapperStretched);
    }
    set dropTarget(e) {
      this.holder.classList.toggle(F.CSS.dropTarget, e);
    }
    get pluginsContent() {
      return this.toolRenderedElement;
    }
    call(e, t) {
      if (D(this.toolInstance[e])) {
        e === "appendCallback" && T(
          "`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead",
          "warn"
        );
        try {
          this.toolInstance[e].call(this.toolInstance, t);
        } catch (o) {
          T(`Error during '${e}' call: ${o.message}`, "error");
        }
      }
    }
    async mergeWith(e) {
      await this.toolInstance.merge(e);
    }
    async save() {
      const e = await this.toolInstance.save(this.pluginsContent), t = this.unavailableTunesData;
      [
        ...this.tunesInstances.entries(),
        ...this.defaultTunesInstances.entries()
      ].forEach(([n, r]) => {
        if (D(r.save))
          try {
            t[n] = r.save();
          } catch (a) {
            T(`Tune ${r.constructor.name} save method throws an Error %o`, "warn", a);
          }
      });
      const o = window.performance.now();
      let i;
      return Promise.resolve(e).then((n) => (i = window.performance.now(), {
        id: this.id,
        tool: this.name,
        data: n,
        tunes: t,
        time: i - o
      })).catch((n) => {
        T(`Saving process for ${this.name} tool failed due to the ${n}`, "log", "red");
      });
    }
    async validate(e) {
      let t = true;
      return this.toolInstance.validate instanceof Function && (t = await this.toolInstance.validate(e)), t;
    }
    getTunes() {
      const e = document.createElement("div"), t = [], o = typeof this.toolInstance.renderSettings == "function" ? this.toolInstance.renderSettings() : [], i = [
        ...this.tunesInstances.values(),
        ...this.defaultTunesInstances.values()
      ].map((n) => n.render());
      return [o, i].flat().forEach((n) => {
        d.isElement(n) ? e.appendChild(n) : Array.isArray(n) ? t.push(...n) : t.push(n);
      }), [t, e];
    }
    updateCurrentInput() {
      this.currentInput = d.isNativeInput(document.activeElement) || !m.anchorNode ? document.activeElement : m.anchorNode;
    }
    dispatchChange() {
      this.didMutated();
    }
    destroy() {
      this.unwatchBlockMutations(), this.removeInputEvents(), super.destroy(), D(this.toolInstance.destroy) && this.toolInstance.destroy();
    }
    async getActiveToolboxEntry() {
      const e = this.tool.toolbox;
      if (e.length === 1)
        return Promise.resolve(this.tool.toolbox[0]);
      const t = await this.data;
      return e.find((i) => Object.entries(i.data).some(([n, r]) => t[n] && $t(t[n], r)));
    }
    compose() {
      const e = d.make("div", F.CSS.wrapper), t = d.make("div", F.CSS.content), o = this.toolInstance.render();
      this.toolRenderedElement = o, t.appendChild(this.toolRenderedElement);
      let i = t;
      return [...this.tunesInstances.values(), ...this.defaultTunesInstances.values()].forEach((n) => {
        if (D(n.wrap))
          try {
            i = n.wrap(i);
          } catch (r) {
            T(`Tune ${n.constructor.name} wrap method throws an Error %o`, "warn", r);
          }
      }), e.appendChild(i), e;
    }
    composeTunes(e) {
      Array.from(this.tunes.values()).forEach((t) => {
        (t.isInternal ? this.defaultTunesInstances : this.tunesInstances).set(t.name, t.create(e[t.name], this.blockAPI));
      }), Object.entries(e).forEach(([t, o]) => {
        this.tunesInstances.has(t) || (this.unavailableTunesData[t] = o);
      });
    }
    addInputEvents() {
      this.inputs.forEach((e) => {
        e.addEventListener("focus", this.handleFocus), d.isNativeInput(e) && e.addEventListener("input", this.didMutated);
      });
    }
    removeInputEvents() {
      this.inputs.forEach((e) => {
        e.removeEventListener("focus", this.handleFocus), d.isNativeInput(e) && e.removeEventListener("input", this.didMutated);
      });
    }
    watchBlockMutations() {
      var e;
      this.redactorDomChangedCallback = (t) => {
        const { mutations: o } = t;
        o.some((n) => Vt(n, this.toolRenderedElement)) && this.didMutated(o);
      }, (e = this.editorEventBus) == null || e.on(Me, this.redactorDomChangedCallback);
    }
    unwatchBlockMutations() {
      var e;
      (e = this.editorEventBus) == null || e.off(Me, this.redactorDomChangedCallback);
    }
    detectToolRootChange(e) {
      e.forEach((t) => {
        if (Array.from(t.removedNodes).includes(this.toolRenderedElement)) {
          const i = t.addedNodes[t.addedNodes.length - 1];
          this.toolRenderedElement = i;
        }
      });
    }
    dropInputsCache() {
      this.cachedInputs = [];
    }
  };
  var Zt = class extends S {
    constructor() {
      super(...arguments), this.insert = (e = this.config.defaultBlock, t = {}, o = {}, i, n, r, a) => {
        const l = this.Editor.BlockManager.insert({
          id: a,
          tool: e,
          data: t,
          index: i,
          needToFocus: n,
          replace: r
        });
        return new he(l);
      }, this.composeBlockData = async (e) => {
        const t = this.Editor.Tools.blockTools.get(e);
        return new F({
          tool: t,
          api: this.Editor.API,
          readOnly: true,
          data: {},
          tunesData: {}
        }).data;
      }, this.update = (e, t) => {
        const { BlockManager: o } = this.Editor, i = o.getBlockById(e);
        if (!i) {
          T("blocks.update(): Block with passed id was not found", "warn");
          return;
        }
        const n = o.getBlockIndex(i);
        o.insert({
          id: i.id,
          tool: i.name,
          data: t,
          index: n,
          replace: true,
          tunes: i.tunes
        });
      };
    }
    get methods() {
      return {
        clear: () => this.clear(),
        render: (e) => this.render(e),
        renderFromHTML: (e) => this.renderFromHTML(e),
        delete: (e) => this.delete(e),
        swap: (e, t) => this.swap(e, t),
        move: (e, t) => this.move(e, t),
        getBlockByIndex: (e) => this.getBlockByIndex(e),
        getById: (e) => this.getById(e),
        getCurrentBlockIndex: () => this.getCurrentBlockIndex(),
        getBlockIndex: (e) => this.getBlockIndex(e),
        getBlocksCount: () => this.getBlocksCount(),
        stretchBlock: (e, t = true) => this.stretchBlock(e, t),
        insertNewBlock: () => this.insertNewBlock(),
        insert: this.insert,
        update: this.update,
        composeBlockData: this.composeBlockData
      };
    }
    getBlocksCount() {
      return this.Editor.BlockManager.blocks.length;
    }
    getCurrentBlockIndex() {
      return this.Editor.BlockManager.currentBlockIndex;
    }
    getBlockIndex(e) {
      const t = this.Editor.BlockManager.getBlockById(e);
      if (!t) {
        K("There is no block with id `" + e + "`", "warn");
        return;
      }
      return this.Editor.BlockManager.getBlockIndex(t);
    }
    getBlockByIndex(e) {
      const t = this.Editor.BlockManager.getBlockByIndex(e);
      if (t === void 0) {
        K("There is no block at index `" + e + "`", "warn");
        return;
      }
      return new he(t);
    }
    getById(e) {
      const t = this.Editor.BlockManager.getBlockById(e);
      return t === void 0 ? (K("There is no block with id `" + e + "`", "warn"), null) : new he(t);
    }
    swap(e, t) {
      T(
        "`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead",
        "info"
      ), this.Editor.BlockManager.swap(e, t);
    }
    move(e, t) {
      this.Editor.BlockManager.move(e, t);
    }
    delete(e) {
      try {
        this.Editor.BlockManager.removeBlock(e);
      } catch (t) {
        K(t, "warn");
        return;
      }
      this.Editor.BlockManager.blocks.length === 0 && this.Editor.BlockManager.insert(), this.Editor.BlockManager.currentBlock && this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END), this.Editor.Toolbar.close();
    }
    clear() {
      this.Editor.BlockManager.clear(true), this.Editor.InlineToolbar.close();
    }
    render(e) {
      return this.Editor.BlockManager.clear(), this.Editor.Renderer.render(e.blocks);
    }
    renderFromHTML(e) {
      return this.Editor.BlockManager.clear(), this.Editor.Paste.processText(e, true);
    }
    stretchBlock(e, t = true) {
      Ie(
        true,
        "blocks.stretchBlock()",
        "BlockAPI"
      );
      const o = this.Editor.BlockManager.getBlockByIndex(e);
      o && (o.stretched = t);
    }
    insertNewBlock() {
      T("Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.", "warn"), this.insert();
    }
  };
  var Gt = class extends S {
    constructor() {
      super(...arguments), this.setToFirstBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.firstBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.firstBlock, e, t), true) : false, this.setToLastBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.lastBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.lastBlock, e, t), true) : false, this.setToPreviousBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.previousBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.previousBlock, e, t), true) : false, this.setToNextBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.nextBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.nextBlock, e, t), true) : false, this.setToBlock = (e, t = this.Editor.Caret.positions.DEFAULT, o = 0) => this.Editor.BlockManager.blocks[e] ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.blocks[e], t, o), true) : false, this.focus = (e = false) => e ? this.setToLastBlock(this.Editor.Caret.positions.END) : this.setToFirstBlock(this.Editor.Caret.positions.START);
    }
    get methods() {
      return {
        setToFirstBlock: this.setToFirstBlock,
        setToLastBlock: this.setToLastBlock,
        setToPreviousBlock: this.setToPreviousBlock,
        setToNextBlock: this.setToNextBlock,
        setToBlock: this.setToBlock,
        focus: this.focus
      };
    }
  };
  var qt = class extends S {
    get methods() {
      return {
        emit: (e, t) => this.emit(e, t),
        off: (e, t) => this.off(e, t),
        on: (e, t) => this.on(e, t)
      };
    }
    on(e, t) {
      this.eventsDispatcher.on(e, t);
    }
    emit(e, t) {
      this.eventsDispatcher.emit(e, t);
    }
    off(e, t) {
      this.eventsDispatcher.off(e, t);
    }
  };
  var De = class extends S {
    static getNamespace(e) {
      return e.isTune() ? `blockTunes.${e.name}` : `tools.${e.name}`;
    }
    get methods() {
      return {
        t: () => {
          K("I18n.t() method can be accessed only from Tools", "warn");
        }
      };
    }
    getMethodsForTool(e) {
      return Object.assign(
        this.methods,
        {
          t: (t) => $2.t(De.getNamespace(e), t)
        }
      );
    }
  };
  var Jt = class extends S {
    get methods() {
      return {
        blocks: this.Editor.BlocksAPI.methods,
        caret: this.Editor.CaretAPI.methods,
        events: this.Editor.EventsAPI.methods,
        listeners: this.Editor.ListenersAPI.methods,
        notifier: this.Editor.NotifierAPI.methods,
        sanitizer: this.Editor.SanitizerAPI.methods,
        saver: this.Editor.SaverAPI.methods,
        selection: this.Editor.SelectionAPI.methods,
        styles: this.Editor.StylesAPI.classes,
        toolbar: this.Editor.ToolbarAPI.methods,
        inlineToolbar: this.Editor.InlineToolbarAPI.methods,
        tooltip: this.Editor.TooltipAPI.methods,
        i18n: this.Editor.I18nAPI.methods,
        readOnly: this.Editor.ReadOnlyAPI.methods,
        ui: this.Editor.UiAPI.methods
      };
    }
    getMethodsForTool(e) {
      return Object.assign(
        this.methods,
        {
          i18n: this.Editor.I18nAPI.getMethodsForTool(e)
        }
      );
    }
  };
  var Qt = class extends S {
    get methods() {
      return {
        close: () => this.close(),
        open: () => this.open()
      };
    }
    open() {
      this.Editor.InlineToolbar.tryToShow();
    }
    close() {
      this.Editor.InlineToolbar.close();
    }
  };
  var eo = class extends S {
    get methods() {
      return {
        on: (e, t, o, i) => this.on(e, t, o, i),
        off: (e, t, o, i) => this.off(e, t, o, i),
        offById: (e) => this.offById(e)
      };
    }
    on(e, t, o, i) {
      return this.listeners.on(e, t, o, i);
    }
    off(e, t, o, i) {
      this.listeners.off(e, t, o, i);
    }
    offById(e) {
      this.listeners.offById(e);
    }
  };
  var Le = {};
  var to = {
    get exports() {
      return Le;
    },
    set exports(s) {
      Le = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(window, function() {
      return function(t) {
        var o = {};
        function i(n) {
          if (o[n])
            return o[n].exports;
          var r = o[n] = { i: n, l: false, exports: {} };
          return t[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = t, i.c = o, i.d = function(n, r, a) {
          i.o(n, r) || Object.defineProperty(n, r, { enumerable: true, get: a });
        }, i.r = function(n) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n, "__esModule", { value: true });
        }, i.t = function(n, r) {
          if (1 & r && (n = i(n)), 8 & r || 4 & r && typeof n == "object" && n && n.__esModule)
            return n;
          var a = /* @__PURE__ */ Object.create(null);
          if (i.r(a), Object.defineProperty(a, "default", { enumerable: true, value: n }), 2 & r && typeof n != "string")
            for (var l in n)
              i.d(a, l, function(c) {
                return n[c];
              }.bind(null, l));
          return a;
        }, i.n = function(n) {
          var r = n && n.__esModule ? function() {
            return n.default;
          } : function() {
            return n;
          };
          return i.d(r, "a", r), r;
        }, i.o = function(n, r) {
          return Object.prototype.hasOwnProperty.call(n, r);
        }, i.p = "/", i(i.s = 0);
      }([function(t, o, i) {
        i(1), t.exports = function() {
          var n = i(6), r = "cdx-notify--bounce-in", a = null;
          return { show: function(l) {
            if (l.message) {
              (function() {
                if (a)
                  return true;
                a = n.getWrapper(), document.body.appendChild(a);
              })();
              var c = null, u = l.time || 8e3;
              switch (l.type) {
                case "confirm":
                  c = n.confirm(l);
                  break;
                case "prompt":
                  c = n.prompt(l);
                  break;
                default:
                  c = n.alert(l), window.setTimeout(function() {
                    c.remove();
                  }, u);
              }
              a.appendChild(c), c.classList.add(r);
            }
          } };
        }();
      }, function(t, o, i) {
        var n = i(2);
        typeof n == "string" && (n = [[t.i, n, ""]]);
        var r = { hmr: true, transform: void 0, insertInto: void 0 };
        i(4)(n, r), n.locals && (t.exports = n.locals);
      }, function(t, o, i) {
        (t.exports = i(3)(false)).push([t.i, `.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:'';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:'';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}`, ""]);
      }, function(t, o) {
        t.exports = function(i) {
          var n = [];
          return n.toString = function() {
            return this.map(function(r) {
              var a = function(l, c) {
                var u = l[1] || "", h = l[3];
                if (!h)
                  return u;
                if (c && typeof btoa == "function") {
                  var f = (p = h, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(p)))) + " */"), v = h.sources.map(function(k) {
                    return "/*# sourceURL=" + h.sourceRoot + k + " */";
                  });
                  return [u].concat(v).concat([f]).join(`
`);
                }
                var p;
                return [u].join(`
`);
              }(r, i);
              return r[2] ? "@media " + r[2] + "{" + a + "}" : a;
            }).join("");
          }, n.i = function(r, a) {
            typeof r == "string" && (r = [[null, r, ""]]);
            for (var l = {}, c = 0; c < this.length; c++) {
              var u = this[c][0];
              typeof u == "number" && (l[u] = true);
            }
            for (c = 0; c < r.length; c++) {
              var h = r[c];
              typeof h[0] == "number" && l[h[0]] || (a && !h[2] ? h[2] = a : a && (h[2] = "(" + h[2] + ") and (" + a + ")"), n.push(h));
            }
          }, n;
        };
      }, function(t, o, i) {
        var n, r, a = {}, l = (n = function() {
          return window && document && document.all && !window.atob;
        }, function() {
          return r === void 0 && (r = n.apply(this, arguments)), r;
        }), c = function(b) {
          var g = {};
          return function(E) {
            if (typeof E == "function")
              return E();
            if (g[E] === void 0) {
              var C = function(O) {
                return document.querySelector(O);
              }.call(this, E);
              if (window.HTMLIFrameElement && C instanceof window.HTMLIFrameElement)
                try {
                  C = C.contentDocument.head;
                } catch (e2) {
                  C = null;
                }
              g[E] = C;
            }
            return g[E];
          };
        }(), u = null, h = 0, f = [], v = i(5);
        function p(b, g) {
          for (var E = 0; E < b.length; E++) {
            var C = b[E], O = a[C.id];
            if (O) {
              O.refs++;
              for (var I = 0; I < O.parts.length; I++)
                O.parts[I](C.parts[I]);
              for (; I < C.parts.length; I++)
                O.parts.push(x(C.parts[I], g));
            } else {
              var H = [];
              for (I = 0; I < C.parts.length; I++)
                H.push(x(C.parts[I], g));
              a[C.id] = { id: C.id, refs: 1, parts: H };
            }
          }
        }
        function k(b, g) {
          for (var E = [], C = {}, O = 0; O < b.length; O++) {
            var I = b[O], H = g.base ? I[0] + g.base : I[0], L = { css: I[1], media: I[2], sourceMap: I[3] };
            C[H] ? C[H].parts.push(L) : E.push(C[H] = { id: H, parts: [L] });
          }
          return E;
        }
        function _(b, g) {
          var E = c(b.insertInto);
          if (!E)
            throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
          var C = f[f.length - 1];
          if (b.insertAt === "top")
            C ? C.nextSibling ? E.insertBefore(g, C.nextSibling) : E.appendChild(g) : E.insertBefore(g, E.firstChild), f.push(g);
          else if (b.insertAt === "bottom")
            E.appendChild(g);
          else {
            if (typeof b.insertAt != "object" || !b.insertAt.before)
              throw new Error(`[Style Loader]

 Invalid value for parameter 'insertAt' ('options.insertAt') found.
 Must be 'top', 'bottom', or Object.
 (https://github.com/webpack-contrib/style-loader#insertat)
`);
            var O = c(b.insertInto + " " + b.insertAt.before);
            E.insertBefore(g, O);
          }
        }
        function A(b) {
          if (b.parentNode === null)
            return false;
          b.parentNode.removeChild(b);
          var g = f.indexOf(b);
          g >= 0 && f.splice(g, 1);
        }
        function R(b) {
          var g = document.createElement("style");
          return b.attrs.type === void 0 && (b.attrs.type = "text/css"), y(g, b.attrs), _(b, g), g;
        }
        function y(b, g) {
          Object.keys(g).forEach(function(E) {
            b.setAttribute(E, g[E]);
          });
        }
        function x(b, g) {
          var E, C, O, I;
          if (g.transform && b.css) {
            if (!(I = g.transform(b.css)))
              return function() {
              };
            b.css = I;
          }
          if (g.singleton) {
            var H = h++;
            E = u || (u = R(g)), C = N.bind(null, E, H, false), O = N.bind(null, E, H, true);
          } else
            b.sourceMap && typeof URL == "function" && typeof URL.createObjectURL == "function" && typeof URL.revokeObjectURL == "function" && typeof Blob == "function" && typeof btoa == "function" ? (E = function(L) {
              var W = document.createElement("link");
              return L.attrs.type === void 0 && (L.attrs.type = "text/css"), L.attrs.rel = "stylesheet", y(W, L.attrs), _(L, W), W;
            }(g), C = function(L, W, le) {
              var Q = le.css, Ee = le.sourceMap, It = W.convertToAbsoluteUrls === void 0 && Ee;
              (W.convertToAbsoluteUrls || It) && (Q = v(Q)), Ee && (Q += `
/*# sourceMappingURL=data:application/json;base64,` + btoa(unescape(encodeURIComponent(JSON.stringify(Ee)))) + " */");
              var Mt = new Blob([Q], { type: "text/css" }), Xe = L.href;
              L.href = URL.createObjectURL(Mt), Xe && URL.revokeObjectURL(Xe);
            }.bind(null, E, g), O = function() {
              A(E), E.href && URL.revokeObjectURL(E.href);
            }) : (E = R(g), C = function(L, W) {
              var le = W.css, Q = W.media;
              if (Q && L.setAttribute("media", Q), L.styleSheet)
                L.styleSheet.cssText = le;
              else {
                for (; L.firstChild; )
                  L.removeChild(L.firstChild);
                L.appendChild(document.createTextNode(le));
              }
            }.bind(null, E), O = function() {
              A(E);
            });
          return C(b), function(L) {
            if (L) {
              if (L.css === b.css && L.media === b.media && L.sourceMap === b.sourceMap)
                return;
              C(b = L);
            } else
              O();
          };
        }
        t.exports = function(b, g) {
          if (typeof DEBUG < "u" && DEBUG && typeof document != "object")
            throw new Error("The style-loader cannot be used in a non-browser environment");
          (g = g || {}).attrs = typeof g.attrs == "object" ? g.attrs : {}, g.singleton || typeof g.singleton == "boolean" || (g.singleton = l()), g.insertInto || (g.insertInto = "head"), g.insertAt || (g.insertAt = "bottom");
          var E = k(b, g);
          return p(E, g), function(C) {
            for (var O = [], I = 0; I < E.length; I++) {
              var H = E[I];
              (L = a[H.id]).refs--, O.push(L);
            }
            for (C && p(k(C, g), g), I = 0; I < O.length; I++) {
              var L;
              if ((L = O[I]).refs === 0) {
                for (var W = 0; W < L.parts.length; W++)
                  L.parts[W]();
                delete a[L.id];
              }
            }
          };
        };
        var w, M = (w = [], function(b, g) {
          return w[b] = g, w.filter(Boolean).join(`
`);
        });
        function N(b, g, E, C) {
          var O = E ? "" : C.css;
          if (b.styleSheet)
            b.styleSheet.cssText = M(g, O);
          else {
            var I = document.createTextNode(O), H = b.childNodes;
            H[g] && b.removeChild(H[g]), H.length ? b.insertBefore(I, H[g]) : b.appendChild(I);
          }
        }
      }, function(t, o) {
        t.exports = function(i) {
          var n = typeof window < "u" && window.location;
          if (!n)
            throw new Error("fixUrls requires window.location");
          if (!i || typeof i != "string")
            return i;
          var r = n.protocol + "//" + n.host, a = r + n.pathname.replace(/\/[^\/]*$/, "/");
          return i.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(l, c) {
            var u, h = c.trim().replace(/^"(.*)"$/, function(f, v) {
              return v;
            }).replace(/^'(.*)'$/, function(f, v) {
              return v;
            });
            return /^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(h) ? l : (u = h.indexOf("//") === 0 ? h : h.indexOf("/") === 0 ? r + h : a + h.replace(/^\.\//, ""), "url(" + JSON.stringify(u) + ")");
          });
        };
      }, function(t, o, i) {
        var n, r, a, l, c, u, h, f, v;
        t.exports = (n = "cdx-notifies", r = "cdx-notify", a = "cdx-notify__cross", l = "cdx-notify__button--confirm", c = "cdx-notify__button--cancel", u = "cdx-notify__input", h = "cdx-notify__button", f = "cdx-notify__btns-wrapper", { alert: v = function(p) {
          var k = document.createElement("DIV"), _ = document.createElement("DIV"), A = p.message, R = p.style;
          return k.classList.add(r), R && k.classList.add(r + "--" + R), k.innerHTML = A, _.classList.add(a), _.addEventListener("click", k.remove.bind(k)), k.appendChild(_), k;
        }, confirm: function(p) {
          var k = v(p), _ = document.createElement("div"), A = document.createElement("button"), R = document.createElement("button"), y = k.querySelector("." + a), x = p.cancelHandler, w = p.okHandler;
          return _.classList.add(f), A.innerHTML = p.okText || "Confirm", R.innerHTML = p.cancelText || "Cancel", A.classList.add(h), R.classList.add(h), A.classList.add(l), R.classList.add(c), x && typeof x == "function" && (R.addEventListener("click", x), y.addEventListener("click", x)), w && typeof w == "function" && A.addEventListener("click", w), A.addEventListener("click", k.remove.bind(k)), R.addEventListener("click", k.remove.bind(k)), _.appendChild(A), _.appendChild(R), k.appendChild(_), k;
        }, prompt: function(p) {
          var k = v(p), _ = document.createElement("div"), A = document.createElement("button"), R = document.createElement("input"), y = k.querySelector("." + a), x = p.cancelHandler, w = p.okHandler;
          return _.classList.add(f), A.innerHTML = p.okText || "Ok", A.classList.add(h), A.classList.add(l), R.classList.add(u), p.placeholder && R.setAttribute("placeholder", p.placeholder), p.default && (R.value = p.default), p.inputType && (R.type = p.inputType), x && typeof x == "function" && y.addEventListener("click", x), w && typeof w == "function" && A.addEventListener("click", function() {
            w(R.value);
          }), A.addEventListener("click", k.remove.bind(k)), _.appendChild(R), _.appendChild(A), k.appendChild(_), k;
        }, getWrapper: function() {
          var p = document.createElement("DIV");
          return p.classList.add(n), p;
        } });
      }]);
    });
  })(to);
  var oo = /* @__PURE__ */ xe(Le);
  var io = class {
    show(e) {
      oo.show(e);
    }
  };
  var no = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.notifier = new io();
    }
    get methods() {
      return {
        show: (e) => this.show(e)
      };
    }
    show(e) {
      return this.notifier.show(e);
    }
  };
  var so = class extends S {
    get methods() {
      const e = () => this.isEnabled;
      return {
        toggle: (t) => this.toggle(t),
        get isEnabled() {
          return e();
        }
      };
    }
    toggle(e) {
      return this.Editor.ReadOnly.toggle(e);
    }
    get isEnabled() {
      return this.Editor.ReadOnly.isEnabled;
    }
  };
  var Oe = {};
  var ro = {
    get exports() {
      return Oe;
    },
    set exports(s) {
      Oe = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(Lt, function() {
      function t(h) {
        var f = h.tags, v = Object.keys(f), p = v.map(function(k) {
          return typeof f[k];
        }).every(function(k) {
          return k === "object" || k === "boolean" || k === "function";
        });
        if (!p)
          throw new Error("The configuration was invalid");
        this.config = h;
      }
      var o = ["P", "LI", "TD", "TH", "DIV", "H1", "H2", "H3", "H4", "H5", "H6", "PRE"];
      function i(h) {
        return o.indexOf(h.nodeName) !== -1;
      }
      var n = ["A", "B", "STRONG", "I", "EM", "SUB", "SUP", "U", "STRIKE"];
      function r(h) {
        return n.indexOf(h.nodeName) !== -1;
      }
      t.prototype.clean = function(h) {
        const f = document.implementation.createHTMLDocument(), v = f.createElement("div");
        return v.innerHTML = h, this._sanitize(f, v), v.innerHTML;
      }, t.prototype._sanitize = function(h, f) {
        var v = a(h, f), p = v.firstChild();
        if (p)
          do {
            if (p.nodeType === Node.TEXT_NODE)
              if (p.data.trim() === "" && (p.previousElementSibling && i(p.previousElementSibling) || p.nextElementSibling && i(p.nextElementSibling))) {
                f.removeChild(p), this._sanitize(h, f);
                break;
              } else
                continue;
            if (p.nodeType === Node.COMMENT_NODE) {
              f.removeChild(p), this._sanitize(h, f);
              break;
            }
            var k = r(p), _;
            k && (_ = Array.prototype.some.call(p.childNodes, i));
            var A = !!f.parentNode, R = i(f) && i(p) && A, y = p.nodeName.toLowerCase(), x = l(this.config, y, p), w = k && _;
            if (w || c(p, x) || !this.config.keepNestedBlockElements && R) {
              if (!(p.nodeName === "SCRIPT" || p.nodeName === "STYLE"))
                for (; p.childNodes.length > 0; )
                  f.insertBefore(p.childNodes[0], p);
              f.removeChild(p), this._sanitize(h, f);
              break;
            }
            for (var M = 0; M < p.attributes.length; M += 1) {
              var N = p.attributes[M];
              u(N, x, p) && (p.removeAttribute(N.name), M = M - 1);
            }
            this._sanitize(h, p);
          } while (p = v.nextSibling());
      };
      function a(h, f) {
        return h.createTreeWalker(
          f,
          NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,
          null,
          false
        );
      }
      function l(h, f, v) {
        return typeof h.tags[f] == "function" ? h.tags[f](v) : h.tags[f];
      }
      function c(h, f) {
        return typeof f > "u" ? true : typeof f == "boolean" ? !f : false;
      }
      function u(h, f, v) {
        var p = h.name.toLowerCase();
        return f === true ? false : typeof f[p] == "function" ? !f[p](h.value, v) : typeof f[p] > "u" || f[p] === false ? true : typeof f[p] == "string" ? f[p] !== h.value : false;
      }
      return t;
    });
  })(ro);
  var ao = Oe;
  function ht(s, e) {
    return s.map((t) => {
      const o = D(e) ? e(t.tool) : e;
      return V(o) || (t.data = Pe(t.data, o)), t;
    });
  }
  function Z(s, e = {}) {
    const t = {
      tags: e
    };
    return new ao(t).clean(s);
  }
  function Pe(s, e) {
    return Array.isArray(s) ? lo(s, e) : j(s) ? co(s, e) : J(s) ? ho(s, e) : s;
  }
  function lo(s, e) {
    return s.map((t) => Pe(t, e));
  }
  function co(s, e) {
    const t = {};
    for (const o in s) {
      if (!Object.prototype.hasOwnProperty.call(s, o))
        continue;
      const i = s[o], n = uo(e[o]) ? e[o] : e;
      t[o] = Pe(i, n);
    }
    return t;
  }
  function ho(s, e) {
    return j(e) ? Z(s, e) : e === false ? Z(s, {}) : s;
  }
  function uo(s) {
    return j(s) || Nt(s) || D(s);
  }
  var po = class extends S {
    get methods() {
      return {
        clean: (e, t) => this.clean(e, t)
      };
    }
    clean(e, t) {
      return Z(e, t);
    }
  };
  var fo = class extends S {
    get methods() {
      return {
        save: () => this.save()
      };
    }
    save() {
      const e = "Editor's content can not be saved in read-only mode";
      return this.Editor.ReadOnly.isEnabled ? (K(e, "warn"), Promise.reject(new Error(e))) : this.Editor.Saver.save();
    }
  };
  var go = class extends S {
    get methods() {
      return {
        findParentTag: (e, t) => this.findParentTag(e, t),
        expandToTag: (e) => this.expandToTag(e)
      };
    }
    findParentTag(e, t) {
      return new m().findParentTag(e, t);
    }
    expandToTag(e) {
      new m().expandToTag(e);
    }
  };
  var bo = class extends S {
    get classes() {
      return {
        block: "cdx-block",
        inlineToolButton: "ce-inline-tool",
        inlineToolButtonActive: "ce-inline-tool--active",
        input: "cdx-input",
        loader: "cdx-loader",
        button: "cdx-button",
        settingsButton: "cdx-settings-button",
        settingsButtonActive: "cdx-settings-button--active"
      };
    }
  };
  var mo = class extends S {
    get methods() {
      return {
        close: () => this.close(),
        open: () => this.open(),
        toggleBlockSettings: (e) => this.toggleBlockSettings(e),
        toggleToolbox: (e) => this.toggleToolbox(e)
      };
    }
    open() {
      this.Editor.Toolbar.moveAndOpen();
    }
    close() {
      this.Editor.Toolbar.close();
    }
    toggleBlockSettings(e) {
      if (this.Editor.BlockManager.currentBlockIndex === -1) {
        K("Could't toggle the Toolbar because there is no block selected ", "warn");
        return;
      }
      (e != null ? e : !this.Editor.BlockSettings.opened) ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.open()) : this.Editor.BlockSettings.close();
    }
    toggleToolbox(e) {
      if (this.Editor.BlockManager.currentBlockIndex === -1) {
        K("Could't toggle the Toolbox because there is no block selected ", "warn");
        return;
      }
      (e != null ? e : !this.Editor.Toolbar.toolbox.opened) ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open()) : this.Editor.Toolbar.toolbox.close();
    }
  };
  var _e = {};
  var ko = {
    get exports() {
      return _e;
    },
    set exports(s) {
      _e = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(window, function() {
      return function(t) {
        var o = {};
        function i(n) {
          if (o[n])
            return o[n].exports;
          var r = o[n] = { i: n, l: false, exports: {} };
          return t[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = t, i.c = o, i.d = function(n, r, a) {
          i.o(n, r) || Object.defineProperty(n, r, { enumerable: true, get: a });
        }, i.r = function(n) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n, "__esModule", { value: true });
        }, i.t = function(n, r) {
          if (1 & r && (n = i(n)), 8 & r || 4 & r && typeof n == "object" && n && n.__esModule)
            return n;
          var a = /* @__PURE__ */ Object.create(null);
          if (i.r(a), Object.defineProperty(a, "default", { enumerable: true, value: n }), 2 & r && typeof n != "string")
            for (var l in n)
              i.d(a, l, function(c) {
                return n[c];
              }.bind(null, l));
          return a;
        }, i.n = function(n) {
          var r = n && n.__esModule ? function() {
            return n.default;
          } : function() {
            return n;
          };
          return i.d(r, "a", r), r;
        }, i.o = function(n, r) {
          return Object.prototype.hasOwnProperty.call(n, r);
        }, i.p = "", i(i.s = 0);
      }([function(t, o, i) {
        t.exports = i(1);
      }, function(t, o, i) {
        i.r(o), i.d(o, "default", function() {
          return n;
        });
        class n {
          constructor() {
            this.nodes = { wrapper: null, content: null }, this.showed = false, this.offsetTop = 10, this.offsetLeft = 10, this.offsetRight = 10, this.hidingDelay = 0, this.handleWindowScroll = () => {
              this.showed && this.hide(true);
            }, this.loadStyles(), this.prepare(), window.addEventListener("scroll", this.handleWindowScroll, { passive: true });
          }
          get CSS() {
            return { tooltip: "ct", tooltipContent: "ct__content", tooltipShown: "ct--shown", placement: { left: "ct--left", bottom: "ct--bottom", right: "ct--right", top: "ct--top" } };
          }
          show(a, l, c) {
            this.nodes.wrapper || this.prepare(), this.hidingTimeout && clearTimeout(this.hidingTimeout);
            const u = Object.assign({ placement: "bottom", marginTop: 0, marginLeft: 0, marginRight: 0, marginBottom: 0, delay: 70, hidingDelay: 0 }, c);
            if (u.hidingDelay && (this.hidingDelay = u.hidingDelay), this.nodes.content.innerHTML = "", typeof l == "string")
              this.nodes.content.appendChild(document.createTextNode(l));
            else {
              if (!(l instanceof Node))
                throw Error("[CodeX Tooltip] Wrong type of \xABcontent\xBB passed. It should be an instance of Node or String. But " + typeof l + " given.");
              this.nodes.content.appendChild(l);
            }
            switch (this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)), u.placement) {
              case "top":
                this.placeTop(a, u);
                break;
              case "left":
                this.placeLeft(a, u);
                break;
              case "right":
                this.placeRight(a, u);
                break;
              case "bottom":
              default:
                this.placeBottom(a, u);
            }
            u && u.delay ? this.showingTimeout = setTimeout(() => {
              this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = true;
            }, u.delay) : (this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = true);
          }
          hide(a = false) {
            if (this.hidingDelay && !a)
              return this.hidingTimeout && clearTimeout(this.hidingTimeout), void (this.hidingTimeout = setTimeout(() => {
                this.hide(true);
              }, this.hidingDelay));
            this.nodes.wrapper.classList.remove(this.CSS.tooltipShown), this.showed = false, this.showingTimeout && clearTimeout(this.showingTimeout);
          }
          onHover(a, l, c) {
            a.addEventListener("mouseenter", () => {
              this.show(a, l, c);
            }), a.addEventListener("mouseleave", () => {
              this.hide();
            });
          }
          destroy() {
            this.nodes.wrapper.remove(), window.removeEventListener("scroll", this.handleWindowScroll);
          }
          prepare() {
            this.nodes.wrapper = this.make("div", this.CSS.tooltip), this.nodes.content = this.make("div", this.CSS.tooltipContent), this.append(this.nodes.wrapper, this.nodes.content), this.append(document.body, this.nodes.wrapper);
          }
          loadStyles() {
            const a = "codex-tooltips-style";
            if (document.getElementById(a))
              return;
            const l = i(2), c = this.make("style", null, { textContent: l.toString(), id: a });
            this.prepend(document.head, c);
          }
          placeBottom(a, l) {
            const c = a.getBoundingClientRect(), u = c.left + a.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.bottom + window.pageYOffset + this.offsetTop + l.marginTop;
            this.applyPlacement("bottom", u, h);
          }
          placeTop(a, l) {
            const c = a.getBoundingClientRect(), u = c.left + a.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.top + window.pageYOffset - this.nodes.wrapper.clientHeight - this.offsetTop;
            this.applyPlacement("top", u, h);
          }
          placeLeft(a, l) {
            const c = a.getBoundingClientRect(), u = c.left - this.nodes.wrapper.offsetWidth - this.offsetLeft - l.marginLeft, h = c.top + window.pageYOffset + a.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;
            this.applyPlacement("left", u, h);
          }
          placeRight(a, l) {
            const c = a.getBoundingClientRect(), u = c.right + this.offsetRight + l.marginRight, h = c.top + window.pageYOffset + a.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;
            this.applyPlacement("right", u, h);
          }
          applyPlacement(a, l, c) {
            this.nodes.wrapper.classList.add(this.CSS.placement[a]), this.nodes.wrapper.style.left = l + "px", this.nodes.wrapper.style.top = c + "px";
          }
          make(a, l = null, c = {}) {
            const u = document.createElement(a);
            Array.isArray(l) ? u.classList.add(...l) : l && u.classList.add(l);
            for (const h in c)
              c.hasOwnProperty(h) && (u[h] = c[h]);
            return u;
          }
          append(a, l) {
            Array.isArray(l) ? l.forEach((c) => a.appendChild(c)) : a.appendChild(l);
          }
          prepend(a, l) {
            Array.isArray(l) ? (l = l.reverse()).forEach((c) => a.prepend(c)) : a.prepend(l);
          }
        }
      }, function(t, o) {
        t.exports = `.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:"";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url("")){.ct:before{border-radius:0;-webkit-mask-box-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path d="M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z"/></svg>') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:"";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}`;
      }]).default;
    });
  })(ko);
  var vo = /* @__PURE__ */ xe(_e);
  var Fe = class {
    constructor() {
      this.lib = new vo();
    }
    destroy() {
      this.lib.destroy();
    }
    show(e, t, o) {
      this.lib.show(e, t, o);
    }
    hide(e = false) {
      this.lib.hide(e);
    }
    onHover(e, t, o) {
      this.lib.onHover(e, t, o);
    }
  };
  var xo = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.tooltip = new Fe();
    }
    destroy() {
      this.tooltip.destroy();
    }
    get methods() {
      return {
        show: (e, t, o) => this.show(e, t, o),
        hide: () => this.hide(),
        onHover: (e, t, o) => this.onHover(e, t, o)
      };
    }
    show(e, t, o) {
      this.tooltip.show(e, t, o);
    }
    hide() {
      this.tooltip.hide();
    }
    onHover(e, t, o) {
      this.tooltip.onHover(e, t, o);
    }
  };
  var wo = class extends S {
    get methods() {
      return {
        nodes: this.editorNodes
      };
    }
    get editorNodes() {
      return {
        wrapper: this.Editor.UI.nodes.wrapper,
        redactor: this.Editor.UI.nodes.redactor
      };
    }
  };
  function ut(s, e) {
    const t = {};
    return Object.entries(s).forEach(([o, i]) => {
      if (j(i)) {
        const n = e ? `${e}.${o}` : o;
        Object.values(i).every((a) => J(a)) ? t[o] = n : t[o] = ut(i, n);
        return;
      }
      t[o] = i;
    }), t;
  }
  var X = ut(rt);
  function yo(s, e) {
    const t = {};
    return Object.keys(s).forEach((o) => {
      const i = e[o];
      i !== void 0 ? t[i] = s[o] : t[o] = s[o];
    }), t;
  }
  var Eo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11"/></svg>';
  var pt = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10"/></svg>';
  var Bo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15"/></svg>';
  var Co = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16"/></svg>';
  var To = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="12" cy="12" r="4" stroke="currentColor" stroke-width="2"/></svg>';
  var So = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M13.34 10C12.4223 12.7337 11 17 11 17"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M14.21 7H14.2"/></svg>';
  var qe = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.5691 6.39509 13.9269 6.25143 12.8271 7.17675L11.3901 8.38588C10.0935 9.47674 9.95706 11.4241 11.0888 12.6852L11.12 12.72"/></svg>';
  var Io = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 7.29999H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 7.29999H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.30999 12H9.3"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 12H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 16.7H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 16.7H14.59"/></svg>';
  var Mo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M12 7V12M12 17V12M17 12H12M12 12H7"/></svg>';
  var Lo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="10.5" cy="10.5" r="5.5" stroke="currentColor" stroke-width="2"/><line x1="15.4142" x2="19" y1="15" y2="18.5858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>';
  var Oo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.4701 8.2475 16.5781 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8796 8.49999"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8.24517 12.3883C8.24517 12.3883 7.97171 12.6922 7.47504 13.2161C6.58051 14.1598 6.55467 15.6408 7.44666 16.5869V16.5869C8.37653 17.5731 9.93744 17.5961 10.8959 16.6376L12.1452 15.3883"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6.39064 9.03238L7.58432 9.06668C8.17551 9.08366 8.6522 8.58665 8.61056 7.99669L8.5271 6.81397"/><line x1="12.1142" x2="11.7" y1="12.2" y2="11.7858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>';
  var P = class {
    constructor(e) {
      this.nodes = {
        root: null,
        icon: null
      }, this.confirmationState = null, this.removeSpecialFocusBehavior = () => {
        this.nodes.root.classList.remove(P.CSS.noFocus);
      }, this.removeSpecialHoverBehavior = () => {
        this.nodes.root.classList.remove(P.CSS.noHover);
      }, this.onErrorAnimationEnd = () => {
        this.nodes.icon.classList.remove(P.CSS.wobbleAnimation), this.nodes.icon.removeEventListener("animationend", this.onErrorAnimationEnd);
      }, this.params = e, this.nodes.root = this.make(e);
    }
    get isDisabled() {
      return this.params.isDisabled;
    }
    get toggle() {
      return this.params.toggle;
    }
    get title() {
      return this.params.title;
    }
    get closeOnActivate() {
      return this.params.closeOnActivate;
    }
    get isConfirmationStateEnabled() {
      return this.confirmationState !== null;
    }
    get isFocused() {
      return this.nodes.root.classList.contains(P.CSS.focused);
    }
    static get CSS() {
      return {
        container: "ce-popover-item",
        title: "ce-popover-item__title",
        secondaryTitle: "ce-popover-item__secondary-title",
        icon: "ce-popover-item__icon",
        active: "ce-popover-item--active",
        disabled: "ce-popover-item--disabled",
        focused: "ce-popover-item--focused",
        hidden: "ce-popover-item--hidden",
        confirmationState: "ce-popover-item--confirmation",
        noHover: "ce-popover-item--no-hover",
        noFocus: "ce-popover-item--no-focus",
        wobbleAnimation: "wobble"
      };
    }
    getElement() {
      return this.nodes.root;
    }
    handleClick() {
      if (this.isConfirmationStateEnabled) {
        this.activateOrEnableConfirmationMode(this.confirmationState);
        return;
      }
      this.activateOrEnableConfirmationMode(this.params);
    }
    toggleActive(e) {
      this.nodes.root.classList.toggle(P.CSS.active, e);
    }
    toggleHidden(e) {
      this.nodes.root.classList.toggle(P.CSS.hidden, e);
    }
    reset() {
      this.isConfirmationStateEnabled && this.disableConfirmationMode();
    }
    onFocus() {
      this.disableSpecialHoverAndFocusBehavior();
    }
    make(e) {
      const t = d.make("div", P.CSS.container);
      return e.name && (t.dataset.itemName = e.name), this.nodes.icon = d.make("div", P.CSS.icon, {
        innerHTML: e.icon || To
      }), t.appendChild(this.nodes.icon), t.appendChild(d.make("div", P.CSS.title, {
        innerHTML: e.title || ""
      })), e.secondaryLabel && t.appendChild(d.make("div", P.CSS.secondaryTitle, {
        textContent: e.secondaryLabel
      })), e.isActive && t.classList.add(P.CSS.active), e.isDisabled && t.classList.add(P.CSS.disabled), t;
    }
    enableConfirmationMode(e) {
      const t = __spreadProps(__spreadValues(__spreadValues({}, this.params), e), {
        confirmation: e.confirmation
      }), o = this.make(t);
      this.nodes.root.innerHTML = o.innerHTML, this.nodes.root.classList.add(P.CSS.confirmationState), this.confirmationState = e, this.enableSpecialHoverAndFocusBehavior();
    }
    disableConfirmationMode() {
      const e = this.make(this.params);
      this.nodes.root.innerHTML = e.innerHTML, this.nodes.root.classList.remove(P.CSS.confirmationState), this.confirmationState = null, this.disableSpecialHoverAndFocusBehavior();
    }
    enableSpecialHoverAndFocusBehavior() {
      this.nodes.root.classList.add(P.CSS.noHover), this.nodes.root.classList.add(P.CSS.noFocus), this.nodes.root.addEventListener("mouseleave", this.removeSpecialHoverBehavior, { once: true });
    }
    disableSpecialHoverAndFocusBehavior() {
      this.removeSpecialFocusBehavior(), this.removeSpecialHoverBehavior(), this.nodes.root.removeEventListener("mouseleave", this.removeSpecialHoverBehavior);
    }
    activateOrEnableConfirmationMode(e) {
      if (e.confirmation === void 0)
        try {
          e.onActivate(e), this.disableConfirmationMode();
        } catch (e2) {
          this.animateError();
        }
      else
        this.enableConfirmationMode(e.confirmation);
    }
    animateError() {
      this.nodes.icon.classList.contains(P.CSS.wobbleAnimation) || (this.nodes.icon.classList.add(P.CSS.wobbleAnimation), this.nodes.icon.addEventListener("animationend", this.onErrorAnimationEnd));
    }
  };
  var ce = class {
    constructor(s, e) {
      this.cursor = -1, this.items = [], this.items = s || [], this.focusedCssClass = e;
    }
    get currentItem() {
      return this.cursor === -1 ? null : this.items[this.cursor];
    }
    setCursor(s) {
      s < this.items.length && s >= -1 && (this.dropCursor(), this.cursor = s, this.items[this.cursor].classList.add(this.focusedCssClass));
    }
    setItems(s) {
      this.items = s;
    }
    next() {
      this.cursor = this.leafNodesAndReturnIndex(ce.directions.RIGHT);
    }
    previous() {
      this.cursor = this.leafNodesAndReturnIndex(ce.directions.LEFT);
    }
    dropCursor() {
      this.cursor !== -1 && (this.items[this.cursor].classList.remove(this.focusedCssClass), this.cursor = -1);
    }
    leafNodesAndReturnIndex(s) {
      if (this.items.length === 0)
        return this.cursor;
      let e = this.cursor;
      return e === -1 ? e = s === ce.directions.RIGHT ? -1 : 0 : this.items[e].classList.remove(this.focusedCssClass), s === ce.directions.RIGHT ? e = (e + 1) % this.items.length : e = (this.items.length + e - 1) % this.items.length, d.canSetCaret(this.items[e]) && oe(() => m.setCursor(this.items[e]), 50)(), this.items[e].classList.add(this.focusedCssClass), e;
    }
  };
  var ne = ce;
  ne.directions = {
    RIGHT: "right",
    LEFT: "left"
  };
  var G = class {
    constructor(e) {
      this.iterator = null, this.activated = false, this.flipCallbacks = [], this.onKeyDown = (t) => {
        if (this.isEventReadyForHandling(t))
          switch (G.usedKeys.includes(t.keyCode) && t.preventDefault(), t.keyCode) {
            case B.TAB:
              this.handleTabPress(t);
              break;
            case B.LEFT:
            case B.UP:
              this.flipLeft();
              break;
            case B.RIGHT:
            case B.DOWN:
              this.flipRight();
              break;
            case B.ENTER:
              this.handleEnterPress(t);
              break;
          }
      }, this.iterator = new ne(e.items, e.focusedItemClass), this.activateCallback = e.activateCallback, this.allowedKeys = e.allowedKeys || G.usedKeys;
    }
    get isActivated() {
      return this.activated;
    }
    static get usedKeys() {
      return [
        B.TAB,
        B.LEFT,
        B.RIGHT,
        B.ENTER,
        B.UP,
        B.DOWN
      ];
    }
    activate(e, t) {
      this.activated = true, e && this.iterator.setItems(e), t !== void 0 && this.iterator.setCursor(t), document.addEventListener("keydown", this.onKeyDown, true);
    }
    deactivate() {
      this.activated = false, this.dropCursor(), document.removeEventListener("keydown", this.onKeyDown);
    }
    focusFirst() {
      this.dropCursor(), this.flipRight();
    }
    flipLeft() {
      this.iterator.previous(), this.flipCallback();
    }
    flipRight() {
      this.iterator.next(), this.flipCallback();
    }
    hasFocus() {
      return !!this.iterator.currentItem;
    }
    onFlip(e) {
      this.flipCallbacks.push(e);
    }
    removeOnFlip(e) {
      this.flipCallbacks = this.flipCallbacks.filter((t) => t !== e);
    }
    dropCursor() {
      this.iterator.dropCursor();
    }
    isEventReadyForHandling(e) {
      return this.activated && this.allowedKeys.includes(e.keyCode);
    }
    handleTabPress(e) {
      switch (e.shiftKey ? ne.directions.LEFT : ne.directions.RIGHT) {
        case ne.directions.RIGHT:
          this.flipRight();
          break;
        case ne.directions.LEFT:
          this.flipLeft();
          break;
      }
    }
    handleEnterPress(e) {
      this.activated && (this.iterator.currentItem && (e.stopPropagation(), e.preventDefault(), this.iterator.currentItem.click()), D(this.activateCallback) && this.activateCallback(this.iterator.currentItem));
    }
    flipCallback() {
      this.iterator.currentItem && this.iterator.currentItem.scrollIntoViewIfNeeded(), this.flipCallbacks.forEach((e) => e());
    }
  };
  var ue = class {
    static get CSS() {
      return {
        wrapper: "cdx-search-field",
        icon: "cdx-search-field__icon",
        input: "cdx-search-field__input"
      };
    }
    constructor({ items: e, onSearch: t, placeholder: o }) {
      this.listeners = new Re(), this.items = e, this.onSearch = t, this.render(o);
    }
    getElement() {
      return this.wrapper;
    }
    focus() {
      this.input.focus();
    }
    clear() {
      this.input.value = "", this.searchQuery = "", this.onSearch("", this.foundItems);
    }
    destroy() {
      this.listeners.removeAll();
    }
    render(e) {
      this.wrapper = d.make("div", ue.CSS.wrapper);
      const t = d.make("div", ue.CSS.icon, {
        innerHTML: Lo
      });
      this.input = d.make("input", ue.CSS.input, {
        placeholder: e
      }), this.wrapper.appendChild(t), this.wrapper.appendChild(this.input), this.listeners.on(this.input, "input", () => {
        this.searchQuery = this.input.value, this.onSearch(this.searchQuery, this.foundItems);
      });
    }
    get foundItems() {
      return this.items.filter((e) => this.checkItem(e));
    }
    checkItem(e) {
      var i;
      const t = ((i = e.title) == null ? void 0 : i.toLowerCase()) || "", o = this.searchQuery.toLowerCase();
      return t.includes(o);
    }
  };
  var de = class {
    lock() {
      Ge ? this.lockHard() : document.body.classList.add(de.CSS.scrollLocked);
    }
    unlock() {
      Ge ? this.unlockHard() : document.body.classList.remove(de.CSS.scrollLocked);
    }
    lockHard() {
      this.scrollPosition = window.pageYOffset, document.documentElement.style.setProperty(
        "--window-scroll-offset",
        `${this.scrollPosition}px`
      ), document.body.classList.add(de.CSS.scrollLockedHard);
    }
    unlockHard() {
      document.body.classList.remove(de.CSS.scrollLockedHard), this.scrollPosition !== null && window.scrollTo(0, this.scrollPosition), this.scrollPosition = null;
    }
  };
  var ft = de;
  ft.CSS = {
    scrollLocked: "ce-scroll-locked",
    scrollLockedHard: "ce-scroll-locked--hard"
  };
  var _o = Object.defineProperty;
  var Ao = Object.getOwnPropertyDescriptor;
  var No = (s, e, t, o) => {
    for (var i = o > 1 ? void 0 : o ? Ao(e, t) : e, n = s.length - 1, r; n >= 0; n--)
      (r = s[n]) && (i = (o ? r(e, t, i) : r(i)) || i);
    return o && i && _o(e, t, i), i;
  };
  var fe = /* @__PURE__ */ ((s) => (s.Close = "close", s))(fe || {});
  var z = class extends we {
    constructor(s) {
      super(), this.scopeElement = document.body, this.listeners = new Re(), this.scrollLocker = new ft(), this.nodes = {
        wrapper: null,
        popover: null,
        nothingFoundMessage: null,
        customContent: null,
        items: null,
        overlay: null
      }, this.messages = {
        nothingFound: "Nothing found",
        search: "Search"
      }, this.onFlip = () => {
        this.items.find((t) => t.isFocused).onFocus();
      }, this.items = s.items.map((e) => new P(e)), s.scopeElement !== void 0 && (this.scopeElement = s.scopeElement), s.messages && (this.messages = __spreadValues(__spreadValues({}, this.messages), s.messages)), s.customContentFlippableItems && (this.customContentFlippableItems = s.customContentFlippableItems), this.make(), s.customContent && this.addCustomContent(s.customContent), s.searchable && this.addSearch(), this.initializeFlipper();
    }
    static get CSS() {
      return {
        popover: "ce-popover",
        popoverOpenTop: "ce-popover--open-top",
        popoverOpened: "ce-popover--opened",
        search: "ce-popover__search",
        nothingFoundMessage: "ce-popover__nothing-found-message",
        nothingFoundMessageDisplayed: "ce-popover__nothing-found-message--displayed",
        customContent: "ce-popover__custom-content",
        customContentHidden: "ce-popover__custom-content--hidden",
        items: "ce-popover__items",
        overlay: "ce-popover__overlay",
        overlayHidden: "ce-popover__overlay--hidden"
      };
    }
    getElement() {
      return this.nodes.wrapper;
    }
    hasFocus() {
      return this.flipper.hasFocus();
    }
    show() {
      this.shouldOpenBottom || (this.nodes.popover.style.setProperty("--popover-height", this.height + "px"), this.nodes.popover.classList.add(z.CSS.popoverOpenTop)), this.nodes.overlay.classList.remove(z.CSS.overlayHidden), this.nodes.popover.classList.add(z.CSS.popoverOpened), this.flipper.activate(this.flippableElements), this.search !== void 0 && setTimeout(() => {
        this.search.focus();
      }, 100), ee() && this.scrollLocker.lock();
    }
    hide() {
      this.nodes.popover.classList.remove(z.CSS.popoverOpened), this.nodes.popover.classList.remove(z.CSS.popoverOpenTop), this.nodes.overlay.classList.add(z.CSS.overlayHidden), this.flipper.deactivate(), this.items.forEach((s) => s.reset()), this.search !== void 0 && this.search.clear(), ee() && this.scrollLocker.unlock(), this.emit(
        "close"
      );
    }
    destroy() {
      this.flipper.deactivate(), this.listeners.removeAll(), ee() && this.scrollLocker.unlock();
    }
    make() {
      this.nodes.popover = d.make("div", [z.CSS.popover]), this.nodes.nothingFoundMessage = d.make("div", [z.CSS.nothingFoundMessage], {
        textContent: this.messages.nothingFound
      }), this.nodes.popover.appendChild(this.nodes.nothingFoundMessage), this.nodes.items = d.make("div", [z.CSS.items]), this.items.forEach((s) => {
        this.nodes.items.appendChild(s.getElement());
      }), this.nodes.popover.appendChild(this.nodes.items), this.listeners.on(this.nodes.popover, "click", (s) => {
        const e = this.getTargetItem(s);
        e !== void 0 && this.handleItemClick(e);
      }), this.nodes.wrapper = d.make("div"), this.nodes.overlay = d.make("div", [z.CSS.overlay, z.CSS.overlayHidden]), this.listeners.on(this.nodes.overlay, "click", () => {
        this.hide();
      }), this.nodes.wrapper.appendChild(this.nodes.overlay), this.nodes.wrapper.appendChild(this.nodes.popover);
    }
    addSearch() {
      this.search = new ue({
        items: this.items,
        placeholder: this.messages.search,
        onSearch: (e, t) => {
          this.items.forEach((i) => {
            const n = !t.includes(i);
            i.toggleHidden(n);
          }), this.toggleNothingFoundMessage(t.length === 0), this.toggleCustomContent(e !== "");
          const o = e === "" ? this.flippableElements : t.map((i) => i.getElement());
          this.flipper.isActivated && (this.flipper.deactivate(), this.flipper.activate(o));
        }
      });
      const s = this.search.getElement();
      s.classList.add(z.CSS.search), this.nodes.popover.insertBefore(s, this.nodes.popover.firstChild);
    }
    addCustomContent(s) {
      this.nodes.customContent = s, this.nodes.customContent.classList.add(z.CSS.customContent), this.nodes.popover.insertBefore(s, this.nodes.popover.firstChild);
    }
    getTargetItem(s) {
      return this.items.find((e) => s.composedPath().includes(e.getElement()));
    }
    handleItemClick(s) {
      s.isDisabled || (this.items.filter((e) => e !== s).forEach((e) => e.reset()), s.handleClick(), this.toggleItemActivenessIfNeeded(s), s.closeOnActivate && this.hide());
    }
    initializeFlipper() {
      this.flipper = new G({
        items: this.flippableElements,
        focusedItemClass: P.CSS.focused,
        allowedKeys: [
          B.TAB,
          B.UP,
          B.DOWN,
          B.ENTER
        ]
      }), this.flipper.onFlip(this.onFlip);
    }
    get flippableElements() {
      const s = this.items.map((t) => t.getElement());
      return (this.customContentFlippableItems || []).concat(s);
    }
    get height() {
      let s = 0;
      if (this.nodes.popover === null)
        return s;
      const e = this.nodes.popover.cloneNode(true);
      return e.style.visibility = "hidden", e.style.position = "absolute", e.style.top = "-1000px", e.classList.add(z.CSS.popoverOpened), document.body.appendChild(e), s = e.offsetHeight, e.remove(), s;
    }
    get shouldOpenBottom() {
      const s = this.nodes.popover.getBoundingClientRect(), e = this.scopeElement.getBoundingClientRect(), t = this.height, o = s.top + t, i = s.top - t, n = Math.min(window.innerHeight, e.bottom);
      return i < e.top || o <= n;
    }
    toggleNothingFoundMessage(s) {
      this.nodes.nothingFoundMessage.classList.toggle(z.CSS.nothingFoundMessageDisplayed, s);
    }
    toggleCustomContent(s) {
      var e;
      (e = this.nodes.customContent) == null || e.classList.toggle(z.CSS.customContentHidden, s);
    }
    toggleItemActivenessIfNeeded(s) {
      if (s.toggle === true && s.toggleActive(), typeof s.toggle == "string") {
        const e = this.items.filter((t) => t.toggle === s.toggle);
        if (e.length === 1) {
          s.toggleActive();
          return;
        }
        e.forEach((t) => {
          t.toggleActive(t === s);
        });
      }
    }
  };
  var He = z;
  No([
    ae
  ], He.prototype, "height", 1);
  var Ro = class extends S {
    constructor() {
      super(...arguments), this.opened = false, this.selection = new m(), this.onPopoverClose = () => {
        this.close();
      };
    }
    get events() {
      return {
        opened: "block-settings-opened",
        closed: "block-settings-closed"
      };
    }
    get CSS() {
      return {
        settings: "ce-settings"
      };
    }
    get flipper() {
      var e;
      return (e = this.popover) == null ? void 0 : e.flipper;
    }
    make() {
      this.nodes.wrapper = d.make("div", [this.CSS.settings]);
    }
    destroy() {
      this.removeAllNodes();
    }
    open(e = this.Editor.BlockManager.currentBlock) {
      this.opened = true, this.selection.save(), e.selected = true, this.Editor.BlockSelection.clearCache();
      const [t, o] = e.getTunes();
      this.eventsDispatcher.emit(this.events.opened), this.popover = new He({
        searchable: true,
        items: t.map((i) => this.resolveTuneAliases(i)),
        customContent: o,
        customContentFlippableItems: this.getControls(o),
        scopeElement: this.Editor.API.methods.ui.nodes.redactor,
        messages: {
          nothingFound: $2.ui(X.ui.popover, "Nothing found"),
          search: $2.ui(X.ui.popover, "Filter")
        }
      }), this.popover.on(fe.Close, this.onPopoverClose), this.nodes.wrapper.append(this.popover.getElement()), this.popover.show();
    }
    getElement() {
      return this.nodes.wrapper;
    }
    close() {
      this.opened = false, m.isAtEditor || this.selection.restore(), this.selection.clearSaved(), !this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted && this.Editor.BlockManager.currentBlock && (this.Editor.BlockManager.currentBlock.selected = false), this.eventsDispatcher.emit(this.events.closed), this.popover && (this.popover.off(fe.Close, this.onPopoverClose), this.popover.destroy(), this.popover.getElement().remove(), this.popover = null);
    }
    getControls(e) {
      const { StylesAPI: t } = this.Editor, o = e.querySelectorAll(
        `.${t.classes.settingsButton}, ${d.allInputsSelector}`
      );
      return Array.from(o);
    }
    resolveTuneAliases(e) {
      const t = yo(e, { label: "title" });
      return e.confirmation && (t.confirmation = this.resolveTuneAliases(e.confirmation)), t;
    }
  };
  var Y = class extends S {
    constructor() {
      super(...arguments), this.opened = false, this.tools = [], this.flipper = null, this.togglingCallback = null;
    }
    static get CSS() {
      return {
        conversionToolbarWrapper: "ce-conversion-toolbar",
        conversionToolbarShowed: "ce-conversion-toolbar--showed",
        conversionToolbarTools: "ce-conversion-toolbar__tools",
        conversionToolbarLabel: "ce-conversion-toolbar__label",
        conversionTool: "ce-conversion-tool",
        conversionToolHidden: "ce-conversion-tool--hidden",
        conversionToolIcon: "ce-conversion-tool__icon",
        conversionToolFocused: "ce-conversion-tool--focused",
        conversionToolActive: "ce-conversion-tool--active"
      };
    }
    make() {
      this.nodes.wrapper = d.make("div", [
        Y.CSS.conversionToolbarWrapper,
        ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []
      ]), this.nodes.tools = d.make("div", Y.CSS.conversionToolbarTools);
      const e = d.make("div", Y.CSS.conversionToolbarLabel, {
        textContent: $2.ui(X.ui.inlineToolbar.converter, "Convert to")
      });
      return this.addTools(), this.enableFlipper(), d.append(this.nodes.wrapper, e), d.append(this.nodes.wrapper, this.nodes.tools), this.nodes.wrapper;
    }
    destroy() {
      this.flipper && (this.flipper.deactivate(), this.flipper = null), this.removeAllNodes();
    }
    toggle(e) {
      this.opened ? this.close() : this.open(), D(e) && (this.togglingCallback = e);
    }
    open() {
      this.filterTools(), this.opened = true, this.nodes.wrapper.classList.add(Y.CSS.conversionToolbarShowed), window.requestAnimationFrame(() => {
        this.flipper.activate(this.tools.map((e) => e.button).filter((e) => !e.classList.contains(Y.CSS.conversionToolHidden))), this.flipper.focusFirst(), D(this.togglingCallback) && this.togglingCallback(true);
      });
    }
    close() {
      this.opened = false, this.flipper.deactivate(), this.nodes.wrapper.classList.remove(Y.CSS.conversionToolbarShowed), D(this.togglingCallback) && this.togglingCallback(false);
    }
    hasTools() {
      return this.tools.length === 1 ? this.tools[0].name !== this.config.defaultBlock : true;
    }
    async replaceWithBlock(e, t) {
      const o = this.Editor.BlockManager.currentBlock.tool, n = (await this.Editor.BlockManager.currentBlock.save()).data, r = this.Editor.Tools.blockTools.get(e);
      let a = "";
      const l = o.conversionConfig.export;
      if (D(l))
        a = l(n);
      else if (J(l))
        a = n[l];
      else {
        T("Conversion \xABexport\xBB property must be a string or function. String means key of saved data object to export. Function should export processed string to export.");
        return;
      }
      const c = Z(
        a,
        r.sanitizeConfig
      );
      let u = {};
      const h = r.conversionConfig.import;
      if (D(h))
        u = h(c);
      else if (J(h))
        u[h] = c;
      else {
        T("Conversion \xABimport\xBB property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data.");
        return;
      }
      t && (u = Object.assign(u, t)), this.Editor.BlockManager.replace({
        tool: e,
        data: u
      }), this.Editor.BlockSelection.clearSelection(), this.close(), this.Editor.InlineToolbar.close(), oe(() => {
        this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock);
      }, 10)();
    }
    addTools() {
      const e = this.Editor.Tools.blockTools;
      Array.from(e.entries()).forEach(([t, o]) => {
        const i = o.conversionConfig;
        !i || !i.import || o.toolbox.forEach(
          (n) => this.addToolIfValid(t, n)
        );
      });
    }
    addToolIfValid(e, t) {
      V(t) || !t.icon || this.addTool(e, t);
    }
    addTool(e, t) {
      const o = d.make("div", [Y.CSS.conversionTool]), i = d.make("div", [Y.CSS.conversionToolIcon]);
      o.dataset.tool = e, i.innerHTML = t.icon, d.append(o, i), d.append(o, d.text($2.t(X.toolNames, t.title || ke(e)))), d.append(this.nodes.tools, o), this.tools.push({
        name: e,
        button: o,
        toolboxItem: t
      }), this.listeners.on(o, "click", async () => {
        await this.replaceWithBlock(e, t.data);
      });
    }
    async filterTools() {
      const { currentBlock: e } = this.Editor.BlockManager, t = await e.getActiveToolboxEntry();
      function o(i, n) {
        return i.icon === n.icon && i.title === n.title;
      }
      this.tools.forEach((i) => {
        let n = false;
        if (t) {
          const r = o(t, i.toolboxItem);
          n = i.button.dataset.tool === e.name && r;
        }
        i.button.hidden = n, i.button.classList.toggle(Y.CSS.conversionToolHidden, n);
      });
    }
    enableFlipper() {
      this.flipper = new G({
        focusedItemClass: Y.CSS.conversionToolFocused
      });
    }
  };
  var Ae = {};
  var Do = {
    get exports() {
      return Ae;
    },
    set exports(s) {
      Ae = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(window, function() {
      return function(t) {
        var o = {};
        function i(n) {
          if (o[n])
            return o[n].exports;
          var r = o[n] = { i: n, l: false, exports: {} };
          return t[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = t, i.c = o, i.d = function(n, r, a) {
          i.o(n, r) || Object.defineProperty(n, r, { enumerable: true, get: a });
        }, i.r = function(n) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n, "__esModule", { value: true });
        }, i.t = function(n, r) {
          if (1 & r && (n = i(n)), 8 & r || 4 & r && typeof n == "object" && n && n.__esModule)
            return n;
          var a = /* @__PURE__ */ Object.create(null);
          if (i.r(a), Object.defineProperty(a, "default", { enumerable: true, value: n }), 2 & r && typeof n != "string")
            for (var l in n)
              i.d(a, l, function(c) {
                return n[c];
              }.bind(null, l));
          return a;
        }, i.n = function(n) {
          var r = n && n.__esModule ? function() {
            return n.default;
          } : function() {
            return n;
          };
          return i.d(r, "a", r), r;
        }, i.o = function(n, r) {
          return Object.prototype.hasOwnProperty.call(n, r);
        }, i.p = "", i(i.s = 0);
      }([function(t, o, i) {
        function n(l, c) {
          for (var u = 0; u < c.length; u++) {
            var h = c[u];
            h.enumerable = h.enumerable || false, h.configurable = true, "value" in h && (h.writable = true), Object.defineProperty(l, h.key, h);
          }
        }
        function r(l, c, u) {
          return c && n(l.prototype, c), u && n(l, u), l;
        }
        i.r(o);
        var a = function() {
          function l(c) {
            var u = this;
            (function(h, f) {
              if (!(h instanceof f))
                throw new TypeError("Cannot call a class as a function");
            })(this, l), this.commands = {}, this.keys = {}, this.name = c.name, this.parseShortcutName(c.name), this.element = c.on, this.callback = c.callback, this.executeShortcut = function(h) {
              u.execute(h);
            }, this.element.addEventListener("keydown", this.executeShortcut, false);
          }
          return r(l, null, [{ key: "supportedCommands", get: function() {
            return { SHIFT: ["SHIFT"], CMD: ["CMD", "CONTROL", "COMMAND", "WINDOWS", "CTRL"], ALT: ["ALT", "OPTION"] };
          } }, { key: "keyCodes", get: function() {
            return { 0: 48, 1: 49, 2: 50, 3: 51, 4: 52, 5: 53, 6: 54, 7: 55, 8: 56, 9: 57, A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90, BACKSPACE: 8, ENTER: 13, ESCAPE: 27, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, INSERT: 45, DELETE: 46, ".": 190 };
          } }]), r(l, [{ key: "parseShortcutName", value: function(c) {
            c = c.split("+");
            for (var u = 0; u < c.length; u++) {
              c[u] = c[u].toUpperCase();
              var h = false;
              for (var f in l.supportedCommands)
                if (l.supportedCommands[f].includes(c[u])) {
                  h = this.commands[f] = true;
                  break;
                }
              h || (this.keys[c[u]] = true);
            }
            for (var v in l.supportedCommands)
              this.commands[v] || (this.commands[v] = false);
          } }, { key: "execute", value: function(c) {
            var u, h = { CMD: c.ctrlKey || c.metaKey, SHIFT: c.shiftKey, ALT: c.altKey }, f = true;
            for (u in this.commands)
              this.commands[u] !== h[u] && (f = false);
            var v, p = true;
            for (v in this.keys)
              p = p && c.keyCode === l.keyCodes[v];
            f && p && this.callback(c);
          } }, { key: "remove", value: function() {
            this.element.removeEventListener("keydown", this.executeShortcut);
          } }]), l;
        }();
        o.default = a;
      }]).default;
    });
  })(Do);
  var Po = /* @__PURE__ */ xe(Ae);
  var Fo = class {
    constructor() {
      this.registeredShortcuts = /* @__PURE__ */ new Map();
    }
    add(e) {
      if (this.findShortcut(e.on, e.name))
        throw Error(
          `Shortcut ${e.name} is already registered for ${e.on}. Please remove it before add a new handler.`
        );
      const o = new Po({
        name: e.name,
        on: e.on,
        callback: e.handler
      }), i = this.registeredShortcuts.get(e.on) || [];
      this.registeredShortcuts.set(e.on, [...i, o]);
    }
    remove(e, t) {
      const o = this.findShortcut(e, t);
      if (!o)
        return;
      o.remove();
      const i = this.registeredShortcuts.get(e);
      this.registeredShortcuts.set(e, i.filter((n) => n !== o));
    }
    findShortcut(e, t) {
      return (this.registeredShortcuts.get(e) || []).find(({ name: i }) => i === t);
    }
  };
  var re = new Fo();
  var Ho = Object.defineProperty;
  var zo = Object.getOwnPropertyDescriptor;
  var gt = (s, e, t, o) => {
    for (var i = o > 1 ? void 0 : o ? zo(e, t) : e, n = s.length - 1, r; n >= 0; n--)
      (r = s[n]) && (i = (o ? r(e, t, i) : r(i)) || i);
    return o && i && Ho(e, t, i), i;
  };
  var be = /* @__PURE__ */ ((s) => (s.Opened = "toolbox-opened", s.Closed = "toolbox-closed", s.BlockAdded = "toolbox-block-added", s))(be || {});
  var bt = class extends we {
    constructor({ api: s, tools: e, i18nLabels: t }) {
      super(), this.opened = false, this.nodes = {
        toolbox: null
      }, this.onPopoverClose = () => {
        this.opened = false, this.emit(
          "toolbox-closed"
        );
      }, this.api = s, this.tools = e, this.i18nLabels = t;
    }
    get isEmpty() {
      return this.toolsToBeDisplayed.length === 0;
    }
    static get CSS() {
      return {
        toolbox: "ce-toolbox"
      };
    }
    make() {
      return this.popover = new He({
        scopeElement: this.api.ui.nodes.redactor,
        searchable: true,
        messages: {
          nothingFound: this.i18nLabels.nothingFound,
          search: this.i18nLabels.filter
        },
        items: this.toolboxItemsToBeDisplayed
      }), this.popover.on(fe.Close, this.onPopoverClose), this.enableShortcuts(), this.nodes.toolbox = this.popover.getElement(), this.nodes.toolbox.classList.add(bt.CSS.toolbox), this.nodes.toolbox;
    }
    hasFocus() {
      var s;
      return (s = this.popover) == null ? void 0 : s.hasFocus();
    }
    destroy() {
      var s;
      super.destroy(), this.nodes && this.nodes.toolbox && (this.nodes.toolbox.remove(), this.nodes.toolbox = null), this.removeAllShortcuts(), (s = this.popover) == null || s.off(fe.Close, this.onPopoverClose);
    }
    toolButtonActivated(s, e) {
      this.insertNewBlock(s, e);
    }
    open() {
      var s;
      this.isEmpty || ((s = this.popover) == null || s.show(), this.opened = true, this.emit(
        "toolbox-opened"
      ));
    }
    close() {
      var s;
      (s = this.popover) == null || s.hide(), this.opened = false, this.emit(
        "toolbox-closed"
      );
    }
    toggle() {
      this.opened ? this.close() : this.open();
    }
    get toolsToBeDisplayed() {
      const s = [];
      return this.tools.forEach((e) => {
        e.toolbox && s.push(e);
      }), s;
    }
    get toolboxItemsToBeDisplayed() {
      const s = (e, t) => ({
        icon: e.icon,
        title: $2.t(X.toolNames, e.title || ke(t.name)),
        name: t.name,
        onActivate: () => {
          this.toolButtonActivated(t.name, e.data);
        },
        secondaryLabel: t.shortcut ? nt(t.shortcut) : ""
      });
      return this.toolsToBeDisplayed.reduce((e, t) => (Array.isArray(t.toolbox) ? t.toolbox.forEach((o) => {
        e.push(s(o, t));
      }) : t.toolbox !== void 0 && e.push(s(t.toolbox, t)), e), []);
    }
    enableShortcuts() {
      this.toolsToBeDisplayed.forEach((s) => {
        const e = s.shortcut;
        e && this.enableShortcutForTool(s.name, e);
      });
    }
    enableShortcutForTool(s, e) {
      re.add({
        name: e,
        on: this.api.ui.nodes.redactor,
        handler: (t) => {
          t.preventDefault(), this.insertNewBlock(s);
        }
      });
    }
    removeAllShortcuts() {
      this.toolsToBeDisplayed.forEach((s) => {
        const e = s.shortcut;
        e && re.remove(this.api.ui.nodes.redactor, e);
      });
    }
    async insertNewBlock(s, e) {
      const t = this.api.blocks.getCurrentBlockIndex(), o = this.api.blocks.getBlockByIndex(t);
      if (!o)
        return;
      const i = o.isEmpty ? t : t + 1;
      let n;
      if (e) {
        const a = await this.api.blocks.composeBlockData(s);
        n = Object.assign(a, e);
      }
      const r = this.api.blocks.insert(
        s,
        n,
        void 0,
        i,
        void 0,
        o.isEmpty
      );
      r.call(q.APPEND_CALLBACK), this.api.caret.setToBlock(i), this.emit("toolbox-block-added", {
        block: r
      }), this.api.toolbar.close();
    }
  };
  var ze = bt;
  gt([
    ae
  ], ze.prototype, "toolsToBeDisplayed", 1);
  gt([
    ae
  ], ze.prototype, "toolboxItemsToBeDisplayed", 1);
  var mt = "block hovered";
  var jo = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.tooltip = new Fe();
    }
    get CSS() {
      return {
        toolbar: "ce-toolbar",
        content: "ce-toolbar__content",
        actions: "ce-toolbar__actions",
        actionsOpened: "ce-toolbar__actions--opened",
        toolbarOpened: "ce-toolbar--opened",
        openedToolboxHolderModifier: "codex-editor--toolbox-opened",
        plusButton: "ce-toolbar__plus",
        plusButtonShortcut: "ce-toolbar__plus-shortcut",
        settingsToggler: "ce-toolbar__settings-btn",
        settingsTogglerHidden: "ce-toolbar__settings-btn--hidden"
      };
    }
    get opened() {
      return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened);
    }
    get toolbox() {
      return {
        opened: this.toolboxInstance.opened,
        close: () => {
          this.toolboxInstance.close();
        },
        open: () => {
          this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.open();
        },
        toggle: () => this.toolboxInstance.toggle(),
        hasFocus: () => this.toolboxInstance.hasFocus()
      };
    }
    get blockActions() {
      return {
        hide: () => {
          this.nodes.actions.classList.remove(this.CSS.actionsOpened);
        },
        show: () => {
          this.nodes.actions.classList.add(this.CSS.actionsOpened);
        }
      };
    }
    get blockTunesToggler() {
      return {
        hide: () => this.nodes.settingsToggler.classList.add(this.CSS.settingsTogglerHidden),
        show: () => this.nodes.settingsToggler.classList.remove(this.CSS.settingsTogglerHidden)
      };
    }
    toggleReadOnly(e) {
      e ? (this.destroy(), this.Editor.BlockSettings.destroy(), this.disableModuleBindings()) : (this.drawUI(), this.enableModuleBindings());
    }
    moveAndOpen(e = this.Editor.BlockManager.currentBlock) {
      if (this.toolboxInstance.opened && this.toolboxInstance.close(), this.Editor.BlockSettings.opened && this.Editor.BlockSettings.close(), !e)
        return;
      this.hoveredBlock = e;
      const t = e.holder, { isMobile: o } = this.Editor.UI, i = e.pluginsContent, n = window.getComputedStyle(i), r = parseInt(n.paddingTop, 10), a = t.offsetHeight;
      let l;
      o ? l = t.offsetTop + a : l = t.offsetTop + r, this.nodes.wrapper.style.top = `${Math.floor(l)}px`, this.Editor.BlockManager.blocks.length === 1 && e.isEmpty ? this.blockTunesToggler.hide() : this.blockTunesToggler.show(), this.open();
    }
    close() {
      this.Editor.ReadOnly.isEnabled || (this.nodes.wrapper.classList.remove(this.CSS.toolbarOpened), this.blockActions.hide(), this.toolboxInstance.close(), this.Editor.BlockSettings.close());
    }
    open(e = true) {
      oe(() => {
        this.nodes.wrapper.classList.add(this.CSS.toolbarOpened), e ? this.blockActions.show() : this.blockActions.hide();
      }, 50)();
    }
    make() {
      this.nodes.wrapper = d.make("div", this.CSS.toolbar), ["content", "actions"].forEach((t) => {
        this.nodes[t] = d.make("div", this.CSS[t]);
      }), d.append(this.nodes.wrapper, this.nodes.content), d.append(this.nodes.content, this.nodes.actions), this.nodes.plusButton = d.make("div", this.CSS.plusButton, {
        innerHTML: Mo
      }), d.append(this.nodes.actions, this.nodes.plusButton), this.readOnlyMutableListeners.on(this.nodes.plusButton, "click", () => {
        this.tooltip.hide(true), this.plusButtonClicked();
      }, false);
      const e = d.make("div");
      e.appendChild(document.createTextNode($2.ui(X.ui.toolbar.toolbox, "Add"))), e.appendChild(d.make("div", this.CSS.plusButtonShortcut, {
        textContent: "\u21E5 Tab"
      })), this.tooltip.onHover(this.nodes.plusButton, e, {
        hidingDelay: 400
      }), this.nodes.settingsToggler = d.make("span", this.CSS.settingsToggler, {
        innerHTML: Io
      }), d.append(this.nodes.actions, this.nodes.settingsToggler), this.tooltip.onHover(
        this.nodes.settingsToggler,
        $2.ui(X.ui.blockTunes.toggler, "Click to tune"),
        {
          hidingDelay: 400
        }
      ), d.append(this.nodes.actions, this.makeToolbox()), d.append(this.nodes.actions, this.Editor.BlockSettings.getElement()), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);
    }
    makeToolbox() {
      return this.toolboxInstance = new ze({
        api: this.Editor.API.methods,
        tools: this.Editor.Tools.blockTools,
        i18nLabels: {
          filter: $2.ui(X.ui.popover, "Filter"),
          nothingFound: $2.ui(X.ui.popover, "Nothing found")
        }
      }), this.toolboxInstance.on(be.Opened, () => {
        this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolboxHolderModifier);
      }), this.toolboxInstance.on(be.Closed, () => {
        this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolboxHolderModifier);
      }), this.toolboxInstance.on(be.BlockAdded, ({ block: e }) => {
        const { BlockManager: t, Caret: o } = this.Editor, i = t.getBlockById(e.id);
        i.inputs.length === 0 && (i === t.lastBlock ? (t.insertAtEnd(), o.setToBlock(t.lastBlock)) : o.setToBlock(t.nextBlock));
      }), this.toolboxInstance.make();
    }
    plusButtonClicked() {
      this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.toggle();
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(this.nodes.settingsToggler, "mousedown", (e) => {
        e.stopPropagation(), this.settingsTogglerClicked(), this.toolboxInstance.opened && this.toolboxInstance.close(), this.tooltip.hide(true);
      }, true), ee() || this.eventsDispatcher.on(mt, (e) => {
        this.Editor.BlockSettings.opened || this.toolboxInstance.opened || this.moveAndOpen(e.block);
      });
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    settingsTogglerClicked() {
      this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.BlockSettings.open(this.hoveredBlock);
    }
    drawUI() {
      this.Editor.BlockSettings.make(), this.make();
    }
    destroy() {
      this.removeAllNodes(), this.toolboxInstance && this.toolboxInstance.destroy(), this.tooltip.destroy();
    }
  };
  var ye = /* @__PURE__ */ ((s) => (s[s.Block = 0] = "Block", s[s.Inline = 1] = "Inline", s[s.Tune = 2] = "Tune", s))(ye || {});
  var me = /* @__PURE__ */ ((s) => (s.Shortcut = "shortcut", s.Toolbox = "toolbox", s.EnabledInlineTools = "inlineToolbar", s.EnabledBlockTunes = "tunes", s.Config = "config", s))(me || {});
  var kt = /* @__PURE__ */ ((s) => (s.Shortcut = "shortcut", s.SanitizeConfig = "sanitize", s))(kt || {});
  var se = /* @__PURE__ */ ((s) => (s.IsEnabledLineBreaks = "enableLineBreaks", s.Toolbox = "toolbox", s.ConversionConfig = "conversionConfig", s.IsReadOnlySupported = "isReadOnlySupported", s.PasteConfig = "pasteConfig", s))(se || {});
  var je = /* @__PURE__ */ ((s) => (s.IsInline = "isInline", s.Title = "title", s))(je || {});
  var vt = /* @__PURE__ */ ((s) => (s.IsTune = "isTune", s))(vt || {});
  var Ue = class {
    constructor({
      name: e,
      constructable: t,
      config: o,
      api: i,
      isDefault: n,
      isInternal: r = false,
      defaultPlaceholder: a
    }) {
      this.api = i, this.name = e, this.constructable = t, this.config = o, this.isDefault = n, this.isInternal = r, this.defaultPlaceholder = a;
    }
    get settings() {
      const e = this.config.config || {};
      return this.isDefault && !("placeholder" in e) && this.defaultPlaceholder && (e.placeholder = this.defaultPlaceholder), e;
    }
    reset() {
      if (D(this.constructable.reset))
        return this.constructable.reset();
    }
    prepare() {
      if (D(this.constructable.prepare))
        return this.constructable.prepare({
          toolName: this.name,
          config: this.settings
        });
    }
    get shortcut() {
      const e = this.constructable.shortcut;
      return this.config.shortcut || e;
    }
    get sanitizeConfig() {
      return this.constructable.sanitize || {};
    }
    isInline() {
      return this.type === 1;
    }
    isBlock() {
      return this.type === 0;
    }
    isTune() {
      return this.type === 2;
    }
  };
  var Uo = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.CSS = {
        inlineToolbar: "ce-inline-toolbar",
        inlineToolbarShowed: "ce-inline-toolbar--showed",
        inlineToolbarLeftOriented: "ce-inline-toolbar--left-oriented",
        inlineToolbarRightOriented: "ce-inline-toolbar--right-oriented",
        inlineToolbarShortcut: "ce-inline-toolbar__shortcut",
        buttonsWrapper: "ce-inline-toolbar__buttons",
        actionsWrapper: "ce-inline-toolbar__actions",
        inlineToolButton: "ce-inline-tool",
        inputField: "cdx-input",
        focusedButton: "ce-inline-tool--focused",
        conversionToggler: "ce-inline-toolbar__dropdown",
        conversionTogglerArrow: "ce-inline-toolbar__dropdown-arrow",
        conversionTogglerHidden: "ce-inline-toolbar__dropdown--hidden",
        conversionTogglerContent: "ce-inline-toolbar__dropdown-content",
        togglerAndButtonsWrapper: "ce-inline-toolbar__toggler-and-button-wrapper"
      }, this.opened = false, this.toolbarVerticalMargin = ee() ? 20 : 6, this.buttonsList = null, this.width = 0, this.flipper = null, this.tooltip = new Fe();
    }
    toggleReadOnly(e) {
      e ? (this.destroy(), this.Editor.ConversionToolbar.destroy()) : this.make();
    }
    tryToShow(e = false, t = true) {
      if (!this.allowedToShow()) {
        e && this.close();
        return;
      }
      this.move(), this.open(t), this.Editor.Toolbar.close();
    }
    move() {
      const e = m.rect, t = this.Editor.UI.nodes.wrapper.getBoundingClientRect(), o = {
        x: e.x - t.left,
        y: e.y + e.height - t.top + this.toolbarVerticalMargin
      };
      e.width && (o.x += Math.floor(e.width / 2));
      const i = o.x - this.width / 2, n = o.x + this.width / 2;
      this.nodes.wrapper.classList.toggle(
        this.CSS.inlineToolbarLeftOriented,
        i < this.Editor.UI.contentRect.left
      ), this.nodes.wrapper.classList.toggle(
        this.CSS.inlineToolbarRightOriented,
        n > this.Editor.UI.contentRect.right
      ), this.nodes.wrapper.style.left = Math.floor(o.x) + "px", this.nodes.wrapper.style.top = Math.floor(o.y) + "px";
    }
    close() {
      this.opened && (this.Editor.ReadOnly.isEnabled || (this.nodes.wrapper.classList.remove(this.CSS.inlineToolbarShowed), Array.from(this.toolsInstances.entries()).forEach(([e, t]) => {
        const o = this.getToolShortcut(e);
        o && re.remove(this.Editor.UI.nodes.redactor, o), D(t.clear) && t.clear();
      }), this.opened = false, this.flipper.deactivate(), this.Editor.ConversionToolbar.close()));
    }
    open(e = true) {
      if (this.opened)
        return;
      this.addToolsFiltered(), this.nodes.wrapper.classList.add(this.CSS.inlineToolbarShowed), this.buttonsList = this.nodes.buttons.querySelectorAll(`.${this.CSS.inlineToolButton}`), this.opened = true, e && this.Editor.ConversionToolbar.hasTools() ? this.setConversionTogglerContent() : this.nodes.conversionToggler.hidden = true;
      let t = Array.from(this.buttonsList);
      t.unshift(this.nodes.conversionToggler), t = t.filter((o) => !o.hidden), this.flipper.activate(t);
    }
    containsNode(e) {
      return this.nodes.wrapper.contains(e);
    }
    destroy() {
      this.flipper && (this.flipper.deactivate(), this.flipper = null), this.removeAllNodes(), this.tooltip.destroy();
    }
    make() {
      this.nodes.wrapper = d.make("div", [
        this.CSS.inlineToolbar,
        ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []
      ]), this.nodes.togglerAndButtonsWrapper = d.make("div", this.CSS.togglerAndButtonsWrapper), this.nodes.buttons = d.make("div", this.CSS.buttonsWrapper), this.nodes.actions = d.make("div", this.CSS.actionsWrapper), this.listeners.on(this.nodes.wrapper, "mousedown", (e) => {
        e.target.closest(`.${this.CSS.actionsWrapper}`) || e.preventDefault();
      }), d.append(this.nodes.wrapper, [this.nodes.togglerAndButtonsWrapper, this.nodes.actions]), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper), this.addConversionToggler(), d.append(this.nodes.togglerAndButtonsWrapper, this.nodes.buttons), this.prepareConversionToolbar(), this.recalculateWidth(), this.enableFlipper();
    }
    allowedToShow() {
      const e = ["IMG", "INPUT"], t = m.get(), o = m.text;
      if (!t || !t.anchorNode || t.isCollapsed || o.length < 1)
        return false;
      const i = d.isElement(t.anchorNode) ? t.anchorNode : t.anchorNode.parentElement;
      if (t && e.includes(i.tagName) || i.closest('[contenteditable="true"]') === null)
        return false;
      const r = this.Editor.BlockManager.getBlock(t.anchorNode);
      return r ? r.tool.inlineTools.size !== 0 : false;
    }
    recalculateWidth() {
      this.width = this.nodes.wrapper.offsetWidth;
    }
    addConversionToggler() {
      this.nodes.conversionToggler = d.make("div", this.CSS.conversionToggler), this.nodes.conversionTogglerContent = d.make("div", this.CSS.conversionTogglerContent);
      const e = d.make("div", this.CSS.conversionTogglerArrow, {
        innerHTML: pt
      });
      this.nodes.conversionToggler.appendChild(this.nodes.conversionTogglerContent), this.nodes.conversionToggler.appendChild(e), this.nodes.togglerAndButtonsWrapper.appendChild(this.nodes.conversionToggler), this.listeners.on(this.nodes.conversionToggler, "click", () => {
        this.Editor.ConversionToolbar.toggle((t) => {
          !t && this.opened ? this.flipper.activate() : this.opened && this.flipper.deactivate();
        });
      }), ee() === false && this.tooltip.onHover(this.nodes.conversionToggler, $2.ui(X.ui.inlineToolbar.converter, "Convert to"), {
        placement: "top",
        hidingDelay: 100
      });
    }
    async setConversionTogglerContent() {
      const { BlockManager: e } = this.Editor, { currentBlock: t } = e, o = t.name, i = t.tool.conversionConfig, n = i && i.export;
      this.nodes.conversionToggler.hidden = !n, this.nodes.conversionToggler.classList.toggle(this.CSS.conversionTogglerHidden, !n);
      const r = await t.getActiveToolboxEntry() || {};
      this.nodes.conversionTogglerContent.innerHTML = r.icon || r.title || ke(o);
    }
    prepareConversionToolbar() {
      const e = this.Editor.ConversionToolbar.make();
      d.append(this.nodes.wrapper, e);
    }
    addToolsFiltered() {
      const e = m.get(), t = this.Editor.BlockManager.getBlock(e.anchorNode);
      this.nodes.buttons.innerHTML = "", this.nodes.actions.innerHTML = "", this.toolsInstances = /* @__PURE__ */ new Map(), Array.from(t.tool.inlineTools.values()).forEach((o) => {
        this.addTool(o);
      }), this.recalculateWidth();
    }
    addTool(e) {
      const t = e.create(), o = t.render();
      if (!o) {
        T("Render method must return an instance of Node", "warn", e.name);
        return;
      }
      if (o.dataset.tool = e.name, this.nodes.buttons.appendChild(o), this.toolsInstances.set(e.name, t), D(t.renderActions)) {
        const a = t.renderActions();
        this.nodes.actions.appendChild(a);
      }
      this.listeners.on(o, "click", (a) => {
        this.toolClicked(t), a.preventDefault();
      });
      const i = this.getToolShortcut(e.name);
      if (i)
        try {
          this.enableShortcuts(t, i);
        } catch (e2) {
        }
      const n = d.make("div"), r = $2.t(
        X.toolNames,
        e.title || ke(e.name)
      );
      n.appendChild(d.text(r)), i && n.appendChild(d.make("div", this.CSS.inlineToolbarShortcut, {
        textContent: nt(i)
      })), ee() === false && this.tooltip.onHover(o, n, {
        placement: "top",
        hidingDelay: 100
      }), t.checkState(m.get());
    }
    getToolShortcut(e) {
      const { Tools: t } = this.Editor, o = t.inlineTools.get(e), i = t.internal.inlineTools;
      return Array.from(i.keys()).includes(e) ? this.inlineTools[e][kt.Shortcut] : o.shortcut;
    }
    enableShortcuts(e, t) {
      re.add({
        name: t,
        handler: (o) => {
          const { currentBlock: i } = this.Editor.BlockManager;
          i && i.tool.enabledInlineTools && (o.preventDefault(), this.toolClicked(e));
        },
        on: this.Editor.UI.nodes.redactor
      });
    }
    toolClicked(e) {
      const t = m.range;
      e.surround(t), this.checkToolsState(), e.renderActions !== void 0 && this.flipper.deactivate();
    }
    checkToolsState() {
      this.toolsInstances.forEach((e) => {
        e.checkState(m.get());
      });
    }
    get inlineTools() {
      const e = {};
      return Array.from(this.Editor.Tools.inlineTools.entries()).forEach(([t, o]) => {
        e[t] = o.create();
      }), e;
    }
    enableFlipper() {
      this.flipper = new G({
        focusedItemClass: this.CSS.focusedButton,
        allowedKeys: [
          B.ENTER,
          B.TAB
        ]
      });
    }
  };
  var $o = class extends S {
    keydown(e) {
      switch (this.beforeKeydownProcessing(e), e.keyCode) {
        case B.BACKSPACE:
          this.backspace(e);
          break;
        case B.ENTER:
          this.enter(e);
          break;
        case B.DOWN:
        case B.RIGHT:
          this.arrowRightAndDown(e);
          break;
        case B.UP:
        case B.LEFT:
          this.arrowLeftAndUp(e);
          break;
        case B.TAB:
          this.tabPressed(e);
          break;
      }
    }
    beforeKeydownProcessing(e) {
      this.needToolbarClosing(e) && tt(e.keyCode) && (this.Editor.Toolbar.close(), this.Editor.ConversionToolbar.close(), e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || (this.Editor.BlockManager.clearFocused(), this.Editor.BlockSelection.clearSelection(e)));
    }
    keyup(e) {
      e.shiftKey || this.Editor.UI.checkEmptiness();
    }
    tabPressed(e) {
      this.Editor.BlockSelection.clearSelection(e);
      const { BlockManager: t, InlineToolbar: o, ConversionToolbar: i } = this.Editor, n = t.currentBlock;
      if (!n)
        return;
      const r = n.isEmpty, a = n.tool.isDefault && r, l = !r && i.opened, c = !r && !m.isCollapsed && o.opened;
      a ? this.activateToolbox() : !l && !c && this.activateBlockSettings();
    }
    dragOver(e) {
      const t = this.Editor.BlockManager.getBlockByChildNode(e.target);
      t.dropTarget = true;
    }
    dragLeave(e) {
      const t = this.Editor.BlockManager.getBlockByChildNode(e.target);
      t.dropTarget = false;
    }
    handleCommandC(e) {
      const { BlockSelection: t } = this.Editor;
      t.anyBlockSelected && t.copySelectedBlocks(e);
    }
    handleCommandX(e) {
      const { BlockSelection: t, BlockManager: o, Caret: i } = this.Editor;
      t.anyBlockSelected && t.copySelectedBlocks(e).then(() => {
        const n = o.removeSelectedBlocks(), r = o.insertDefaultBlockAtIndex(n, true);
        i.setToBlock(r, i.positions.START), t.clearSelection(e);
      });
    }
    enter(e) {
      const { BlockManager: t, UI: o } = this.Editor;
      if (t.currentBlock.tool.isLineBreaksEnabled || o.someToolbarOpened && o.someFlipperButtonFocused || e.shiftKey)
        return;
      let n = this.Editor.BlockManager.currentBlock;
      this.Editor.Caret.isAtStart && !this.Editor.BlockManager.currentBlock.hasMedia ? this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex) : this.Editor.Caret.isAtEnd ? n = this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex + 1) : n = this.Editor.BlockManager.split(), this.Editor.Caret.setToBlock(n), this.Editor.Toolbar.moveAndOpen(n), e.preventDefault();
    }
    backspace(e) {
      const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor, n = t.currentBlock, r = n.tool;
      if (n.selected || n.isEmpty && n.currentInput === n.firstInput) {
        e.preventDefault();
        const c = t.currentBlockIndex;
        t.previousBlock && t.previousBlock.inputs.length === 0 ? t.removeBlock(c - 1) : t.removeBlock(), i.setToBlock(
          t.currentBlock,
          c ? i.positions.END : i.positions.START
        ), this.Editor.Toolbar.close(), o.clearSelection(e);
        return;
      }
      if (r.isLineBreaksEnabled && !i.isAtStart)
        return;
      const a = t.currentBlockIndex === 0;
      i.isAtStart && m.isCollapsed && n.currentInput === n.firstInput && !a && (e.preventDefault(), this.mergeBlocks());
    }
    mergeBlocks() {
      const { BlockManager: e, Caret: t, Toolbar: o } = this.Editor, i = e.previousBlock, n = e.currentBlock;
      if (n.name !== i.name || !i.mergeable) {
        if (i.inputs.length === 0 || i.isEmpty) {
          e.removeBlock(e.currentBlockIndex - 1), t.setToBlock(e.currentBlock), o.close();
          return;
        }
        t.navigatePrevious() && o.close();
        return;
      }
      t.createShadow(i.pluginsContent), e.mergeBlocks(i, n).then(() => {
        t.restoreCaret(i.pluginsContent), i.pluginsContent.normalize(), o.close();
      });
    }
    arrowRightAndDown(e) {
      const t = G.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === B.TAB);
      if (this.Editor.UI.someToolbarOpened && t)
        return;
      this.Editor.BlockManager.clearFocused(), this.Editor.Toolbar.close();
      const o = this.Editor.Caret.isAtEnd || this.Editor.BlockSelection.anyBlockSelected;
      if (e.shiftKey && e.keyCode === B.DOWN && o) {
        this.Editor.CrossBlockSelection.toggleBlockSelectedState();
        return;
      }
      (e.keyCode === B.DOWN || e.keyCode === B.RIGHT && !this.isRtl ? this.Editor.Caret.navigateNext() : this.Editor.Caret.navigatePrevious()) ? e.preventDefault() : oe(() => {
        this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();
      }, 20)(), this.Editor.BlockSelection.clearSelection(e);
    }
    arrowLeftAndUp(e) {
      if (this.Editor.UI.someToolbarOpened) {
        if (G.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === B.TAB))
          return;
        this.Editor.UI.closeAllToolbars();
      }
      this.Editor.BlockManager.clearFocused(), this.Editor.Toolbar.close();
      const t = this.Editor.Caret.isAtStart || this.Editor.BlockSelection.anyBlockSelected;
      if (e.shiftKey && e.keyCode === B.UP && t) {
        this.Editor.CrossBlockSelection.toggleBlockSelectedState(false);
        return;
      }
      (e.keyCode === B.UP || e.keyCode === B.LEFT && !this.isRtl ? this.Editor.Caret.navigatePrevious() : this.Editor.Caret.navigateNext()) ? e.preventDefault() : oe(() => {
        this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();
      }, 20)(), this.Editor.BlockSelection.clearSelection(e);
    }
    needToolbarClosing(e) {
      const t = e.keyCode === B.ENTER && this.Editor.Toolbar.toolbox.opened, o = e.keyCode === B.ENTER && this.Editor.BlockSettings.opened, i = e.keyCode === B.ENTER && this.Editor.InlineToolbar.opened, n = e.keyCode === B.ENTER && this.Editor.ConversionToolbar.opened, r = e.keyCode === B.TAB;
      return !(e.shiftKey || r || t || o || i || n);
    }
    activateToolbox() {
      this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open();
    }
    activateBlockSettings() {
      this.Editor.Toolbar.opened || (this.Editor.BlockManager.currentBlock.focused = true, this.Editor.Toolbar.moveAndOpen()), this.Editor.BlockSettings.opened || this.Editor.BlockSettings.open();
    }
  };
  var Ce = class {
    constructor(e) {
      this.blocks = [], this.workingArea = e;
    }
    get length() {
      return this.blocks.length;
    }
    get array() {
      return this.blocks;
    }
    get nodes() {
      return it(this.workingArea.children);
    }
    static set(e, t, o) {
      return isNaN(Number(t)) ? (Reflect.set(e, t, o), true) : (e.insert(+t, o), true);
    }
    static get(e, t) {
      return isNaN(Number(t)) ? Reflect.get(e, t) : e.get(+t);
    }
    push(e) {
      this.blocks.push(e), this.insertToDOM(e);
    }
    swap(e, t) {
      const o = this.blocks[t];
      d.swap(this.blocks[e].holder, o.holder), this.blocks[t] = this.blocks[e], this.blocks[e] = o;
    }
    move(e, t) {
      const o = this.blocks.splice(t, 1)[0], i = e - 1, n = Math.max(0, i), r = this.blocks[n];
      e > 0 ? this.insertToDOM(o, "afterend", r) : this.insertToDOM(o, "beforebegin", r), this.blocks.splice(e, 0, o);
      const a = this.composeBlockEvent("move", {
        fromIndex: t,
        toIndex: e
      });
      o.call(q.MOVED, a);
    }
    insert(e, t, o = false) {
      if (!this.length) {
        this.push(t);
        return;
      }
      e > this.length && (e = this.length), o && (this.blocks[e].holder.remove(), this.blocks[e].call(q.REMOVED));
      const i = o ? 1 : 0;
      if (this.blocks.splice(e, i, t), e > 0) {
        const n = this.blocks[e - 1];
        this.insertToDOM(t, "afterend", n);
      } else {
        const n = this.blocks[e + 1];
        n ? this.insertToDOM(t, "beforebegin", n) : this.insertToDOM(t);
      }
    }
    remove(e) {
      isNaN(e) && (e = this.length - 1), this.blocks[e].holder.remove(), this.blocks[e].call(q.REMOVED), this.blocks.splice(e, 1);
    }
    removeAll() {
      this.workingArea.innerHTML = "", this.blocks.forEach((e) => e.call(q.REMOVED)), this.blocks.length = 0;
    }
    insertAfter(e, t) {
      const o = this.blocks.indexOf(e);
      this.insert(o + 1, t);
    }
    get(e) {
      return this.blocks[e];
    }
    indexOf(e) {
      return this.blocks.indexOf(e);
    }
    insertToDOM(e, t, o) {
      t ? o.holder.insertAdjacentElement(t, e.holder) : this.workingArea.appendChild(e.holder), e.call(q.RENDERED);
    }
    composeBlockEvent(e, t) {
      return new CustomEvent(e, {
        detail: t
      });
    }
  };
  var Je = "block-removed";
  var Qe = "block-added";
  var Wo = "block-moved";
  var Yo = "block-changed";
  var Ko = class extends S {
    constructor() {
      super(...arguments), this._currentBlockIndex = -1, this._blocks = null;
    }
    get currentBlockIndex() {
      return this._currentBlockIndex;
    }
    set currentBlockIndex(e) {
      this._currentBlockIndex = e;
    }
    get firstBlock() {
      return this._blocks[0];
    }
    get lastBlock() {
      return this._blocks[this._blocks.length - 1];
    }
    get currentBlock() {
      return this._blocks[this.currentBlockIndex];
    }
    set currentBlock(e) {
      this.currentBlockIndex = this.getBlockIndex(e);
    }
    get nextBlock() {
      return this.currentBlockIndex === this._blocks.length - 1 ? null : this._blocks[this.currentBlockIndex + 1];
    }
    get nextContentfulBlock() {
      return this.blocks.slice(this.currentBlockIndex + 1).find((t) => !!t.inputs.length);
    }
    get previousContentfulBlock() {
      return this.blocks.slice(0, this.currentBlockIndex).reverse().find((t) => !!t.inputs.length);
    }
    get previousBlock() {
      return this.currentBlockIndex === 0 ? null : this._blocks[this.currentBlockIndex - 1];
    }
    get blocks() {
      return this._blocks.array;
    }
    get isEditorEmpty() {
      return this.blocks.every((e) => e.isEmpty);
    }
    prepare() {
      const e = new Ce(this.Editor.UI.nodes.redactor);
      this._blocks = new Proxy(e, {
        set: Ce.set,
        get: Ce.get
      }), this.listeners.on(
        document,
        "copy",
        (t) => this.Editor.BlockEvents.handleCommandC(t)
      );
    }
    toggleReadOnly(e) {
      e ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    composeBlock({
      tool: e,
      data: t = {},
      id: o = void 0,
      tunes: i = {}
    }) {
      const n = this.Editor.ReadOnly.isEnabled, r = this.Editor.Tools.blockTools.get(e), a = new F({
        id: o,
        data: t,
        tool: r,
        api: this.Editor.API,
        readOnly: n,
        tunesData: i
      }, this.eventsDispatcher);
      return n || this.bindBlockEvents(a), a;
    }
    insert({
      id: e = void 0,
      tool: t = this.config.defaultBlock,
      data: o = {},
      index: i,
      needToFocus: n = true,
      replace: r = false,
      tunes: a = {}
    } = {}) {
      let l = i;
      l === void 0 && (l = this.currentBlockIndex + (r ? 0 : 1));
      const c = this.composeBlock({
        id: e,
        tool: t,
        data: o,
        tunes: a
      });
      return r && this.blockDidMutated(Je, this.getBlockByIndex(l), {
        index: l
      }), this._blocks.insert(l, c, r), this.blockDidMutated(Qe, c, {
        index: l
      }), n ? this.currentBlockIndex = l : l <= this.currentBlockIndex && this.currentBlockIndex++, c;
    }
    replace({
      tool: e = this.config.defaultBlock,
      data: t = {}
    }) {
      return this.insert({
        tool: e,
        data: t,
        index: this.currentBlockIndex,
        replace: true
      });
    }
    paste(e, t, o = false) {
      const i = this.insert({
        tool: e,
        replace: o
      });
      try {
        i.call(q.ON_PASTE, t);
      } catch (n) {
        T(`${e}: onPaste callback call is failed`, "error", n);
      }
      return i;
    }
    insertDefaultBlockAtIndex(e, t = false) {
      const o = this.composeBlock({ tool: this.config.defaultBlock });
      return this._blocks[e] = o, this.blockDidMutated(Qe, o, {
        index: e
      }), t ? this.currentBlockIndex = e : e <= this.currentBlockIndex && this.currentBlockIndex++, o;
    }
    insertAtEnd() {
      return this.currentBlockIndex = this.blocks.length - 1, this.insert();
    }
    async mergeBlocks(e, t) {
      const o = this._blocks.indexOf(t);
      if (t.isEmpty)
        return;
      const i = await t.data;
      V(i) || await e.mergeWith(i), this.removeBlock(o), this.currentBlockIndex = this._blocks.indexOf(e);
    }
    removeBlock(e = this.currentBlockIndex) {
      if (!this.validateIndex(e))
        throw new Error("Can't find a Block to remove");
      const t = this._blocks[e];
      t.destroy(), this._blocks.remove(e), this.blockDidMutated(Je, t, {
        index: e
      }), this.currentBlockIndex >= e && this.currentBlockIndex--, this.blocks.length ? e === 0 && (this.currentBlockIndex = 0) : (this.currentBlockIndex = -1, this.insert());
    }
    removeSelectedBlocks() {
      let e;
      for (let t = this.blocks.length - 1; t >= 0; t--)
        this.blocks[t].selected && (this.removeBlock(t), e = t);
      return e;
    }
    removeAllBlocks() {
      for (let e = this.blocks.length - 1; e >= 0; e--)
        this._blocks.remove(e);
      this.currentBlockIndex = -1, this.insert(), this.currentBlock.firstInput.focus();
    }
    split() {
      const e = this.Editor.Caret.extractFragmentFromCaretPosition(), t = d.make("div");
      t.appendChild(e);
      const o = {
        text: d.isEmpty(t) ? "" : t.innerHTML
      };
      return this.insert({ data: o });
    }
    getBlockByIndex(e) {
      return e === -1 && (e = this._blocks.length - 1), this._blocks[e];
    }
    getBlockIndex(e) {
      return this._blocks.indexOf(e);
    }
    getBlockById(e) {
      return this._blocks.array.find((t) => t.id === e);
    }
    getBlock(e) {
      d.isElement(e) || (e = e.parentNode);
      const t = this._blocks.nodes, o = e.closest(`.${F.CSS.wrapper}`), i = t.indexOf(o);
      if (i >= 0)
        return this._blocks[i];
    }
    highlightCurrentNode() {
      this.clearFocused(), this.currentBlock.focused = true;
    }
    clearFocused() {
      this.blocks.forEach((e) => {
        e.focused = false;
      });
    }
    setCurrentBlockByChildNode(e) {
      d.isElement(e) || (e = e.parentNode);
      const t = e.closest(`.${F.CSS.wrapper}`);
      if (!t)
        return;
      const o = t.closest(`.${this.Editor.UI.CSS.editorWrapper}`);
      if (o != null && o.isEqualNode(this.Editor.UI.nodes.wrapper))
        return this.currentBlockIndex = this._blocks.nodes.indexOf(t), this.currentBlock.updateCurrentInput(), this.currentBlock;
    }
    getBlockByChildNode(e) {
      d.isElement(e) || (e = e.parentNode);
      const t = e.closest(`.${F.CSS.wrapper}`);
      return this.blocks.find((o) => o.holder === t);
    }
    swap(e, t) {
      this._blocks.swap(e, t), this.currentBlockIndex = t;
    }
    move(e, t = this.currentBlockIndex) {
      if (isNaN(e) || isNaN(t)) {
        T("Warning during 'move' call: incorrect indices provided.", "warn");
        return;
      }
      if (!this.validateIndex(e) || !this.validateIndex(t)) {
        T("Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.", "warn");
        return;
      }
      this._blocks.move(e, t), this.currentBlockIndex = e, this.blockDidMutated(Wo, this.currentBlock, {
        fromIndex: t,
        toIndex: e
      });
    }
    dropPointer() {
      this.currentBlockIndex = -1, this.clearFocused();
    }
    clear(e = false) {
      this._blocks.removeAll(), this.dropPointer(), e && this.insert(), this.Editor.UI.checkEmptiness();
    }
    async destroy() {
      await Promise.all(this.blocks.map((e) => e.destroy()));
    }
    bindBlockEvents(e) {
      const { BlockEvents: t } = this.Editor;
      this.readOnlyMutableListeners.on(e.holder, "keydown", (o) => {
        t.keydown(o);
      }), this.readOnlyMutableListeners.on(e.holder, "keyup", (o) => {
        t.keyup(o);
      }), this.readOnlyMutableListeners.on(e.holder, "dragover", (o) => {
        t.dragOver(o);
      }), this.readOnlyMutableListeners.on(e.holder, "dragleave", (o) => {
        t.dragLeave(o);
      }), e.on("didMutated", (o) => this.blockDidMutated(Yo, o, {
        index: this.getBlockIndex(o)
      }));
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(
        document,
        "cut",
        (e) => this.Editor.BlockEvents.handleCommandX(e)
      ), this.blocks.forEach((e) => {
        this.bindBlockEvents(e);
      });
    }
    validateIndex(e) {
      return !(e < 0 || e >= this._blocks.length);
    }
    blockDidMutated(e, t, o) {
      const i = new CustomEvent(e, {
        detail: __spreadValues({
          target: new he(t)
        }, o)
      });
      return this.eventsDispatcher.emit(lt, {
        event: i
      }), t;
    }
  };
  var Xo = class extends S {
    constructor() {
      super(...arguments), this.anyBlockSelectedCache = null, this.needToSelectAll = false, this.nativeInputSelected = false, this.readyToBlockSelection = false;
    }
    get sanitizerConfig() {
      return {
        p: {},
        h1: {},
        h2: {},
        h3: {},
        h4: {},
        h5: {},
        h6: {},
        ol: {},
        ul: {},
        li: {},
        br: true,
        img: {
          src: true,
          width: true,
          height: true
        },
        a: {
          href: true
        },
        b: {},
        i: {},
        u: {}
      };
    }
    get allBlocksSelected() {
      const { BlockManager: e } = this.Editor;
      return e.blocks.every((t) => t.selected === true);
    }
    set allBlocksSelected(e) {
      const { BlockManager: t } = this.Editor;
      t.blocks.forEach((o) => {
        o.selected = e;
      }), this.clearCache();
    }
    get anyBlockSelected() {
      const { BlockManager: e } = this.Editor;
      return this.anyBlockSelectedCache === null && (this.anyBlockSelectedCache = e.blocks.some((t) => t.selected === true)), this.anyBlockSelectedCache;
    }
    get selectedBlocks() {
      return this.Editor.BlockManager.blocks.filter((e) => e.selected);
    }
    prepare() {
      this.selection = new m(), re.add({
        name: "CMD+A",
        handler: (e) => {
          const { BlockManager: t, ReadOnly: o } = this.Editor;
          if (o.isEnabled) {
            e.preventDefault(), this.selectAllBlocks();
            return;
          }
          t.currentBlock && this.handleCommandA(e);
        },
        on: this.Editor.UI.nodes.redactor
      });
    }
    toggleReadOnly() {
      m.get().removeAllRanges(), this.allBlocksSelected = false;
    }
    unSelectBlockByIndex(e) {
      const { BlockManager: t } = this.Editor;
      let o;
      isNaN(e) ? o = t.currentBlock : o = t.getBlockByIndex(e), o.selected = false, this.clearCache();
    }
    clearSelection(e, t = false) {
      const { BlockManager: o, Caret: i, RectangleSelection: n } = this.Editor;
      this.needToSelectAll = false, this.nativeInputSelected = false, this.readyToBlockSelection = false;
      const r = e && e instanceof KeyboardEvent, a = r && tt(e.keyCode);
      if (this.anyBlockSelected && r && a && !m.isSelectionExists) {
        const l = o.removeSelectedBlocks();
        o.insertDefaultBlockAtIndex(l, true), i.setToBlock(o.currentBlock), oe(() => {
          const c = e.key;
          i.insertContentAtCaretPosition(c.length > 1 ? "" : c);
        }, 20)();
      }
      if (this.Editor.CrossBlockSelection.clear(e), !this.anyBlockSelected || n.isRectActivated()) {
        this.Editor.RectangleSelection.clearSelection();
        return;
      }
      t && this.selection.restore(), this.allBlocksSelected = false;
    }
    copySelectedBlocks(e) {
      e.preventDefault();
      const t = d.make("div");
      this.selectedBlocks.forEach((n) => {
        const r = Z(n.holder.innerHTML, this.sanitizerConfig), a = d.make("p");
        a.innerHTML = r, t.appendChild(a);
      });
      const o = Array.from(t.childNodes).map((n) => n.textContent).join(`

`), i = t.innerHTML;
      return e.clipboardData.setData("text/plain", o), e.clipboardData.setData("text/html", i), Promise.all(this.selectedBlocks.map((n) => n.save())).then((n) => {
        try {
          e.clipboardData.setData(this.Editor.Paste.MIME_TYPE, JSON.stringify(n));
        } catch (e2) {
        }
      });
    }
    selectBlockByIndex(e) {
      const { BlockManager: t } = this.Editor;
      t.clearFocused();
      let o;
      isNaN(e) ? o = t.currentBlock : o = t.getBlockByIndex(e), this.selection.save(), m.get().removeAllRanges(), o.selected = true, this.clearCache(), this.Editor.InlineToolbar.close();
    }
    clearCache() {
      this.anyBlockSelectedCache = null;
    }
    destroy() {
      re.remove(this.Editor.UI.nodes.redactor, "CMD+A");
    }
    handleCommandA(e) {
      if (this.Editor.RectangleSelection.clearSelection(), d.isNativeInput(e.target) && !this.readyToBlockSelection) {
        this.readyToBlockSelection = true;
        return;
      }
      const o = this.Editor.BlockManager.getBlock(e.target).inputs;
      if (o.length > 1 && !this.readyToBlockSelection) {
        this.readyToBlockSelection = true;
        return;
      }
      if (o.length === 1 && !this.needToSelectAll) {
        this.needToSelectAll = true;
        return;
      }
      this.needToSelectAll ? (e.preventDefault(), this.selectAllBlocks(), this.needToSelectAll = false, this.readyToBlockSelection = false, this.Editor.ConversionToolbar.close()) : this.readyToBlockSelection && (e.preventDefault(), this.selectBlockByIndex(), this.needToSelectAll = true);
    }
    selectAllBlocks() {
      this.selection.save(), m.get().removeAllRanges(), this.allBlocksSelected = true, this.Editor.InlineToolbar.close();
    }
  };
  var ve = class extends S {
    get positions() {
      return {
        START: "start",
        END: "end",
        DEFAULT: "default"
      };
    }
    static get CSS() {
      return {
        shadowCaret: "cdx-shadow-caret"
      };
    }
    get isAtStart() {
      const e = m.get(), t = d.getDeepestNode(this.Editor.BlockManager.currentBlock.currentInput);
      let o = e.focusNode;
      if (d.isNativeInput(t))
        return t.selectionEnd === 0;
      if (!e.anchorNode)
        return false;
      let i = o.textContent.search(/\S/);
      i === -1 && (i = 0);
      let n = e.focusOffset;
      return o.nodeType !== Node.TEXT_NODE && o.childNodes.length && (o.childNodes[n] ? (o = o.childNodes[n], n = 0) : (o = o.childNodes[n - 1], n = o.textContent.length)), (d.isLineBreakTag(t) || d.isEmpty(t)) && this.getHigherLevelSiblings(o, "left").every((l) => {
        const c = d.isLineBreakTag(l), u = l.children.length === 1 && d.isLineBreakTag(l.children[0]), h = c || u;
        return d.isEmpty(l) && !h;
      }) && n === i ? true : t === null || o === t && n <= i;
    }
    get isAtEnd() {
      const e = m.get();
      let t = e.focusNode;
      const o = d.getDeepestNode(this.Editor.BlockManager.currentBlock.currentInput, true);
      if (d.isNativeInput(o))
        return o.selectionEnd === o.value.length;
      if (!e.focusNode)
        return false;
      let i = e.focusOffset;
      if (t.nodeType !== Node.TEXT_NODE && t.childNodes.length && (t.childNodes[i - 1] ? (t = t.childNodes[i - 1], i = t.textContent.length) : (t = t.childNodes[0], i = 0)), d.isLineBreakTag(o) || d.isEmpty(o)) {
        const r = this.getHigherLevelSiblings(t, "right");
        if (r.every((l, c) => c === r.length - 1 && d.isLineBreakTag(l) || d.isEmpty(l) && !d.isLineBreakTag(l)) && i === t.textContent.length)
          return true;
      }
      const n = o.textContent.replace(/\s+$/, "");
      return t === o && i >= n.length;
    }
    setToBlock(e, t = this.positions.DEFAULT, o = 0) {
      const { BlockManager: i } = this.Editor;
      let n;
      switch (t) {
        case this.positions.START:
          n = e.firstInput;
          break;
        case this.positions.END:
          n = e.lastInput;
          break;
        default:
          n = e.currentInput;
      }
      if (!n)
        return;
      const r = d.getDeepestNode(n, t === this.positions.END), a = d.getContentLength(r);
      switch (true) {
        case t === this.positions.START:
          o = 0;
          break;
        case t === this.positions.END:
        case o > a:
          o = a;
          break;
      }
      oe(() => {
        this.set(r, o);
      }, 20)(), i.setCurrentBlockByChildNode(e.holder), i.currentBlock.currentInput = n;
    }
    setToInput(e, t = this.positions.DEFAULT, o = 0) {
      const { currentBlock: i } = this.Editor.BlockManager, n = d.getDeepestNode(e);
      switch (t) {
        case this.positions.START:
          this.set(n, 0);
          break;
        case this.positions.END:
          this.set(n, d.getContentLength(n));
          break;
        default:
          o && this.set(n, o);
      }
      i.currentInput = e;
    }
    set(e, t = 0) {
      const { top: o, bottom: i } = m.setCursor(e, t), { innerHeight: n } = window;
      o < 0 && window.scrollBy(0, o), i > n && window.scrollBy(0, i - n);
    }
    setToTheLastBlock() {
      const e = this.Editor.BlockManager.lastBlock;
      if (e)
        if (e.tool.isDefault && e.isEmpty)
          this.setToBlock(e);
        else {
          const t = this.Editor.BlockManager.insertAtEnd();
          this.setToBlock(t);
        }
    }
    extractFragmentFromCaretPosition() {
      const e = m.get();
      if (e.rangeCount) {
        const t = e.getRangeAt(0), o = this.Editor.BlockManager.currentBlock.currentInput;
        if (t.deleteContents(), o)
          if (d.isNativeInput(o)) {
            const i = o, n = document.createDocumentFragment(), r = i.value.substring(0, i.selectionStart), a = i.value.substring(i.selectionStart);
            return n.textContent = a, i.value = r, n;
          } else {
            const i = t.cloneRange();
            return i.selectNodeContents(o), i.setStart(t.endContainer, t.endOffset), i.extractContents();
          }
      }
    }
    navigateNext() {
      const { BlockManager: e } = this.Editor, { currentBlock: t, nextContentfulBlock: o } = e, { nextInput: i } = t, n = this.isAtEnd;
      let r = o;
      if (!r && !i) {
        if (t.tool.isDefault || !n)
          return false;
        r = e.insertAtEnd();
      }
      return n ? (i ? this.setToInput(i, this.positions.START) : this.setToBlock(r, this.positions.START), true) : false;
    }
    navigatePrevious() {
      const { currentBlock: e, previousContentfulBlock: t } = this.Editor.BlockManager;
      if (!e)
        return false;
      const { previousInput: o } = e;
      return !t && !o ? false : this.isAtStart ? (o ? this.setToInput(o, this.positions.END) : this.setToBlock(t, this.positions.END), true) : false;
    }
    createShadow(e) {
      const t = document.createElement("span");
      t.classList.add(ve.CSS.shadowCaret), e.insertAdjacentElement("beforeend", t);
    }
    restoreCaret(e) {
      const t = e.querySelector(`.${ve.CSS.shadowCaret}`);
      if (!t)
        return;
      new m().expandToTag(t), setTimeout(() => {
        const i = document.createRange();
        i.selectNode(t), i.extractContents();
      }, 50);
    }
    insertContentAtCaretPosition(e) {
      const t = document.createDocumentFragment(), o = document.createElement("div"), i = m.get(), n = m.range;
      o.innerHTML = e, Array.from(o.childNodes).forEach((l) => t.appendChild(l)), t.childNodes.length === 0 && t.appendChild(new Text());
      const r = t.lastChild;
      n.deleteContents(), n.insertNode(t);
      const a = document.createRange();
      a.setStart(r, r.textContent.length), i.removeAllRanges(), i.addRange(a);
    }
    getHigherLevelSiblings(e, t) {
      let o = e;
      const i = [];
      for (; o.parentNode && o.parentNode.contentEditable !== "true"; )
        o = o.parentNode;
      const n = t === "left" ? "previousSibling" : "nextSibling";
      for (; o[n]; )
        o = o[n], i.push(o);
      return i;
    }
  };
  var Vo = class extends S {
    constructor() {
      super(...arguments), this.onMouseUp = () => {
        this.listeners.off(document, "mouseover", this.onMouseOver), this.listeners.off(document, "mouseup", this.onMouseUp);
      }, this.onMouseOver = (e) => {
        const { BlockManager: t, BlockSelection: o } = this.Editor, i = t.getBlockByChildNode(e.relatedTarget) || this.lastSelectedBlock, n = t.getBlockByChildNode(e.target);
        if (!(!i || !n) && n !== i) {
          if (i === this.firstSelectedBlock) {
            m.get().removeAllRanges(), i.selected = true, n.selected = true, o.clearCache();
            return;
          }
          if (n === this.firstSelectedBlock) {
            i.selected = false, n.selected = false, o.clearCache();
            return;
          }
          this.Editor.InlineToolbar.close(), this.toggleBlocksSelectedState(i, n), this.lastSelectedBlock = n;
        }
      };
    }
    async prepare() {
      this.listeners.on(document, "mousedown", (e) => {
        this.enableCrossBlockSelection(e);
      });
    }
    watchSelection(e) {
      if (e.button !== _t.LEFT)
        return;
      const { BlockManager: t } = this.Editor;
      this.firstSelectedBlock = t.getBlock(e.target), this.lastSelectedBlock = this.firstSelectedBlock, this.listeners.on(document, "mouseover", this.onMouseOver), this.listeners.on(document, "mouseup", this.onMouseUp);
    }
    get isCrossBlockSelectionStarted() {
      return !!this.firstSelectedBlock && !!this.lastSelectedBlock;
    }
    toggleBlockSelectedState(e = true) {
      const { BlockManager: t, BlockSelection: o } = this.Editor;
      this.lastSelectedBlock || (this.lastSelectedBlock = this.firstSelectedBlock = t.currentBlock), this.firstSelectedBlock === this.lastSelectedBlock && (this.firstSelectedBlock.selected = true, o.clearCache(), m.get().removeAllRanges());
      const i = t.blocks.indexOf(this.lastSelectedBlock) + (e ? 1 : -1), n = t.blocks[i];
      n && (this.lastSelectedBlock.selected !== n.selected ? (n.selected = true, o.clearCache()) : (this.lastSelectedBlock.selected = false, o.clearCache()), this.lastSelectedBlock = n, this.Editor.InlineToolbar.close(), n.holder.scrollIntoView({
        block: "nearest"
      }));
    }
    clear(e) {
      const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor, n = t.blocks.indexOf(this.firstSelectedBlock), r = t.blocks.indexOf(this.lastSelectedBlock);
      if (o.anyBlockSelected && n > -1 && r > -1)
        if (e && e instanceof KeyboardEvent)
          switch (e.keyCode) {
            case B.DOWN:
            case B.RIGHT:
              i.setToBlock(t.blocks[Math.max(n, r)], i.positions.END);
              break;
            case B.UP:
            case B.LEFT:
              i.setToBlock(t.blocks[Math.min(n, r)], i.positions.START);
              break;
            default:
              i.setToBlock(t.blocks[Math.max(n, r)], i.positions.END);
          }
        else
          i.setToBlock(t.blocks[Math.max(n, r)], i.positions.END);
      this.firstSelectedBlock = this.lastSelectedBlock = null;
    }
    enableCrossBlockSelection(e) {
      const { UI: t } = this.Editor;
      m.isCollapsed || this.Editor.BlockSelection.clearSelection(e), t.nodes.redactor.contains(e.target) ? this.watchSelection(e) : this.Editor.BlockSelection.clearSelection(e);
    }
    toggleBlocksSelectedState(e, t) {
      const { BlockManager: o, BlockSelection: i } = this.Editor, n = o.blocks.indexOf(e), r = o.blocks.indexOf(t), a = e.selected !== t.selected;
      for (let l = Math.min(n, r); l <= Math.max(n, r); l++) {
        const c = o.blocks[l];
        c !== this.firstSelectedBlock && c !== (a ? e : t) && (o.blocks[l].selected = !o.blocks[l].selected, i.clearCache());
      }
    }
  };
  var Zo = class extends S {
    constructor() {
      super(...arguments), this.isStartedAtEditor = false;
    }
    toggleReadOnly(e) {
      e ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    enableModuleBindings() {
      const { UI: e } = this.Editor;
      this.readOnlyMutableListeners.on(e.nodes.holder, "drop", async (t) => {
        await this.processDrop(t);
      }, true), this.readOnlyMutableListeners.on(e.nodes.holder, "dragstart", () => {
        this.processDragStart();
      }), this.readOnlyMutableListeners.on(e.nodes.holder, "dragover", (t) => {
        this.processDragOver(t);
      }, true);
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    async processDrop(e) {
      const {
        BlockManager: t,
        Caret: o,
        Paste: i
      } = this.Editor;
      e.preventDefault(), t.blocks.forEach((r) => {
        r.dropTarget = false;
      }), m.isAtEditor && !m.isCollapsed && this.isStartedAtEditor && document.execCommand("delete"), this.isStartedAtEditor = false;
      const n = t.setCurrentBlockByChildNode(e.target);
      if (n)
        this.Editor.Caret.setToBlock(n, o.positions.END);
      else {
        const r = t.setCurrentBlockByChildNode(t.lastBlock.holder);
        this.Editor.Caret.setToBlock(r, o.positions.END);
      }
      await i.processDataTransfer(e.dataTransfer, true);
    }
    processDragStart() {
      m.isAtEditor && !m.isCollapsed && (this.isStartedAtEditor = true), this.Editor.InlineToolbar.close();
    }
    processDragOver(e) {
      e.preventDefault();
    }
  };
  var Go = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.disabled = false, this.batchingTimeout = null, this.batchingOnChangeQueue = /* @__PURE__ */ new Map(), this.batchTime = 400, this.mutationObserver = new MutationObserver((o) => {
        this.redactorChanged(o);
      }), this.eventsDispatcher.on(lt, (o) => {
        this.particularBlockChanged(o.event);
      }), this.eventsDispatcher.on(ct, () => {
        this.disable();
      }), this.eventsDispatcher.on(dt, () => {
        this.enable();
      });
    }
    enable() {
      this.mutationObserver.observe(
        this.Editor.UI.nodes.redactor,
        {
          childList: true,
          subtree: true,
          characterData: true,
          attributes: true
        }
      ), this.disabled = false;
    }
    disable() {
      this.mutationObserver.disconnect(), this.disabled = true;
    }
    particularBlockChanged(e) {
      this.disabled || !D(this.config.onChange) || (this.batchingOnChangeQueue.set(`block:${e.detail.target.id}:event:${e.type}`, e), this.batchingTimeout && clearTimeout(this.batchingTimeout), this.batchingTimeout = setTimeout(() => {
        let t;
        this.batchingOnChangeQueue.size === 1 ? t = this.batchingOnChangeQueue.values().next().value : t = Array.from(this.batchingOnChangeQueue.values()), this.config.onChange && this.config.onChange(this.Editor.API.methods, t), this.batchingOnChangeQueue.clear();
      }, this.batchTime));
    }
    redactorChanged(e) {
      this.eventsDispatcher.emit(Me, {
        mutations: e
      });
    }
  };
  var xt = class extends S {
    constructor() {
      super(...arguments), this.MIME_TYPE = "application/x-editor-js", this.toolsTags = {}, this.tagsByTool = {}, this.toolsPatterns = [], this.toolsFiles = {}, this.exceptionList = [], this.processTool = (s) => {
        try {
          const e = s.create({}, {}, false);
          if (s.pasteConfig === false) {
            this.exceptionList.push(s.name);
            return;
          }
          if (!D(e.onPaste))
            return;
          this.getTagsConfig(s), this.getFilesConfig(s), this.getPatternsConfig(s);
        } catch (e) {
          T(
            `Paste handling for \xAB${s.name}\xBB Tool hasn't been set up because of the error`,
            "warn",
            e
          );
        }
      }, this.handlePasteEvent = async (s) => {
        const { BlockManager: e, Toolbar: t } = this.Editor;
        !e.currentBlock || this.isNativeBehaviour(s.target) && !s.clipboardData.types.includes("Files") || e.currentBlock && this.exceptionList.includes(e.currentBlock.name) || (s.preventDefault(), this.processDataTransfer(s.clipboardData), e.clearFocused(), t.close());
      };
    }
    async prepare() {
      this.processTools();
    }
    toggleReadOnly(s) {
      s ? this.unsetCallback() : this.setCallback();
    }
    async processDataTransfer(s, e = false) {
      const { Tools: t } = this.Editor, o = s.types;
      if ((o.includes ? o.includes("Files") : o.contains("Files")) && !V(this.toolsFiles)) {
        await this.processFiles(s.files);
        return;
      }
      const n = s.getData(this.MIME_TYPE), r = s.getData("text/plain");
      let a = s.getData("text/html");
      if (n)
        try {
          this.insertEditorJSData(JSON.parse(n));
          return;
        } catch (e2) {
        }
      e && r.trim() && a.trim() && (a = "<p>" + (a.trim() ? a : r) + "</p>");
      const l = Object.keys(this.toolsTags).reduce((h, f) => {
        var _a;
        return h[f.toLowerCase()] = (_a = this.toolsTags[f].sanitizationConfig) != null ? _a : {}, h;
      }, {}), c = Object.assign({}, l, t.getAllInlineToolsSanitizeConfig(), { br: {} }), u = Z(a, c);
      !u.trim() || u.trim() === r || !d.isHTMLString(u) ? await this.processText(r) : await this.processText(u, true);
    }
    async processText(s, e = false) {
      const { Caret: t, BlockManager: o } = this.Editor, i = e ? this.processHTML(s) : this.processPlain(s);
      if (!i.length)
        return;
      if (i.length === 1) {
        i[0].isBlock ? this.processSingleBlock(i.pop()) : this.processInlinePaste(i.pop());
        return;
      }
      const r = o.currentBlock && o.currentBlock.tool.isDefault && o.currentBlock.isEmpty;
      i.map(
        async (a, l) => this.insertBlock(a, l === 0 && r)
      ), o.currentBlock && t.setToBlock(o.currentBlock, t.positions.END);
    }
    setCallback() {
      this.listeners.on(this.Editor.UI.nodes.holder, "paste", this.handlePasteEvent);
    }
    unsetCallback() {
      this.listeners.off(this.Editor.UI.nodes.holder, "paste", this.handlePasteEvent);
    }
    processTools() {
      const s = this.Editor.Tools.blockTools;
      Array.from(s.values()).forEach(this.processTool);
    }
    collectTagNames(s) {
      return J(s) ? [s] : j(s) ? Object.keys(s) : [];
    }
    getTagsConfig(s) {
      if (s.pasteConfig === false)
        return;
      const e = s.pasteConfig.tags || [], t = [];
      e.forEach((o) => {
        const i = this.collectTagNames(o);
        t.push(...i), i.forEach((n) => {
          if (Object.prototype.hasOwnProperty.call(this.toolsTags, n)) {
            T(
              `Paste handler for \xAB${s.name}\xBB Tool on \xAB${n}\xBB tag is skipped because it is already used by \xAB${this.toolsTags[n].tool.name}\xBB Tool.`,
              "warn"
            );
            return;
          }
          const r = j(o) ? o[n] : null;
          this.toolsTags[n.toUpperCase()] = {
            tool: s,
            sanitizationConfig: r
          };
        });
      }), this.tagsByTool[s.name] = t.map((o) => o.toUpperCase());
    }
    getFilesConfig(s) {
      if (s.pasteConfig === false)
        return;
      const { files: e = {} } = s.pasteConfig;
      let { extensions: t, mimeTypes: o } = e;
      !t && !o || (t && !Array.isArray(t) && (T(`\xABextensions\xBB property of the onDrop config for \xAB${s.name}\xBB Tool should be an array`), t = []), o && !Array.isArray(o) && (T(`\xABmimeTypes\xBB property of the onDrop config for \xAB${s.name}\xBB Tool should be an array`), o = []), o && (o = o.filter((i) => Dt(i) ? true : (T(`MIME type value \xAB${i}\xBB for the \xAB${s.name}\xBB Tool is not a valid MIME type`, "warn"), false))), this.toolsFiles[s.name] = {
        extensions: t || [],
        mimeTypes: o || []
      });
    }
    getPatternsConfig(s) {
      s.pasteConfig === false || !s.pasteConfig.patterns || V(s.pasteConfig.patterns) || Object.entries(s.pasteConfig.patterns).forEach(([e, t]) => {
        t instanceof RegExp || T(
          `Pattern ${t} for \xAB${s.name}\xBB Tool is skipped because it should be a Regexp instance.`,
          "warn"
        ), this.toolsPatterns.push({
          key: e,
          pattern: t,
          tool: s
        });
      });
    }
    isNativeBehaviour(s) {
      return d.isNativeInput(s);
    }
    async processFiles(s) {
      const { BlockManager: e } = this.Editor;
      let t;
      t = await Promise.all(
        Array.from(s).map((n) => this.processFile(n))
      ), t = t.filter((n) => !!n);
      const i = e.currentBlock.tool.isDefault && e.currentBlock.isEmpty;
      t.forEach(
        (n, r) => {
          e.paste(n.type, n.event, r === 0 && i);
        }
      );
    }
    async processFile(s) {
      const e = Rt(s), t = Object.entries(this.toolsFiles).find(([n, { mimeTypes: r, extensions: a }]) => {
        const [l, c] = s.type.split("/"), u = a.find((f) => f.toLowerCase() === e.toLowerCase()), h = r.find((f) => {
          const [v, p] = f.split("/");
          return v === l && (p === c || p === "*");
        });
        return !!u || !!h;
      });
      if (!t)
        return;
      const [o] = t;
      return {
        event: this.composePasteEvent("file", {
          file: s
        }),
        type: o
      };
    }
    processHTML(s) {
      const { Tools: e } = this.Editor, t = d.make("DIV");
      return t.innerHTML = s, this.getNodes(t).map((i) => {
        let n, r = e.defaultTool, a = false;
        switch (i.nodeType) {
          case Node.DOCUMENT_FRAGMENT_NODE:
            n = d.make("div"), n.appendChild(i);
            break;
          case Node.ELEMENT_NODE:
            n = i, a = true, this.toolsTags[n.tagName] && (r = this.toolsTags[n.tagName].tool);
            break;
        }
        const { tags: l } = r.pasteConfig || { tags: [] }, c = l.reduce((f, v) => (this.collectTagNames(v).forEach((k) => {
          const _ = j(v) ? v[k] : null;
          f[k.toLowerCase()] = _ || {};
        }), f), {}), u = Object.assign({}, c, r.baseSanitizeConfig);
        if (n.tagName.toLowerCase() === "table") {
          const f = Z(n.outerHTML, u);
          n = d.make("div", void 0, {
            innerHTML: f
          }).firstChild;
        } else
          n.innerHTML = Z(n.innerHTML, u);
        const h = this.composePasteEvent("tag", {
          data: n
        });
        return {
          content: n,
          isBlock: a,
          tool: r.name,
          event: h
        };
      }).filter((i) => {
        const n = d.isEmpty(i.content), r = d.isSingleTag(i.content);
        return !n || r;
      });
    }
    processPlain(s) {
      const { defaultBlock: e } = this.config;
      if (!s)
        return [];
      const t = e;
      return s.split(/\r?\n/).filter((o) => o.trim()).map((o) => {
        const i = d.make("div");
        i.textContent = o;
        const n = this.composePasteEvent("tag", {
          data: i
        });
        return {
          content: i,
          tool: t,
          isBlock: false,
          event: n
        };
      });
    }
    async processSingleBlock(s) {
      const { Caret: e, BlockManager: t } = this.Editor, { currentBlock: o } = t;
      if (!o || s.tool !== o.name || !d.containsOnlyInlineElements(s.content.innerHTML)) {
        this.insertBlock(s, (o == null ? void 0 : o.tool.isDefault) && o.isEmpty);
        return;
      }
      e.insertContentAtCaretPosition(s.content.innerHTML);
    }
    async processInlinePaste(s) {
      const { BlockManager: e, Caret: t } = this.Editor, { content: o } = s;
      if (e.currentBlock && e.currentBlock.tool.isDefault && o.textContent.length < xt.PATTERN_PROCESSING_MAX_LENGTH) {
        const n = await this.processPattern(o.textContent);
        if (n) {
          const r = e.currentBlock && e.currentBlock.tool.isDefault && e.currentBlock.isEmpty, a = e.paste(n.tool, n.event, r);
          t.setToBlock(a, t.positions.END);
          return;
        }
      }
      if (e.currentBlock && e.currentBlock.currentInput) {
        const n = e.currentBlock.tool.baseSanitizeConfig;
        document.execCommand(
          "insertHTML",
          false,
          Z(o.innerHTML, n)
        );
      } else
        this.insertBlock(s);
    }
    async processPattern(s) {
      const e = this.toolsPatterns.find((o) => {
        const i = o.pattern.exec(s);
        return i ? s === i.shift() : false;
      });
      return e ? {
        event: this.composePasteEvent("pattern", {
          key: e.key,
          data: s
        }),
        tool: e.tool.name
      } : void 0;
    }
    insertBlock(s, e = false) {
      const { BlockManager: t, Caret: o } = this.Editor, { currentBlock: i } = t;
      let n;
      if (e && i && i.isEmpty) {
        n = t.paste(s.tool, s.event, true), o.setToBlock(n, o.positions.END);
        return;
      }
      n = t.paste(s.tool, s.event), o.setToBlock(n, o.positions.END);
    }
    insertEditorJSData(s) {
      const { BlockManager: e, Caret: t, Tools: o } = this.Editor;
      ht(
        s,
        (n) => o.blockTools.get(n).sanitizeConfig
      ).forEach(({ tool: n, data: r }, a) => {
        let l = false;
        a === 0 && (l = e.currentBlock && e.currentBlock.tool.isDefault && e.currentBlock.isEmpty);
        const c = e.insert({
          tool: n,
          data: r,
          replace: l
        });
        t.setToBlock(c, t.positions.END);
      });
    }
    processElementNode(s, e, t) {
      const o = Object.keys(this.toolsTags), i = s, { tool: n } = this.toolsTags[i.tagName] || {}, r = this.tagsByTool[n == null ? void 0 : n.name] || [], a = o.includes(i.tagName), l = d.blockElements.includes(i.tagName.toLowerCase()), c = Array.from(i.children).some(
        ({ tagName: h }) => o.includes(h) && !r.includes(h)
      ), u = Array.from(i.children).some(
        ({ tagName: h }) => d.blockElements.includes(h.toLowerCase())
      );
      if (!l && !a && !c)
        return t.appendChild(i), [...e, t];
      if (a && !c || l && !u && !c)
        return [...e, t, i];
    }
    getNodes(s) {
      const e = Array.from(s.childNodes);
      let t;
      const o = (i, n) => {
        if (d.isEmpty(n) && !d.isSingleTag(n))
          return i;
        const r = i[i.length - 1];
        let a = new DocumentFragment();
        switch (r && d.isFragment(r) && (a = i.pop()), n.nodeType) {
          case Node.ELEMENT_NODE:
            if (t = this.processElementNode(n, i, a), t)
              return t;
            break;
          case Node.TEXT_NODE:
            return a.appendChild(n), [...i, a];
          default:
            return [...i, a];
        }
        return [...i, ...Array.from(n.childNodes).reduce(o, [])];
      };
      return e.reduce(o, []);
    }
    composePasteEvent(s, e) {
      return new CustomEvent(s, {
        detail: e
      });
    }
  };
  var wt = xt;
  wt.PATTERN_PROCESSING_MAX_LENGTH = 450;
  var qo = class extends S {
    constructor() {
      super(...arguments), this.toolsDontSupportReadOnly = [], this.readOnlyEnabled = false;
    }
    get isEnabled() {
      return this.readOnlyEnabled;
    }
    async prepare() {
      const { Tools: e } = this.Editor, { blockTools: t } = e, o = [];
      Array.from(t.entries()).forEach(([i, n]) => {
        n.isReadOnlySupported || o.push(i);
      }), this.toolsDontSupportReadOnly = o, this.config.readOnly && o.length > 0 && this.throwCriticalError(), this.toggle(this.config.readOnly);
    }
    async toggle(e = !this.readOnlyEnabled) {
      e && this.toolsDontSupportReadOnly.length > 0 && this.throwCriticalError();
      const t = this.readOnlyEnabled;
      this.readOnlyEnabled = e;
      for (const i in this.Editor)
        this.Editor[i].toggleReadOnly && this.Editor[i].toggleReadOnly(e);
      if (t === e)
        return this.readOnlyEnabled;
      const o = await this.Editor.Saver.save();
      return await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(o.blocks), this.readOnlyEnabled;
    }
    throwCriticalError() {
      throw new at(
        `To enable read-only mode all connected tools should support it. Tools ${this.toolsDontSupportReadOnly.join(", ")} don't support read-only mode.`
      );
    }
  };
  var pe = class extends S {
    constructor() {
      super(...arguments), this.isRectSelectionActivated = false, this.SCROLL_SPEED = 3, this.HEIGHT_OF_SCROLL_ZONE = 40, this.BOTTOM_SCROLL_ZONE = 1, this.TOP_SCROLL_ZONE = 2, this.MAIN_MOUSE_BUTTON = 0, this.mousedown = false, this.isScrolling = false, this.inScrollZone = null, this.startX = 0, this.startY = 0, this.mouseX = 0, this.mouseY = 0, this.stackOfSelected = [], this.listenerIds = [];
    }
    static get CSS() {
      return {
        overlay: "codex-editor-overlay",
        overlayContainer: "codex-editor-overlay__container",
        rect: "codex-editor-overlay__rectangle",
        topScrollZone: "codex-editor-overlay__scroll-zone--top",
        bottomScrollZone: "codex-editor-overlay__scroll-zone--bottom"
      };
    }
    prepare() {
      this.enableModuleBindings();
    }
    startSelection(e, t) {
      const o = document.elementFromPoint(e - window.pageXOffset, t - window.pageYOffset);
      o.closest(`.${this.Editor.Toolbar.CSS.toolbar}`) || (this.Editor.BlockSelection.allBlocksSelected = false, this.clearSelection(), this.stackOfSelected = []);
      const n = [
        `.${F.CSS.content}`,
        `.${this.Editor.Toolbar.CSS.toolbar}`,
        `.${this.Editor.InlineToolbar.CSS.inlineToolbar}`
      ], r = o.closest("." + this.Editor.UI.CSS.editorWrapper), a = n.some((l) => !!o.closest(l));
      !r || a || (this.mousedown = true, this.startX = e, this.startY = t);
    }
    endSelection() {
      this.mousedown = false, this.startX = 0, this.startY = 0, this.overlayRectangle.style.display = "none";
    }
    isRectActivated() {
      return this.isRectSelectionActivated;
    }
    clearSelection() {
      this.isRectSelectionActivated = false;
    }
    enableModuleBindings() {
      const { container: e } = this.genHTML();
      this.listeners.on(e, "mousedown", (t) => {
        this.processMouseDown(t);
      }, false), this.listeners.on(document.body, "mousemove", Te((t) => {
        this.processMouseMove(t);
      }, 10), {
        passive: true
      }), this.listeners.on(document.body, "mouseleave", () => {
        this.processMouseLeave();
      }), this.listeners.on(window, "scroll", Te((t) => {
        this.processScroll(t);
      }, 10), {
        passive: true
      }), this.listeners.on(document.body, "mouseup", () => {
        this.processMouseUp();
      }, false);
    }
    processMouseDown(e) {
      if (e.button !== this.MAIN_MOUSE_BUTTON)
        return;
      e.target.closest(d.allInputsSelector) !== null || this.startSelection(e.pageX, e.pageY);
    }
    processMouseMove(e) {
      this.changingRectangle(e), this.scrollByZones(e.clientY);
    }
    processMouseLeave() {
      this.clearSelection(), this.endSelection();
    }
    processScroll(e) {
      this.changingRectangle(e);
    }
    processMouseUp() {
      this.clearSelection(), this.endSelection();
    }
    scrollByZones(e) {
      if (this.inScrollZone = null, e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.TOP_SCROLL_ZONE), document.documentElement.clientHeight - e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.BOTTOM_SCROLL_ZONE), !this.inScrollZone) {
        this.isScrolling = false;
        return;
      }
      this.isScrolling || (this.scrollVertical(this.inScrollZone === this.TOP_SCROLL_ZONE ? -this.SCROLL_SPEED : this.SCROLL_SPEED), this.isScrolling = true);
    }
    genHTML() {
      const { UI: e } = this.Editor, t = e.nodes.holder.querySelector("." + e.CSS.editorWrapper), o = d.make("div", pe.CSS.overlay, {}), i = d.make("div", pe.CSS.overlayContainer, {}), n = d.make("div", pe.CSS.rect, {});
      return i.appendChild(n), o.appendChild(i), t.appendChild(o), this.overlayRectangle = n, {
        container: t,
        overlay: o
      };
    }
    scrollVertical(e) {
      if (!(this.inScrollZone && this.mousedown))
        return;
      const t = window.pageYOffset;
      window.scrollBy(0, e), this.mouseY += window.pageYOffset - t, setTimeout(() => {
        this.scrollVertical(e);
      }, 0);
    }
    changingRectangle(e) {
      if (!this.mousedown)
        return;
      e.pageY !== void 0 && (this.mouseX = e.pageX, this.mouseY = e.pageY);
      const { rightPos: t, leftPos: o, index: i } = this.genInfoForMouseSelection(), n = this.startX > t && this.mouseX > t, r = this.startX < o && this.mouseX < o;
      this.rectCrossesBlocks = !(n || r), this.isRectSelectionActivated || (this.rectCrossesBlocks = false, this.isRectSelectionActivated = true, this.shrinkRectangleToPoint(), this.overlayRectangle.style.display = "block"), this.updateRectangleSize(), this.Editor.Toolbar.close(), i !== void 0 && (this.trySelectNextBlock(i), this.inverseSelection(), m.get().removeAllRanges());
    }
    shrinkRectangleToPoint() {
      this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`;
    }
    inverseSelection() {
      const t = this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;
      if (this.rectCrossesBlocks && !t)
        for (const o of this.stackOfSelected)
          this.Editor.BlockSelection.selectBlockByIndex(o);
      if (!this.rectCrossesBlocks && t)
        for (const o of this.stackOfSelected)
          this.Editor.BlockSelection.unSelectBlockByIndex(o);
    }
    updateRectangleSize() {
      this.mouseY >= this.startY ? (this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.mouseY - window.pageYOffset}px`) : (this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.top = `${this.mouseY - window.pageYOffset}px`), this.mouseX >= this.startX ? (this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.mouseX - window.pageXOffset}px`) : (this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.left = `${this.mouseX - window.pageXOffset}px`);
    }
    genInfoForMouseSelection() {
      const t = document.body.offsetWidth / 2, o = this.mouseY - window.pageYOffset, i = document.elementFromPoint(t, o), n = this.Editor.BlockManager.getBlockByChildNode(i);
      let r;
      n !== void 0 && (r = this.Editor.BlockManager.blocks.findIndex((h) => h.holder === n.holder));
      const a = this.Editor.BlockManager.lastBlock.holder.querySelector("." + F.CSS.content), l = Number.parseInt(window.getComputedStyle(a).width, 10) / 2, c = t - l, u = t + l;
      return {
        index: r,
        leftPos: c,
        rightPos: u
      };
    }
    addBlockInSelection(e) {
      this.rectCrossesBlocks && this.Editor.BlockSelection.selectBlockByIndex(e), this.stackOfSelected.push(e);
    }
    trySelectNextBlock(e) {
      const t = this.stackOfSelected[this.stackOfSelected.length - 1] === e, o = this.stackOfSelected.length, i = 1, n = -1, r = 0;
      if (t)
        return;
      const a = this.stackOfSelected[o - 1] - this.stackOfSelected[o - 2] > 0;
      let l = r;
      o > 1 && (l = a ? i : n);
      const c = e > this.stackOfSelected[o - 1] && l === i, u = e < this.stackOfSelected[o - 1] && l === n, f = !(c || u || l === r);
      if (!f && (e > this.stackOfSelected[o - 1] || this.stackOfSelected[o - 1] === void 0)) {
        let k = this.stackOfSelected[o - 1] + 1 || e;
        for (k; k <= e; k++)
          this.addBlockInSelection(k);
        return;
      }
      if (!f && e < this.stackOfSelected[o - 1]) {
        for (let k = this.stackOfSelected[o - 1] - 1; k >= e; k--)
          this.addBlockInSelection(k);
        return;
      }
      if (!f)
        return;
      let v = o - 1, p;
      for (e > this.stackOfSelected[o - 1] ? p = () => e > this.stackOfSelected[v] : p = () => e < this.stackOfSelected[v]; p(); )
        this.rectCrossesBlocks && this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[v]), this.stackOfSelected.pop(), v--;
    }
  };
  var Jo = class extends S {
    async render(e) {
      const t = e.map((i) => ({ function: () => this.insertBlock(i) }));
      this.Editor.ModificationsObserver.disable();
      const o = await ot(t);
      return this.Editor.ModificationsObserver.enable(), this.Editor.UI.checkEmptiness(), o;
    }
    async insertBlock(e) {
      var l;
      const { Tools: t, BlockManager: o } = this.Editor, { type: i, data: n, tunes: r, id: a } = e;
      if (t.available.has(i))
        try {
          o.insert({
            id: a,
            tool: i,
            data: n,
            tunes: r
          });
        } catch (c) {
          throw T(`Block \xAB${i}\xBB skipped because of plugins error`, "warn", {
            data: n,
            error: c
          }), Error(c);
        }
      else {
        const c = {
          savedData: {
            id: a,
            type: i,
            data: n
          },
          title: i
        };
        if (t.unavailable.has(i)) {
          const f = (l = t.unavailable.get(i).toolbox[0]) == null ? void 0 : l.title;
          c.title = f || c.title;
        }
        const u = o.insert({
          id: a,
          tool: t.stubTool,
          data: c
        });
        u.stretched = true, T(`Tool \xAB${i}\xBB is not found. Check 'tools' property at your initial Editor.js config.`, "warn");
      }
    }
  };
  var Qo = class extends S {
    async save() {
      const { BlockManager: e, Tools: t } = this.Editor, o = e.blocks, i = [];
      try {
        o.forEach((a) => {
          i.push(this.getSavedData(a));
        });
        const n = await Promise.all(i), r = await ht(n, (a) => t.blockTools.get(a).sanitizeConfig);
        return this.makeOutput(r);
      } catch (n) {
        K("Saving failed due to the Error %o", "error", n);
      }
    }
    async getSavedData(e) {
      const t = await e.save(), o = t && await e.validate(t.data);
      return __spreadProps(__spreadValues({}, t), {
        isValid: o
      });
    }
    makeOutput(e) {
      let t = 0;
      const o = [];
      return T("[Editor.js saving]:", "groupCollapsed"), e.forEach(({ id: i, tool: n, data: r, tunes: a, time: l, isValid: c }) => {
        if (t += l, T(`${n.charAt(0).toUpperCase() + n.slice(1)}`, "group"), c)
          T(r), T(void 0, "groupEnd");
        else {
          T(`Block \xAB${n}\xBB skipped because saved data is invalid`), T(void 0, "groupEnd");
          return;
        }
        if (n === this.Editor.Tools.stubTool) {
          o.push(r);
          return;
        }
        const u = __spreadValues({
          id: i,
          type: n,
          data: r
        }, !V(a) && {
          tunes: a
        });
        o.push(u);
      }), T("Total", "log", t), T(void 0, "groupEnd"), {
        time: +/* @__PURE__ */ new Date(),
        blocks: o,
        version: "2.27.0"
      };
    }
  };
  var Ne = {};
  var ei = {
    get exports() {
      return Ne;
    },
    set exports(s) {
      Ne = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(window, function() {
      return function(t) {
        var o = {};
        function i(n) {
          if (o[n])
            return o[n].exports;
          var r = o[n] = { i: n, l: false, exports: {} };
          return t[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = t, i.c = o, i.d = function(n, r, a) {
          i.o(n, r) || Object.defineProperty(n, r, { enumerable: true, get: a });
        }, i.r = function(n) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n, "__esModule", { value: true });
        }, i.t = function(n, r) {
          if (1 & r && (n = i(n)), 8 & r || 4 & r && typeof n == "object" && n && n.__esModule)
            return n;
          var a = /* @__PURE__ */ Object.create(null);
          if (i.r(a), Object.defineProperty(a, "default", { enumerable: true, value: n }), 2 & r && typeof n != "string")
            for (var l in n)
              i.d(a, l, function(c) {
                return n[c];
              }.bind(null, l));
          return a;
        }, i.n = function(n) {
          var r = n && n.__esModule ? function() {
            return n.default;
          } : function() {
            return n;
          };
          return i.d(r, "a", r), r;
        }, i.o = function(n, r) {
          return Object.prototype.hasOwnProperty.call(n, r);
        }, i.p = "/", i(i.s = 4);
      }([function(t, o, i) {
        var n = i(1), r = i(2);
        typeof (r = r.__esModule ? r.default : r) == "string" && (r = [[t.i, r, ""]]);
        var a = { insert: "head", singleton: false };
        n(r, a), t.exports = r.locals || {};
      }, function(t, o, i) {
        var n, r = function() {
          return n === void 0 && (n = !!(window && document && document.all && !window.atob)), n;
        }, a = function() {
          var y = {};
          return function(x) {
            if (y[x] === void 0) {
              var w = document.querySelector(x);
              if (window.HTMLIFrameElement && w instanceof window.HTMLIFrameElement)
                try {
                  w = w.contentDocument.head;
                } catch (e2) {
                  w = null;
                }
              y[x] = w;
            }
            return y[x];
          };
        }(), l = [];
        function c(y) {
          for (var x = -1, w = 0; w < l.length; w++)
            if (l[w].identifier === y) {
              x = w;
              break;
            }
          return x;
        }
        function u(y, x) {
          for (var w = {}, M = [], N = 0; N < y.length; N++) {
            var b = y[N], g = x.base ? b[0] + x.base : b[0], E = w[g] || 0, C = "".concat(g, " ").concat(E);
            w[g] = E + 1;
            var O = c(C), I = { css: b[1], media: b[2], sourceMap: b[3] };
            O !== -1 ? (l[O].references++, l[O].updater(I)) : l.push({ identifier: C, updater: R(I, x), references: 1 }), M.push(C);
          }
          return M;
        }
        function h(y) {
          var x = document.createElement("style"), w = y.attributes || {};
          if (w.nonce === void 0) {
            var M = i.nc;
            M && (w.nonce = M);
          }
          if (Object.keys(w).forEach(function(b) {
            x.setAttribute(b, w[b]);
          }), typeof y.insert == "function")
            y.insert(x);
          else {
            var N = a(y.insert || "head");
            if (!N)
              throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
            N.appendChild(x);
          }
          return x;
        }
        var f, v = (f = [], function(y, x) {
          return f[y] = x, f.filter(Boolean).join(`
`);
        });
        function p(y, x, w, M) {
          var N = w ? "" : M.media ? "@media ".concat(M.media, " {").concat(M.css, "}") : M.css;
          if (y.styleSheet)
            y.styleSheet.cssText = v(x, N);
          else {
            var b = document.createTextNode(N), g = y.childNodes;
            g[x] && y.removeChild(g[x]), g.length ? y.insertBefore(b, g[x]) : y.appendChild(b);
          }
        }
        function k(y, x, w) {
          var M = w.css, N = w.media, b = w.sourceMap;
          if (N ? y.setAttribute("media", N) : y.removeAttribute("media"), b && btoa && (M += `
/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(b)))), " */")), y.styleSheet)
            y.styleSheet.cssText = M;
          else {
            for (; y.firstChild; )
              y.removeChild(y.firstChild);
            y.appendChild(document.createTextNode(M));
          }
        }
        var _ = null, A = 0;
        function R(y, x) {
          var w, M, N;
          if (x.singleton) {
            var b = A++;
            w = _ || (_ = h(x)), M = p.bind(null, w, b, false), N = p.bind(null, w, b, true);
          } else
            w = h(x), M = k.bind(null, w, x), N = function() {
              (function(g) {
                if (g.parentNode === null)
                  return false;
                g.parentNode.removeChild(g);
              })(w);
            };
          return M(y), function(g) {
            if (g) {
              if (g.css === y.css && g.media === y.media && g.sourceMap === y.sourceMap)
                return;
              M(y = g);
            } else
              N();
          };
        }
        t.exports = function(y, x) {
          (x = x || {}).singleton || typeof x.singleton == "boolean" || (x.singleton = r());
          var w = u(y = y || [], x);
          return function(M) {
            if (M = M || [], Object.prototype.toString.call(M) === "[object Array]") {
              for (var N = 0; N < w.length; N++) {
                var b = c(w[N]);
                l[b].references--;
              }
              for (var g = u(M, x), E = 0; E < w.length; E++) {
                var C = c(w[E]);
                l[C].references === 0 && (l[C].updater(), l.splice(C, 1));
              }
              w = g;
            }
          };
        };
      }, function(t, o, i) {
        (o = i(3)(false)).push([t.i, `.ce-paragraph {
    line-height: 1.6em;
    outline: none;
}

.ce-paragraph[data-placeholder]:empty::before{
  content: attr(data-placeholder);
  color: #707684;
  font-weight: normal;
  opacity: 0;
}

/** Show placeholder at the first paragraph if Editor is empty */
.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before {
  opacity: 1;
}

.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before,
.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus::before {
  opacity: 0;
}

.ce-paragraph p:first-of-type{
    margin-top: 0;
}

.ce-paragraph p:last-of-type{
    margin-bottom: 0;
}
`, ""]), t.exports = o;
      }, function(t, o, i) {
        t.exports = function(n) {
          var r = [];
          return r.toString = function() {
            return this.map(function(a) {
              var l = function(c, u) {
                var h = c[1] || "", f = c[3];
                if (!f)
                  return h;
                if (u && typeof btoa == "function") {
                  var v = (k = f, _ = btoa(unescape(encodeURIComponent(JSON.stringify(k)))), A = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(_), "/*# ".concat(A, " */")), p = f.sources.map(function(R) {
                    return "/*# sourceURL=".concat(f.sourceRoot || "").concat(R, " */");
                  });
                  return [h].concat(p).concat([v]).join(`
`);
                }
                var k, _, A;
                return [h].join(`
`);
              }(a, n);
              return a[2] ? "@media ".concat(a[2], " {").concat(l, "}") : l;
            }).join("");
          }, r.i = function(a, l, c) {
            typeof a == "string" && (a = [[null, a, ""]]);
            var u = {};
            if (c)
              for (var h = 0; h < this.length; h++) {
                var f = this[h][0];
                f != null && (u[f] = true);
              }
            for (var v = 0; v < a.length; v++) {
              var p = [].concat(a[v]);
              c && u[p[0]] || (l && (p[2] ? p[2] = "".concat(l, " and ").concat(p[2]) : p[2] = l), r.push(p));
            }
          }, r;
        };
      }, function(t, o, i) {
        i.r(o), i.d(o, "default", function() {
          return a;
        }), i(0);
        function n(l, c) {
          for (var u = 0; u < c.length; u++) {
            var h = c[u];
            h.enumerable = h.enumerable || false, h.configurable = true, "value" in h && (h.writable = true), Object.defineProperty(l, h.key, h);
          }
        }
        function r(l, c, u) {
          return c && n(l.prototype, c), u && n(l, u), l;
        }
        var a = function() {
          function l(c) {
            var u = c.data, h = c.config, f = c.api, v = c.readOnly;
            (function(p, k) {
              if (!(p instanceof k))
                throw new TypeError("Cannot call a class as a function");
            })(this, l), this.api = f, this.readOnly = v, this._CSS = { block: this.api.styles.block, wrapper: "ce-paragraph" }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = h.placeholder ? h.placeholder : l.DEFAULT_PLACEHOLDER, this._data = {}, this._element = this.drawView(), this._preserveBlank = h.preserveBlank !== void 0 && h.preserveBlank, this.data = u;
          }
          return r(l, null, [{ key: "DEFAULT_PLACEHOLDER", get: function() {
            return "";
          } }]), r(l, [{ key: "onKeyUp", value: function(c) {
            c.code !== "Backspace" && c.code !== "Delete" || this._element.textContent === "" && (this._element.innerHTML = "");
          } }, { key: "drawView", value: function() {
            var c = document.createElement("DIV");
            return c.classList.add(this._CSS.wrapper, this._CSS.block), c.contentEditable = false, c.dataset.placeholder = this.api.i18n.t(this._placeholder), this.readOnly || (c.contentEditable = true, c.addEventListener("keyup", this.onKeyUp)), c;
          } }, { key: "render", value: function() {
            return this._element;
          } }, { key: "merge", value: function(c) {
            var u = { text: this.data.text + c.text };
            this.data = u;
          } }, { key: "validate", value: function(c) {
            return !(c.text.trim() === "" && !this._preserveBlank);
          } }, { key: "save", value: function(c) {
            return { text: c.innerHTML };
          } }, { key: "onPaste", value: function(c) {
            var u = { text: c.detail.data.innerHTML };
            this.data = u;
          } }, { key: "data", get: function() {
            var c = this._element.innerHTML;
            return this._data.text = c, this._data;
          }, set: function(c) {
            this._data = c || {}, this._element.innerHTML = this._data.text || "";
          } }], [{ key: "conversionConfig", get: function() {
            return { export: "text", import: "text" };
          } }, { key: "sanitize", get: function() {
            return { text: { br: true } };
          } }, { key: "isReadOnlySupported", get: function() {
            return true;
          } }, { key: "pasteConfig", get: function() {
            return { tags: ["P"] };
          } }, { key: "toolbox", get: function() {
            return { icon: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14"/></svg>', title: "Text" };
          } }]), l;
        }();
      }]).default;
    });
  })(ei);
  var ti = /* @__PURE__ */ xe(Ne);
  var $e = class {
    constructor() {
      this.commandName = "bold", this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--bold"
      }, this.nodes = {
        button: void 0
      };
    }
    static get sanitize() {
      return {
        b: {}
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = Eo, this.nodes.button;
    }
    surround() {
      document.execCommand(this.commandName);
    }
    checkState() {
      const e = document.queryCommandState(this.commandName);
      return this.nodes.button.classList.toggle(this.CSS.buttonActive, e), e;
    }
    get shortcut() {
      return "CMD+B";
    }
  };
  $e.isInline = true;
  $e.title = "Bold";
  var We = class {
    constructor() {
      this.commandName = "italic", this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--italic"
      }, this.nodes = {
        button: null
      };
    }
    static get sanitize() {
      return {
        i: {}
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = So, this.nodes.button;
    }
    surround() {
      document.execCommand(this.commandName);
    }
    checkState() {
      const e = document.queryCommandState(this.commandName);
      return this.nodes.button.classList.toggle(this.CSS.buttonActive, e), e;
    }
    get shortcut() {
      return "CMD+I";
    }
  };
  We.isInline = true;
  We.title = "Italic";
  var Ye = class {
    constructor({ api: e }) {
      this.commandLink = "createLink", this.commandUnlink = "unlink", this.ENTER_KEY = 13, this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--link",
        buttonUnlink: "ce-inline-tool--unlink",
        input: "ce-inline-tool-input",
        inputShowed: "ce-inline-tool-input--showed"
      }, this.nodes = {
        button: null,
        input: null
      }, this.inputOpened = false, this.toolbar = e.toolbar, this.inlineToolbar = e.inlineToolbar, this.notifier = e.notifier, this.i18n = e.i18n, this.selection = new m();
    }
    static get sanitize() {
      return {
        a: {
          href: true,
          target: "_blank",
          rel: "nofollow"
        }
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = qe, this.nodes.button;
    }
    renderActions() {
      return this.nodes.input = document.createElement("input"), this.nodes.input.placeholder = this.i18n.t("Add a link"), this.nodes.input.classList.add(this.CSS.input), this.nodes.input.addEventListener("keydown", (e) => {
        e.keyCode === this.ENTER_KEY && this.enterPressed(e);
      }), this.nodes.input;
    }
    surround(e) {
      if (e) {
        this.inputOpened ? (this.selection.restore(), this.selection.removeFakeBackground()) : (this.selection.setFakeBackground(), this.selection.save());
        const t = this.selection.findParentTag("A");
        if (t) {
          this.selection.expandToTag(t), this.unlink(), this.closeActions(), this.checkState(), this.toolbar.close();
          return;
        }
      }
      this.toggleActions();
    }
    checkState() {
      const e = this.selection.findParentTag("A");
      if (e) {
        this.nodes.button.innerHTML = Oo, this.nodes.button.classList.add(this.CSS.buttonUnlink), this.nodes.button.classList.add(this.CSS.buttonActive), this.openActions();
        const t = e.getAttribute("href");
        this.nodes.input.value = t !== "null" ? t : "", this.selection.save();
      } else
        this.nodes.button.innerHTML = qe, this.nodes.button.classList.remove(this.CSS.buttonUnlink), this.nodes.button.classList.remove(this.CSS.buttonActive);
      return !!e;
    }
    clear() {
      this.closeActions();
    }
    get shortcut() {
      return "CMD+K";
    }
    toggleActions() {
      this.inputOpened ? this.closeActions(false) : this.openActions(true);
    }
    openActions(e = false) {
      this.nodes.input.classList.add(this.CSS.inputShowed), e && this.nodes.input.focus(), this.inputOpened = true;
    }
    closeActions(e = true) {
      if (this.selection.isFakeBackgroundEnabled) {
        const t = new m();
        t.save(), this.selection.restore(), this.selection.removeFakeBackground(), t.restore();
      }
      this.nodes.input.classList.remove(this.CSS.inputShowed), this.nodes.input.value = "", e && this.selection.clearSaved(), this.inputOpened = false;
    }
    enterPressed(e) {
      let t = this.nodes.input.value || "";
      if (!t.trim()) {
        this.selection.restore(), this.unlink(), e.preventDefault(), this.closeActions();
        return;
      }
      if (!this.validateURL(t)) {
        this.notifier.show({
          message: "Pasted link is not valid.",
          style: "error"
        }), T("Incorrect Link pasted", "warn", t);
        return;
      }
      t = this.prepareLink(t), this.selection.restore(), this.selection.removeFakeBackground(), this.insertLink(t), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation(), this.selection.collapseToEnd(), this.inlineToolbar.close();
    }
    validateURL(e) {
      return !/\s/.test(e);
    }
    prepareLink(e) {
      return e = e.trim(), e = this.addProtocol(e), e;
    }
    addProtocol(e) {
      if (/^(\w+):(\/\/)?/.test(e))
        return e;
      const t = /^\/[^/\s]/.test(e), o = e.substring(0, 1) === "#", i = /^\/\/[^/\s]/.test(e);
      return !t && !o && !i && (e = "http://" + e), e;
    }
    insertLink(e) {
      const t = this.selection.findParentTag("A");
      t && this.selection.expandToTag(t), document.execCommand(this.commandLink, false, e);
    }
    unlink() {
      document.execCommand(this.commandUnlink);
    }
  };
  Ye.isInline = true;
  Ye.title = "Link";
  var yt = class {
    constructor({ data: e, api: t }) {
      this.CSS = {
        wrapper: "ce-stub",
        info: "ce-stub__info",
        title: "ce-stub__title",
        subtitle: "ce-stub__subtitle"
      }, this.api = t, this.title = e.title || this.api.i18n.t("Error"), this.subtitle = this.api.i18n.t("The block can not be displayed correctly."), this.savedData = e.savedData, this.wrapper = this.make();
    }
    render() {
      return this.wrapper;
    }
    save() {
      return this.savedData;
    }
    make() {
      const e = d.make("div", this.CSS.wrapper), t = '<svg xmlns="http://www.w3.org/2000/svg" width="52" height="52" viewBox="0 0 52 52"><path fill="#D76B6B" fill-rule="nonzero" d="M26 52C11.64 52 0 40.36 0 26S11.64 0 26 0s26 11.64 26 26-11.64 26-26 26zm0-3.25c12.564 0 22.75-10.186 22.75-22.75S38.564 3.25 26 3.25 3.25 13.436 3.25 26 13.436 48.75 26 48.75zM15.708 33.042a2.167 2.167 0 1 1 0-4.334 2.167 2.167 0 0 1 0 4.334zm23.834 0a2.167 2.167 0 1 1 0-4.334 2.167 2.167 0 0 1 0 4.334zm-15.875 5.452a1.083 1.083 0 1 1-1.834-1.155c1.331-2.114 3.49-3.179 6.334-3.179 2.844 0 5.002 1.065 6.333 3.18a1.083 1.083 0 1 1-1.833 1.154c-.913-1.45-2.366-2.167-4.5-2.167s-3.587.717-4.5 2.167z"/></svg>', o = d.make("div", this.CSS.info), i = d.make("div", this.CSS.title, {
        textContent: this.title
      }), n = d.make("div", this.CSS.subtitle, {
        textContent: this.subtitle
      });
      return e.innerHTML = t, o.appendChild(i), o.appendChild(n), e.appendChild(o), e;
    }
  };
  yt.isReadOnlySupported = true;
  var oi = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Inline;
    }
    get title() {
      return this.constructable[je.Title];
    }
    create() {
      return new this.constructable({
        api: this.api.getMethodsForTool(this),
        config: this.settings
      });
    }
  };
  var ii = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Tune;
    }
    create(e, t) {
      return new this.constructable({
        api: this.api.getMethodsForTool(this),
        config: this.settings,
        block: t,
        data: e
      });
    }
  };
  var U = class extends Map {
    get blockTools() {
      const e = Array.from(this.entries()).filter(([, t]) => t.isBlock());
      return new U(e);
    }
    get inlineTools() {
      const e = Array.from(this.entries()).filter(([, t]) => t.isInline());
      return new U(e);
    }
    get blockTunes() {
      const e = Array.from(this.entries()).filter(([, t]) => t.isTune());
      return new U(e);
    }
    get internalTools() {
      const e = Array.from(this.entries()).filter(([, t]) => t.isInternal);
      return new U(e);
    }
    get externalTools() {
      const e = Array.from(this.entries()).filter(([, t]) => !t.isInternal);
      return new U(e);
    }
  };
  var ni = Object.defineProperty;
  var si = Object.getOwnPropertyDescriptor;
  var Et = (s, e, t, o) => {
    for (var i = o > 1 ? void 0 : o ? si(e, t) : e, n = s.length - 1, r; n >= 0; n--)
      (r = s[n]) && (i = (o ? r(e, t, i) : r(i)) || i);
    return o && i && ni(e, t, i), i;
  };
  var Ke = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Block, this.inlineTools = new U(), this.tunes = new U();
    }
    create(e, t, o) {
      return new this.constructable({
        data: e,
        block: t,
        readOnly: o,
        api: this.api.getMethodsForTool(this),
        config: this.settings
      });
    }
    get isReadOnlySupported() {
      return this.constructable[se.IsReadOnlySupported] === true;
    }
    get isLineBreaksEnabled() {
      return this.constructable[se.IsEnabledLineBreaks];
    }
    get toolbox() {
      const e = this.constructable[se.Toolbox], t = this.config[me.Toolbox];
      if (!V(e) && t !== false)
        return t ? Array.isArray(e) ? Array.isArray(t) ? t.map((o, i) => {
          const n = e[i];
          return n ? __spreadValues(__spreadValues({}, n), o) : o;
        }) : [t] : Array.isArray(t) ? t : [
          __spreadValues(__spreadValues({}, e), t)
        ] : Array.isArray(e) ? e : [e];
    }
    get conversionConfig() {
      return this.constructable[se.ConversionConfig];
    }
    get enabledInlineTools() {
      return this.config[me.EnabledInlineTools] || false;
    }
    get enabledBlockTunes() {
      return this.config[me.EnabledBlockTunes];
    }
    get pasteConfig() {
      var _a;
      return (_a = this.constructable[se.PasteConfig]) != null ? _a : {};
    }
    get sanitizeConfig() {
      const e = super.sanitizeConfig, t = this.baseSanitizeConfig;
      if (V(e))
        return t;
      const o = {};
      for (const i in e)
        if (Object.prototype.hasOwnProperty.call(e, i)) {
          const n = e[i];
          j(n) ? o[i] = Object.assign({}, t, n) : o[i] = n;
        }
      return o;
    }
    get baseSanitizeConfig() {
      const e = {};
      return Array.from(this.inlineTools.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), Array.from(this.tunes.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), e;
    }
  };
  Et([
    ae
  ], Ke.prototype, "sanitizeConfig", 1);
  Et([
    ae
  ], Ke.prototype, "baseSanitizeConfig", 1);
  var ri = class {
    constructor(e, t, o) {
      this.api = o, this.config = e, this.editorConfig = t;
    }
    get(e) {
      const _a = this.config[e], { class: t, isInternal: o = false } = _a, i = __objRest(_a, ["class", "isInternal"]), n = this.getConstructor(t);
      return new n({
        name: e,
        constructable: t,
        config: i,
        api: this.api,
        isDefault: e === this.editorConfig.defaultBlock,
        defaultPlaceholder: this.editorConfig.placeholder,
        isInternal: o
      });
    }
    getConstructor(e) {
      switch (true) {
        case e[je.IsInline]:
          return oi;
        case e[vt.IsTune]:
          return ii;
        default:
          return Ke;
      }
    }
  };
  var Bt = class {
    constructor({ api: e }) {
      this.CSS = {
        animation: "wobble"
      }, this.api = e;
    }
    render() {
      return {
        icon: pt,
        title: this.api.i18n.t("Move down"),
        onActivate: () => this.handleClick(),
        name: "move-down"
      };
    }
    handleClick() {
      const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e + 1);
      if (!t)
        throw new Error("Unable to move Block down since it is already the last");
      const o = t.holder, i = o.getBoundingClientRect();
      let n = Math.abs(window.innerHeight - o.offsetHeight);
      i.top < window.innerHeight && (n = window.scrollY + o.offsetHeight), window.scrollTo(0, n), this.api.blocks.move(e + 1), this.api.toolbar.toggleBlockSettings(true);
    }
  };
  Bt.isTune = true;
  var Ct = class {
    constructor({ api: e }) {
      this.api = e;
    }
    render() {
      return {
        icon: Co,
        title: this.api.i18n.t("Delete"),
        name: "delete",
        confirmation: {
          title: this.api.i18n.t("Click to delete"),
          onActivate: () => this.handleClick()
        }
      };
    }
    handleClick() {
      this.api.blocks.delete();
    }
  };
  Ct.isTune = true;
  var Tt = class {
    constructor({ api: e }) {
      this.CSS = {
        animation: "wobble"
      }, this.api = e;
    }
    render() {
      return {
        icon: Bo,
        title: this.api.i18n.t("Move up"),
        onActivate: () => this.handleClick(),
        name: "move-up"
      };
    }
    handleClick() {
      const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e), o = this.api.blocks.getBlockByIndex(e - 1);
      if (e === 0 || !t || !o)
        throw new Error("Unable to move Block up since it is already the first");
      const i = t.holder, n = o.holder, r = i.getBoundingClientRect(), a = n.getBoundingClientRect();
      let l;
      a.top > 0 ? l = Math.abs(r.top) - Math.abs(a.top) : l = Math.abs(r.top) + a.height, window.scrollBy(0, -1 * l), this.api.blocks.move(e - 1), this.api.toolbar.toggleBlockSettings(true);
    }
  };
  Tt.isTune = true;
  var ai = Object.defineProperty;
  var li = Object.getOwnPropertyDescriptor;
  var ci = (s, e, t, o) => {
    for (var i = o > 1 ? void 0 : o ? li(e, t) : e, n = s.length - 1, r; n >= 0; n--)
      (r = s[n]) && (i = (o ? r(e, t, i) : r(i)) || i);
    return o && i && ai(e, t, i), i;
  };
  var St = class extends S {
    constructor() {
      super(...arguments), this.stubTool = "stub", this.toolsAvailable = new U(), this.toolsUnavailable = new U();
    }
    get available() {
      return this.toolsAvailable;
    }
    get unavailable() {
      return this.toolsUnavailable;
    }
    get inlineTools() {
      return this.available.inlineTools;
    }
    get blockTools() {
      return this.available.blockTools;
    }
    get blockTunes() {
      return this.available.blockTunes;
    }
    get defaultTool() {
      return this.blockTools.get(this.config.defaultBlock);
    }
    get internal() {
      return this.available.internalTools;
    }
    async prepare() {
      if (this.validateTools(), this.config.tools = Se({}, this.internalTools, this.config.tools), !Object.prototype.hasOwnProperty.call(this.config, "tools") || Object.keys(this.config.tools).length === 0)
        throw Error("Can't start without tools");
      const e = this.prepareConfig();
      this.factory = new ri(e, this.config, this.Editor.API);
      const t = this.getListOfPrepareFunctions(e);
      if (t.length === 0)
        return Promise.resolve();
      await ot(t, (o) => {
        this.toolPrepareMethodSuccess(o);
      }, (o) => {
        this.toolPrepareMethodFallback(o);
      }), this.prepareBlockTools();
    }
    getAllInlineToolsSanitizeConfig() {
      const e = {};
      return Array.from(this.inlineTools.values()).forEach((t) => {
        Object.assign(e, t.sanitizeConfig);
      }), e;
    }
    destroy() {
      Object.values(this.available).forEach(async (e) => {
        D(e.reset) && await e.reset();
      });
    }
    get internalTools() {
      return {
        bold: {
          class: $e,
          isInternal: true
        },
        italic: {
          class: We,
          isInternal: true
        },
        link: {
          class: Ye,
          isInternal: true
        },
        paragraph: {
          class: ti,
          inlineToolbar: true,
          isInternal: true
        },
        stub: {
          class: yt,
          isInternal: true
        },
        moveUp: {
          class: Tt,
          isInternal: true
        },
        delete: {
          class: Ct,
          isInternal: true
        },
        moveDown: {
          class: Bt,
          isInternal: true
        }
      };
    }
    toolPrepareMethodSuccess(e) {
      const t = this.factory.get(e.toolName);
      if (t.isInline()) {
        const i = ["render", "surround", "checkState"].filter((n) => !t.create()[n]);
        if (i.length) {
          T(
            `Incorrect Inline Tool: ${t.name}. Some of required methods is not implemented %o`,
            "warn",
            i
          ), this.toolsUnavailable.set(t.name, t);
          return;
        }
      }
      this.toolsAvailable.set(t.name, t);
    }
    toolPrepareMethodFallback(e) {
      this.toolsUnavailable.set(e.toolName, this.factory.get(e.toolName));
    }
    getListOfPrepareFunctions(e) {
      const t = [];
      return Object.entries(e).forEach(([o, i]) => {
        t.push({
          function: D(i.class.prepare) ? i.class.prepare : () => {
          },
          data: {
            toolName: o,
            config: i.config
          }
        });
      }), t;
    }
    prepareBlockTools() {
      Array.from(this.blockTools.values()).forEach((e) => {
        this.assignInlineToolsToBlockTool(e), this.assignBlockTunesToBlockTool(e);
      });
    }
    assignInlineToolsToBlockTool(e) {
      if (this.config.inlineToolbar !== false) {
        if (e.enabledInlineTools === true) {
          e.inlineTools = new U(
            Array.isArray(this.config.inlineToolbar) ? this.config.inlineToolbar.map((t) => [t, this.inlineTools.get(t)]) : Array.from(this.inlineTools.entries())
          );
          return;
        }
        Array.isArray(e.enabledInlineTools) && (e.inlineTools = new U(
          e.enabledInlineTools.map((t) => [t, this.inlineTools.get(t)])
        ));
      }
    }
    assignBlockTunesToBlockTool(e) {
      if (e.enabledBlockTunes !== false) {
        if (Array.isArray(e.enabledBlockTunes)) {
          const t = new U(
            e.enabledBlockTunes.map((o) => [o, this.blockTunes.get(o)])
          );
          e.tunes = new U([...t, ...this.blockTunes.internalTools]);
          return;
        }
        if (Array.isArray(this.config.tunes)) {
          const t = new U(
            this.config.tunes.map((o) => [o, this.blockTunes.get(o)])
          );
          e.tunes = new U([...t, ...this.blockTunes.internalTools]);
          return;
        }
        e.tunes = this.blockTunes.internalTools;
      }
    }
    validateTools() {
      for (const e in this.config.tools)
        if (Object.prototype.hasOwnProperty.call(this.config.tools, e)) {
          if (e in this.internalTools)
            return;
          const t = this.config.tools[e];
          if (!D(t) && !D(t.class))
            throw Error(
              `Tool \xAB${e}\xBB must be a constructor function or an object with function in the \xABclass\xBB property`
            );
        }
    }
    prepareConfig() {
      const e = {};
      for (const t in this.config.tools)
        j(this.config.tools[t]) ? e[t] = this.config.tools[t] : e[t] = { class: this.config.tools[t] };
      return e;
    }
  };
  ci([
    ae
  ], St.prototype, "getAllInlineToolsSanitizeConfig", 1);
  var di = `:root{--selectionColor: #e1f2ff;--inlineSelectionColor: #d4ecff;--bg-light: #eff2f5;--grayText: #707684;--color-dark: #1D202B;--color-active-icon: #388AE5;--color-gray-border: rgba(201, 201, 204, .48);--content-width: 650px;--narrow-mode-right-padding: 50px;--toolbox-buttons-size: 26px;--toolbox-buttons-size--mobile: 36px;--icon-size: 20px;--icon-size--mobile: 28px;--block-padding-vertical: .4em;--color-line-gray: #EFF0F1 }.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide,.codex-editor__redactor--hidden{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:"\\feff"}@media (min-width: 651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor__loader{position:relative;height:30vh}.codex-editor__loader:before{content:"";position:absolute;left:50%;top:50%;width:30px;height:30px;margin-top:-15px;margin-left:-15px;border-radius:50%;border:2px solid rgba(201,201,204,.48);border-top-color:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-animation:editor-loader-spin .8s infinite linear;animation:editor-loader-spin .8s infinite linear;will-change:transform}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0px;left:0px;right:0px;bottom:0px;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:#2eaadc33;border:1px solid transparent}.codex-editor svg{max-height:100%}.codex-editor path{stroke:currentColor}::-moz-selection{background-color:#d4ecff}::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}@-webkit-keyframes editor-loader-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes editor-loader-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.ce-scroll-locked{overflow:hidden}.ce-scroll-locked--hard{overflow:hidden;top:calc(-1 * var(--window-scroll-offset));position:fixed;width:100%}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,top;display:none}.ce-toolbar--opened{display:block}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}.ce-toolbar__plus{color:#1d202b;cursor:pointer;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-flex-negative:0;flex-shrink:0}@media (max-width: 650px){.ce-toolbar__plus{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__plus:hover{background-color:#eff2f5}}.ce-toolbar__plus--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}@media (max-width: 650px){.ce-toolbar__plus{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__plus--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__plus--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__actions{position:absolute;right:100%;opacity:0;display:-webkit-box;display:-ms-flexbox;display:flex;padding-right:5px}.ce-toolbar__actions--opened{opacity:1}@media (max-width: 650px){.ce-toolbar__actions{right:auto}}.ce-toolbar__settings-btn{color:#1d202b;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;margin-left:3px;cursor:pointer;user-select:none}@media (max-width: 650px){.ce-toolbar__settings-btn{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__settings-btn:hover{background-color:#eff2f5}}.ce-toolbar__settings-btn--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}@media (min-width: 651px){.ce-toolbar__settings-btn{width:24px}}.ce-toolbar__settings-btn--hidden{display:none}@media (max-width: 650px){.ce-toolbar__settings-btn{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__settings-btn--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__settings-btn--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__plus svg,.ce-toolbar__settings-btn svg{width:24px;height:24px}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbox .ce-popover{right:0;left:auto;left:initial}}.ce-inline-toolbar{--y-offset: 8px;position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;-webkit-transform:translateX(-50%) translateY(8px) scale(.94);transform:translate(-50%) translateY(8px) scale(.94);opacity:0;visibility:hidden;-webkit-transition:opacity .25s ease,-webkit-transform .15s ease;transition:opacity .25s ease,-webkit-transform .15s ease;transition:transform .15s ease,opacity .25s ease;transition:transform .15s ease,opacity .25s ease,-webkit-transform .15s ease;will-change:transform,opacity;top:0;left:0;z-index:3}.ce-inline-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-inline-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-inline-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:translateX(-50%);transform:translate(-50%)}.ce-inline-toolbar--left-oriented{-webkit-transform:translateX(-23px) translateY(8px) scale(.94);transform:translate(-23px) translateY(8px) scale(.94)}.ce-inline-toolbar--left-oriented.ce-inline-toolbar--showed{-webkit-transform:translateX(-23px);transform:translate(-23px)}.ce-inline-toolbar--right-oriented{-webkit-transform:translateX(-100%) translateY(8px) scale(.94);transform:translate(-100%) translateY(8px) scale(.94);margin-left:23px}.ce-inline-toolbar--right-oriented.ce-inline-toolbar--showed{-webkit-transform:translateX(-100%);transform:translate(-100%)}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;padding:0 6px}.ce-inline-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-box;display:-ms-flexbox;display:flex;padding:6px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48);-webkit-box-sizing:border-box;box-sizing:border-box}@media (hover: hover){.ce-inline-toolbar__dropdown:hover{background:#eff2f5}}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content,.ce-inline-toolbar__dropdown-arrow{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown-content svg,.ce-inline-toolbar__dropdown-arrow svg{width:20px;height:20px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;border-radius:0;line-height:normal}.ce-inline-tool svg{width:20px;height:20px}@media (max-width: 650px){.ce-inline-tool svg{width:28px;height:28px}}@media (hover: hover){.ce-inline-tool:hover{background-color:#eff2f5}}.ce-inline-tool--active{color:#388ae5}.ce-inline-tool--focused{background:rgba(34,186,255,.08)!important}.ce-inline-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-inline-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{outline:none;border:0;border-radius:0 0 4px 4px;margin:0;font-size:13px;padding:10px;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;border-top:1px solid rgba(201,201,204,.48);-webkit-appearance:none;font-family:inherit}@media (max-width: 650px){.ce-inline-tool-input{font-size:15px;font-weight:500}}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-conversion-toolbar{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;opacity:0;visibility:hidden;will-change:transform,opacity;-webkit-transition:opacity .1s ease,-webkit-transform .1s ease;transition:opacity .1s ease,-webkit-transform .1s ease;transition:transform .1s ease,opacity .1s ease;transition:transform .1s ease,opacity .1s ease,-webkit-transform .1s ease;-webkit-transform:translateY(-8px);transform:translateY(-8px);left:-1px;width:150px;margin-top:5px;-webkit-box-sizing:content-box;box-sizing:content-box}.ce-conversion-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-conversion-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-conversion-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:none;transform:none}.ce-conversion-toolbar [hidden]{display:none!important}.ce-conversion-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-conversion-toolbar__label{color:#707684;font-size:11px;font-weight:500;letter-spacing:.33px;padding:10px 10px 5px;text-transform:uppercase}.ce-conversion-tool{display:-webkit-box;display:-ms-flexbox;display:flex;padding:5px 10px;font-size:14px;line-height:20px;font-weight:500;cursor:pointer;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-conversion-tool--hidden{display:none}.ce-conversion-tool--focused{background:rgba(34,186,255,.08)!important}.ce-conversion-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-conversion-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-conversion-tool:hover{background:#eff2f5}.ce-conversion-tool__icon{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px rgba(201,201,204,.48);box-shadow:0 0 0 1px #c9c9cc7a;border-radius:5px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;background:#fff;-webkit-box-sizing:content-box;box-sizing:content-box;-ms-flex-negative:0;flex-shrink:0;margin-right:10px}.ce-conversion-tool__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-conversion-tool__icon{width:36px;height:36px;border-radius:8px}.ce-conversion-tool__icon svg{width:28px;height:28px}}.ce-conversion-tool--last{margin-right:0!important}.ce-conversion-tool--active{color:#388ae5!important}.ce-conversion-tool--active{-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-settings__button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;line-height:32px}.ce-settings__button svg{width:20px;height:20px}@media (max-width: 650px){.ce-settings__button svg{width:28px;height:28px}}@media (hover: hover){.ce-settings__button:hover{background-color:#eff2f5}}.ce-settings__button--active{color:#388ae5}.ce-settings__button--focused{background:rgba(34,186,255,.08)!important}.ce-settings__button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-settings__button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-settings__button:not(:nth-child(3n+3)){margin-right:3px}.ce-settings__button:nth-child(n+4){margin-top:3px}.ce-settings__button--disabled{cursor:not-allowed!important}.ce-settings__button--disabled{opacity:.3}.ce-settings__button--selected{color:#388ae5}@media (min-width: 651px){.codex-editor--narrow .ce-settings .ce-popover{right:0;left:auto;left:initial}}@-webkit-keyframes fade-in{0%{opacity:0}to{opacity:1}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}.ce-block{-webkit-animation:fade-in .3s ease;animation:fade-in .3s ease;-webkit-animation-fill-mode:none;animation-fill-mode:none;-webkit-animation-fill-mode:initial;animation-fill-mode:initial}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content img,.ce-block--selected .ce-block__content .ce-stub{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:"";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388AE5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:"";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388AE5,#388AE5 1px,#fff 1px,#fff 6px)}.ce-block a{cursor:pointer;-webkit-text-decoration:underline;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@media (min-width: 651px){.codex-editor--narrow .ce-block--focused{margin-right:-50px;padding-right:50px}}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}.cdx-block{padding:.4em 0}.cdx-block::-webkit-input-placeholder{line-height:normal!important}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px #232c480f;border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important}.cdx-input[data-placeholder]:before{display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;min-width:26px;min-height:26px}.cdx-settings-button svg{width:20px;height:20px}@media (max-width: 650px){.cdx-settings-button svg{width:28px;height:28px}}@media (hover: hover){.cdx-settings-button:hover{background-color:#eff2f5}}.cdx-settings-button--focused{background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button--active{color:#388ae5}.cdx-settings-button svg{width:auto;height:auto}@media (max-width: 650px){.cdx-settings-button{width:36px;height:36px;border-radius:8px}}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:"";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s infinite linear;animation:cdxRotation 1.2s infinite linear}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px #121e390a;color:#707684;text-align:center;cursor:pointer}@media (hover: hover){.cdx-button:hover{background:#FBFCFE;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px #121e3914}}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:100%;padding:3.5em 0;margin:17px 0;border-radius:3px;background:#fcf7f7;color:#b46262}.ce-stub__info{margin-left:20px}.ce-stub__title{margin-bottom:3px;font-weight:600;font-size:18px;text-transform:capitalize}.ce-stub__subtitle{font-size:16px}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-26px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-26px}@media (max-width: 650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0px solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0px;right:5px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}.cdx-search-field{--icon-margin-right: 10px;background:rgba(232,232,235,.49);border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-search-field__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:var(--icon-margin-right)}.cdx-search-field__icon svg{width:20px;height:20px;color:#707684}.cdx-search-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - 26px - var(--icon-margin-right))}.cdx-search-field__input::-webkit-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-moz-placeholder{color:#707684;font-weight:500}.cdx-search-field__input:-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::placeholder{color:#707684;font-weight:500}.ce-popover{--border-radius: 6px;--width: 200px;--max-height: 270px;--padding: 6px;--offset-from-target: 8px;--color-border: #e8e8eb;--color-shadow: rgba(13,20,33,.13);--color-background: white;--color-text-primary: black;--color-text-secondary: #707684;--color-border-icon: rgba(201, 201, 204, .48);--color-border-icon-disabled: #EFF0F1;--color-text-icon-active: #388AE5;--color-background-icon-active: rgba(56, 138, 229, .1);--color-background-item-focus: rgba(34, 186, 255, .08);--color-shadow-item-focus: rgba(7, 161, 227, .08);--color-background-item-hover: #eff2f5;--color-background-item-confirm: #E24A4A;--color-background-item-confirm-hover: #CE4343;min-width:var(--width);width:var(--width);max-height:var(--max-height);border-radius:var(--border-radius);overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0 3px 15px -3px var(--color-shadow);box-shadow:0 3px 15px -3px var(--color-shadow);position:absolute;left:0;top:calc(100% + var(--offset-from-target));background:var(--color-background);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:4;opacity:0;max-height:0;pointer-events:none;padding:0;border:none}.ce-popover--opened{opacity:1;padding:var(--padding);max-height:var(--max-height);pointer-events:auto;-webkit-animation:panelShowing .1s ease;animation:panelShowing .1s ease;border:1px solid var(--color-border)}@media (max-width: 650px){.ce-popover--opened{-webkit-animation:panelShowingMobile .25s ease;animation:panelShowingMobile .25s ease}}.ce-popover__items{overflow-y:auto;-ms-scroll-chaining:none;overscroll-behavior:contain}@media (max-width: 650px){.ce-popover__overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:#1D202B;z-index:3;opacity:.5;-webkit-transition:opacity .12s ease-in;transition:opacity .12s ease-in;will-change:opacity;visibility:visible}}.ce-popover__overlay--hidden{display:none}.ce-popover--open-top{top:calc(-1 * (var(--offset-from-target) + var(--popover-height)))}@media (max-width: 650px){.ce-popover{--offset: 5px;position:fixed;max-width:none;min-width:calc(100% - var(--offset) * 2);left:var(--offset);right:var(--offset);bottom:calc(var(--offset) + env(safe-area-inset-bottom));top:auto;border-radius:10px}.ce-popover .ce-popover__search{display:none}}.ce-popover__search,.ce-popover__custom-content:not(:empty){margin-bottom:5px}.ce-popover__nothing-found-message{color:#707684;display:none;cursor:default;padding:3px;font-size:14px;line-height:20px;font-weight:500;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ce-popover__nothing-found-message--displayed{display:block}.ce-popover__custom-content:not(:empty){padding:4px}@media (min-width: 651px){.ce-popover__custom-content:not(:empty){padding:0}}.ce-popover__custom-content--hidden{display:none}.ce-popover-item{--border-radius: 6px;--icon-size: 20px;--icon-size-mobile: 28px;border-radius:var(--border-radius);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:3px;color:var(--color-text-primary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}@media (max-width: 650px){.ce-popover-item{padding:4px}}.ce-popover-item:not(:last-of-type){margin-bottom:1px}.ce-popover-item__icon{border-radius:5px;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px var(--color-border-icon);box-shadow:0 0 0 1px var(--color-border-icon);background:#fff;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:10px}.ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover-item__icon{width:36px;height:36px;border-radius:8px}.ce-popover-item__icon svg{width:var(--icon-size-mobile);height:var(--icon-size-mobile)}}.ce-popover-item__title{font-size:14px;line-height:20px;font-weight:500;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}@media (max-width: 650px){.ce-popover-item__title{font-size:16px}}.ce-popover-item__secondary-title{color:var(--color-text-secondary);font-size:12px;margin-left:auto;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;margin-bottom:-2px;opacity:.6}@media (max-width: 650px){.ce-popover-item__secondary-title{display:none}}.ce-popover-item--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}.ce-popover-item--active .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}.ce-popover-item--disabled{color:var(--color-text-secondary);cursor:default;pointer-events:none}.ce-popover-item--disabled .ce-popover-item__icon{-webkit-box-shadow:0 0 0 1px var(--color-border-icon-disabled);box-shadow:0 0 0 1px var(--color-border-icon-disabled)}.ce-popover-item--focused:not(.ce-popover-item--no-focus){background:var(--color-background-item-focus)!important}.ce-popover-item--focused:not(.ce-popover-item--no-focus){-webkit-box-shadow:inset 0 0 0px 1px var(--color-shadow-item-focus);box-shadow:inset 0 0 0 1px var(--color-shadow-item-focus)}.ce-popover-item--hidden{display:none}@media (hover: hover){.ce-popover-item:hover{cursor:pointer}.ce-popover-item:hover:not(.ce-popover-item--no-hover){background-color:var(--color-background-item-hover)}.ce-popover-item:hover .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}}.ce-popover-item--confirmation{background:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__icon{color:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__title{color:#fff}@media (hover: hover){.ce-popover-item--confirmation:not(.ce-popover-item--no-hover):hover{background:var(--color-background-item-confirm-hover)}}.ce-popover-item--confirmation:not(.ce-popover-item--no-focus).ce-popover-item--focused{background:var(--color-background-item-confirm-hover)!important}.ce-popover-item--confirmation .ce-popover-item__icon,.ce-popover-item--active .ce-popover-item__icon,.ce-popover-item--focused .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}
`;
  var hi = class extends S {
    constructor() {
      super(...arguments), this.isMobile = false, this.contentRectCache = void 0, this.resizeDebouncer = Pt(() => {
        this.windowResize();
      }, 200);
    }
    get CSS() {
      return {
        editorWrapper: "codex-editor",
        editorWrapperNarrow: "codex-editor--narrow",
        editorZone: "codex-editor__redactor",
        editorZoneHidden: "codex-editor__redactor--hidden",
        editorLoader: "codex-editor__loader",
        editorEmpty: "codex-editor--empty",
        editorRtlFix: "codex-editor--rtl"
      };
    }
    get contentRect() {
      if (this.contentRectCache)
        return this.contentRectCache;
      const e = this.nodes.wrapper.querySelector(`.${F.CSS.content}`);
      return e ? (this.contentRectCache = e.getBoundingClientRect(), this.contentRectCache) : {
        width: 650,
        left: 0,
        right: 0
      };
    }
    addLoader() {
      this.nodes.loader = d.make("div", this.CSS.editorLoader), this.nodes.wrapper.prepend(this.nodes.loader), this.nodes.redactor.classList.add(this.CSS.editorZoneHidden);
    }
    removeLoader() {
      this.nodes.loader.remove(), this.nodes.redactor.classList.remove(this.CSS.editorZoneHidden);
    }
    async prepare() {
      this.checkIsMobile(), this.make(), this.addLoader(), this.loadStyles();
    }
    toggleReadOnly(e) {
      e ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    checkEmptiness() {
      const { BlockManager: e } = this.Editor;
      this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty, e.isEditorEmpty);
    }
    get someToolbarOpened() {
      const { Toolbar: e, BlockSettings: t, InlineToolbar: o, ConversionToolbar: i } = this.Editor;
      return t.opened || o.opened || i.opened || e.toolbox.opened;
    }
    get someFlipperButtonFocused() {
      return this.Editor.Toolbar.toolbox.hasFocus() ? true : Object.entries(this.Editor).filter(([e, t]) => t.flipper instanceof G).some(([e, t]) => t.flipper.hasFocus());
    }
    destroy() {
      this.nodes.holder.innerHTML = "";
    }
    closeAllToolbars() {
      const { Toolbar: e, BlockSettings: t, InlineToolbar: o, ConversionToolbar: i } = this.Editor;
      t.close(), o.close(), i.close(), e.toolbox.close();
    }
    checkIsMobile() {
      this.isMobile = window.innerWidth < st;
    }
    make() {
      this.nodes.holder = d.getHolder(this.config.holder), this.nodes.wrapper = d.make("div", [
        this.CSS.editorWrapper,
        ...this.isRtl ? [this.CSS.editorRtlFix] : []
      ]), this.nodes.redactor = d.make("div", this.CSS.editorZone), this.nodes.holder.offsetWidth < this.contentRect.width && this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow), this.nodes.redactor.style.paddingBottom = this.config.minHeight + "px", this.nodes.wrapper.appendChild(this.nodes.redactor), this.nodes.holder.appendChild(this.nodes.wrapper);
    }
    loadStyles() {
      const e = "editor-js-styles";
      if (d.get(e))
        return;
      const t = d.make("style", null, {
        id: e,
        textContent: di.toString()
      });
      d.prepend(document.head, t);
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(this.nodes.redactor, "click", (e) => {
        this.redactorClicked(e);
      }, false), this.readOnlyMutableListeners.on(this.nodes.redactor, "mousedown", (e) => {
        this.documentTouched(e);
      }, true), this.readOnlyMutableListeners.on(this.nodes.redactor, "touchstart", (e) => {
        this.documentTouched(e);
      }, true), this.readOnlyMutableListeners.on(document, "keydown", (e) => {
        this.documentKeydown(e);
      }, true), this.readOnlyMutableListeners.on(document, "mousedown", (e) => {
        this.documentClicked(e);
      }, true), this.readOnlyMutableListeners.on(document, "selectionchange", () => {
        this.selectionChanged();
      }, true), this.readOnlyMutableListeners.on(window, "resize", () => {
        this.resizeDebouncer();
      }, {
        passive: true
      }), this.watchBlockHoveredEvents();
    }
    watchBlockHoveredEvents() {
      let e;
      this.readOnlyMutableListeners.on(this.nodes.redactor, "mousemove", Te((t) => {
        const o = t.target.closest(".ce-block");
        this.Editor.BlockSelection.anyBlockSelected || o && e !== o && (e = o, this.eventsDispatcher.emit(mt, {
          block: this.Editor.BlockManager.getBlockByChildNode(o)
        }));
      }, 20), {
        passive: true
      });
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    windowResize() {
      this.contentRectCache = null, this.checkIsMobile();
    }
    documentKeydown(e) {
      switch (e.keyCode) {
        case B.ENTER:
          this.enterPressed(e);
          break;
        case B.BACKSPACE:
          this.backspacePressed(e);
          break;
        case B.ESC:
          this.escapePressed(e);
          break;
        default:
          this.defaultBehaviour(e);
          break;
      }
    }
    defaultBehaviour(e) {
      const { currentBlock: t } = this.Editor.BlockManager, o = e.target.closest(`.${this.CSS.editorWrapper}`), i = e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;
      if (t !== void 0 && o === null) {
        this.Editor.BlockEvents.keydown(e);
        return;
      }
      o || t && i || (this.Editor.BlockManager.dropPointer(), this.Editor.Toolbar.close());
    }
    backspacePressed(e) {
      const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor;
      if (o.anyBlockSelected && !m.isSelectionExists) {
        const n = t.removeSelectedBlocks();
        i.setToBlock(t.insertDefaultBlockAtIndex(n, true), i.positions.START), o.clearSelection(e), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation();
      }
    }
    escapePressed(e) {
      this.Editor.BlockSelection.clearSelection(e), this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.toolbox.close(), this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock)) : this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.ConversionToolbar.opened ? this.Editor.ConversionToolbar.close() : this.Editor.InlineToolbar.opened ? this.Editor.InlineToolbar.close() : this.Editor.Toolbar.close();
    }
    enterPressed(e) {
      const { BlockManager: t, BlockSelection: o } = this.Editor, i = t.currentBlockIndex >= 0;
      if (o.anyBlockSelected && !m.isSelectionExists) {
        o.clearSelection(e), e.preventDefault(), e.stopImmediatePropagation(), e.stopPropagation();
        return;
      }
      if (!this.someToolbarOpened && i && e.target.tagName === "BODY") {
        const n = this.Editor.BlockManager.insert();
        this.Editor.Caret.setToBlock(n), this.Editor.BlockManager.highlightCurrentNode(), this.Editor.Toolbar.moveAndOpen(n);
      }
      this.Editor.BlockSelection.clearSelection(e);
    }
    documentClicked(e) {
      if (!e.isTrusted)
        return;
      const t = e.target;
      this.nodes.holder.contains(t) || m.isAtEditor || (this.Editor.BlockManager.dropPointer(), this.Editor.Toolbar.close());
      const i = this.Editor.BlockSettings.nodes.wrapper.contains(t), n = this.Editor.Toolbar.nodes.settingsToggler.contains(t), r = i || n;
      if (this.Editor.BlockSettings.opened && !r) {
        this.Editor.BlockSettings.close();
        const a = this.Editor.BlockManager.getBlockByChildNode(t);
        this.Editor.Toolbar.moveAndOpen(a);
      }
      this.Editor.BlockSelection.clearSelection(e);
    }
    documentTouched(e) {
      let t = e.target;
      if (t === this.nodes.redactor) {
        const o = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX, i = e instanceof MouseEvent ? e.clientY : e.touches[0].clientY;
        t = document.elementFromPoint(o, i);
      }
      try {
        this.Editor.BlockManager.setCurrentBlockByChildNode(t), this.Editor.BlockManager.highlightCurrentNode();
      } catch (e2) {
        this.Editor.RectangleSelection.isRectActivated() || this.Editor.Caret.setToTheLastBlock();
      }
      this.Editor.Toolbar.moveAndOpen();
    }
    redactorClicked(e) {
      const { BlockSelection: t } = this.Editor;
      if (!m.isCollapsed)
        return;
      const o = () => {
        e.stopImmediatePropagation(), e.stopPropagation();
      }, i = e.target, n = e.metaKey || e.ctrlKey;
      if (d.isAnchor(i) && n) {
        o();
        const u = i.getAttribute("href"), h = Ht(u);
        jt(h);
        return;
      }
      const r = this.Editor.BlockManager.getBlockByIndex(-1), a = d.offset(r.holder).bottom, l = e.pageY;
      if (e.target instanceof Element && e.target.isEqualNode(this.nodes.redactor) && !t.anyBlockSelected && a < l) {
        o();
        const { BlockManager: u, Caret: h, Toolbar: f } = this.Editor;
        (!u.lastBlock.tool.isDefault || !u.lastBlock.isEmpty) && u.insertAtEnd(), h.setToTheLastBlock(), f.moveAndOpen(u.lastBlock);
      }
    }
    selectionChanged() {
      const { CrossBlockSelection: e, BlockSelection: t } = this.Editor, o = m.anchorElement;
      if (e.isCrossBlockSelectionStarted && t.anyBlockSelected && m.get().removeAllRanges(), !o) {
        m.range || this.Editor.InlineToolbar.close();
        return;
      }
      const i = o.closest(`.${F.CSS.content}`) === null;
      if (i && (this.Editor.InlineToolbar.containsNode(o) || this.Editor.InlineToolbar.close(), !(o.dataset.inlineToolbar === "true")))
        return;
      this.Editor.BlockManager.currentBlock || this.Editor.BlockManager.setCurrentBlockByChildNode(o);
      const n = i !== true;
      this.Editor.InlineToolbar.tryToShow(true, n);
    }
  };
  var ui = {
    BlocksAPI: Zt,
    CaretAPI: Gt,
    EventsAPI: qt,
    I18nAPI: De,
    API: Jt,
    InlineToolbarAPI: Qt,
    ListenersAPI: eo,
    NotifierAPI: no,
    ReadOnlyAPI: so,
    SanitizerAPI: po,
    SaverAPI: fo,
    SelectionAPI: go,
    StylesAPI: bo,
    ToolbarAPI: mo,
    TooltipAPI: xo,
    UiAPI: wo,
    BlockSettings: Ro,
    ConversionToolbar: Y,
    Toolbar: jo,
    InlineToolbar: Uo,
    BlockEvents: $o,
    BlockManager: Ko,
    BlockSelection: Xo,
    Caret: ve,
    CrossBlockSelection: Vo,
    DragNDrop: Zo,
    ModificationsObserver: Go,
    Paste: wt,
    ReadOnly: qo,
    RectangleSelection: pe,
    Renderer: Jo,
    Saver: Qo,
    Tools: St,
    UI: hi
  };
  var pi = class {
    constructor(e) {
      this.moduleInstances = {}, this.eventsDispatcher = new we();
      let t, o;
      this.isReady = new Promise((i, n) => {
        t = i, o = n;
      }), Promise.resolve().then(async () => {
        this.configuration = e, await this.validate(), await this.init(), await this.start(), K("I'm ready! (\uFF89\u25D5\u30EE\u25D5)\uFF89*:\uFF65\uFF9F\u2727", "log", "", "color: #E24A75"), setTimeout(async () => {
          if (await this.render(), this.configuration.autofocus) {
            const { BlockManager: i, Caret: n } = this.moduleInstances;
            n.setToBlock(i.blocks[0], n.positions.START), i.highlightCurrentNode();
          }
          this.moduleInstances.UI.removeLoader(), t();
        }, 500);
      }).catch((i) => {
        T(`Editor.js is not ready because of ${i}`, "error"), o(i);
      });
    }
    set configuration(e) {
      var o, i;
      j(e) ? this.config = __spreadValues({}, e) : this.config = {
        holder: e
      }, Ie(!!this.config.holderId, "config.holderId", "config.holder"), this.config.holderId && !this.config.holder && (this.config.holder = this.config.holderId, this.config.holderId = null), this.config.holder == null && (this.config.holder = "editorjs"), this.config.logLevel || (this.config.logLevel = et.VERBOSE), At(this.config.logLevel), Ie(!!this.config.initialBlock, "config.initialBlock", "config.defaultBlock"), this.config.defaultBlock = this.config.defaultBlock || this.config.initialBlock || "paragraph", this.config.minHeight = this.config.minHeight !== void 0 ? this.config.minHeight : 300;
      const t = {
        type: this.config.defaultBlock,
        data: {}
      };
      this.config.placeholder = this.config.placeholder || false, this.config.sanitizer = this.config.sanitizer || {
        p: true,
        b: true,
        a: true
      }, this.config.hideToolbar = this.config.hideToolbar ? this.config.hideToolbar : false, this.config.tools = this.config.tools || {}, this.config.i18n = this.config.i18n || {}, this.config.data = this.config.data || { blocks: [] }, this.config.onReady = this.config.onReady || (() => {
      }), this.config.onChange = this.config.onChange || (() => {
      }), this.config.inlineToolbar = this.config.inlineToolbar !== void 0 ? this.config.inlineToolbar : true, (V(this.config.data) || !this.config.data.blocks || this.config.data.blocks.length === 0) && (this.config.data = { blocks: [t] }), this.config.readOnly = this.config.readOnly || false, (o = this.config.i18n) != null && o.messages && $2.setDictionary(this.config.i18n.messages), this.config.i18n.direction = ((i = this.config.i18n) == null ? void 0 : i.direction) || "ltr";
    }
    get configuration() {
      return this.config;
    }
    async validate() {
      const { holderId: e, holder: t } = this.config;
      if (e && t)
        throw Error("\xABholderId\xBB and \xABholder\xBB param can't assign at the same time.");
      if (J(t) && !d.get(t))
        throw Error(`element with ID \xAB${t}\xBB is missing. Pass correct holder's ID.`);
      if (t && j(t) && !d.isElement(t))
        throw Error("\xABholder\xBB value must be an Element node");
    }
    init() {
      this.constructModules(), this.configureModules();
    }
    async start() {
      await [
        "Tools",
        "UI",
        "BlockManager",
        "Paste",
        "BlockSelection",
        "RectangleSelection",
        "CrossBlockSelection",
        "ReadOnly"
      ].reduce(
        (t, o) => t.then(async () => {
          try {
            await this.moduleInstances[o].prepare();
          } catch (i) {
            if (i instanceof at)
              throw new Error(i.message);
            T(`Module ${o} was skipped because of %o`, "warn", i);
          }
        }),
        Promise.resolve()
      );
    }
    render() {
      return this.moduleInstances.Renderer.render(this.config.data.blocks);
    }
    constructModules() {
      Object.entries(ui).forEach(([e, t]) => {
        try {
          this.moduleInstances[e] = new t({
            config: this.configuration,
            eventsDispatcher: this.eventsDispatcher
          });
        } catch (o) {
          T("[constructModules]", `Module ${e} skipped because`, "error", o);
        }
      });
    }
    configureModules() {
      for (const e in this.moduleInstances)
        Object.prototype.hasOwnProperty.call(this.moduleInstances, e) && (this.moduleInstances[e].state = this.getModulesDiff(e));
    }
    getModulesDiff(e) {
      const t = {};
      for (const o in this.moduleInstances)
        o !== e && (t[o] = this.moduleInstances[o]);
      return t;
    }
  };
  var fi = class {
    static get version() {
      return "2.27.0";
    }
    constructor(e) {
      let t = () => {
      };
      j(e) && D(e.onReady) && (t = e.onReady);
      const o = new pi(e);
      this.isReady = o.isReady.then(() => {
        this.exportAPI(o), t();
      });
    }
    exportAPI(e) {
      const t = ["configuration"], o = () => {
        Object.values(e.moduleInstances).forEach((n) => {
          D(n.destroy) && n.destroy(), n.listeners.removeAll();
        }), e = null;
        for (const n in this)
          Object.prototype.hasOwnProperty.call(this, n) && delete this[n];
        Object.setPrototypeOf(this, null);
      };
      t.forEach((n) => {
        this[n] = e[n];
      }), this.destroy = o, Object.setPrototypeOf(this, e.moduleInstances.API.methods), delete this.exportAPI, Object.entries({
        blocks: {
          clear: "clear",
          render: "render"
        },
        caret: {
          focus: "focus"
        },
        events: {
          on: "on",
          off: "off",
          emit: "emit"
        },
        saver: {
          save: "save"
        }
      }).forEach(([n, r]) => {
        Object.entries(r).forEach(([a, l]) => {
          this[l] = e.moduleInstances.API.methods[n][a];
        });
      });
    }
  };

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/workspace.js
  var import_editorjs_undo = __toESM(require_bundle());
  var Workspace = class extends frappe.views.Workspace {
    constructor(wrapper, organization_name) {
      super(wrapper);
      this.wrapper = $(wrapper);
      this.page = wrapper.page;
      this.blocks = frappe.workspace_block.blocks;
      this.is_read_only = true;
      this.pages = {};
      this.sorted_public_items = [];
      this.sorted_private_items = [];
      this.current_page = {};
      this.sidebar_items = {
        public: {},
        private: {}
      };
      this.organization_name = organization_name;
      this.sidebar_categories = ["My Workspaces", "Public"];
      this.prepare_container();
      this.setup_pages();
      this.register_awesomebar_shortcut();
    }
    prepare_container() {
      if (!this.organization_name) {
        return;
      }
      let list_sidebar = $(`
			<div class="list-sidebar overlay-sidebar hidden-xs hidden-sm">
				<div class="desk-sidebar list-unstyled sidebar-menu"></div>
			</div>
		`).appendTo(this.wrapper.find(".layout-side-section"));
      this.sidebar = list_sidebar.find(".desk-sidebar");
      this.body = this.wrapper.find(".layout-main-section");
    }
    async setup_pages(reload) {
      if (!this.organization_name) {
        return;
      }
      !this.discard && this.create_page_skeleton();
      !this.discard && this.create_sidebar_skeleton();
      this.sidebar_pages = this.discard ? this.sidebar_pages : await this.get_pages();
      this.cached_pages = $.extend(true, {}, this.sidebar_pages);
      this.all_pages = this.sidebar_pages.pages;
      this.has_access = this.sidebar_pages.has_access;
      for (const page of this.all_pages) {
        page.is_editable = !page.public || this.has_access;
      }
      this.public_pages = this.all_pages.filter((page) => page.public);
      this.private_pages = this.all_pages.filter((page) => !page.public);
      if (this.all_pages) {
        frappe.workspaces = {};
        for (let page of this.all_pages) {
          frappe.workspaces[frappe.router.slug(page.name)] = {
            title: page.title,
            public: page.public
          };
        }
        this.make_sidebar();
        reload && this.show();
      }
    }
    get_pages() {
      return frappe.xcall("tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_workspace_sidebar_items", {
        organization_name: this.organization_name
      });
    }
    sidebar_item_container(item2) {
      return $(`
			<div
				class="sidebar-item-container ${item2.is_editable ? "is-draggable" : ""}"
				item-parent="${item2.parent_page}"
				item-name="${item2.title}"
				item-public="${item2.public || 0}"
				item-is-hidden="${item2.is_hidden || 0}"
			>
				<div class="desk-sidebar-item standard-sidebar-item ${item2.selected ? "selected" : ""}">
					<a
						class="item-anchor ${item2.is_editable ? "" : "block-click"} item-a" title="${__(item2.title)}"
					>
						<span class="sidebar-item-icon" item-icon=${item2.icon || "folder-normal"}>${frappe.utils.icon(
        item2.icon || "folder-normal",
        "md"
      )}</span>
						<span class="sidebar-item-label">${__(item2.title.replaceAll(/{{([^}]+)}}/g, ""))}<span>
					</a>
					<div class="sidebar-item-control"></div>
				</div>
				<div class="sidebar-child-item nested-container"></div>
			</div>
		`);
    }
    make_sidebar() {
      if (this.sidebar.find(".standard-sidebar-section")[0]) {
        this.sidebar.find(".standard-sidebar-section").remove();
      }
      for (const category of this.sidebar_categories) {
        if (category != "Public") {
          continue;
        }
        let root_pages = this.public_pages.filter(
          (page) => page.parent_page == "" || page.parent_page == null
        );
        if (category != "Public") {
          root_pages = this.private_pages.filter(
            (page) => page.parent_page == "" || page.parent_page == null
          );
        }
        root_pages = root_pages.uniqBy((d2) => d2.title);
        this.build_sidebar_section(category, root_pages);
      }
      this.sidebar.find(".selected").length && !frappe.dom.is_element_in_viewport(this.sidebar.find(".selected")) && this.sidebar.find(".selected")[0].scrollIntoView();
      this.remove_sidebar_skeleton();
    }
    build_sidebar_section(title, root_pages) {
      let sidebar_section = $(
        `<div class="standard-sidebar-section nested-container" data-title="${title}"></div>`
      );
      let $title = $(`<div class="standard-sidebar-label">
			<span>${frappe.utils.icon("small-down", "xs")}</span>
			<span class="section-title">${__(title)}<span>
		</div>`).appendTo(sidebar_section);
      this.prepare_sidebar(root_pages, sidebar_section, this.sidebar);
      $title.on("click", (e) => {
        let icon = $(e.target).find("span use").attr("href") === "#icon-small-down" ? "#icon-right" : "#icon-small-down";
        $(e.target).find("span use").attr("href", icon);
        $(e.target).parent().find(".sidebar-item-container").toggleClass("hidden");
      });
      if (Object.keys(root_pages).length === 0) {
        sidebar_section.addClass("hidden");
      }
      if (sidebar_section.find(".sidebar-item-container").length && sidebar_section.find("> [item-is-hidden='0']").length == 0) {
        sidebar_section.addClass("hidden show-in-edit-mode");
      }
    }
    prepare_sidebar(items, child_container, item_container) {
      for (const item2 of items) {
        this.append_item(item2, child_container);
      }
      child_container.appendTo(item_container);
    }
    append_item(item2, container) {
      let is_current_page = frappe.router.slug(item2.title) == frappe.router.slug(this.get_page_to_show().name) && item2.public == this.get_page_to_show().public;
      item2.selected = is_current_page;
      if (is_current_page) {
        this.current_page = { name: item2.title, public: item2.public };
      }
      let $item_container = this.sidebar_item_container(item2);
      $item_container.find(".item-a").on("click", () => {
        this.update_selected_sidebar(this.current_page, false);
        this.current_page = {
          name: item2.title,
          public: item2.public
        };
        this.show();
      });
      let sidebar_control = $item_container.find(".sidebar-item-control");
      this.add_sidebar_actions(item2, sidebar_control);
      let pages = item2.public ? this.public_pages : this.private_pages;
      let descendant = [];
      function getDescendant(pages2, title) {
        const children = pages2.filter((page) => page.parent_page == title);
        descendant = [...descendant, ...children];
        for (const child of children) {
          getDescendant(pages2, child.title);
        }
      }
      getDescendant(pages, item2.title);
      const isCurrentParent = descendant.some((page) => page.name === this.get_page_to_show().name && page.public === this.get_page_to_show().public);
      let child_items = pages.filter((page) => page.parent_page == item2.title);
      if (child_items.length > 0) {
        let child_container = $item_container.find(".sidebar-child-item");
        if (!isCurrentParent) {
          child_container.addClass("hidden");
        }
        this.prepare_sidebar(child_items, child_container, $item_container);
      }
      $item_container.appendTo(container);
      this.sidebar_items[item2.public ? "public" : "private"][item2.title] = $item_container;
      const parents = $item_container.parents();
      if (is_current_page) {
        parents.each((parent) => {
          if ($(parent).hasClass("hidden")) {
            parent.toggleClass("hidden");
          }
        });
      }
      this.add_drop_icon(item2, sidebar_control, $item_container);
      if (child_items.length > 0) {
        $item_container.find(".drop-icon").first().addClass("show-in-edit-mode");
      }
      const { organization } = item2;
      if (!this.organization_name) {
        return;
      }
      if (!organization) {
        $item_container.hide();
      }
      if (this.organization_name === organization) {
        return;
      }
      $item_container.hide();
    }
    add_drop_icon(item2, sidebar_control, item_container) {
      let drop_icon = "small-down";
      if (item_container.find(`[item-name="${this.current_page.name}"]`).length) {
        drop_icon = "small-up";
      }
      let $child_item_section = item_container.children(".sidebar-child-item");
      let $drop_icon = $(
        `<span class="drop-icon hidden">${frappe.utils.icon(drop_icon, "sm")}</span>`
      ).appendTo(sidebar_control);
      let pages = item2.public ? this.public_pages : this.private_pages;
      if (pages.some(
        (e) => e.parent_page == item2.title && (e.is_hidden == 0 || !this.is_read_only)
      )) {
        $drop_icon.removeClass("hidden");
      }
      $drop_icon.on("click", () => {
        let icon = $drop_icon.find("use").attr("href") === "#icon-small-down" ? "#icon-small-up" : "#icon-small-down";
        $drop_icon.find("use").attr("href", icon);
        $child_item_section.toggleClass("hidden");
      });
    }
    show() {
      if (!this.all_pages) {
        setTimeout(() => this.show(), 100);
        return;
      }
      let page = this.get_page_to_show();
      this.page.set_title(__(page.name));
      this.update_selected_sidebar(this.current_page, false);
      this.update_selected_sidebar(page, true);
      this.show_page(page);
    }
    update_selected_sidebar(page, add) {
      let section = page.public ? "public" : "private";
      if (this.sidebar && this.sidebar_items[section] && this.sidebar_items[section][page.name]) {
        let $sidebar = this.sidebar_items[section][page.name];
        let pages = page.public ? this.public_pages : this.private_pages;
        let sidebar_page = pages.find((p) => p.title == page.name);
        if (add) {
          $sidebar[0].firstElementChild.classList.add("selected");
          if (sidebar_page) {
            sidebar_page.selected = true;
          }
          $sidebar.parent().hasClass("sidebar-child-item") && $sidebar.parent().hasClass("hidden") && $sidebar.parent().removeClass("hidden");
          this.current_page = { name: page.name, public: page.public };
          localStorage.current_page = page.name;
          localStorage.is_current_page_public = page.public;
        } else {
          $sidebar[0].firstElementChild.classList.remove("selected");
          if (sidebar_page) {
            sidebar_page.selected = false;
          }
        }
      }
    }
    get_data(page) {
      return frappe.call("frappe.desk.desktop.get_desktop_page", {
        page
      }).then((data) => {
        this.page_data = data.message;
        this.pages[page.name] && delete this.pages[page.name];
        this.pages[page.name] = data.message;
        if (!this.page_data || Object.keys(this.page_data).length === 0) {
          return;
        }
        if (this.page_data.charts && this.page_data.charts.items.length === 0) {
          return;
        }
        return frappe.dashboard_utils.get_dashboard_settings().then((settings) => {
          if (settings) {
            let chart_config = settings.chart_config ? JSON.parse(settings.chart_config) : {};
            this.page_data.charts.items.map((chart) => {
              chart.chart_settings = chart_config[chart.chart_name] || {};
            });
            this.pages[page.name] = this.page_data;
          }
        });
      });
    }
    get_page_to_show() {
      var _a, _b;
      let default_page;
      const firstOrganizationPage = (_a = this.all_pages) == null ? void 0 : _a.find((item2) => item2.organization === this.organization_name);
      const defaultOrganizationPage = (_b = this.all_pages) == null ? void 0 : _b.find((item2) => item2.organization === this.organization_name && item2.default === 1);
      if (defaultOrganizationPage) {
        default_page = { name: defaultOrganizationPage.title, public: defaultOrganizationPage.public };
      } else if (firstOrganizationPage) {
        default_page = { name: firstOrganizationPage.title, public: firstOrganizationPage.public };
      } else {
        default_page = { name: "Build", public: true };
      }
      let page = this.current_page.name || default_page.name;
      let is_public = this.current_page.name ? this.current_page.public : default_page.public;
      return { name: page, public: is_public };
    }
    async show_page(page) {
      if (!this.body.find("#editorjs")[0]) {
        this.$page = $(`
				<div id="editorjs" class="desk-page page-main-content"></div>
			`).appendTo(this.body);
      }
      if (this.all_pages.length) {
        this.create_page_skeleton();
        let pages = page.public && this.public_pages.length ? this.public_pages : this.private_pages;
        let current_page = pages.find((p) => p.title == page.name);
        this.content = current_page && JSON.parse(current_page.content);
        this.content && this.add_custom_cards_in_content();
        $(".item-anchor").addClass("disable-click");
        if (this.pages && this.pages[current_page.name]) {
          this.page_data = this.pages[current_page.name];
        } else {
          await frappe.after_ajax(() => this.get_data(current_page));
        }
        this.setup_actions(page);
        this.prepare_editorjs();
        $(".item-anchor").removeClass("disable-click");
        this.remove_page_skeleton();
      }
    }
    add_custom_cards_in_content() {
      let index = -1;
      this.content.find((item2, i) => {
        if (item2.type == "card") {
          index = i;
        }
      });
      if (index !== -1) {
        this.content.splice(index + 1, 0, {
          type: "card",
          data: { card_name: "Custom Documents", col: 4 }
        });
        this.content.splice(index + 2, 0, {
          type: "card",
          data: { card_name: "Custom Reports", col: 4 }
        });
      }
    }
    prepare_editorjs() {
      if (this.editor) {
        this.editor.isReady.then(() => {
          this.editor.configuration.tools.chart.config.page_data = this.page_data;
          this.editor.configuration.tools.shortcut.config.page_data = this.page_data;
          this.editor.configuration.tools.card.config.page_data = this.page_data;
          this.editor.configuration.tools.onboarding.config.page_data = this.page_data;
          this.editor.configuration.tools.quick_list.config.page_data = this.page_data;
          this.editor.configuration.tools.number_card.config.page_data = this.page_data;
          this.editor.configuration.tools.custom_block.config.page_data = this.page_data;
          this.editor.render({ blocks: this.content || [] });
        });
      } else {
        this.initialize_editorjs(this.content);
      }
    }
    setup_actions(page) {
      let pages = page.public ? this.public_pages : this.private_pages;
      let current_page = pages.find((p) => p.title == page.name);
      if (!this.is_read_only) {
        this.setup_customization_buttons(current_page);
        return;
      }
      this.clear_page_actions();
      this.page.set_secondary_action(__("Edit"), async () => {
        if (!this.editor || !this.editor.readOnly) {
          return;
        }
        this.is_read_only = false;
        this.toggle_hidden_workspaces(true);
        await this.editor.readOnly.toggle();
        this.editor.isReady.then(() => {
          this.initialize_editorjs_undo();
          this.setup_customization_buttons(current_page);
          this.show_sidebar_actions();
          this.make_blocks_sortable();
        });
      });
      this.page.add_inner_button(__("Create Workspace"), () => {
        this.initialize_new_page();
      });
    }
    initialize_editorjs_undo() {
      this.undo = new import_editorjs_undo.default({ editor: this.editor });
      this.undo.initialize({ blocks: this.content || [] });
      this.undo.readOnly = false;
    }
    clear_page_actions() {
      this.page.clear_primary_action();
      this.page.clear_secondary_action();
      this.page.clear_inner_toolbar();
    }
    setup_customization_buttons(page) {
      this.clear_page_actions();
      page.is_editable && this.page.set_primary_action(
        __("Save"),
        () => {
          this.clear_page_actions();
          this.save_page(page).then((saved) => {
            if (!saved) {
              return;
            }
            this.undo.readOnly = true;
            this.editor.readOnly.toggle();
            this.is_read_only = true;
          });
        },
        null,
        __("Saving")
      );
      this.page.set_secondary_action(__("Discard"), async () => {
        this.discard = true;
        this.clear_page_actions();
        this.toggle_hidden_workspaces(false);
        await this.editor.readOnly.toggle();
        this.is_read_only = true;
        this.sidebar_pages = this.cached_pages;
        this.reload();
        frappe.show_alert({ message: __("Customizations Discarded"), indicator: "info" });
      });
      if (page.name && this.has_access) {
        this.page.add_inner_button(__("Settings"), () => {
          frappe.set_route(`workspace/${page.name}`);
        });
      }
    }
    toggle_hidden_workspaces(show) {
      $(".desk-sidebar").toggleClass("show-hidden-workspaces", show);
    }
    show_sidebar_actions() {
      this.sidebar.find(".standard-sidebar-section").addClass("show-control");
      this.make_sidebar_sortable();
    }
    add_sidebar_actions(item2, sidebar_control, is_new) {
      if (!item2.is_editable) {
        sidebar_control.parent().click(() => {
          !this.is_read_only && frappe.show_alert(
            {
              message: __("Only Workspace Manager can sort or edit this page"),
              indicator: "info"
            },
            5
          );
        });
        frappe.utils.add_custom_button(
          frappe.utils.icon("duplicate", "sm"),
          () => this.duplicate_page(item2),
          "duplicate-page",
          __("Duplicate Workspace"),
          null,
          sidebar_control
        );
      } else if (item2.is_hidden) {
        frappe.utils.add_custom_button(
          frappe.utils.icon("unhide", "sm"),
          (e) => this.unhide_workspace(item2, e),
          "unhide-workspace-btn",
          __("Unhide Workspace"),
          null,
          sidebar_control
        );
      } else {
        frappe.utils.add_custom_button(
          frappe.utils.icon("drag", "xs"),
          null,
          "drag-handle",
          __("Drag"),
          null,
          sidebar_control
        );
        !is_new && this.add_settings_button(item2, sidebar_control);
      }
    }
    get_parent_pages(page) {
      this.public_parent_pages = [
        "",
        ...this.public_pages.filter((p) => p.organization === this.organization_name).map((p) => p.title)
      ];
      this.private_parent_pages = [
        "",
        ...this.private_pages.filter((p) => p.organization === this.organization_name).map((p) => p.title)
      ];
      if (page) {
        return page.public ? this.public_parent_pages : this.private_parent_pages;
      }
    }
    edit_page(item2) {
      let me2 = this;
      let old_item = item2;
      let parent_pages = this.get_parent_pages(item2);
      let idx = parent_pages.findIndex((x) => x == item2.title);
      if (idx !== -1) {
        parent_pages.splice(idx, 1);
      }
      const title = item2.title.replaceAll(/{{([^}]+)}}/g, "");
      const res = item2.title.match(/{{([^}]+)}}/);
      const suffix = (res == null ? void 0 : res[1]) || "";
      const d2 = new frappe.ui.Dialog({
        title: __("Update Details"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1,
            default: title
          },
          {
            label: __("Suffix"),
            fieldtype: "Data",
            fieldname: "suffix",
            default: suffix
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: parent_pages,
            default: item2.parent_page
          },
          {
            label: __("Default"),
            fieldtype: "Check",
            fieldname: "default",
            default: item2.default
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon",
            default: item2.icon
          }
        ],
        primary_action_label: __("Update"),
        primary_action: (values) => {
          values.title = frappe.utils.escape_html(`${values.title}${values.suffix ? `{{${values.suffix}}}` : ""}`);
          values.is_public = 1;
          let is_title_changed = values.title != old_item.title;
          let is_section_changed = values.is_public != old_item.public;
          if ((is_title_changed || is_section_changed) && !this.validate_page(values, old_item)) {
            return;
          }
          d2.hide();
          frappe.call({
            method: "frappe.desk.doctype.workspace.workspace.update_page",
            args: {
              name: old_item.name,
              title: values.title,
              icon: values.icon || "",
              parent: values.parent || "",
              public: values.is_public || 0
            },
            callback(res2) {
              if (res2.message) {
                frappe.call({
                  method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.set_organization_workspace",
                  args: {
                    workspace_name: res2.message.name,
                    organization_name: me2.organization_name,
                    default: values.default
                  }
                });
                let message = __("Workspace {0} Edited Successfully", [
                  old_item.title.bold()
                ]);
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          this.update_sidebar(old_item, values);
          if (this.make_page_selected) {
            this.update_selected_sidebar(this.current_page, false);
            this.current_page = {
              name: values.title,
              public: values.is_public
            };
            this.show();
            this.make_page_selected = false;
          }
          this.make_sidebar();
          this.show_sidebar_actions();
        }
      });
      d2.show();
    }
    update_sidebar(old_item, new_item) {
      let is_section_changed = old_item.public != (new_item.is_public || 0);
      let is_title_changed = old_item.title != new_item.title;
      let new_updated_item = __spreadValues({}, old_item);
      let pages = old_item.public ? this.public_pages : this.private_pages;
      let child_items = pages.filter((page) => page.parent_page == old_item.title);
      this.make_page_selected = old_item.selected;
      new_updated_item.title = new_item.title;
      new_updated_item.icon = new_item.icon;
      new_updated_item.parent_page = new_item.parent || "";
      new_updated_item.public = new_item.is_public;
      if (is_title_changed || is_section_changed) {
        if (new_item.is_public) {
          new_updated_item.name = new_item.title;
          new_updated_item.label = new_item.title;
          new_updated_item.for_user = "";
        } else {
          let { user } = frappe.session;
          new_updated_item.name = `${new_item.title}-${user}`;
          new_updated_item.label = `${new_item.title}-${user}`;
          new_updated_item.for_user = user;
        }
      }
      this.update_cached_values(old_item, new_updated_item);
      if (child_items.length) {
        for (const child of child_items) {
          child.parent_page = new_item.title;
          is_section_changed && this.update_child_sidebar(child, new_item);
        }
      }
    }
    update_child_sidebar(child, new_item) {
      let old_child = __spreadValues({}, child);
      this.make_page_selected = child.selected;
      child.public = new_item.is_public;
      if (new_item.is_public) {
        child.name = child.title;
        child.label = child.title;
        child.for_user = "";
      } else {
        let { user } = frappe.session;
        child.name = `${child.title}-${user}`;
        child.label = `${child.title}-${user}`;
        child.for_user = user;
      }
      this.update_cached_values(old_child, child);
    }
    update_cached_values(old_item, new_item, duplicate, new_page) {
      let [from_pages, to_pages] = old_item.public ? [this.public_pages, this.private_pages] : [this.private_pages, this.public_pages];
      let old_item_index = from_pages.findIndex((page) => page.title == old_item.title);
      duplicate && old_item_index++;
      if (frappe.workspaces[frappe.router.slug(old_item.name)] || new_page) {
        !duplicate && delete frappe.workspaces[frappe.router.slug(old_item.name)];
        if (new_item) {
          frappe.workspaces[frappe.router.slug(new_item.name)] = { title: new_item.title };
        }
      }
      if (this.pages && this.pages[old_item.name] || new_page) {
        if (new_item) {
          this.pages[new_item.name] = this.pages[old_item.name] || {};
        }
        !duplicate && delete this.pages[old_item.name];
      }
      if (new_item) {
        let is_section_changed = old_item.public != (new_item.is_public || new_item.public || 0);
        if (is_section_changed) {
          !duplicate && from_pages.splice(old_item_index, 1);
          to_pages.push(new_item);
        } else if (new_page) {
          from_pages.push(new_item);
        } else {
          from_pages.splice(old_item_index, duplicate ? 0 : 1, new_item);
        }
      } else {
        from_pages.splice(old_item_index, 1);
      }
      this.sidebar_pages.pages = [...this.public_pages, ...this.private_pages];
      this.cached_pages = this.sidebar_pages;
    }
    add_settings_button(item2, sidebar_control) {
      this.dropdown_list = [
        {
          label: __("Edit"),
          title: __("Edit Workspace"),
          icon: frappe.utils.icon("edit", "sm"),
          action: () => this.edit_page(item2)
        },
        {
          label: __("Duplicate"),
          title: __("Duplicate Workspace"),
          icon: frappe.utils.icon("duplicate", "sm"),
          action: () => this.duplicate_page(item2)
        },
        {
          label: __("Hide"),
          title: __("Hide Workspace"),
          icon: frappe.utils.icon("hide", "sm"),
          action: (e) => this.hide_workspace(item2, e)
        }
      ];
      if (this.is_item_deletable(item2)) {
        this.dropdown_list.push({
          label: __("Delete"),
          title: __("Delete Workspace"),
          icon: frappe.utils.icon("delete-active", "sm"),
          action: () => this.delete_page(item2)
        });
      }
      let $button = $(`
			<div class="btn btn-secondary btn-xs setting-btn dropdown-btn" title="${__("Setting")}">
				${frappe.utils.icon("dot-horizontal", "xs")}
			</div>
			<div class="dropdown-list hidden"></div>
		`);
      let dropdown_item = function(label, title, icon, action) {
        let html = $(`
				<div class="dropdown-item" title="${title}">
					<span class="dropdown-item-icon">${icon}</span>
					<span class="dropdown-item-label">${label}</span>
				</div>
			`);
        html.click((event) => {
          event.stopPropagation();
          action && action(event);
        });
        return html;
      };
      $button.filter(".dropdown-btn").click((event) => {
        event.stopPropagation();
        if ($button.filter(".dropdown-list.hidden").length) {
          $(".dropdown-list:not(.hidden)").addClass("hidden");
        }
        $button.filter(".dropdown-list").toggleClass("hidden");
      });
      sidebar_control.append($button);
      for (const i of this.dropdown_list) {
        $button.filter(".dropdown-list").append(dropdown_item(i.label, i.title, i.icon, i.action));
      }
    }
    is_item_deletable(item2) {
      if (!item2.public || item2.public && (!item2.module || item2.module && frappe.boot.developer_mode)) {
        return true;
      }
      return false;
    }
    delete_page(page) {
      frappe.confirm(
        __("Are you sure you want to delete page {0}?", [page.title.bold()]),
        () => {
          frappe.call({
            method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.delete_page",
            args: { page },
            callback: function(res) {
              if (res.message) {
                let page2 = res.message;
                let message = __("Workspace {0} Deleted Successfully", [
                  page2.title.bold()
                ]);
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          this.page.clear_primary_action();
          this.update_cached_values(page);
          if (this.current_page.name == page.title && this.current_page.public == page.public) {
            this.update_selected_sidebar(this.current_page, false);
            this.current_page = {};
            this.current_page = this.get_page_to_show();
            this.show();
          }
          this.make_sidebar();
          this.show_sidebar_actions();
        }
      );
    }
    duplicate_page(page) {
      let me2 = this;
      let new_page = __spreadValues({}, page);
      if (!this.has_access && new_page.public) {
        new_page.public = 0;
      }
      let parent_pages = this.get_parent_pages({ public: new_page.public });
      const d2 = new frappe.ui.Dialog({
        title: __("Create Duplicate"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1
          },
          {
            label: __("Suffix"),
            fieldtype: "Data",
            fieldname: "suffix"
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: parent_pages,
            default: new_page.parent_page
          },
          {
            label: __("Default"),
            fieldtype: "Check",
            fieldname: "default",
            default: item.default
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon",
            default: new_page.icon
          }
        ],
        primary_action_label: __("Duplicate"),
        primary_action: (values) => {
          values.title = `${values.title}${values.suffix ? `{{${values.suffix}}}` : ""}`;
          values.is_public = 1;
          if (!this.validate_page(values)) {
            return;
          }
          d2.hide();
          frappe.call({
            method: "frappe.desk.doctype.workspace.workspace.duplicate_page",
            args: {
              page_name: page.name,
              new_page: values
            },
            callback(res) {
              if (res.message) {
                frappe.call({
                  method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.save_organization_workspace",
                  args: {
                    workspace_name: res.message.name,
                    organization_name: me2.organization_name,
                    default: values.default
                  }
                });
                let new_page2 = res.message;
                let message = __(
                  "Duplicate of {0} named as {1} is created successfully",
                  [page.title.bold(), new_page2.title.bold()]
                );
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          new_page.title = values.title;
          new_page.public = values.is_public || 0;
          new_page.name = values.title + (new_page.public ? "" : `-${frappe.session.user}`);
          new_page.label = new_page.name;
          new_page.icon = values.icon;
          new_page.parent_page = values.parent || "";
          new_page.for_user = new_page.public ? "" : frappe.session.user;
          new_page.is_editable = !new_page.public;
          new_page.selected = true;
          new_page.organization = this.organization_name;
          this.update_cached_values(page, new_page, true);
          this.update_selected_sidebar(this.current_page, false);
          this.current_page = {
            name: new_page.name,
            public: new_page.public
          };
          this.show();
          me2.make_sidebar();
          me2.show_sidebar_actions();
        }
      });
      d2.show();
    }
    hide_unhide_workspace(page, event, hide) {
      page.is_hidden = hide;
      let sidebar_control = event.target.closest(".sidebar-item-control");
      let sidebar_item_container = sidebar_control.closest(".sidebar-item-container");
      $(sidebar_item_container).attr("item-is-hidden", hide);
      $(sidebar_control).empty();
      this.add_sidebar_actions(page, $(sidebar_control));
      this.add_drop_icon(page, $(sidebar_control), $(sidebar_item_container));
      let cached_page = this.cached_pages.pages.findIndex((p) => p.name === page.name);
      if (cached_page !== -1) {
        this.cached_pages.pages[cached_page].is_hidden = hide;
      }
      let method = hide ? "hide_page" : "unhide_page";
      frappe.call({
        method: `frappe.desk.doctype.workspace.workspace.${method}`,
        args: {
          page_name: page.name
        },
        callback: (r) => {
          if (!r.message) {
            return;
          }
          let message = hide ? "{0} is hidden successfully" : "{0} is unhidden successfully";
          message = __(message, [page.title.bold()]);
          frappe.show_alert({ message, indicator: "green" });
        }
      });
    }
    hide_workspace(page, event) {
      this.hide_unhide_workspace(page, event, 1);
    }
    unhide_workspace(page, event) {
      this.hide_unhide_workspace(page, event, 0);
    }
    make_sidebar_sortable() {
      let me2 = this;
      $(".nested-container").each(function() {
        new Sortable(this, {
          handle: ".drag-handle",
          draggable: ".sidebar-item-container.is-draggable",
          group: "nested",
          animation: 150,
          fallbackOnBody: true,
          swapThreshold: 0.65,
          onEnd: function(evt) {
            let is_public = $(evt.item).attr("item-public") == "1";
            me2.prepare_sorted_sidebar(is_public);
            me2.update_sorted_sidebar();
          }
        });
      });
    }
    prepare_sorted_sidebar(is_public) {
      let pages = is_public ? this.public_pages : this.private_pages;
      if (is_public) {
        this.sorted_public_items = this.sort_sidebar(
          this.sidebar.find(".standard-sidebar-section").last(),
          pages
        );
      } else {
        this.sorted_private_items = this.sort_sidebar(
          this.sidebar.find(".standard-sidebar-section").first(),
          pages
        );
      }
      this.sidebar_pages.pages = [...this.public_pages, ...this.private_pages];
      this.cached_pages = this.sidebar_pages;
    }
    sort_sidebar($sidebar_section, pages) {
      let sorted_items = [];
      for (const [i, page] of Array.from($sidebar_section.find(".sidebar-item-container")).entries()) {
        let parent_page = "";
        if (page.closest(".nested-container").classList.contains("sidebar-child-item")) {
          parent_page = page.parentElement.parentElement.attributes["item-name"].value;
        }
        sorted_items.push({
          title: page.attributes["item-name"].value,
          parent_page,
          public: page.attributes["item-public"].value
        });
        let $drop_icon = $(page).find(".sidebar-item-control .drop-icon").first();
        if ($(page).find(".sidebar-child-item > *").length == 0) {
          $drop_icon.addClass("hidden");
        } else {
          $drop_icon.removeClass("hidden");
        }
        let from_index = pages.findIndex((p) => p.title == page.attributes["item-name"].value);
        let element = pages[from_index];
        element.parent_page = parent_page;
        if (from_index != i) {
          pages.splice(from_index, 1);
          pages.splice(i, 0, element);
        }
      }
      return sorted_items;
    }
    update_sorted_sidebar() {
      if (this.sorted_public_items || this.sorted_private_items) {
        frappe.call({
          method: "frappe.desk.doctype.workspace.workspace.sort_pages",
          args: {
            sb_public_items: this.sorted_public_items,
            sb_private_items: this.sorted_private_items
          },
          callback: function(res) {
            if (res.message) {
              let message = `Sidebar Updated Successfully`;
              frappe.show_alert({ message: __(message), indicator: "green" });
            }
          }
        });
      }
    }
    make_blocks_sortable() {
      let me2 = this;
      this.page_sortable = Sortable.create(
        this.page.main.find(".codex-editor__redactor").get(0),
        {
          handle: ".drag-handle",
          draggable: ".ce-block",
          animation: 150,
          onEnd: function(evt) {
            me2.editor.blocks.move(evt.newIndex, evt.oldIndex);
          },
          setData: function() {
          }
        }
      );
    }
    initialize_new_page() {
      let me2 = this;
      this.get_parent_pages();
      const d2 = new frappe.ui.Dialog({
        title: __("New Workspace"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1
          },
          {
            label: __("Suffix"),
            fieldtype: "Data",
            fieldname: "suffix"
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: this.public_parent_pages
          },
          {
            label: __("Default"),
            fieldtype: "Check",
            fieldname: "default"
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon"
          }
        ],
        primary_action_label: __("Create"),
        primary_action: (values) => {
          values.title = frappe.utils.escape_html(`${values.title}${values.suffix ? `{{${values.suffix}}}` : ""}`);
          values.is_public = 1;
          if (!this.validate_page(values)) {
            return;
          }
          d2.hide();
          this.initialize_editorjs_undo();
          this.setup_customization_buttons({ is_editable: true });
          let name = values.title + (values.is_public ? "" : `-${frappe.session.user}`);
          let blocks2 = [
            {
              type: "header",
              data: { text: values.title }
            }
          ];
          let new_page = {
            content: JSON.stringify(blocks2),
            name,
            label: name,
            title: values.title,
            public: values.is_public || 0,
            for_user: values.is_public ? "" : frappe.session.user,
            icon: values.icon,
            parent_page: values.parent || "",
            is_editable: true,
            selected: true
          };
          const me3 = this;
          this.editor.render({
            blocks: blocks2
          }).then(async () => {
            if (this.editor.configuration.readOnly) {
              this.is_read_only = false;
              await this.editor.readOnly.toggle();
            }
            frappe.call({
              method: "frappe.desk.doctype.workspace.workspace.new_page",
              args: {
                new_page
              },
              callback: function(res) {
                if (res.message) {
                  frappe.call({
                    method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.save_organization_workspace",
                    args: {
                      workspace_name: res.message.name,
                      organization_name: me3.organization_name,
                      default: values.default
                    }
                  });
                  let message = __("Workspace {0} Created Successfully", [
                    new_page.title.bold()
                  ]);
                  frappe.show_alert({
                    message,
                    indicator: "green"
                  });
                }
              }
            });
            new_page.organization = this.organization_name;
            this.update_cached_values(new_page, new_page, true, true);
            this.make_sidebar();
            this.show_sidebar_actions();
            this.update_selected_sidebar(this.current_page, false);
            this.current_page = {
              name: new_page.title,
              public: new_page.public
            };
            this.show();
          });
        }
      });
      d2.show();
    }
    validate_page(new_page, old_page) {
      let message = "";
      let [from_pages, to_pages] = new_page.is_public ? [this.private_pages, this.public_pages] : [this.public_pages, this.private_pages];
      let section = this.sidebar_categories[new_page.is_public];
      if (to_pages && to_pages.find((p) => p.title == new_page.title)) {
        message = __("Page with title {0} already exist.", [new_page.title.bold()]);
      }
      if (frappe.router.doctype_route_exist(frappe.router.slug(new_page.title))) {
        message = __("Doctype with same route already exist. Please choose different title.");
      }
      let child_pages = old_page && from_pages.filter((p) => p.parent_page == old_page.title);
      if (child_pages) {
        child_pages.every((child_page) => {
          if (to_pages && to_pages.find((p) => p.title == child_page.title)) {
            message = __(
              "One of the child page with name {0} already exist in {1} Section. Please update the name of the child page first before moving",
              [child_page.title.bold(), section.bold()]
            );
            cur_dialog.hide();
            return false;
          }
          return true;
        });
      }
      if (message) {
        frappe.throw(__(message));
        return false;
      }
      return true;
    }
    add_page_to_sidebar(page) {
      let $sidebar = $(".standard-sidebar-section");
      let item2 = __spreadValues({}, page);
      item2.selected = true;
      item2.is_editable = true;
      let $sidebar_item = this.sidebar_item_container(item2);
      this.add_sidebar_actions(item2, $sidebar_item.find(".sidebar-item-control"), true);
      $sidebar_item.find(".sidebar-item-control .drag-handle").css("margin-right", "8px");
      let sidebar_section = item2.is_public ? $sidebar[1] : $sidebar[0];
      if (item2.parent) {
        let $item_container = $(sidebar_section).find(`[item-name="${item2.parent}"]`);
        let $child_section = $item_container.find(".sidebar-child-item");
        let $drop_icon = $item_container.find(".drop-icon");
        if (!$child_section[0]) {
          $child_section = $(
            `<div class="sidebar-child-item hidden nested-container"></div>`
          ).appendTo($item_container);
          $drop_icon.toggleClass("hidden");
        }
        $sidebar_item.appendTo($child_section);
        $child_section.removeClass("hidden");
        $item_container.find(".drop-icon.hidden").removeClass("hidden");
        $item_container.find(".drop-icon use").attr("href", "#icon-small-up");
      } else {
        !item2.is_public && $sidebar.first().removeClass("hidden");
        $sidebar_item.appendTo(sidebar_section);
      }
      let section = item2.is_public ? "public" : "private";
      if (this.sidebar_items && this.sidebar_items[section] && !this.sidebar_items[section][item2.title]) {
        this.sidebar_items[section][item2.title] = $sidebar_item;
      }
    }
    initialize_editorjs(blocks2) {
      this.tools = {
        header: {
          class: this.blocks.header,
          inlineToolbar: ["HeaderSize", "bold", "italic", "link"],
          config: {
            default_size: 4
          }
        },
        paragraph: {
          class: this.blocks.paragraph,
          inlineToolbar: ["HeaderSize", "bold", "italic", "link"],
          config: {
            placeholder: __("Choose a block or continue typing")
          }
        },
        chart: {
          class: this.blocks.chart,
          config: {
            page_data: this.page_data || []
          }
        },
        card: {
          class: this.blocks.card,
          config: {
            page_data: this.page_data || []
          }
        },
        shortcut: {
          class: this.blocks.shortcut,
          config: {
            page_data: this.page_data || []
          }
        },
        onboarding: {
          class: this.blocks.onboarding,
          config: {
            page_data: this.page_data || []
          }
        },
        quick_list: {
          class: this.blocks.quick_list,
          config: {
            page_data: this.page_data || []
          }
        },
        number_card: {
          class: this.blocks.number_card,
          config: {
            page_data: this.page_data || []
          }
        },
        custom_block: {
          class: this.blocks.custom_block,
          config: {
            page_data: this.page_data || []
          }
        },
        spacer: this.blocks.spacer,
        HeaderSize: frappe.workspace_block.tunes.header_size
      };
      this.editor = new fi({
        data: {
          blocks: blocks2 || []
        },
        tools: this.tools,
        autofocus: false,
        readOnly: true,
        logLevel: "ERROR"
      });
    }
    save_page(page) {
      let me2 = this;
      this.current_page = { name: page.title, public: page.public };
      return this.editor.save().then((outputData) => {
        let new_widgets = {};
        for (const item2 of outputData.blocks) {
          if (item2.data.new) {
            if (!new_widgets[item2.type]) {
              new_widgets[item2.type] = [];
            }
            new_widgets[item2.type].push(item2.data.new);
            delete item2.data.new;
          }
        }
        let blocks2 = outputData.blocks.filter(
          (item2) => item2.type != "card" || item2.data.card_name !== "Custom Documents" && item2.data.card_name !== "Custom Reports"
        );
        if (page.content == JSON.stringify(blocks2) && Object.keys(new_widgets).length === 0) {
          this.setup_customization_buttons(page);
          frappe.show_alert({
            message: __("No changes made on the page"),
            indicator: "warning"
          });
          return false;
        }
        this.create_page_skeleton();
        page.content = JSON.stringify(blocks2);
        frappe.call({
          method: "frappe.desk.doctype.workspace.workspace.save_page",
          args: {
            title: page.title,
            public: page.public || 0,
            new_widgets,
            blocks: JSON.stringify(blocks2)
          },
          callback: function(res) {
            if (res.message) {
              me2.discard = true;
              me2.update_cached_values(page, page);
              me2.reload();
              frappe.show_alert({
                message: __("Page Saved Successfully"),
                indicator: "green"
              });
            }
          }
        });
        return true;
      }).catch((error) => {
        error;
      });
    }
    reload() {
      this.sorted_public_items = [];
      this.sorted_private_items = [];
      this.setup_pages(true);
      this.discard = false;
      this.undo.readOnly = true;
    }
    create_page_skeleton() {
      if (this.body.find(".workspace-skeleton").length) {
        return;
      }
      this.body.prepend(frappe.render_template("workspace_loading_skeleton"));
      this.body.find(".codex-editor").addClass("hidden");
    }
    remove_page_skeleton() {
      this.body.find(".codex-editor").removeClass("hidden");
      this.body.find(".workspace-skeleton").remove();
    }
    create_sidebar_skeleton() {
      if ($(".workspace-sidebar-skeleton").length) {
        return;
      }
      $(frappe.render_template("workspace_sidebar_loading_skeleton")).insertBefore(this.sidebar);
      this.sidebar.addClass("hidden");
    }
    remove_sidebar_skeleton() {
      this.sidebar.removeClass("hidden");
      $(".workspace-sidebar-skeleton").remove();
    }
    register_awesomebar_shortcut() {
      if (!this.organization_name) {
        return;
      }
      for (const letter of "abcdefghijklmnopqrstuvwxyz".split("")) {
        const default_shortcut = {
          action: (e) => {
            $("#navbar-search").focus();
            return false;
          },
          page: this.page
        };
        frappe.ui.keys.add_shortcut(__spreadValues({ shortcut: letter }, default_shortcut));
        frappe.ui.keys.add_shortcut(__spreadValues({ shortcut: `shift+${letter}` }, default_shortcut));
      }
    }
  };

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=script
  var Workspace_default = /* @__PURE__ */ (0, import_vue26.defineComponent)({
    __name: "Workspace",
    props: {
      organization: { type: String, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const wrapperRef = (0, import_vue27.ref)();
      (0, import_vue27.watch)([wrapperRef, () => props.organization], (_, org) => {
        if (!wrapperRef.value || !props.organization) {
          return;
        }
        wrapperRef.value.innerHTML = "";
        frappe.ui.make_app_page({
          parent: wrapperRef.value,
          name: "Workspaces",
          title: __("Workspace")
        });
        const workspace = new Workspace(wrapperRef.value, props.organization);
        workspace.show();
      }, { immediate: true });
      const __returned__ = { props, wrapperRef };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=style&index=0
  var Workspace_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=template
  var import_vue28 = __require("vue");
  var _hoisted_112 = {
    ref: "wrapperRef",
    class: "content page-container",
    id: "page-Workspaces",
    "data-page-route": "Workspaces"
  };
  function render9(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue28.openBlock)(), (0, import_vue28.createElementBlock)("div", _hoisted_112, null, 512);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue
  Workspace_default2(Workspace_default);
  Workspace_default.render = render9;
  Workspace_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue";
  Workspace_default.__scopeId = "data-v-89a027f3";
  var Workspace_default3 = Workspace_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=script
  var import_vue29 = __require("vue");
  var import_vue30 = __require("vue");
  var import_element_plus2 = __require("element-plus");

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/helper.ts
  function showPermDialog(role, permissions) {
    const perm_dialog = new frappe.ui.Dialog({ title: __(role) });
    perm_dialog.$wrapper.find(".modal-dialog").css("width", "1200px").css("max-width", "80vw");
    perm_dialog.show();
    const $body = $(perm_dialog.body);
    if (!permissions.length) {
      $body.append(`<div class="text-muted text-center padding">
			${__("{0} role does not have permission on any doctype", [role])}
		</div>`);
      return;
    }
    const table = document.createElement("table");
    table.className = "user-perm";
    const thead = table.appendChild(document.createElement("thead"));
    const tr = thead.appendChild(document.createElement("tr"));
    tr.appendChild(document.createElement("th")).appendChild(document.createTextNode(__("Document Type")));
    tr.appendChild(document.createElement("th")).appendChild(document.createTextNode(__("Level")));
    for (const p of frappe.perm.rights) {
      tr.appendChild(document.createElement("th")).appendChild(document.createTextNode(frappe.unscrub(p)));
    }
    const tbody = table.appendChild(document.createElement("thead"));
    for (const perm of permissions) {
      const tr2 = tbody.appendChild(document.createElement("tr"));
      tr2.appendChild(document.createElement("td")).appendChild(document.createTextNode(perm.parent));
      tr2.appendChild(document.createElement("td")).appendChild(document.createTextNode(perm.permlevel));
      for (const p of frappe.perm.rights) {
        const td = tr2.appendChild(document.createElement("td"));
        td.className = "text-muted bold";
        if (perm[p]) {
          td.innerHTML = frappe.utils.icon("check", "xs");
        } else {
          td.appendChild(document.createTextNode("-"));
        }
      }
    }
    $body.append(table);
  }
  function showPermissions(role) {
    frappe.xcall("frappe.core.doctype.user.user.get_perm_info", { role }).then((p) => showPermDialog(role, p));
  }

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=script
  var Member_default = /* @__PURE__ */ (0, import_vue29.defineComponent)({
    __name: "Member",
    props: {
      organization: { type: String, required: true },
      permissions: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const memberList = (0, import_vue30.ref)([]);
      const loading = (0, import_vue30.ref)(false);
      const tt2 = __;
      (0, import_vue30.watch)(() => props.organization, () => {
        getMembers();
      }, { immediate: true });
      async function getMembers() {
        if (!props.organization) {
          return;
        }
        loading.value = true;
        const res = await frappe.call({
          method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_members",
          args: {
            organization_name: props.organization,
            is_inherit: 0
          }
        });
        memberList.value = (res == null ? void 0 : res.message) || [];
        loading.value = false;
      }
      function createMember() {
        const newDoc = frappe.model.make_new_doc_and_get_name("Tianjy Organization Member");
        frappe.model.set_value("Tianjy Organization Member", newDoc, "organization", props.organization);
        frappe.set_route(["form", "Tianjy Organization Member", newDoc]);
      }
      function editMember(member) {
        frappe.set_route(["form", "Tianjy Organization Member", member.name]);
      }
      function deleteMember(member) {
        import_element_plus2.ElMessageBox.confirm(
          "\u60A8\u786E\u8BA4\u5220\u9664\u6B64\u4EBA\u5458\u5417?",
          "\u8BF7\u786E\u8BA4",
          {
            confirmButtonText: "\u786E\u5B9A",
            cancelButtonText: "\u53D6\u6D88",
            type: "warning"
          }
        ).then(async () => {
          loading.value = true;
          await frappe.db.delete_doc("Tianjy Organization Member", member.name);
          getMembers();
          (0, import_element_plus2.ElMessage)({
            type: "success",
            message: "\u5220\u9664\u6210\u529F"
          });
        }).catch(() => {
          (0, import_element_plus2.ElMessage)({
            type: "info",
            message: "\u53D6\u6D88\u5220\u9664"
          });
        });
      }
      frappe.socketio.doctype_subscribe("Tianjy Organization Member");
      frappe.realtime.on("list_update", (p) => {
        if (p.doctype !== "Tianjy Organization Member" && p.doctype !== "Tianjy Organization Role") {
          return;
        }
        getMembers();
      });
      const popstateListener = function(event) {
        getMembers();
      };
      (0, import_vue30.onMounted)(() => {
        window.addEventListener("popstate", popstateListener);
      });
      (0, import_vue30.onUnmounted)(() => {
        window.removeEventListener("popstate", popstateListener);
      });
      const __returned__ = { props, memberList, loading, tt: tt2, getMembers, createMember, editMember, deleteMember, popstateListener, get showPermissions() {
        return showPermissions;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=style&index=0
  var Member_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=template
  var import_vue31 = __require("vue");
  var _hoisted_113 = { class: "member" };
  var _hoisted_27 = { class: "btn-container" };
  var _hoisted_37 = ["onClick"];
  function render10(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ElButton = (0, import_vue31.resolveComponent)("ElButton");
    const _component_el_table_column = (0, import_vue31.resolveComponent)("el-table-column");
    const _component_el_table = (0, import_vue31.resolveComponent)("el-table");
    const _directive_loading = (0, import_vue31.resolveDirective)("loading");
    return (0, import_vue31.withDirectives)(((0, import_vue31.openBlock)(), (0, import_vue31.createElementBlock)("div", _hoisted_113, [
      (0, import_vue31.createElementVNode)("div", _hoisted_27, [
        $props.permissions.createPermission ? ((0, import_vue31.openBlock)(), (0, import_vue31.createBlock)(_component_ElButton, {
          key: 0,
          type: "primary",
          onClick: $setup.createMember
        }, {
          default: (0, import_vue31.withCtx)(() => [
            (0, import_vue31.createTextVNode)("\u65B0\u589E\u4EBA\u5458")
          ]),
          _: 1
        })) : (0, import_vue31.createCommentVNode)("v-if", true)
      ]),
      (0, import_vue31.createVNode)(_component_el_table, {
        data: $setup.memberList,
        border: "",
        style: { "width": "100%" },
        height: "100%"
      }, {
        default: (0, import_vue31.withCtx)(() => [
          (0, import_vue31.createVNode)(_component_el_table_column, {
            fixed: "",
            prop: "user_doc.full_name",
            label: "\u7528\u6237",
            width: "180"
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "role",
            label: "\u89D2\u8272"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              ((0, import_vue31.openBlock)(true), (0, import_vue31.createElementBlock)(import_vue31.Fragment, null, (0, import_vue31.renderList)(scope.row.roles, (roleDoc) => {
                return (0, import_vue31.openBlock)(), (0, import_vue31.createElementBlock)("span", {
                  class: "role",
                  onClick: ($event) => $setup.showPermissions(roleDoc.role)
                }, (0, import_vue31.toDisplayString)($setup.tt(roleDoc.role)), 9, _hoisted_37);
              }), 256))
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "visible",
            label: "\u53EF\u89C1",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.visible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "viewable",
            label: "\u53EF\u67E5\u770B",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.viewable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "addible",
            label: "\u53EF\u6DFB\u52A0",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.addible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "editable",
            label: "\u53EF\u7F16\u8F91",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.editable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "deletable",
            label: "\u53EF\u5220\u9664",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.deletable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "manageable",
            label: "\u53EF\u7BA1\u7406",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.manageable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          $props.permissions.writePermission || $props.permissions.deletePermission ? ((0, import_vue31.openBlock)(), (0, import_vue31.createBlock)(_component_el_table_column, {
            key: 0,
            prop: "address",
            label: "\u64CD\u4F5C",
            width: "130"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              $props.permissions.writePermission ? ((0, import_vue31.openBlock)(), (0, import_vue31.createBlock)(_component_ElButton, {
                key: 0,
                type: "primary",
                onClick: ($event) => $setup.editMember(scope.row)
              }, {
                default: (0, import_vue31.withCtx)(() => [
                  (0, import_vue31.createTextVNode)("\u7F16\u8F91")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue31.createCommentVNode)("v-if", true),
              $props.permissions.deletePermission ? ((0, import_vue31.openBlock)(), (0, import_vue31.createBlock)(_component_ElButton, {
                key: 1,
                type: "danger",
                onClick: ($event) => $setup.deleteMember(scope.row)
              }, {
                default: (0, import_vue31.withCtx)(() => [
                  (0, import_vue31.createTextVNode)("\u5220\u9664")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue31.createCommentVNode)("v-if", true)
            ]),
            _: 1
          })) : (0, import_vue31.createCommentVNode)("v-if", true)
        ]),
        _: 1
      }, 8, ["data"])
    ])), [
      [_directive_loading, $setup.loading]
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue
  Member_default2(Member_default);
  Member_default.render = render10;
  Member_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue";
  Member_default.__scopeId = "data-v-b487dc22";
  var Member_default3 = Member_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue?type=script
  var import_vue32 = __require("vue");
  var import_vue33 = __require("vue");
  var import_element_plus3 = __require("element-plus");
  var Inherit_default = /* @__PURE__ */ (0, import_vue32.defineComponent)({
    __name: "Inherit",
    props: {
      organization: { type: String, required: true },
      permissions: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const inheritList = (0, import_vue33.ref)([]);
      const loading = (0, import_vue33.ref)(false);
      (0, import_vue33.watch)(() => props.organization, () => {
        getInherits();
      }, { immediate: true });
      async function getInherits() {
        if (!props.organization) {
          return;
        }
        loading.value = true;
        const res = await frappe.call({
          method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_inherit",
          args: {
            organization_name: props.organization
          }
        });
        inheritList.value = (res == null ? void 0 : res.message) || [];
        loading.value = false;
      }
      function createInherit() {
        const newDoc = frappe.model.make_new_doc_and_get_name("Tianjy Organization Inheritable");
        frappe.model.set_value("Tianjy Organization Inheritable", newDoc, "organization", props.organization);
        frappe.set_route(["form", "Tianjy Organization Inheritable", newDoc]);
      }
      function editInherit(inheritOrganization) {
        frappe.set_route(["form", "Tianjy Organization Inheritable", inheritOrganization.name]);
      }
      function deleteInherit(inheritOrganization) {
        import_element_plus3.ElMessageBox.confirm(
          "\u60A8\u786E\u8BA4\u5220\u9664\u6B64\u4EBA\u5458\u5417?",
          "\u8BF7\u786E\u8BA4",
          {
            confirmButtonText: "\u786E\u5B9A",
            cancelButtonText: "\u53D6\u6D88",
            type: "warning"
          }
        ).then(async () => {
          loading.value = true;
          await frappe.db.delete_doc("Tianjy Organization Inheritable", inheritOrganization.name);
          getInherits();
          (0, import_element_plus3.ElMessage)({
            type: "success",
            message: "\u5220\u9664\u6210\u529F"
          });
        }).catch(() => {
          (0, import_element_plus3.ElMessage)({
            type: "info",
            message: "\u53D6\u6D88\u5220\u9664"
          });
        });
      }
      frappe.socketio.doctype_subscribe("Tianjy Organization Inheritable");
      frappe.realtime.on("list_update", (p) => {
        if (p.doctype !== "Tianjy Organization Inheritable") {
          return;
        }
        getInherits();
      });
      const __returned__ = { props, inheritList, loading, getInherits, createInherit, editInherit, deleteInherit };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue?type=style&index=0
  var Inherit_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue?type=template
  var import_vue34 = __require("vue");
  var _hoisted_114 = { class: "inheritable-organization" };
  var _hoisted_28 = { class: "btn-container" };
  function render11(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ElButton = (0, import_vue34.resolveComponent)("ElButton");
    const _component_el_table_column = (0, import_vue34.resolveComponent)("el-table-column");
    const _component_el_table = (0, import_vue34.resolveComponent)("el-table");
    const _directive_loading = (0, import_vue34.resolveDirective)("loading");
    return (0, import_vue34.withDirectives)(((0, import_vue34.openBlock)(), (0, import_vue34.createElementBlock)("div", _hoisted_114, [
      (0, import_vue34.createElementVNode)("div", _hoisted_28, [
        $props.permissions.createPermission ? ((0, import_vue34.openBlock)(), (0, import_vue34.createBlock)(_component_ElButton, {
          key: 0,
          type: "primary",
          onClick: $setup.createInherit
        }, {
          default: (0, import_vue34.withCtx)(() => [
            (0, import_vue34.createTextVNode)("\u7EE7\u627F\u7EC4\u7EC7")
          ]),
          _: 1
        })) : (0, import_vue34.createCommentVNode)("v-if", true)
      ]),
      (0, import_vue34.createVNode)(_component_el_table, {
        data: $setup.inheritList,
        border: "",
        style: { "width": "100%" },
        height: "100%"
      }, {
        default: (0, import_vue34.withCtx)(() => [
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "inherit_from_organization_doc.label",
            label: "\u7EE7\u627F\u81EA"
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "visible",
            label: "\u53EF\u89C1",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.visible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "viewable",
            label: "\u53EF\u67E5\u770B",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.viewable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "addible",
            label: "\u53EF\u6DFB\u52A0",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.addible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "editable",
            label: "\u53EF\u7F16\u8F91",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.editable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "deletable",
            label: "\u53EF\u5220\u9664",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.deletable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "manageable",
            label: "\u53EF\u7BA1\u7406",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.manageable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          $props.permissions.writePermission || $props.permissions.deletePermission ? ((0, import_vue34.openBlock)(), (0, import_vue34.createBlock)(_component_el_table_column, {
            key: 0,
            prop: "address",
            label: "\u64CD\u4F5C",
            width: "130"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              $props.permissions.writePermission ? ((0, import_vue34.openBlock)(), (0, import_vue34.createBlock)(_component_ElButton, {
                key: 0,
                type: "primary",
                onClick: ($event) => $setup.editInherit(scope.row)
              }, {
                default: (0, import_vue34.withCtx)(() => [
                  (0, import_vue34.createTextVNode)("\u7F16\u8F91")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue34.createCommentVNode)("v-if", true),
              $props.permissions.deletePermission ? ((0, import_vue34.openBlock)(), (0, import_vue34.createBlock)(_component_ElButton, {
                key: 1,
                type: "danger",
                onClick: ($event) => $setup.deleteInherit(scope.row)
              }, {
                default: (0, import_vue34.withCtx)(() => [
                  (0, import_vue34.createTextVNode)("\u5220\u9664")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue34.createCommentVNode)("v-if", true)
            ]),
            _: 1
          })) : (0, import_vue34.createCommentVNode)("v-if", true)
        ]),
        _: 1
      }, 8, ["data"])
    ])), [
      [_directive_loading, $setup.loading]
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue
  Inherit_default2(Inherit_default);
  Inherit_default.render = render11;
  Inherit_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue";
  Inherit_default.__scopeId = "data-v-4e2c9cb6";
  var Inherit_default3 = Inherit_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/InheritMember.vue?type=script
  var import_vue35 = __require("vue");
  var import_vue36 = __require("vue");
  var InheritMember_default = /* @__PURE__ */ (0, import_vue35.defineComponent)({
    __name: "InheritMember",
    props: {
      organization: { type: String, required: true },
      permissions: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const memberList = (0, import_vue36.ref)([]);
      const loading = (0, import_vue36.ref)(false);
      const tt2 = __;
      (0, import_vue36.watch)(() => props.organization, () => {
        getMembers();
      }, { immediate: true });
      async function getMembers() {
        if (!props.organization) {
          return;
        }
        loading.value = true;
        const res = await frappe.call({
          method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_members",
          args: {
            organization_name: props.organization,
            is_inherit: 1
          }
        });
        memberList.value = (res == null ? void 0 : res.message) || [];
        loading.value = false;
      }
      function editMember(member) {
        frappe.set_route(["form", "Tianjy Organization Member", member.name]);
      }
      frappe.socketio.doctype_subscribe("Tianjy Organization Member");
      frappe.realtime.on("list_update", (p) => {
        if (p.doctype !== "Tianjy Organization Member" && p.doctype !== "Tianjy Organization Role") {
          return;
        }
        getMembers();
      });
      const popstateListener = function(event) {
        getMembers();
      };
      (0, import_vue36.onMounted)(() => {
        window.addEventListener("popstate", popstateListener);
      });
      (0, import_vue36.onUnmounted)(() => {
        window.removeEventListener("popstate", popstateListener);
      });
      const __returned__ = { props, memberList, loading, tt: tt2, getMembers, editMember, popstateListener, get showPermissions() {
        return showPermissions;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/InheritMember.vue?type=style&index=0
  var InheritMember_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/InheritMember.vue?type=template
  var import_vue37 = __require("vue");
  var _hoisted_115 = { class: "member" };
  var _hoisted_29 = ["onClick"];
  function render12(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_table_column = (0, import_vue37.resolveComponent)("el-table-column");
    const _component_ElButton = (0, import_vue37.resolveComponent)("ElButton");
    const _component_el_table = (0, import_vue37.resolveComponent)("el-table");
    const _directive_loading = (0, import_vue37.resolveDirective)("loading");
    return (0, import_vue37.withDirectives)(((0, import_vue37.openBlock)(), (0, import_vue37.createElementBlock)("div", _hoisted_115, [
      (0, import_vue37.createVNode)(_component_el_table, {
        data: $setup.memberList,
        border: "",
        style: { "width": "100%" },
        height: "100%"
      }, {
        default: (0, import_vue37.withCtx)(() => [
          (0, import_vue37.createVNode)(_component_el_table_column, {
            fixed: "",
            prop: "user_doc.full_name",
            label: "\u7528\u6237",
            width: "180"
          }),
          (0, import_vue37.createVNode)(_component_el_table_column, {
            prop: "role",
            label: "\u89D2\u8272"
          }, {
            default: (0, import_vue37.withCtx)((scope) => [
              ((0, import_vue37.openBlock)(true), (0, import_vue37.createElementBlock)(import_vue37.Fragment, null, (0, import_vue37.renderList)(scope.row.roles, (roleDoc) => {
                return (0, import_vue37.openBlock)(), (0, import_vue37.createElementBlock)("span", {
                  class: "role",
                  onClick: ($event) => $setup.showPermissions(roleDoc.role)
                }, (0, import_vue37.toDisplayString)($setup.tt(roleDoc.role)), 9, _hoisted_29);
              }), 256))
            ]),
            _: 1
          }),
          (0, import_vue37.createVNode)(_component_el_table_column, {
            prop: "visible",
            label: "\u53EF\u89C1",
            width: "60"
          }, {
            default: (0, import_vue37.withCtx)((scope) => [
              (0, import_vue37.createTextVNode)((0, import_vue37.toDisplayString)(scope.row.visible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue37.createVNode)(_component_el_table_column, {
            prop: "viewable",
            label: "\u53EF\u67E5\u770B",
            width: "60"
          }, {
            default: (0, import_vue37.withCtx)((scope) => [
              (0, import_vue37.createTextVNode)((0, import_vue37.toDisplayString)(scope.row.viewable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue37.createVNode)(_component_el_table_column, {
            prop: "addible",
            label: "\u53EF\u6DFB\u52A0",
            width: "60"
          }, {
            default: (0, import_vue37.withCtx)((scope) => [
              (0, import_vue37.createTextVNode)((0, import_vue37.toDisplayString)(scope.row.addible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue37.createVNode)(_component_el_table_column, {
            prop: "editable",
            label: "\u53EF\u7F16\u8F91",
            width: "60"
          }, {
            default: (0, import_vue37.withCtx)((scope) => [
              (0, import_vue37.createTextVNode)((0, import_vue37.toDisplayString)(scope.row.editable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue37.createVNode)(_component_el_table_column, {
            prop: "deletable",
            label: "\u53EF\u5220\u9664",
            width: "60"
          }, {
            default: (0, import_vue37.withCtx)((scope) => [
              (0, import_vue37.createTextVNode)((0, import_vue37.toDisplayString)(scope.row.deletable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue37.createVNode)(_component_el_table_column, {
            prop: "manageable",
            label: "\u53EF\u7BA1\u7406",
            width: "60"
          }, {
            default: (0, import_vue37.withCtx)((scope) => [
              (0, import_vue37.createTextVNode)((0, import_vue37.toDisplayString)(scope.row.manageable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          $props.permissions.writePermission || $props.permissions.deletePermission ? ((0, import_vue37.openBlock)(), (0, import_vue37.createBlock)(_component_el_table_column, {
            key: 0,
            prop: "address",
            label: "\u64CD\u4F5C",
            width: "60"
          }, {
            default: (0, import_vue37.withCtx)((scope) => [
              $props.permissions.writePermission ? ((0, import_vue37.openBlock)(), (0, import_vue37.createBlock)(_component_ElButton, {
                key: 0,
                type: "primary",
                onClick: ($event) => $setup.editMember(scope.row)
              }, {
                default: (0, import_vue37.withCtx)(() => [
                  (0, import_vue37.createTextVNode)("\u8BE6\u60C5")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue37.createCommentVNode)("v-if", true)
            ]),
            _: 1
          })) : (0, import_vue37.createCommentVNode)("v-if", true)
        ]),
        _: 1
      }, 8, ["data"])
    ])), [
      [_directive_loading, $setup.loading]
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/InheritMember.vue
  InheritMember_default2(InheritMember_default);
  InheritMember_default.render = render12;
  InheritMember_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/InheritMember.vue";
  InheritMember_default.__scopeId = "data-v-b28ae675";
  var InheritMember_default3 = InheritMember_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=script
  var tianjy_organization_config_default = /* @__PURE__ */ (0, import_vue38.defineComponent)({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const organization = (0, import_vue39.ref)();
      const activeName = (0, import_vue39.ref)("info");
      const organizationMeta = (0, import_vue39.ref)();
      const memberMeta = (0, import_vue39.ref)();
      const inheritMeta = (0, import_vue39.ref)();
      (0, import_vue39.onMounted)(async () => {
        organizationMeta.value = await getMeta("Tianjy Organization");
        memberMeta.value = await getMeta("Tianjy Organization Member");
        inheritMeta.value = await getMeta("Tianjy Organization Inheritable");
      });
      async function getMeta(doctype) {
        let local_meta = frappe.get_meta(doctype);
        if (local_meta) {
          return local_meta;
        }
        await frappe.model.with_doctype(doctype);
        return frappe.get_meta(doctype) || void 0;
      }
      function getPermission(meta) {
        if (!meta) {
          return { deletePermission: false, createPermission: false, writePermission: false };
        }
        const deletePermission = frappe.perm.has_perm(meta.name, 0, "delete");
        const createPermission = frappe.perm.has_perm(meta.name, 0, "create");
        const writePermission = frappe.perm.has_perm(meta.name, 0, "write");
        return { deletePermission, createPermission, writePermission };
      }
      const organizationPermissions = (0, import_vue39.computed)(() => getPermission(organizationMeta.value));
      const memberPermissions = (0, import_vue39.computed)(() => getPermission(memberMeta.value));
      const inheritPermissions = (0, import_vue39.computed)(() => getPermission(inheritMeta.value));
      const __returned__ = { organization, activeName, organizationMeta, memberMeta, inheritMeta, getMeta, getPermission, organizationPermissions, memberPermissions, inheritPermissions, Page: page_default3, OrganizationTree: OrganizationTree_default3, FormDetail: Detail_default3, Workspace: Workspace_default3, Member: Member_default3, Inherit: Inherit_default3, InheritMember: InheritMember_default3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=style&index=0
  var tianjy_organization_config_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=template
  var import_vue40 = __require("vue");
  var _withScopeId3 = (n) => ((0, import_vue40.pushScopeId)("data-v-cb280acd"), n = n(), (0, import_vue40.popScopeId)(), n);
  var _hoisted_116 = /* @__PURE__ */ _withScopeId3(() => /* @__PURE__ */ (0, import_vue40.createElementVNode)("h3", { class: "title" }, "\u7EC4\u7EC7\u914D\u7F6E", -1));
  function render13(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_tab_pane = (0, import_vue40.resolveComponent)("el-tab-pane");
    const _component_el_tabs = (0, import_vue40.resolveComponent)("el-tabs");
    return (0, import_vue40.openBlock)(), (0, import_vue40.createBlock)($setup["Page"], null, {
      title: (0, import_vue40.withCtx)(() => [
        _hoisted_116
      ]),
      sider: (0, import_vue40.withCtx)(() => [
        (0, import_vue40.createVNode)($setup["OrganizationTree"], {
          modelValue: $setup.organization,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.organization = $event),
          permissions: $setup.organizationPermissions
        }, null, 8, ["modelValue", "permissions"])
      ]),
      default: (0, import_vue40.withCtx)(() => [
        (0, import_vue40.createVNode)(_component_el_tabs, {
          modelValue: $setup.activeName,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.activeName = $event),
          class: "organization-tabs"
        }, {
          default: (0, import_vue40.withCtx)(() => {
            var _a;
            return [
              (0, import_vue40.createVNode)(_component_el_tab_pane, {
                class: "tab-container",
                label: "\u57FA\u672C\u4FE1\u606F",
                name: "info"
              }, {
                default: (0, import_vue40.withCtx)(() => {
                  var _a2;
                  return [
                    (0, import_vue40.createVNode)($setup["FormDetail"], {
                      name: (_a2 = $setup.organization) == null ? void 0 : _a2.name,
                      doctype: "Tianjy Organization"
                    }, null, 8, ["name"])
                  ];
                }),
                _: 1
              }),
              ((_a = $setup.organization) == null ? void 0 : _a.type_doc.no_workspace) === 0 ? ((0, import_vue40.openBlock)(), (0, import_vue40.createBlock)(_component_el_tab_pane, {
                key: 0,
                class: "tab-container",
                label: "\u5DE5\u4F5C\u533A",
                name: "workspace"
              }, {
                default: (0, import_vue40.withCtx)(() => [
                  $setup.organization ? ((0, import_vue40.openBlock)(), (0, import_vue40.createBlock)($setup["Workspace"], {
                    key: 0,
                    organization: $setup.organization.name
                  }, null, 8, ["organization"])) : (0, import_vue40.createCommentVNode)("v-if", true)
                ]),
                _: 1
              })) : (0, import_vue40.createCommentVNode)("v-if", true),
              (0, import_vue40.createVNode)(_component_el_tab_pane, {
                class: "tab-container",
                label: "\u6210\u5458",
                name: "users"
              }, {
                default: (0, import_vue40.withCtx)(() => [
                  $setup.organization ? ((0, import_vue40.openBlock)(), (0, import_vue40.createBlock)($setup["Member"], {
                    key: 0,
                    organization: $setup.organization.name,
                    permissions: $setup.memberPermissions
                  }, null, 8, ["organization", "permissions"])) : (0, import_vue40.createCommentVNode)("v-if", true)
                ]),
                _: 1
              }),
              (0, import_vue40.createVNode)(_component_el_tab_pane, {
                class: "tab-container",
                label: "\u7EE7\u627F",
                name: "inherit"
              }, {
                default: (0, import_vue40.withCtx)(() => [
                  $setup.organization ? ((0, import_vue40.openBlock)(), (0, import_vue40.createBlock)($setup["Inherit"], {
                    key: 0,
                    organization: $setup.organization.name,
                    permissions: $setup.inheritPermissions
                  }, null, 8, ["organization", "permissions"])) : (0, import_vue40.createCommentVNode)("v-if", true)
                ]),
                _: 1
              }),
              (0, import_vue40.createVNode)(_component_el_tab_pane, {
                class: "tab-container",
                label: "\u7EE7\u627F\u4EBA\u5458",
                name: "inherit_members"
              }, {
                default: (0, import_vue40.withCtx)(() => [
                  $setup.organization ? ((0, import_vue40.openBlock)(), (0, import_vue40.createBlock)($setup["InheritMember"], {
                    key: 0,
                    organization: $setup.organization.name,
                    permissions: $setup.inheritPermissions
                  }, null, 8, ["organization", "permissions"])) : (0, import_vue40.createCommentVNode)("v-if", true)
                ]),
                _: 1
              })
            ];
          }),
          _: 1
        }, 8, ["modelValue"])
      ]),
      _: 1
    });
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue
  tianjy_organization_config_default2(tianjy_organization_config_default);
  tianjy_organization_config_default.render = render13;
  tianjy_organization_config_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue";
  tianjy_organization_config_default.__scopeId = "data-v-cb280acd";
  var tianjy_organization_config_default3 = tianjy_organization_config_default;

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.ts
  var import_element_plus4 = __toESM(__require("element-plus"));
  var import_zh_cn = __toESM(__require("element-plus/dist/locale/zh-cn"));
  frappe.pages["tianjy_organization_config"].on_page_load = function(wrapper) {
    var page = frappe.ui.make_app_page({
      parent: wrapper,
      title: "\u7EC4\u7EC7\u914D\u7F6E",
      single_column: true
    });
    const app = (0, import_vue41.createApp)(tianjy_organization_config_default3, {});
    app.use((app2) => {
      app2.config.globalProperties.$page = page;
    });
    app.use(import_element_plus4.default, { size: "small", locale: import_zh_cn.default });
    app.mount(page.parent);
  };
})();
/*!
 * CodeX.Tooltips
 * 
 * @version 1.0.5
 * 
 * @licence MIT
 * @author CodeX <https://codex.so>
 * 
 * 
 */
/*!
 * Library for handling keyboard shortcuts
 * @copyright CodeX (https://codex.so)
 * @license MIT
 * @author CodeX (https://codex.so)
 * @version 1.2.0
 */
/**
 * Base Paragraph Block for the Editor.js.
 * Represents simple paragraph
 *
 * @author CodeX (team@codex.so)
 * @copyright CodeX 2018
 * @license The MIT License (MIT)
 */
/**
 * Editor.js
 *
 * @license Apache-2.0
 * @see Editor.js <https://editorjs.io>
 * @author CodeX Team <https://codex.so>
 */
//# sourceMappingURL=data:application/json;base64,

})();