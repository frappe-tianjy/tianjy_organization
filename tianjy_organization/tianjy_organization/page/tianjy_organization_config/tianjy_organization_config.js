frappe.dom.set_style("/* sfc-style-css:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue?type=style-css&index=0 */\n.toggle-btn[data-v-c3964969] {\n  display: flex;\n  margin-right: var(--margin-sm);\n  cursor: pointer;\n  --icon-stroke: var(--gray-500);\n}\n.toggle-btn .sidebar-toggle-placeholder[data-v-c3964969] {\n  transition: all 0.5s ease-in-out;\n}\n.toggle-btn .sidebar-toggle-icon[data-v-c3964969] {\n  transition: all 0.5s ease-in-out;\n  display: none;\n}\n.toggle-btn:hover .sidebar-toggle-placeholder[data-v-c3964969] {\n  display: none;\n}\n.toggle-btn:hover .sidebar-toggle-icon[data-v-c3964969] {\n  display: block;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=style-css&index=0 */\n.title[data-v-2cbdb5e9] {\n  height: 75px;\n  display: flex;\n  align-items: center;\n  line-height: 75px;\n}\n.guigu-container[data-v-2cbdb5e9] {\n  height: var(--2cbdb5e9-height);\n  display: flex;\n  flex-direction: column;\n  background-color: #fff;\n}\n.guigu-container .main-container[data-v-2cbdb5e9] {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n.guigu-container .main-container .sider[data-v-2cbdb5e9] {\n  min-width: 50px;\n  min-height: 50px;\n}\n.guigu-container .main-container.horizon[data-v-2cbdb5e9] {\n  flex-direction: row;\n}\n.guigu-container .main-container.horizon .sider[data-v-2cbdb5e9] {\n  width: 300px;\n}\n.guigu-container .main-container.horizon .sider.onlySider[data-v-2cbdb5e9] {\n  width: 100%;\n}\n.guigu-container .main-container.vertical[data-v-2cbdb5e9] {\n  flex-direction: column;\n}\n.guigu-container .main-container.vertical .sider[data-v-2cbdb5e9] {\n  height: 300px;\n}\n.guigu-container .main-container.vertical .sider.onlySider[data-v-2cbdb5e9] {\n  height: 100%;\n}\n.guigu-container .main-container .resizer-container[data-v-2cbdb5e9] {\n  position: relative;\n  border: 0;\n}\n.guigu-container .main-container .resizer-container .resizer[data-v-2cbdb5e9] {\n  position: absolute;\n  z-index: 1;\n  background-color: #d9d9d9;\n  opacity: 0.5;\n}\n.guigu-container .main-container .resizer-container.horizon[data-v-2cbdb5e9] {\n  padding: 0 4px;\n  width: 12px;\n  height: 100%;\n}\n.guigu-container .main-container .resizer-container.horizon .resizer[data-v-2cbdb5e9] {\n  width: 2px;\n  height: 100%;\n  cursor: col-resize;\n}\n.guigu-container .main-container .resizer-container.vertical[data-v-2cbdb5e9] {\n  padding: 4px 0;\n  width: 100%;\n  height: 12px;\n}\n.guigu-container .main-container .resizer-container.vertical .resizer[data-v-2cbdb5e9] {\n  height: 2px;\n  width: 100%;\n  cursor: row-resize;\n}\n.guigu-container .main-container .right[data-v-2cbdb5e9] {\n  display: flex;\n  flex: 1;\n  overflow: auto;\n}\n.guigu-container .main-container .right.horizon[data-v-2cbdb5e9] {\n  flex-direction: row;\n}\n.guigu-container .main-container .right.horizon .main[data-v-2cbdb5e9] {\n  width: 50%;\n}\n.guigu-container .main-container .right.horizon .main.noDetail[data-v-2cbdb5e9] {\n  width: 100%;\n}\n.guigu-container .main-container .right.horizon .detail[data-v-2cbdb5e9] {\n  flex: 1;\n  min-width: 150px;\n}\n.guigu-container .main-container .right.vertical[data-v-2cbdb5e9] {\n  flex-direction: column;\n}\n.guigu-container .main-container .right.vertical .main[data-v-2cbdb5e9] {\n  height: 50%;\n}\n.guigu-container .main-container .right.vertical .main.noDetail[data-v-2cbdb5e9] {\n  height: 100%;\n}\n.guigu-container .main-container .right.vertical .detail[data-v-2cbdb5e9] {\n  flex: 1;\n  min-height: 150px;\n}\n.tools[data-v-2cbdb5e9] {\n  padding: 8px 0;\n}\n.small-meta_tools[data-v-2cbdb5e9] {\n  display: flex;\n  justify-content: space-between;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue?type=style-css&index=0 */\n[data-v-a835aba7] .delete {\n  color: #f00;\n}\n.create_type[data-v-a835aba7] {\n  height: 24px;\n}\n.create-menu[data-v-a835aba7] {\n  border-right: 0;\n  padding: 0;\n}\n.custom-tree-node[data-v-a835aba7] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n  padding-right: 8px;\n}\n.custom-tree-node .el-dropdown-link[data-v-a835aba7] {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  visibility: hidden;\n}\n.custom-tree-node:hover .el-dropdown-link[data-v-a835aba7] {\n  visibility: visible;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=style-css&index=0 */\n.sider-container[data-v-7ff9d4db] {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding-top: 8px;\n}\n.sider-container .btn-container[data-v-7ff9d4db] {\n  margin-bottom: 8px;\n}\n.sider-container .tree-container[data-v-7ff9d4db] {\n  overflow-y: auto;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Header.vue?type=style-css&index=0 */\n._header_pve6u_1 {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  z-index: 6;\n  position: sticky;\n  top: 0;\n  box-shadow: var(--shadow-sm);\n  background-color: var(--card-bg);\n  margin-bottom: 5px;\n  height: 48px;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=style-css&index=0 */\n.form-container[data-v-c54e1258] {\n  border: 1px solid #eee;\n  height: 100%;\n  overflow: auto;\n}\n.form-container[data-v-c54e1258] .form-section .form-column:first-child {\n  padding-left: 15px;\n}\n.form-container .placeholder[data-v-c54e1258] {\n  height: 500px;\n  line-height: 500px;\n  text-align: center;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=style-css&index=0 */\n.content[data-v-89a027f3] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.content[data-v-89a027f3] .page-body {\n  overflow: auto;\n}\n.content[data-v-89a027f3] .page-head {\n  position: static;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=style-css&index=0 */\n.member[data-v-b487dc22] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.member .btn-container[data-v-b487dc22] {\n  text-align: right;\n  margin-bottom: 8px;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue?type=style-css&index=0 */\n.inheritable-organization[data-v-4e2c9cb6] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.inheritable-organization .btn-container[data-v-4e2c9cb6] {\n  text-align: right;\n  margin-bottom: 8px;\n}\n\n/* sfc-style-css:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=style-css&index=0 */\n.title[data-v-cb280acd] {\n  margin-bottom: 0;\n}\n.organization-tabs[data-v-cb280acd] {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.tab-container[data-v-cb280acd] {\n  height: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64, */\n");
(function(){
"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key2 of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to2, key2) && key2 !== except)
          __defProp(to2, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../frappe/node_modules/editorjs-undo/dist/bundle.js
  var require_bundle = __commonJS({
    "../frappe/node_modules/editorjs-undo/dist/bundle.js"(exports, module) {
      !function(t, e) {
        "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.Undo = e() : t.Undo = e();
      }(window, function() {
        return function(t) {
          var e = {};
          function n(i) {
            if (e[i])
              return e[i].exports;
            var o = e[i] = { i, l: false, exports: {} };
            return t[i].call(o.exports, o, o.exports, n), o.l = true, o.exports;
          }
          return n.m = t, n.c = e, n.d = function(t2, e2, i) {
            n.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: i });
          }, n.r = function(t2) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
          }, n.t = function(t2, e2) {
            if (1 & e2 && (t2 = n(t2)), 8 & e2)
              return t2;
            if (4 & e2 && "object" == typeof t2 && t2 && t2.__esModule)
              return t2;
            var i = /* @__PURE__ */ Object.create(null);
            if (n.r(i), Object.defineProperty(i, "default", { enumerable: true, value: t2 }), 2 & e2 && "string" != typeof t2)
              for (var o in t2)
                n.d(i, o, function(e3) {
                  return t2[e3];
                }.bind(null, o));
            return i;
          }, n.n = function(t2) {
            var e2 = t2 && t2.__esModule ? function() {
              return t2.default;
            } : function() {
              return t2;
            };
            return n.d(e2, "a", e2), e2;
          }, n.o = function(t2, e2) {
            return Object.prototype.hasOwnProperty.call(t2, e2);
          }, n.p = "/", n(n.s = 0);
        }([function(t, e, n) {
          "use strict";
          function i(t2, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
            }
          }
          n.r(e), n.d(e, "default", function() {
            return s;
          });
          var o = function() {
            function t2(e3, n3) {
              !function(t3, e4) {
                if (!(t3 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t2), this.holder = "string" == typeof n3 ? document.getElementById(n3) : n3, this.observer = null, this.debounceTimer = 200, this.mutationDebouncer = this.debounce(function() {
                e3();
              }, this.debounceTimer);
            }
            var e2, n2, o2;
            return e2 = t2, (n2 = [{ key: "setMutationObserver", value: function() {
              var t3 = this, e3 = this.holder;
              this.observer = new MutationObserver(function(e4) {
                t3.mutationHandler(e4);
              }), this.observer.observe(e3, { childList: true, attributes: true, subtree: true, characterData: true, characterDataOldValue: true });
            } }, { key: "mutationHandler", value: function(t3) {
              var e3 = this, n3 = false;
              t3.forEach(function(t4) {
                switch (t4.type) {
                  case "childList":
                    t4.target === e3.holder ? e3.onDestroy() : n3 = true;
                    break;
                  case "characterData":
                    n3 = true;
                    break;
                  case "attributes":
                    t4.target.classList.contains("ce-block") || (n3 = true);
                }
              }), n3 && this.mutationDebouncer();
            } }, { key: "debounce", value: function(t3, e3) {
              var n3, i2 = this;
              return function() {
                for (var o3 = arguments.length, r2 = new Array(o3), s2 = 0; s2 < o3; s2++)
                  r2[s2] = arguments[s2];
                var a = i2;
                clearTimeout(n3), n3 = setTimeout(function() {
                  return t3.apply(a, r2);
                }, e3);
              };
            } }, { key: "onDestroy", value: function() {
              var t3 = new CustomEvent("destroy");
              document.dispatchEvent(t3), this.observer.disconnect();
            } }]) && i(e2.prototype, n2), o2 && i(e2, o2), t2;
          }();
          function r(t2, e2) {
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
            }
          }
          var s = function() {
            function t2(e3) {
              var n3 = this, i3 = e3.editor, r2 = e3.onUpdate, s2 = e3.maxLength;
              !function(t3, e4) {
                if (!(t3 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t2);
              var a = { maxLength: 30, onUpdate: function() {
              } }, u = i3.configuration;
              this.editor = i3, this.shouldSaveHistory = true, this.readOnly = u.readOnly, this.maxLength = s2 || a.maxLength, this.onUpdate = r2 || a.onUpdate, new o(function() {
                return n3.registerChange();
              }, u.holder).setMutationObserver(), this.setEventListeners(), this.initialItem = null, this.clear();
            }
            var e2, n2, i2;
            return e2 = t2, i2 = [{ key: "isReadOnlySupported", get: function() {
              return true;
            } }], (n2 = [{ key: "truncate", value: function(t3, e3) {
              for (; t3.length > e3; )
                t3.shift();
            } }, { key: "initialize", value: function(t3) {
              var e3 = "blocks" in t3 ? t3.blocks : t3, n3 = { index: e3.length - 1, state: e3 };
              this.stack[0] = n3, this.initialItem = n3;
            } }, { key: "clear", value: function() {
              this.stack = this.initialItem ? [this.initialItem] : [{ index: 0, state: [] }], this.position = 0, this.onUpdate();
            } }, { key: "registerChange", value: function() {
              var t3 = this;
              this.readOnly || (this.editor && this.editor.save && this.shouldSaveHistory && this.editor.save().then(function(e3) {
                t3.editorDidUpdate(e3.blocks) && t3.save(e3.blocks);
              }), this.shouldSaveHistory = true);
            } }, { key: "editorDidUpdate", value: function(t3) {
              var e3 = this.stack[this.position].state;
              return t3.length !== e3.length || JSON.stringify(e3) !== JSON.stringify(t3);
            } }, { key: "save", value: function(t3) {
              this.position >= this.maxLength && this.truncate(this.stack, this.maxLength), this.position = Math.min(this.position, this.stack.length - 1), this.stack = this.stack.slice(0, this.position + 1);
              var e3 = this.editor.blocks.getCurrentBlockIndex();
              this.stack.push({ index: e3, state: t3 }), this.position += 1, this.onUpdate();
            } }, { key: "undo", value: function() {
              var t3 = this;
              if (this.canUndo()) {
                this.shouldSaveHistory = false;
                var e3 = this.stack[this.position -= 1], n3 = e3.index, i3 = e3.state;
                this.onUpdate(), this.editor.blocks.render({ blocks: i3 }).then(function() {
                  return t3.editor.caret.setToBlock(n3, "end");
                });
              }
            } }, { key: "redo", value: function() {
              var t3 = this;
              if (this.canRedo()) {
                this.shouldSaveHistory = false;
                var e3 = this.stack[this.position += 1], n3 = e3.index, i3 = e3.state;
                this.onUpdate(), this.editor.blocks.render({ blocks: i3 }).then(function() {
                  return t3.editor.caret.setToBlock(n3, "end");
                });
              }
            } }, { key: "canUndo", value: function() {
              return !this.readOnly && this.position > 0;
            } }, { key: "canRedo", value: function() {
              return !this.readOnly && this.position < this.count();
            } }, { key: "count", value: function() {
              return this.stack.length - 1;
            } }, { key: "setEventListeners", value: function() {
              var t3 = this, e3 = /(Mac)/i.test(navigator.platform) ? "metaKey" : "ctrlKey", n3 = function(n4) {
                n4[e3] && "z" === n4.key && (n4.preventDefault(), t3.undo());
              }, i3 = function(n4) {
                n4[e3] && "y" === n4.key && (n4.preventDefault(), t3.redo());
              };
              document.addEventListener("keydown", n3), document.addEventListener("keydown", i3), document.addEventListener("destroy", function() {
                document.removeEventListener("keydown", n3), document.removeEventListener("keydown", i3);
              });
            } }]) && r(e2.prototype, n2), i2 && r(e2, i2), t2;
          }();
        }]).default;
      });
    }
  });

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.ts
  var import_vue38 = __require("vue");

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=script
  var import_vue35 = __require("vue");
  var import_vue36 = __require("vue");

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=script
  var import_vue4 = __require("vue");
  var import_vue5 = __require("vue");
  var import_icons_vue = __require("@element-plus/icons-vue");

  // ../guigu_pm/guigu_pm/public/js/components/page/useMetaQuery.ts
  var import_vue = __require("vue");
  function useMetaQuery() {
    const smallMeta = (0, import_vue.ref)("ontouchstart" in document.documentElement);
    let mQuery;
    function mediaChange() {
      if (mQuery.matches) {
        smallMeta.value = true;
      } else {
        smallMeta.value = false;
      }
    }
    (0, import_vue.onMounted)(() => {
      mQuery = window.matchMedia("(max-width: 640px)");
      if (mQuery.matches) {
        smallMeta.value = true;
      } else {
        smallMeta.value = false;
      }
      mQuery.addEventListener("change", mediaChange);
    });
    (0, import_vue.onUnmounted)(() => {
      mQuery.removeEventListener("change", mediaChange);
    });
    return smallMeta;
  }

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue?type=script
  var import_vue2 = __require("vue");
  var ToggleBtn_default = /* @__PURE__ */ (0, import_vue2.defineComponent)({
    __name: "ToggleBtn",
    props: {
      expand: { type: Boolean, required: true }
    },
    emits: ["update:expand"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      function toggleSider() {
        emit("update:expand", !props.expand);
      }
      const __returned__ = { props, emit, toggleSider };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue?type=style&index=0
  var ToggleBtn_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue?type=template
  var import_vue3 = __require("vue");
  var _withScopeId = (n) => ((0, import_vue3.pushScopeId)("data-v-c3964969"), n = n(), (0, import_vue3.popScopeId)(), n);
  var _hoisted_1 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ (0, import_vue3.createElementVNode)("svg", { class: "icon icon-md sidebar-toggle-placeholder" }, [
    /* @__PURE__ */ (0, import_vue3.createElementVNode)("use", { href: "#icon-menu" })
  ], -1));
  var _hoisted_2 = { class: "sidebar-toggle-icon" };
  var _hoisted_3 = { class: "icon icon-md" };
  var _hoisted_4 = ["href"];
  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue3.openBlock)(), (0, import_vue3.createElementBlock)("span", {
      class: "toggle-btn",
      title: "\u5207\u6362\u8FB9\u680F",
      onClick: $setup.toggleSider
    }, [
      _hoisted_1,
      (0, import_vue3.createElementVNode)("span", _hoisted_2, [
        ((0, import_vue3.openBlock)(), (0, import_vue3.createElementBlock)("svg", _hoisted_3, [
          (0, import_vue3.createElementVNode)("use", {
            href: $props.expand ? "#icon-sidebar-collapse" : "#icon-sidebar-expand"
          }, null, 8, _hoisted_4)
        ]))
      ])
    ]);
  }

  // ../guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue
  ToggleBtn_default2(ToggleBtn_default);
  ToggleBtn_default.render = render;
  ToggleBtn_default.__file = "../guigu_pm/guigu_pm/public/js/components/page/ToggleBtn.vue";
  ToggleBtn_default.__scopeId = "data-v-c3964969";
  var ToggleBtn_default3 = ToggleBtn_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=script
  var page_default = /* @__PURE__ */ (0, import_vue4.defineComponent)({
    __name: "index",
    props: {
      mode: { type: String, required: false },
      rightMode: { type: String, required: false },
      siderStyle: { type: null, required: false },
      mainStyle: { type: null, required: false },
      detailStyle: { type: null, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      (0, import_vue4.useCssVars)((_ctx) => ({
        "2cbdb5e9-height": height.value
      }));
      const smallMeta = useMetaQuery();
      const sider = (0, import_vue5.ref)();
      const main = (0, import_vue5.ref)();
      const container = (0, import_vue5.ref)();
      const resizerContainer = (0, import_vue5.ref)();
      const mainResizerContainer = (0, import_vue5.ref)();
      const rightContainer = (0, import_vue5.ref)();
      const hasTitle = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().title));
      const hasTools = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().tools));
      const hasSider = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().sider));
      const hasMain = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().default));
      const hasDetail = (0, import_vue5.computed)(() => Boolean((0, import_vue5.useSlots)().detail));
      const height = (0, import_vue5.computed)(() => hasTitle.value ? `calc(100vh - 135px)` : `calc(100vh - 60px)`);
      const showSider = (0, import_vue5.ref)(true);
      function dragLRController(dragEvent) {
        var _a;
        if (!dragEvent.target) {
          return;
        }
        dragEvent.target.setPointerCapture(true);
        dragEvent.stopPropagation();
        dragEvent.target.style.background = "#999";
        let resizerContainerElement;
        let leftElement;
        let containerElement;
        const isSiderResize = dragEvent.target === ((_a = resizerContainer.value) == null ? void 0 : _a.firstChild);
        const mode = isSiderResize ? "mode" : "rightMode";
        if (isSiderResize) {
          resizerContainerElement = resizerContainer.value;
          leftElement = sider.value;
          containerElement = container.value;
        } else {
          resizerContainerElement = mainResizerContainer.value;
          leftElement = main.value;
          containerElement = rightContainer.value;
        }
        let startPo = 0;
        let containerClientSize = 0;
        let oldSiderSize = 0;
        let resizerContainerElementSize = 0;
        if (props[mode] === "vertical") {
          startPo = dragEvent.clientY;
          dragEvent.target.top = dragEvent.target.offsetTop;
          containerClientSize = (containerElement == null ? void 0 : containerElement.clientHeight) || 0;
          oldSiderSize = ((resizerContainerElement == null ? void 0 : resizerContainerElement.offsetTop) || 0) - ((containerElement == null ? void 0 : containerElement.offsetTop) || 0);
          resizerContainerElementSize = (resizerContainerElement == null ? void 0 : resizerContainerElement.clientHeight) || 0;
        } else {
          startPo = dragEvent.clientX;
          dragEvent.target.left = dragEvent.target.offsetLeft;
          containerClientSize = (containerElement == null ? void 0 : containerElement.clientWidth) || 0;
          oldSiderSize = ((resizerContainerElement == null ? void 0 : resizerContainerElement.offsetLeft) || 0) - ((containerElement == null ? void 0 : containerElement.offsetLeft) || 0);
          resizerContainerElementSize = (resizerContainerElement == null ? void 0 : resizerContainerElement.clientWidth) || 0;
        }
        let newSiderSize = oldSiderSize;
        document.onpointermove = function(moveEvent) {
          var _a2, _b, _c, _d;
          if (!dragEvent.target) {
            return;
          }
          let endPo = 0;
          if (props[mode] === "vertical") {
            endPo = moveEvent.clientY;
          } else {
            endPo = moveEvent.clientX;
          }
          let resizerDiff = endPo - startPo;
          newSiderSize = oldSiderSize + resizerDiff;
          const mainSize = containerClientSize - newSiderSize - resizerContainerElementSize;
          let mainMaxSize = isSiderResize ? 250 : 150;
          if (isSiderResize && props.mode === "vertical" && props.rightMode === "vertical" && ((_b = (_a2 = main.value) == null ? void 0 : _a2.style) == null ? void 0 : _b.height)) {
            const alreadyMainHeight = parseFloat(main.value.style.height.replaceAll("px", "") || "0");
            mainMaxSize = alreadyMainHeight + 150 + resizerContainerElementSize;
          } else if (isSiderResize && props.mode !== "vertical" && props.rightMode !== "vertical" && ((_d = (_c = main.value) == null ? void 0 : _c.style) == null ? void 0 : _d.width)) {
            const alreadyMainWidth = parseFloat(main.value.style.width.replaceAll("px", "") || "0");
            mainMaxSize = alreadyMainWidth + 150 + resizerContainerElementSize;
          }
          if (newSiderSize < 50) {
            newSiderSize = 50;
            resizerDiff = newSiderSize - oldSiderSize;
          }
          if (mainSize < mainMaxSize) {
            newSiderSize = containerClientSize - mainMaxSize - resizerContainerElementSize;
            resizerDiff = newSiderSize - oldSiderSize;
          }
          if (props[mode] === "vertical") {
            dragEvent.target.style.top = `${resizerDiff}px`;
          } else {
            dragEvent.target.style.left = `${resizerDiff}px`;
          }
        };
        document.onpointerup = function(evt) {
          if (!dragEvent.target) {
            return;
          }
          dragEvent.target.style.background = "#d9d9d9";
          dragEvent.target.style.left = "auto";
          dragEvent.target.style.top = "auto";
          if (!leftElement) {
            return;
          }
          if (props[mode] === "vertical") {
            leftElement.style.height = `${newSiderSize}px`;
          } else {
            leftElement.style.width = `${newSiderSize}px`;
          }
          document.onpointermove = null;
          document.onpointerup = null;
        };
      }
      (0, import_vue5.watch)(() => smallMeta.value, () => {
        if (smallMeta.value) {
          showSider.value = false;
        }
      }, { immediate: true });
      const showDrawer = (0, import_vue5.computed)(() => showSider.value && smallMeta.value);
      function closeDrawer() {
        showSider.value = false;
      }
      function toggleSider() {
        showSider.value = !showSider.value;
      }
      const __returned__ = { smallMeta, props, sider, main, container, resizerContainer, mainResizerContainer, rightContainer, hasTitle, hasTools, hasSider, hasMain, hasDetail, height, showSider, dragLRController, showDrawer, closeDrawer, toggleSider, get MoreFilled() {
        return import_icons_vue.MoreFilled;
      }, ToggleBtn: ToggleBtn_default3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=style&index=0
  var page_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu_pm/guigu_pm/public/js/components/page/index.vue?type=template
  var import_vue6 = __require("vue");
  var _hoisted_12 = {
    key: 0,
    class: "title container"
  };
  var _hoisted_22 = { class: "container guigu-container" };
  var _hoisted_32 = { class: "tools" };
  var _hoisted_42 = { class: "tools small-meta_tools" };
  var _hoisted_5 = { key: 1 };
  var _hoisted_6 = { class: "popover-tools" };
  function render2(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_icon = (0, import_vue6.resolveComponent)("el-icon");
    const _component_el_popover = (0, import_vue6.resolveComponent)("el-popover");
    const _component_el_drawer = (0, import_vue6.resolveComponent)("el-drawer");
    return (0, import_vue6.openBlock)(), (0, import_vue6.createElementBlock)(import_vue6.Fragment, null, [
      $setup.hasTitle ? ((0, import_vue6.openBlock)(), (0, import_vue6.createElementBlock)("div", _hoisted_12, [
        (0, import_vue6.createVNode)($setup["ToggleBtn"], {
          expand: $setup.showSider,
          "onUpdate:expand": _cache[0] || (_cache[0] = ($event) => $setup.showSider = $event)
        }, null, 8, ["expand"]),
        (0, import_vue6.renderSlot)(_ctx.$slots, "title", {}, void 0, true)
      ])) : (0, import_vue6.createCommentVNode)("v-if", true),
      (0, import_vue6.createElementVNode)("div", _hoisted_22, [
        (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", _hoisted_32, [
          (0, import_vue6.renderSlot)(_ctx.$slots, "tools", {}, void 0, true)
        ], 512), [
          [import_vue6.vShow, $setup.hasTools && !$setup.smallMeta]
        ]),
        (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", _hoisted_42, [
          !$setup.hasTitle ? ((0, import_vue6.openBlock)(), (0, import_vue6.createBlock)($setup["ToggleBtn"], {
            key: 0,
            expand: $setup.showSider,
            "onUpdate:expand": _cache[1] || (_cache[1] = ($event) => $setup.showSider = $event)
          }, null, 8, ["expand"])) : ((0, import_vue6.openBlock)(), (0, import_vue6.createElementBlock)("div", _hoisted_5)),
          (0, import_vue6.createVNode)(_component_el_popover, {
            placement: "bottom-start",
            width: 300,
            trigger: "click"
          }, {
            reference: (0, import_vue6.withCtx)(() => [
              (0, import_vue6.createVNode)(_component_el_icon, { size: "20px" }, {
                default: (0, import_vue6.withCtx)(() => [
                  (0, import_vue6.createVNode)($setup["MoreFilled"])
                ]),
                _: 1
              })
            ]),
            default: (0, import_vue6.withCtx)(() => [
              (0, import_vue6.createElementVNode)("div", _hoisted_6, [
                (0, import_vue6.renderSlot)(_ctx.$slots, "tools", {}, void 0, true)
              ])
            ]),
            _: 3
          })
        ], 512), [
          [import_vue6.vShow, $setup.smallMeta]
        ]),
        (0, import_vue6.createElementVNode)("div", {
          class: (0, import_vue6.normalizeClass)([$props.mode === "vertical" ? "vertical" : "horizon", "main-container"]),
          ref: "container"
        }, [
          (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
            style: (0, import_vue6.normalizeStyle)($props.siderStyle),
            class: (0, import_vue6.normalizeClass)(["sider", { onlySider: $setup.hasSider && !$setup.hasDetail && !$setup.hasMain }]),
            ref: "sider"
          }, [
            (0, import_vue6.renderSlot)(_ctx.$slots, "sider", {}, void 0, true)
          ], 6), [
            [import_vue6.vShow, $setup.hasSider && !$setup.smallMeta && $setup.showSider]
          ]),
          (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
            class: (0, import_vue6.normalizeClass)([$props.mode === "vertical" ? "vertical" : "horizon", "resizer-container"]),
            ref: "resizerContainer"
          }, [
            (0, import_vue6.createElementVNode)("div", {
              class: "resizer",
              title: "\u4FA7\u8FB9\u680Fresizer",
              onPointerdown: $setup.dragLRController
            }, null, 32)
          ], 2), [
            [import_vue6.vShow, $setup.hasSider && ($setup.hasDetail || $setup.hasMain) && !$setup.smallMeta && $setup.showSider]
          ]),
          (0, import_vue6.createElementVNode)("div", {
            class: (0, import_vue6.normalizeClass)([$props.rightMode === "vertical" ? "vertical" : "horizon", "right"]),
            ref: "rightContainer"
          }, [
            (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
              style: (0, import_vue6.normalizeStyle)($props.mainStyle),
              class: (0, import_vue6.normalizeClass)(["main", { noDetail: !$setup.hasDetail }]),
              ref: "main"
            }, [
              (0, import_vue6.renderSlot)(_ctx.$slots, "default", {}, void 0, true)
            ], 6), [
              [import_vue6.vShow, $setup.hasMain]
            ]),
            (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
              class: (0, import_vue6.normalizeClass)([$props.rightMode === "vertical" ? "vertical" : "horizon", "resizer-container"]),
              ref: "mainResizerContainer"
            }, [
              (0, import_vue6.createElementVNode)("div", {
                class: "resizer",
                title: "main resizer",
                onPointerdown: $setup.dragLRController
              }, null, 32)
            ], 2), [
              [import_vue6.vShow, $setup.hasDetail && $setup.hasMain]
            ]),
            (0, import_vue6.withDirectives)((0, import_vue6.createElementVNode)("div", {
              style: (0, import_vue6.normalizeStyle)($props.detailStyle),
              class: "detail"
            }, [
              (0, import_vue6.renderSlot)(_ctx.$slots, "detail", {}, void 0, true)
            ], 4), [
              [import_vue6.vShow, $setup.hasDetail]
            ])
          ], 2)
        ], 2)
      ]),
      (0, import_vue6.createVNode)(_component_el_drawer, {
        modelValue: $setup.showDrawer,
        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.showDrawer = $event),
        onClose: $setup.closeDrawer,
        title: "",
        direction: "ltr",
        size: "50%"
      }, {
        default: (0, import_vue6.withCtx)(() => [
          (0, import_vue6.renderSlot)(_ctx.$slots, "sider", {}, void 0, true)
        ]),
        _: 3
      }, 8, ["modelValue"])
    ], 64);
  }

  // ../guigu_pm/guigu_pm/public/js/components/page/index.vue
  page_default2(page_default);
  page_default.render = render2;
  page_default.__file = "../guigu_pm/guigu_pm/public/js/components/page/index.vue";
  page_default.__scopeId = "data-v-2cbdb5e9";
  var page_default3 = page_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=script
  var import_vue10 = __require("vue");
  var import_vue11 = __require("vue");

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/helper.ts
  function list2Tree(listData, parentField) {
    const listDataCopy = structuredClone(listData);
    const treeData = [];
    const map = {};
    listDataCopy.forEach((item2) => {
      map[item2.name] = item2;
    });
    listDataCopy.forEach((item2) => {
      const parent = map[item2[parentField] || 0];
      if (parent) {
        (parent.children || (parent.children = [])).push(item2);
      } else {
        treeData.push(item2);
      }
    });
    return treeData;
  }

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue?type=script
  var import_vue7 = __require("vue");
  var import_vue8 = __require("vue");
  var import_icons_vue2 = __require("@element-plus/icons-vue");
  var import_element_plus = __require("element-plus");
  var TreeItem_default = /* @__PURE__ */ (0, import_vue7.defineComponent)({
    __name: "TreeItem",
    props: {
      node: { type: null, required: true }
    },
    emits: ["update:modelValue", "reload"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      async function deleteOrganization() {
        import_element_plus.ElMessageBox.confirm(
          "\u60A8\u786E\u8BA4\u5220\u9664\u6B64\u7EC4\u7EC7\u5417?",
          "\u8BF7\u786E\u8BA4",
          {
            confirmButtonText: "\u786E\u5B9A",
            cancelButtonText: "\u53D6\u6D88",
            type: "warning"
          }
        ).then(async () => {
          await frappe.db.delete_doc("Tianjy Organization", props.node.data.name);
          emit("reload");
          (0, import_element_plus.ElMessage)({
            type: "success",
            message: "\u5220\u9664\u6210\u529F"
          });
        }).catch(() => {
          (0, import_element_plus.ElMessage)({
            type: "info",
            message: "\u53D6\u6D88\u5220\u9664"
          });
        });
      }
      const childTypes = (0, import_vue8.computed)(() => props.node.data.child_type_list);
      function command(v) {
        switch (v) {
          case "delete":
            return deleteOrganization();
        }
      }
      function createByType(type) {
        const newDoc = frappe.model.make_new_doc_and_get_name("Tianjy Organization");
        frappe.model.set_value("Tianjy Organization", newDoc, "type", type.name);
        frappe.model.set_value("Tianjy Organization", newDoc, "parent_organization", props.node.data.name);
        frappe.set_route(["form", "Tianjy Organization", newDoc]);
      }
      const __returned__ = { props, emit, deleteOrganization, childTypes, command, createByType, get MoreFilled() {
        return import_icons_vue2.MoreFilled;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue?type=style&index=0
  var TreeItem_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue?type=template
  var import_vue9 = __require("vue");
  var _withScopeId2 = (n) => ((0, import_vue9.pushScopeId)("data-v-a835aba7"), n = n(), (0, import_vue9.popScopeId)(), n);
  var _hoisted_13 = { class: "custom-tree-node" };
  var _hoisted_23 = { class: "el-dropdown-link" };
  var _hoisted_33 = /* @__PURE__ */ _withScopeId2(() => /* @__PURE__ */ (0, import_vue9.createElementVNode)("span", null, "\u65B0\u5EFA\u5B50\u8282\u70B9", -1));
  var _hoisted_43 = /* @__PURE__ */ _withScopeId2(() => /* @__PURE__ */ (0, import_vue9.createElementVNode)("span", { class: "delete" }, "\u5220\u9664", -1));
  function render3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_icon = (0, import_vue9.resolveComponent)("el-icon");
    const _component_el_menu_item = (0, import_vue9.resolveComponent)("el-menu-item");
    const _component_el_menu = (0, import_vue9.resolveComponent)("el-menu");
    const _component_el_popover = (0, import_vue9.resolveComponent)("el-popover");
    const _component_el_dropdown_item = (0, import_vue9.resolveComponent)("el-dropdown-item");
    const _component_el_dropdown_menu = (0, import_vue9.resolveComponent)("el-dropdown-menu");
    const _component_el_dropdown = (0, import_vue9.resolveComponent)("el-dropdown");
    return (0, import_vue9.openBlock)(), (0, import_vue9.createElementBlock)("div", _hoisted_13, [
      (0, import_vue9.createElementVNode)("span", null, (0, import_vue9.toDisplayString)($props.node.label), 1),
      $props.node.data.permissions.createPermission || $props.node.data.permissions.deletePermission ? ((0, import_vue9.openBlock)(), (0, import_vue9.createBlock)(_component_el_dropdown, {
        key: 0,
        onCommand: $setup.command
      }, {
        dropdown: (0, import_vue9.withCtx)(() => [
          (0, import_vue9.createVNode)(_component_el_dropdown_menu, null, {
            default: (0, import_vue9.withCtx)(() => {
              var _a;
              return [
                $setup.childTypes.length > 0 && $props.node.data.permissions.createPermission ? ((0, import_vue9.openBlock)(), (0, import_vue9.createBlock)(_component_el_dropdown_item, {
                  key: 0,
                  command: "add"
                }, {
                  default: (0, import_vue9.withCtx)(() => [
                    (0, import_vue9.createVNode)(_component_el_popover, {
                      "popper-style": { padding: 0 },
                      placement: "right-start",
                      trigger: "hover",
                      offset: 15
                    }, {
                      reference: (0, import_vue9.withCtx)(() => [
                        _hoisted_33
                      ]),
                      default: (0, import_vue9.withCtx)(() => [
                        (0, import_vue9.createVNode)(_component_el_menu, {
                          class: "create-menu",
                          mode: "vertical"
                        }, {
                          default: (0, import_vue9.withCtx)(() => [
                            ((0, import_vue9.openBlock)(true), (0, import_vue9.createElementBlock)(import_vue9.Fragment, null, (0, import_vue9.renderList)($setup.childTypes, (type) => {
                              return (0, import_vue9.openBlock)(), (0, import_vue9.createBlock)(_component_el_menu_item, {
                                class: "create_type",
                                onClick: ($event) => $setup.createByType(type)
                              }, {
                                default: (0, import_vue9.withCtx)(() => [
                                  (0, import_vue9.createTextVNode)((0, import_vue9.toDisplayString)(type.name), 1)
                                ]),
                                _: 2
                              }, 1032, ["onClick"]);
                            }), 256))
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                })) : (0, import_vue9.createCommentVNode)("v-if", true),
                $props.node.data.permissions.deletePermission && !((_a = $props.node.data.children) == null ? void 0 : _a.length) ? ((0, import_vue9.openBlock)(), (0, import_vue9.createBlock)(_component_el_dropdown_item, {
                  key: 1,
                  command: "delete"
                }, {
                  default: (0, import_vue9.withCtx)(() => [
                    _hoisted_43
                  ]),
                  _: 1
                })) : (0, import_vue9.createCommentVNode)("v-if", true)
              ];
            }),
            _: 1
          })
        ]),
        default: (0, import_vue9.withCtx)(() => [
          (0, import_vue9.createElementVNode)("span", _hoisted_23, [
            (0, import_vue9.createVNode)(_component_el_icon, {
              class: "el-icon--right",
              onClick: _cache[0] || (_cache[0] = (e) => e.stopPropagation())
            }, {
              default: (0, import_vue9.withCtx)(() => [
                (0, import_vue9.createVNode)($setup["MoreFilled"])
              ]),
              _: 1
            })
          ])
        ]),
        _: 1
      })) : (0, import_vue9.createCommentVNode)("v-if", true)
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue
  TreeItem_default2(TreeItem_default);
  TreeItem_default.render = render3;
  TreeItem_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/TreeItem.vue";
  TreeItem_default.__scopeId = "data-v-a835aba7";
  var TreeItem_default3 = TreeItem_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=script
  var OrganizationTree_default = /* @__PURE__ */ (0, import_vue10.defineComponent)({
    __name: "OrganizationTree",
    props: {
      modelValue: { type: null, required: false },
      permissions: { type: null, required: true }
    },
    emits: ["update:modelValue"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      const organizationList = (0, import_vue11.ref)([]);
      const currentNodeKey = (0, import_vue11.ref)("");
      const loading = (0, import_vue11.ref)(false);
      (0, import_vue11.onMounted)(() => {
        getOrganizations();
      });
      async function getOrganizations() {
        var _a;
        loading.value = true;
        const res = await frappe.call({
          method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_organizations"
        });
        organizationList.value = (res == null ? void 0 : res.message) || [];
        if (!currentNodeKey.value) {
          currentNodeKey.value = (_a = organizationList.value[0]) == null ? void 0 : _a.name;
          emit("update:modelValue", organizationList.value[0]);
        }
        loading.value = false;
      }
      const organizationTree = (0, import_vue11.computed)(() => {
        for (const org of organizationList.value) {
          org.permissions = props.permissions;
        }
        return list2Tree((0, import_vue11.toRaw)(organizationList.value), "parent_organization");
      });
      function handleNodeClick(data) {
        emit("update:modelValue", data);
      }
      function createOrganization() {
        const newDoc = frappe.model.make_new_doc_and_get_name("Tianjy Organization");
        frappe.set_route(["form", "Tianjy Organization", newDoc]);
      }
      async function handleDrop(draggingNode, dropNode, dropType, ev) {
        const before2 = dropType === "inner" ? false : dropType === "before";
        const children = dropType === "inner";
        loading.value = true;
        await frappe.call("guigu.tree.tree_sort", {
          doctype: "Tianjy Organization",
          target: dropNode.data.name,
          docs: [draggingNode.data.name],
          before: before2,
          children
        });
        getOrganizations();
      }
      function allowDrop(draggingNode, dropNode, dropType) {
        switch (dropType) {
          case "next":
          case "prev":
            return before(draggingNode, dropNode);
          case "inner":
            return inner(draggingNode, dropNode);
          default:
            return true;
        }
      }
      function inner(draggingNode, dropNode) {
        if (!dropNode.data.child_type_list.some((type) => type.name === draggingNode.data.type)) {
          return false;
        }
        return true;
      }
      function before(draggingNode, dropNode) {
        if (dropNode.parent.level === 0 && draggingNode.data.type_doc.root_only !== 1) {
          console.log(dropNode.parent.level, draggingNode.data.type_doc.root_only, "false");
          return false;
        }
        if (dropNode.parent.level !== 0 && !dropNode.parent.data.child_type_list.some((type) => type.name === draggingNode.data.type)) {
          console.log(dropNode.parent.level, "false");
          return false;
        }
        return true;
      }
      frappe.socketio.doctype_subscribe("Tianjy Organization");
      frappe.realtime.on("list_update", (p) => {
        if (p.doctype !== "Tianjy Organization") {
          return;
        }
        getOrganizations();
      });
      const __returned__ = { props, emit, organizationList, currentNodeKey, loading, getOrganizations, organizationTree, handleNodeClick, createOrganization, handleDrop, allowDrop, inner, before, TreeItem: TreeItem_default3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=style&index=0
  var OrganizationTree_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue?type=template
  var import_vue12 = __require("vue");
  var _hoisted_14 = { class: "sider-container" };
  var _hoisted_24 = { class: "btn-container" };
  var _hoisted_34 = { class: "tree-container" };
  function render4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_button = (0, import_vue12.resolveComponent)("el-button");
    const _component_el_tree = (0, import_vue12.resolveComponent)("el-tree");
    const _directive_loading = (0, import_vue12.resolveDirective)("loading");
    return (0, import_vue12.withDirectives)(((0, import_vue12.openBlock)(), (0, import_vue12.createElementBlock)("div", _hoisted_14, [
      (0, import_vue12.createElementVNode)("div", _hoisted_24, [
        $props.permissions.createPermission ? ((0, import_vue12.openBlock)(), (0, import_vue12.createBlock)(_component_el_button, {
          key: 0,
          type: "primary",
          onClick: $setup.createOrganization
        }, {
          default: (0, import_vue12.withCtx)(() => [
            (0, import_vue12.createTextVNode)("\u65B0\u5EFA\u7EC4\u7EC7")
          ]),
          _: 1
        })) : (0, import_vue12.createCommentVNode)("v-if", true)
      ]),
      (0, import_vue12.createElementVNode)("div", _hoisted_34, [
        $setup.organizationTree.length > 0 ? ((0, import_vue12.openBlock)(), (0, import_vue12.createBlock)(_component_el_tree, {
          key: 0,
          data: $setup.organizationTree,
          onNodeClick: $setup.handleNodeClick,
          defaultExpandAll: "",
          highlightCurrent: "",
          nodeKey: "name",
          currentNodeKey: $setup.currentNodeKey,
          expandOnClickNode: false,
          draggable: "",
          onNodeDrop: $setup.handleDrop,
          allowDrop: $setup.allowDrop
        }, {
          default: (0, import_vue12.withCtx)(({ node, data }) => [
            (0, import_vue12.createVNode)($setup["TreeItem"], {
              node,
              onReload: $setup.getOrganizations
            }, null, 8, ["node"])
          ]),
          _: 1
        }, 8, ["data", "currentNodeKey"])) : (0, import_vue12.createCommentVNode)("v-if", true)
      ])
    ])), [
      [_directive_loading, $setup.loading]
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue
  OrganizationTree_default2(OrganizationTree_default);
  OrganizationTree_default.render = render4;
  OrganizationTree_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/OrganizationTree.vue";
  OrganizationTree_default.__scopeId = "data-v-7ff9d4db";
  var OrganizationTree_default3 = OrganizationTree_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=script
  var import_vue23 = __require("vue");
  var import_vue24 = __require("vue");

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/index.vue?type=script
  var import_vue20 = __require("vue");
  var import_vue21 = __require("vue");

  // guigu/public/js/utils/getLink.ts
  function getLink(data, meta, linkField) {
    if (!data) {
      return;
    }
    if (!meta) {
      return;
    }
    if (!linkField) {
      return;
    }
    const { fields } = meta;
    if (!fields) {
      return;
    }
    const link = data[linkField];
    const name = typeof link === "string" && link;
    if (!name) {
      return;
    }
    const field = fields.find((v) => v.fieldname === linkField);
    if (!field) {
      return;
    }
    const option = field.options;
    if (!option) {
      return;
    }
    if (field.fieldtype === "Link") {
      return [option, name];
    }
    if (field.fieldtype !== "Dynamic Link") {
      return;
    }
    const dynamicLinkField = fields.find((v) => v.fieldname === option);
    if (!dynamicLinkField) {
      return;
    }
    if (dynamicLinkField.fieldtype !== "Link") {
      return;
    }
    if (dynamicLinkField.options !== "DocType") {
      return;
    }
    const doctype = data[option];
    if (typeof doctype !== "string" || !doctype) {
      return;
    }
    return [doctype, name];
  }

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Main.vue?type=script
  var import_vue17 = __require("vue");
  var import_vue18 = __require("vue");
  var import_core = __require("@vueuse/core");

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Header.vue?type=script
  var import_vue13 = __require("vue");
  var import_vue14 = __require("vue");
  var Header_default = /* @__PURE__ */ (0, import_vue13.defineComponent)({
    __name: "Header",
    props: {
      hasSider: { type: Boolean, required: false },
      open: { type: Boolean, required: false },
      isHideClose: { type: Boolean, required: false }
    },
    emits: ["hide", "refresh", "update:open"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      function hide() {
        emit("hide");
      }
      const opened = (0, import_vue14.computed)({
        get: () => props.open,
        set(v) {
          emit("update:open", Boolean(v));
        }
      });
      const tt2 = __;
      const __returned__ = { props, emit, hide, opened, tt: tt2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Header.vue?type=style&index=0
  var key = "$style";
  var cssModule = { "header": "_header_pve6u_1" };
  var Header_default2 = (script) => {
    if (!script.__cssModules) {
      script.__cssModules = {};
    }
    const cssModules = script.__cssModules;
    const value = key in cssModules && cssModules[key];
    if (value && typeof value === "object") {
      Object.assign(value, cssModule);
    } else {
      cssModules[key] = cssModule;
    }
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Header.vue?type=template
  var import_vue15 = __require("vue");
  var _hoisted_15 = { class: "col-md-4 col-sm-6 col-xs-8 page-title" };
  var _hoisted_25 = ["title"];
  var _hoisted_35 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("svg", { class: "icon icon-md sidebar-toggle-placeholder" }, [
    /* @__PURE__ */ (0, import_vue15.createElementVNode)("use", { href: "#icon-menu" })
  ], -1);
  var _hoisted_44 = { class: "icon icon-md" };
  var _hoisted_52 = {
    key: 0,
    href: "#icon-sidebar-expand"
  };
  var _hoisted_62 = {
    key: 1,
    href: "#icon-sidebar-collapse"
  };
  var _hoisted_7 = /* @__PURE__ */ (0, import_vue15.createStaticVNode)('<div class="flex fill-width title-area"><div><div class="flex"><h3 class="ellipsis title-text"></h3><span class="indicator-pill whitespace-nowrap"></span></div><div class="ellipsis sub-heading hide text-muted"></div></div><button class="btn btn-default more-button hide"><svg class="icon icon-sm"><use href="#icon-dot-horizontal"></use></svg></button></div>', 1);
  var _hoisted_8 = { class: "flex col page-actions justify-content-end" };
  var _hoisted_9 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("div", { class: "custom-actions hide hidden-xs hidden-md" }, null, -1);
  var _hoisted_10 = { class: "standard-actions flex" };
  var _hoisted_11 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("span", { class: "page-icon-group hide hidden-xs hidden-sm" }, null, -1);
  var _hoisted_122 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("div", { class: "menu-btn-group hide" }, [
    /* @__PURE__ */ (0, import_vue15.createElementVNode)("button", {
      type: "button",
      class: "btn btn-default icon-btn",
      "data-toggle": "dropdown",
      "aria-expanded": "false"
    }, [
      /* @__PURE__ */ (0, import_vue15.createElementVNode)("span", null, [
        /* @__PURE__ */ (0, import_vue15.createElementVNode)("span", { class: "menu-btn-group-label" }, [
          /* @__PURE__ */ (0, import_vue15.createElementVNode)("svg", { class: "icon icon-sm" }, [
            /* @__PURE__ */ (0, import_vue15.createElementVNode)("use", { href: "#icon-dot-horizontal" })
          ])
        ])
      ])
    ]),
    /* @__PURE__ */ (0, import_vue15.createElementVNode)("ul", {
      class: "dropdown-menu dropdown-menu-right",
      role: "menu"
    })
  ], -1);
  var _hoisted_132 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("button", { class: "btn btn-secondary btn-default btn-sm hide" }, null, -1);
  var _hoisted_142 = { class: "actions-btn-group hide" };
  var _hoisted_152 = {
    type: "button",
    class: "btn btn-primary btn-sm",
    "data-toggle": "dropdown",
    "aria-expanded": "false"
  };
  var _hoisted_16 = { class: "actions-btn-group-label" };
  var _hoisted_17 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("svg", { class: "icon icon-xs" }, [
    /* @__PURE__ */ (0, import_vue15.createElementVNode)("use", { href: "#icon-select" })
  ], -1);
  var _hoisted_18 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("ul", {
    class: "dropdown-menu dropdown-menu-right",
    role: "menu"
  }, null, -1);
  var _hoisted_19 = /* @__PURE__ */ (0, import_vue15.createElementVNode)("button", { class: "btn btn-primary btn-sm hide primary-action" }, null, -1);
  function render5(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("div", {
      class: (0, import_vue15.normalizeClass)(_ctx.$style.header)
    }, [
      (0, import_vue15.createElementVNode)("div", _hoisted_15, [
        (0, import_vue15.createCommentVNode)(' <div class="title-image hide hidden-md hidden-lg"></div> '),
        (0, import_vue15.createCommentVNode)(" title "),
        $props.hasSider ? ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("span", {
          key: 0,
          class: "sidebar-toggle-btn",
          title: $setup.tt("Toggle Sidebar")
        }, [
          _hoisted_35,
          (0, import_vue15.createElementVNode)("span", {
            class: "sidebar-toggle-icon",
            onClick: _cache[0] || (_cache[0] = ($event) => $setup.opened = !$setup.opened)
          }, [
            ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("svg", _hoisted_44, [
              $props.open ? ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("use", _hoisted_52)) : ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("use", _hoisted_62))
            ]))
          ])
        ], 8, _hoisted_25)) : (0, import_vue15.createCommentVNode)("v-if", true),
        _hoisted_7
      ]),
      (0, import_vue15.createElementVNode)("div", _hoisted_8, [
        (0, import_vue15.createCommentVNode)(" buttons "),
        _hoisted_9,
        (0, import_vue15.createElementVNode)("div", _hoisted_10, [
          _hoisted_11,
          _hoisted_122,
          _hoisted_132,
          (0, import_vue15.createElementVNode)("div", _hoisted_142, [
            (0, import_vue15.createElementVNode)("button", _hoisted_152, [
              (0, import_vue15.createElementVNode)("span", null, [
                (0, import_vue15.createElementVNode)("span", _hoisted_16, (0, import_vue15.toDisplayString)($setup.tt("Actions")), 1),
                _hoisted_17
              ])
            ]),
            _hoisted_18
          ]),
          _hoisted_19,
          !$props.isHideClose ? ((0, import_vue15.openBlock)(), (0, import_vue15.createElementBlock)("button", {
            key: 0,
            class: "btn btn-sm",
            onClick: $setup.hide
          }, (0, import_vue15.toDisplayString)($setup.tt("Close")), 1)) : (0, import_vue15.createCommentVNode)("v-if", true)
        ])
      ])
    ], 2);
  }

  // guigu/public/js/FormDetail/Header.vue
  Header_default2(Header_default);
  Header_default.render = render5;
  Header_default.__file = "guigu/public/js/FormDetail/Header.vue";
  var Header_default3 = Header_default;

  // guigu/public/js/FormDetail/Footer.ts
  var Footer = class {
    constructor(opts) {
      $.extend(this, opts);
      this.make();
      this.make_comment_box();
      this.make_timeline();
      $(this.frm.wrapper).on("render_complete", () => {
        this.refresh();
      });
    }
    make() {
      const wrapper = $(`<div class="form-footer">
	<div class="after-save">
		<div class="comment-box"></div>
		<div class="timeline"></div>
	</div>
</div>`).appendTo(this.parent);
      const toTop = document.createElement("button");
      toTop.className = "scroll-to-top btn btn-default icon-btn";
      toTop.innerHTML = '<svg class="icon icon-xs"><use href="#icon-up-line"></use></svg>';
      toTop.addEventListener("click", () => {
        let e = toTop;
        while (e = e.parentElement) {
          if (e.scrollTop) {
            break;
          }
        }
        if (e) {
          frappe.utils.scroll_to(0, true, 0, $(e));
        }
      });
      wrapper.append(toTop);
      this.wrapper = wrapper;
      wrapper.find(".btn-save").on("click", () => {
        this.frm.save("Save", null, this);
      });
    }
    make_comment_box() {
      frappe.ui.form.Footer.prototype.make_comment_box.call(this);
    }
    make_timeline() {
      frappe.ui.form.Footer.prototype.make_timeline.call(this);
    }
    refresh() {
      frappe.ui.form.Footer.prototype.refresh.call(this);
    }
  };
  var Footer_default = Footer;

  // guigu/public/js/FormDetail/Page.ts
  var Page = class {
    constructor(parent, single_column) {
      this.set_document_title = true;
      this.buttons = {};
      this.fields_dict = {};
      this.views = {};
      this.parent = parent;
      this.single_column = single_column ? true : false;
      this.wrapper = $(parent);
      const mainView = $(this.wrapper).find(".page-content").find(".row.layout-main");
      this.views.main = mainView;
      this.current_view = mainView;
      this.setup_page();
      this.setup_scroll_handler();
      this.setup_sidebar_toggle();
    }
    setup_scroll_handler() {
    }
    get_empty_state(title, message, primary_action) {
      let $empty_state = $(`<div class="page-card-container">
			<div class="page-card">
				<div class="page-card-head">
					<span class="indicator blue">
						${title}</span>
				</div>
				<p>${message}</p>
				<div>
					<button class="btn btn-primary btn-sm">${primary_action}</button>
				</div>
			</div>
		</div>`);
      return $empty_state;
    }
    load_lib(callback) {
      frappe.require(this.required_libs, callback);
    }
    add_main_section() {
    }
    setup_page() {
      this.$title_area = this.wrapper.find(".title-area");
      this.$sub_title_area = this.wrapper.find("h6");
      this.body = this.main = this.wrapper.find(".layout-main-section");
      this.container = this.wrapper.find(".page-body");
      this.sidebar = this.wrapper.find(".layout-side-section");
      this.footer = this.wrapper.find(".layout-footer");
      this.indicator = this.wrapper.find(".indicator-pill");
      this.page_actions = this.wrapper.find(".page-actions");
      this.btn_primary = this.page_actions.find(".primary-action");
      this.btn_secondary = this.page_actions.find(".btn-secondary");
      this.menu = this.page_actions.find(".menu-btn-group .dropdown-menu");
      this.menu_btn_group = this.page_actions.find(".menu-btn-group");
      this.actions = this.page_actions.find(".actions-btn-group .dropdown-menu");
      this.actions_btn_group = this.page_actions.find(".actions-btn-group");
      this.standard_actions = this.page_actions.find(".standard-actions");
      this.custom_actions = this.page_actions.find(".custom-actions");
      this.page_form = $('<div class="page-form row hide"></div>').prependTo(this.main);
      this.inner_toolbar = this.custom_actions;
      this.icon_group = this.page_actions.find(".page-icon-group");
      this.card_layout && this.main.addClass("frappe-card");
      let menu_btn = this.menu_btn_group.find("button");
      menu_btn.attr("title", __("Menu")).tooltip({ delay: { show: 600, hide: 100 } });
      frappe.ui.keys.get_shortcut_group(this.page_actions[0]).add(menu_btn, menu_btn.find(".menu-btn-group-label"));
      let action_btn = this.actions_btn_group.find("button");
      frappe.ui.keys.get_shortcut_group(this.page_actions[0]).add(action_btn, action_btn.find(".actions-btn-group-label"));
    }
    setup_sidebar_toggle() {
      let sidebar_toggle = this.wrapper.find(".guigu-form-detail-page-head ").find(".sidebar-toggle-btn");
      let sidebar_wrapper = this.wrapper.find(".layout-side-section");
      sidebar_toggle.click(() => {
        $(document.body).trigger("toggleSidebar");
        this.update_sidebar_icon();
      });
    }
    setup_overlay_sidebar() {
    }
    update_sidebar_icon() {
      let sidebar_toggle = $(".page-head").find(".sidebar-toggle-btn");
      let sidebar_toggle_icon = sidebar_toggle.find(".sidebar-toggle-icon");
      let sidebar_wrapper = this.wrapper.find(".layout-side-section");
      let is_sidebar_visible = $(sidebar_wrapper).is(":visible");
      sidebar_toggle_icon.html(
        frappe.utils.icon(is_sidebar_visible ? "sidebar-collapse" : "sidebar-expand", "md")
      );
    }
    set_indicator(label, color) {
      this.clear_indicator().removeClass("hide").html(`<span>${label}</span>`).addClass(color);
    }
    add_action_icon(icon, click, css_class = "", tooltip_label) {
      const button = $(`
			<button class="text-muted btn btn-default ${css_class} icon-btn">
				${frappe.utils.icon(icon)}
			</button>
		`);
      button.appendTo(this.icon_group.removeClass("hide"));
      button.click(click);
      button.attr("title", __(tooltip_label || frappe.unscrub(icon))).tooltip({ delay: { show: 600, hide: 100 }, trigger: "hover" });
      return button;
    }
    clear_indicator() {
      return this.indicator.removeClass().addClass("indicator-pill whitespace-nowrap hide");
    }
    get_icon_label(icon, label) {
      let icon_name = icon;
      let size = "xs";
      if (typeof icon === "object") {
        icon_name = icon.icon;
        size = icon.size || "xs";
      }
      return `${icon ? frappe.utils.icon(icon_name, size) : ""} <span class="hidden-xs"> ${__(
        label
      )} </span>`;
    }
    set_action(btn, opts) {
      let me2 = this;
      if (opts.icon) {
        opts.label = this.get_icon_label(opts.icon, opts.label);
      }
      this.clear_action_of(btn);
      btn.removeClass("hide").prop("disabled", false).html(opts.label).on("click", function() {
        let response = opts.click.apply(this, [btn]);
        me2.btn_disable_enable(btn, response);
      });
      if (opts.working_label) {
        btn.attr("data-working-label", opts.working_label);
      }
      let text_span = btn.find("span");
      frappe.ui.keys.get_shortcut_group(this).add(btn, text_span.length ? text_span : btn);
    }
    set_primary_action(label, click, icon, working_label) {
      this.set_action(this.btn_primary, {
        label,
        click,
        icon,
        working_label
      });
      return this.btn_primary;
    }
    set_secondary_action(label, click, icon, working_label) {
      this.set_action(this.btn_secondary, {
        label,
        click,
        icon,
        working_label
      });
      return this.btn_secondary;
    }
    clear_action_of(btn) {
      btn.addClass("hide").unbind("click").removeAttr("data-working-label");
    }
    clear_primary_action() {
      this.clear_action_of(this.btn_primary);
    }
    clear_secondary_action() {
      this.clear_action_of(this.btn_secondary);
    }
    clear_actions() {
      this.clear_primary_action();
      this.clear_secondary_action();
    }
    clear_custom_actions() {
      this.custom_actions.addClass("hide").empty();
    }
    clear_icons() {
      this.icon_group.addClass("hide").empty();
    }
    add_menu_item(label, click, standard, shortcut, show_parent) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent: this.menu,
        shortcut,
        show_parent
      });
    }
    add_custom_menu_item(parent, label, click, standard, shortcut, icon = null) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent,
        shortcut,
        icon
      });
    }
    clear_menu() {
      this.clear_btn_group(this.menu);
    }
    show_menu() {
      this.menu_btn_group.removeClass("hide");
    }
    hide_menu() {
      this.menu_btn_group.addClass("hide");
    }
    show_icon_group() {
      this.icon_group.removeClass("hide");
    }
    hide_icon_group() {
      this.icon_group.addClass("hide");
    }
    show_actions_menu() {
      this.actions_btn_group.removeClass("hide");
    }
    hide_actions_menu() {
      this.actions_btn_group.addClass("hide");
    }
    add_action_item(label, click, standard) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent: this.actions
      });
    }
    add_actions_menu_item(label, click, standard, shortcut) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        shortcut,
        parent: this.actions,
        show_parent: false
      });
    }
    clear_actions_menu() {
      this.clear_btn_group(this.actions);
    }
    add_dropdown_item({
      label,
      click,
      standard,
      parent,
      shortcut,
      show_parent = true,
      icon = null
    }) {
      if (show_parent) {
        parent.parent().removeClass("hide hidden-xl");
      }
      let $link = this.is_in_group_button_dropdown(parent, "li > a.grey-link > span", label);
      if ($link) {
        return $link;
      }
      let $li;
      let $icon = ``;
      if (icon) {
        $icon = `<span class="menu-item-icon">${frappe.utils.icon(icon)}</span>`;
      }
      if (shortcut) {
        let shortcut_obj = this.prepare_shortcut_obj(shortcut, click, label);
        $li = $(`
				<li>
					<a class="grey-link dropdown-item" href="#" onClick="return false;">
						${$icon}
						<span class="menu-item-label">${label}</span>
						<kbd class="pull-right">
							<span>${shortcut_obj.shortcut_label}</span>
						</kbd>
					</a>
				</li>
			`);
        frappe.ui.keys.add_shortcut(shortcut_obj);
      } else {
        $li = $(`
				<li>
					<a class="grey-link dropdown-item" href="#" onClick="return false;">
						${$icon}
						<span class="menu-item-label">${label}</span>
					</a>
				</li>
			`);
      }
      $link = $li.find("a").on("click", (e) => {
        if (e.ctrlKey || e.metaKey) {
          frappe.open_in_new_tab = true;
        }
        return click();
      });
      if (standard) {
        $li.appendTo(parent);
      } else {
        this.divider = parent.find(".dropdown-divider");
        if (!this.divider.length) {
          this.divider = $('<li class="dropdown-divider user-action"></li>').prependTo(
            parent
          );
        }
        $li.addClass("user-action").insertBefore(this.divider);
      }
      frappe.ui.keys.get_shortcut_group(parent.get(0)).add($link, $link.find(".menu-item-label"));
      return $link;
    }
    prepare_shortcut_obj(shortcut, click, label) {
      let shortcut_obj;
      if (typeof shortcut === "string") {
        shortcut_obj = { shortcut };
      } else {
        shortcut_obj = shortcut;
      }
      if (frappe.utils.is_mac()) {
        shortcut_obj.shortcut_label = shortcut_obj.shortcut.replace("Ctrl", "\u2318");
      } else {
        shortcut_obj.shortcut_label = shortcut_obj.shortcut;
      }
      shortcut_obj.shortcut = shortcut_obj.shortcut.toLowerCase();
      if (!shortcut_obj.action) {
        shortcut_obj.action = click;
      }
      if (!shortcut_obj.description) {
        shortcut_obj.description = label;
      }
      shortcut_obj.page = this;
      return shortcut_obj;
    }
    is_in_group_button_dropdown(parent, selector, label) {
      if (!selector) {
        selector = "li";
      }
      if (!label || !parent) {
        return false;
      }
      const item_selector = `${selector}[data-label="${encodeURIComponent(label)}"]`;
      const existing_items = $(parent).find(item_selector);
      return (existing_items == null ? void 0 : existing_items.length) > 0 && existing_items;
    }
    clear_btn_group(parent) {
      parent.empty();
      parent.parent().addClass("hide");
    }
    add_divider() {
      return $('<li class="dropdown-divider"></li>').appendTo(this.menu);
    }
    get_or_add_inner_group_button(label) {
      let $group = this.inner_toolbar.find(
        `.inner-group-button[data-label="${encodeURIComponent(label)}"]`
      );
      if (!$group.length) {
        $group = $(
          `<div class="inner-group-button" data-label="${encodeURIComponent(label)}">
					<button type="button" class="btn btn-default ellipsis" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
						${label}
						${frappe.utils.icon("select", "xs")}
					</button>
					<div role="menu" class="dropdown-menu"></div>
				</div>`
        ).appendTo(this.inner_toolbar);
      }
      return $group;
    }
    get_inner_group_button(label) {
      return this.inner_toolbar.find(
        `.inner-group-button[data-label="${encodeURIComponent(label)}"]`
      );
    }
    set_inner_btn_group_as_primary(label) {
      this.get_or_add_inner_group_button(label).find("button").removeClass("btn-default").addClass("btn-primary");
    }
    btn_disable_enable(btn, response) {
      if (response && response.then) {
        btn.prop("disabled", true);
        response.then(() => {
          btn.prop("disabled", false);
        });
      } else if (response && response.always) {
        btn.prop("disabled", true);
        response.always(() => {
          btn.prop("disabled", false);
        });
      }
    }
    add_inner_button(label, action, group, type = "default") {
      let me2 = this;
      let _action = function() {
        let btn = $(this);
        let response = action();
        me2.btn_disable_enable(btn, response);
      };
      let menu_item_label = group ? `${group} > ${label}` : label;
      let menu_item = this.add_menu_item(menu_item_label, _action, false, false, false);
      menu_item.parent().addClass("hidden-xl");
      if (this.menu_btn_group.hasClass("hide")) {
        this.menu_btn_group.removeClass("hide").addClass("hidden-xl");
      }
      if (group) {
        let $group = this.get_or_add_inner_group_button(group);
        $(this.inner_toolbar).removeClass("hide");
        if (!this.is_in_group_button_dropdown($group.find(".dropdown-menu"), "a", label)) {
          return $(
            `<a class="dropdown-item" href="#" onclick="return false;" data-label="${encodeURIComponent(
              label
            )}">${label}</a>`
          ).on("click", _action).appendTo($group.find(".dropdown-menu"));
        }
      } else {
        let button = this.inner_toolbar.find(
          `button[data-label="${encodeURIComponent(label)}"]`
        );
        if (button.length == 0) {
          button = $(`<button data-label="${encodeURIComponent(
            label
          )}" class="btn btn-${type} ellipsis">
					${__(label)}
				</button>`);
          button.on("click", _action);
          button.appendTo(this.inner_toolbar.removeClass("hide"));
        }
        return button;
      }
    }
    remove_inner_button(label, group) {
      if (typeof label === "string") {
        label = [label];
      }
      label = label.map((l) => __(l));
      if (group) {
        let $group = this.get_inner_group_button(__(group));
        if ($group.length) {
          $group.find(`.dropdown-item[data-label="${encodeURIComponent(label)}"]`).remove();
        }
        if ($group.find(".dropdown-item").length === 0) {
          $group.remove();
        }
      } else {
        this.inner_toolbar.find(`button[data-label="${encodeURIComponent(label)}"]`).remove();
      }
    }
    change_inner_button_type(label, group, type) {
      let btn;
      if (group) {
        let $group = this.get_inner_group_button(__(group));
        if ($group.length) {
          btn = $group.find(`.dropdown-item[data-label="${encodeURIComponent(label)}"]`);
        }
      } else {
        btn = this.inner_toolbar.find(`button[data-label="${encodeURIComponent(label)}"]`);
      }
      if (btn) {
        btn.removeClass().addClass(`btn btn-${type} ellipsis`);
      }
    }
    add_inner_message(message) {
      let $message = $(`<span class='inner-page-message text-muted small'>${message}</div>`);
      this.inner_toolbar.find(".inner-page-message").remove();
      this.inner_toolbar.removeClass("hide").prepend($message);
      return $message;
    }
    clear_inner_toolbar() {
      this.inner_toolbar.empty().addClass("hide");
    }
    add_sidebar_item(label, action, insert_after, prepend) {
      let parent = this.sidebar.find(".sidebar-menu.standard-actions");
      let li2 = $("<li>");
      let link = $("<a>").html(label).on("click", action).appendTo(li2);
      if (insert_after) {
        li2.insertAfter(parent.find(insert_after));
      } else if (prepend) {
        li2.prependTo(parent);
      } else {
        li2.appendTo(parent);
      }
      return link;
    }
    clear_user_actions() {
      this.menu.find(".user-action").remove();
    }
    get_title_area() {
      return this.$title_area;
    }
    set_title(title, icon = null, strip = true, tab_title = "") {
      if (!title) {
        title = "";
      }
      if (strip) {
        title = strip_html(title);
      }
      this.title = title;
      if (icon) {
        title = `${frappe.utils.icon(icon)} ${title}`;
      }
      let title_wrapper = this.$title_area.find(".title-text");
      title_wrapper.html(title);
      title_wrapper.attr("title", this.title);
    }
    set_title_sub(txt) {
      this.$sub_title_area.html(txt).toggleClass("hide", Boolean(!txt));
    }
    get_main_icon(icon) {
      return this.$title_area.find(".title-icon").html(`<i class="${icon} fa-fw"></i> `).toggle(true);
    }
    add_help_button(txt) {
    }
    add_button(label, click, opts) {
      if (!opts) {
        opts = {};
      }
      let button = $(`<button
			class="btn ${opts.btn_class || "btn-default"} ${opts.btn_size || "btn-sm"} ellipsis">
				${opts.icon ? frappe.utils.icon(opts.icon) : ""}
				${label}
		</button>`);
      let menu_item = this.add_menu_item(label, click, false);
      menu_item.parent().addClass("hidden-xl");
      button.appendTo(this.custom_actions);
      button.on("click", click);
      this.custom_actions.removeClass("hide");
      return button;
    }
    add_custom_button_group(label, icon, parent) {
      let dropdown_label = `<span class="hidden-xs">
			<span class="custom-btn-group-label">${__(label)}</span>
			${frappe.utils.icon("select", "xs")}
		</span>`;
      if (icon) {
        dropdown_label = `<span class="hidden-xs">
				${frappe.utils.icon(icon)}
				<span class="custom-btn-group-label">${__(label)}</span>
				${frappe.utils.icon("select", "xs")}
			</span>
			<span class="visible-xs">
				${frappe.utils.icon(icon)}
			</span>`;
      }
      let custom_btn_group = $(`
			<div class="custom-btn-group">
				<button type="button" class="btn btn-default btn-sm ellipsis" data-toggle="dropdown" aria-expanded="false">
					${dropdown_label}
				</button>
				<ul class="dropdown-menu" role="menu"></ul>
			</div>
		`);
      if (!parent) {
        parent = this.custom_actions;
      }
      parent.removeClass("hide").append(custom_btn_group);
      return custom_btn_group.find(".dropdown-menu");
    }
    add_dropdown_button(parent, label, click, icon) {
      frappe.ui.toolbar.add_dropdown_button(parent, label, click, icon);
    }
    add_label(label) {
      this.show_form();
      return $(`<label class='col-md-1 page-only-label'>${label} </label>`).appendTo(
        this.page_form
      );
    }
    add_select(label, options) {
      let field = this.add_field({ label, fieldtype: "Select" });
      return field.$wrapper.find("select").empty().add_options(options);
    }
    add_data(label) {
      let field = this.add_field({ label, fieldtype: "Data" });
      return field.$wrapper.find("input").attr("placeholder", label);
    }
    add_date(label, date) {
      let field = this.add_field({ label, fieldtype: "Date", default: date });
      return field.$wrapper.find("input").attr("placeholder", label);
    }
    add_check(label) {
      return $(`<div class='checkbox'><label><input type='checkbox'>${label}</label></div>`).appendTo(this.page_form).find("input");
    }
    add_break() {
      this.page_form.append('<div class="clearfix invisible-xs"></div>');
    }
    add_field(df, parent) {
      this.show_form();
      if (!df.placeholder) {
        df.placeholder = df.label;
      }
      df.input_class = "input-xs";
      let f = frappe.ui.form.make_control({
        df,
        parent: parent || this.page_form,
        only_input: df.fieldtype == "Check" ? false : true
      });
      f.refresh();
      $(f.wrapper).addClass("col-md-2").attr("title", __(df.label)).tooltip({
        delay: { show: 600, hide: 100 },
        trigger: "hover"
      });
      if (df.fieldtype == "HTML") {
        return;
      }
      if (!f.$input) {
        f.make_input();
      }
      f.$input.attr("placeholder", __(df.label));
      if (df.fieldtype === "Check") {
        $(f.wrapper).find(":first-child").removeClass("col-md-offset-4 col-md-8");
      }
      if (df.fieldtype == "Button") {
        $(f.wrapper).find(".page-control-label").html("&nbsp;");
        f.$input.addClass("btn-xs").css({ width: "100%", "margin-top": "-1px" });
      }
      if (df.default) {
        f.set_input(df.default);
      }
      this.fields_dict[df.fieldname || df.label] = f;
      return f;
    }
    clear_fields() {
      this.page_form.empty();
    }
    show_form() {
      this.page_form.removeClass("hide");
    }
    hide_form() {
      this.page_form.addClass("hide");
    }
    get_form_values() {
      let values = {};
      for (let fieldname in this.fields_dict) {
        let field = this.fields_dict[fieldname];
        values[fieldname] = field.get_value();
      }
      return values;
    }
    add_view(name, html) {
      let element = html;
      if (typeof html === "string") {
        element = $(html);
      }
      this.views[name] = element.appendTo($(this.wrapper).find(".page-content"));
      if (this.current_view) {
        this.views[name].toggle(false);
      } else {
        this.current_view = this.views[name];
      }
      return this.views[name];
    }
    set_view(name) {
      var _a;
      if (this.current_view_name === name) {
        return;
      }
      (_a = this.current_view) == null ? void 0 : _a.toggle(false);
      this.current_view = this.views[name];
      this.previous_view_name = this.current_view_name;
      this.current_view_name = name;
      this.views[name].toggle(true);
      this.wrapper.trigger("view-change");
    }
  };
  var Page_default = Page;

  // guigu/public/js/FormDetail/Toolbar.ts
  var Toolbar = class {
    constructor(frm, page) {
      this.frm = frm;
      this.page = page;
      this.refresh();
      this.add_update_button_on_dirty();
      this.setup_editable_title();
    }
    refresh() {
      this.make_menu();
      this.make_viewers();
      this.set_title();
      this.page.clear_user_actions();
      this.show_title_as_dirty();
      this.set_primary_action();
      if (this.frm.meta.hide_toolbar) {
        this.page.hide_menu();
      } else if (this.frm.doc.__islocal) {
        this.page.hide_menu();
        this.print_icon && this.print_icon.addClass("hide");
      } else {
        this.page.show_menu();
        this.print_icon && this.print_icon.removeClass("hide");
      }
    }
    set_title() {
      if (this.frm.is_new()) {
        var title = __("New {0}", [__(this.frm.meta.name)]);
      } else if (this.frm.meta.title_field) {
        let title_field = (this.frm.doc[this.frm.meta.title_field] || "").toString().trim();
        var title = strip_html(title_field || this.frm.docname);
        if (this.frm.doc.__islocal || title === this.frm.docname || this.frm.meta.autoname === "hash") {
          this.page.set_title_sub("");
        } else {
          this.page.set_title_sub(this.frm.docname);
          this.page.$sub_title_area.css("cursor", "copy");
          this.page.$sub_title_area.on("click", (event) => {
            event.stopImmediatePropagation();
            frappe.utils.copy_to_clipboard(this.frm.docname);
          });
        }
      } else {
        var title = this.frm.docname;
      }
      let me2 = this;
      title = __(title);
      this.page.set_title(title);
      if (this.frm.meta.title_field) {
        frappe.utils.set_title(`${title} - ${this.frm.docname}`);
      }
      this.page.$title_area.toggleClass(
        "editable-title",
        Boolean(this.is_title_editable() || this.can_rename())
      );
      this.set_indicator();
    }
    is_title_editable() {
      let { title_field } = this.frm.meta;
      let doc_field = this.frm.get_docfield(title_field);
      if (title_field && this.frm.perm[0].write && !this.frm.doc.__islocal && doc_field.fieldtype === "Data" && !doc_field.read_only) {
        return true;
      }
      return false;
    }
    can_rename() {
      return false;
    }
    show_unchanged_document_alert() {
      frappe.show_alert({
        indicator: "info",
        message: __("Unchanged")
      });
    }
    rename_document_title(input_name, input_title, merge = false) {
      let confirm_message = null;
      const docname = this.frm.doc.name;
      const title_field = this.frm.meta.title_field || "";
      const { doctype } = this.frm;
      let queue;
      if (this.frm.__rename_queue) {
        queue = this.frm.__rename_queue;
      }
      if (input_name) {
        const warning = __("This cannot be undone");
        const message = __("Are you sure you want to merge {0} with {1}?", [
          docname.bold(),
          input_name.bold()
        ]);
        confirm_message = `${message}<br><b>${warning}<b>`;
      }
      let rename_document = () => frappe.xcall("frappe.model.rename_doc.update_document_title", {
        doctype,
        docname,
        name: input_name,
        title: input_title,
        enqueue: true,
        merge,
        freeze: true,
        freeze_message: __("Updating related fields..."),
        queue
      }).then((new_docname) => {
        const reload_form = (input_name2) => {
          $(document).trigger("rename", [doctype, docname, input_name2]);
          if (locals[doctype] && locals[doctype][docname]) {
            delete locals[doctype][docname];
          }
          this.frm.reload_doc();
        };
        if (input_name && new_docname == docname) {
          frappe.socketio.doc_subscribe(doctype, input_name);
          frappe.realtime.on("doc_update", (data) => {
            if (data.doctype == doctype && data.name == input_name) {
              reload_form(input_name);
              frappe.show_alert({
                message: __("Document renamed from {0} to {1}", [
                  docname.bold(),
                  input_name.bold()
                ]),
                indicator: "success"
              });
            }
          });
          frappe.show_alert(
            __("Document renaming from {0} to {1} has been queued", [
              docname.bold(),
              input_name.bold()
            ])
          );
        }
        if (input_name && (new_docname || input_name) != docname) {
          reload_form(new_docname || input_name);
        }
      });
      return new Promise((resolve, reject) => {
        if (input_title === this.frm.doc[title_field] && input_name === docname) {
          this.show_unchanged_document_alert();
          resolve();
        } else if (merge) {
          frappe.confirm(
            confirm_message,
            () => {
              rename_document().then(resolve).catch(reject);
            },
            reject
          );
        } else {
          rename_document().then(resolve).catch(reject);
        }
      });
    }
    setup_editable_title() {
    }
    get_dropdown_menu(label) {
      return this.page.add_dropdown(label);
    }
    set_indicator() {
      let indicator = frappe.get_indicator(this.frm.doc);
      if (this.frm.save_disabled && indicator && [__("Saved"), __("Not Saved")].includes(indicator[0])) {
        return;
      }
      if (indicator) {
        this.page.set_indicator(indicator[0], indicator[1]);
      } else {
        this.page.clear_indicator();
      }
    }
    make_menu() {
      this.page.clear_icons();
      this.page.clear_menu();
      if (frappe.boot.desk_settings.form_sidebar) {
        this.make_navigation();
        this.make_menu_items();
      }
    }
    make_viewers() {
      if (this.frm.viewers) {
        return;
      }
      this.frm.viewers = new frappe.ui.form.FormViewers({
        frm: this.frm,
        parent: $('<div class="form-viewers d-flex"></div>').prependTo(
          this.frm.page.page_actions
        )
      });
    }
    make_navigation() {
    }
    make_menu_items() {
      const me2 = this;
      const p = this.frm.perm[0];
      const docstatus = cint(this.frm.doc.docstatus);
      const is_submittable = frappe.model.is_submittable(this.frm.doc.doctype);
      const print_settings = frappe.model.get_doc(":Print Settings", "Print Settings");
      const allow_print_for_draft = cint(print_settings.allow_print_for_draft);
      const allow_print_for_cancelled = cint(print_settings.allow_print_for_cancelled);
      if (!is_submittable || docstatus == 1 || allow_print_for_cancelled && docstatus == 2 || allow_print_for_draft && docstatus == 0) {
        if (frappe.model.can_print(null, me2.frm) && !this.frm.meta.issingle) {
          this.page.add_menu_item(
            __("Print"),
            function() {
              me2.frm.print_doc();
            },
            true
          );
          this.print_icon = this.page.add_action_icon(
            "printer",
            function() {
              me2.frm.print_doc();
            },
            "",
            __("Print")
          );
        }
      }
      if (frappe.model.can_email(null, me2.frm) && me2.frm.doc.docstatus < 2) {
        this.page.add_menu_item(
          __("Email"),
          function() {
            me2.frm.email_doc();
          },
          true,
          {
            shortcut: "Ctrl+E",
            condition: () => !this.frm.is_new()
          }
        );
      }
      this.page.add_menu_item(
        __("Jump to field"),
        function() {
          me2.show_jump_to_field_dialog();
        },
        true,
        "Ctrl+J"
      );
      if (!me2.frm.meta.issingle) {
        this.page.add_menu_item(
          __("Links"),
          function() {
            me2.show_linked_with();
          },
          true
        );
      }
      if (in_list(frappe.boot.user.can_create, me2.frm.doctype) && !me2.frm.meta.allow_copy) {
        this.page.add_menu_item(
          __("Duplicate"),
          function() {
            me2.frm.copy_doc();
          },
          true
        );
      }
      this.page.add_menu_item(
        __("Copy to Clipboard"),
        function() {
          frappe.utils.copy_to_clipboard(JSON.stringify(me2.frm.doc));
        },
        true
      );
      this.page.add_menu_item(
        __("Reload"),
        function() {
          me2.frm.reload_doc();
        },
        true
      );
      if (cint(me2.frm.doc.docstatus) != 1 && !me2.frm.doc.__islocal && frappe.model.can_delete(me2.frm.doctype)) {
        this.page.add_menu_item(
          __("Delete"),
          function() {
            me2.frm.savetrash();
          },
          true,
          {
            shortcut: "Shift+Ctrl+D",
            condition: () => !this.frm.is_new()
          }
        );
      }
      this.make_customize_buttons();
      if (this.can_repeat()) {
        this.page.add_menu_item(
          __("Repeat"),
          function() {
            frappe.utils.new_auto_repeat_prompt(me2.frm);
          },
          true
        );
      }
      if (p[CREATE] && !this.frm.meta.issingle && !this.frm.meta.in_create) {
        this.page.add_menu_item(
          __("New {0}", [__(me2.frm.doctype)]),
          function() {
            frappe.new_doc(me2.frm.doctype, true);
          },
          true,
          {
            shortcut: "Ctrl+B",
            condition: () => !this.frm.is_new()
          }
        );
      }
    }
    make_customize_buttons() {
      let is_doctype_form = this.frm.doctype === "DocType";
      if (frappe.model.can_create("Custom Field") && frappe.model.can_create("Property Setter")) {
        let doctype = is_doctype_form ? this.frm.docname : this.frm.doctype;
        let is_doctype_custom = is_doctype_form ? this.frm.doc.custom : false;
        if (doctype != "DocType" && !is_doctype_custom && this.frm.meta.issingle === 0) {
          this.page.add_menu_item(
            __("Customize"),
            () => {
              if (this.frm.meta && this.frm.meta.custom) {
                frappe.set_route("Form", "DocType", doctype);
              } else {
                frappe.set_route("Form", "Customize Form", {
                  doc_type: doctype
                });
              }
            },
            true
          );
        }
      }
      if (frappe.model.can_create("DocType")) {
        if (frappe.boot.developer_mode === 1 && !is_doctype_form) {
          this.page.add_menu_item(
            __("Edit DocType"),
            () => {
              frappe.set_route("Form", "DocType", this.frm.doctype);
            },
            true
          );
        }
      }
    }
    can_repeat() {
      return this.frm.meta.allow_auto_repeat && !this.frm.is_new() && !this.frm.doc.auto_repeat;
    }
    can_save() {
      return this.get_docstatus() === 0;
    }
    can_submit() {
      return this.get_docstatus() === 0 && !this.frm.doc.__islocal && !this.frm.doc.__unsaved && this.frm.perm[0].submit && !this.has_workflow();
    }
    can_update() {
      return this.get_docstatus() === 1 && !this.frm.doc.__islocal && this.frm.perm[0].submit && this.frm.doc.__unsaved;
    }
    can_cancel() {
      return this.get_docstatus() === 1 && this.frm.perm[0].cancel && !this.read_only;
    }
    can_amend() {
      return this.get_docstatus() === 2 && this.frm.perm[0].amend && !this.read_only;
    }
    has_workflow() {
      if (this._has_workflow === void 0) {
        this._has_workflow = frappe.get_list("Workflow", {
          document_type: this.frm.doctype
        }).length;
      }
      return this._has_workflow;
    }
    get_docstatus() {
      return cint(this.frm.doc.docstatus);
    }
    show_linked_with() {
      if (!this.frm.linked_with) {
        this.frm.linked_with = new frappe.ui.form.LinkedWith({
          frm: this.frm
        });
      }
      this.frm.linked_with.show();
    }
    set_primary_action(dirty) {
      if (!dirty) {
        this.page.clear_user_actions();
      }
      let status = this.get_action_status();
      if (status) {
        if (status !== this.current_status && status === "Amend") {
          let { doc } = this.frm;
          frappe.xcall("frappe.client.is_document_amended", {
            doctype: doc.doctype,
            docname: doc.name
          }).then((is_amended) => {
            if (is_amended) {
              this.page.clear_actions();
              return;
            }
            this.set_page_actions(status);
          });
        } else {
          this.set_page_actions(status);
        }
      } else {
        this.page.clear_actions();
        this.current_status = null;
      }
    }
    get_action_status() {
      let status = null;
      if (this.frm.page.current_view_name === "print" || this.frm.hidden) {
        status = "Edit";
      } else if (this.can_submit()) {
        status = "Submit";
      } else if (this.can_save()) {
        if (!this.frm.save_disabled) {
          if (this.has_workflow() ? this.frm.doc.__unsaved : true) {
            status = "Save";
          }
        }
      } else if (this.can_update()) {
        status = "Update";
      } else if (this.can_cancel()) {
        status = "Cancel";
      } else if (this.can_amend()) {
        status = "Amend";
      }
      return status;
    }
    set_page_actions(status) {
      let me2 = this;
      this.page.clear_actions();
      if (status !== "Edit") {
        let perm_to_check = this.frm.action_perm_type_map[status];
        if (!this.frm.perm[0][perm_to_check]) {
          return;
        }
      }
      if (status === "Edit") {
        this.page.set_primary_action(
          __("Edit"),
          function() {
            me2.frm.page.set_view("main");
          },
          "edit"
        );
      } else if (status === "Cancel") {
        let add_cancel_button = () => {
          this.page.set_secondary_action(__(status), function() {
            me2.frm.savecancel(this);
          });
        };
        if (this.has_workflow()) {
          frappe.xcall("frappe.model.workflow.can_cancel_document", {
            doctype: this.frm.doc.doctype
          }).then((can_cancel) => {
            if (can_cancel) {
              add_cancel_button();
            }
          });
        } else {
          add_cancel_button();
        }
      } else {
        let click = {
          Save() {
            return me2.frm.save("Save", null, this);
          },
          Submit() {
            return me2.frm.savesubmit(this);
          },
          Update() {
            return me2.frm.save("Update", null, this);
          },
          Amend() {
            return me2.frm.amend_doc();
          }
        }[status];
        let icon = {
          Update: "edit"
        }[status];
        this.page.set_primary_action(__(status), click, icon);
      }
      this.current_status = status;
    }
    add_update_button_on_dirty() {
      let me2 = this;
      $(this.frm.wrapper).on("dirty", function() {
        me2.show_title_as_dirty();
        me2.frm.page.clear_actions_menu();
        if (!me2.frm.save_disabled) {
          me2.set_primary_action(true);
        }
      });
    }
    show_title_as_dirty() {
      if (this.frm.save_disabled && !this.frm.set_dirty) {
        return;
      }
      if (this.frm.is_dirty()) {
        this.page.set_indicator(__("Not Saved"), "orange");
      }
      $(this.frm.wrapper).attr("data-state", this.frm.is_dirty() ? "dirty" : "clean");
    }
    show_jump_to_field_dialog() {
      let visible_fields_filter = (f) => !["Section Break", "Column Break", "Tab Break"].includes(f.df.fieldtype) && !f.df.hidden && f.disp_status !== "None";
      let fields = this.frm.fields.filter(visible_fields_filter).map((f) => ({ label: __(f.df.label), value: f.df.fieldname }));
      let dialog = new frappe.ui.Dialog({
        title: __("Jump to field"),
        fields: [
          {
            fieldtype: "Autocomplete",
            fieldname: "fieldname",
            label: __("Select Field"),
            options: fields,
            reqd: 1
          }
        ],
        primary_action_label: __("Go"),
        primary_action: ({ fieldname }) => {
          dialog.hide();
          this.frm.scroll_to_field(fieldname);
        },
        animate: false
      });
      dialog.show();
    }
  };
  var Toolbar_default = Toolbar;

  // guigu/public/js/FormDetail/undo_manager.ts
  var UndoManager = class {
    constructor({ frm }) {
      this.frm = frm;
      this.undo_stack = [];
      this.redo_stack = [];
    }
    record_change({ fieldname, old_value, new_value, doctype, docname, is_child }) {
      if (old_value == new_value) {
        return;
      }
      this.undo_stack.push({
        fieldname,
        old_value,
        new_value,
        doctype,
        docname,
        is_child
      });
    }
    erase_history() {
      this.undo_stack = [];
      this.redo_stack = [];
    }
    undo() {
      const change = this.undo_stack.pop();
      if (change) {
        this._apply_change(change);
        this._push_reverse_entry(change, this.redo_stack);
      } else {
        this._show_alert(__("Nothing left to undo"));
      }
    }
    redo() {
      const change = this.redo_stack.pop();
      if (change) {
        this._apply_change(change);
        this._push_reverse_entry(change, this.undo_stack);
      } else {
        this._show_alert(__("Nothing left to redo"));
      }
    }
    _push_reverse_entry(change, stack) {
      stack.push(__spreadProps(__spreadValues({}, change), {
        new_value: change.old_value,
        old_value: change.new_value
      }));
    }
    _apply_change(change) {
      if (change.is_child) {
        frappe.model.set_value(
          change.doctype,
          change.docname,
          change.fieldname,
          change.old_value
        );
      } else {
        this.frm.set_value(change.fieldname, change.old_value);
        this.frm.scroll_to_field(change.fieldname, false);
      }
    }
    _show_alert(msg) {
      frappe.show_alert(msg, 3);
    }
  };

  // guigu/public/js/FormDetail/Layout/Section.ts
  var Section = class {
    constructor(parent, df, card_layout, layout) {
      this.layout = layout;
      this.card_layout = card_layout;
      this.parent = parent;
      this.df = df || {};
      this.columns = [];
      this.fields_list = [];
      this.fields_dict = {};
      this.make();
      if (this.df.label && this.df.collapsible && localStorage.getItem(`${df.css_class}-closed`)) {
        this.collapse();
      }
      this.row = {
        wrapper: this.wrapper
      };
      this.refresh();
    }
    make() {
      let make_card = this.card_layout;
      this.wrapper = $(`<div class="row
				${this.df.is_dashboard_section ? "form-dashboard-section" : "form-section"}
				${make_card ? "card-section" : ""}" data-fieldname="${this.df.fieldname}">
			`).appendTo(this.parent);
      if (this.df) {
        if (this.df.label) {
          this.make_head();
        }
        if (this.df.description) {
          this.description_wrapper = $(
            `<div class="col-sm-12 form-section-description">
						${__(this.df.description)}
					</div>`
          );
          this.wrapper.append(this.description_wrapper);
        }
        if (this.df.css_class) {
          this.wrapper.addClass(this.df.css_class);
        }
        if (this.df.hide_border) {
          this.wrapper.toggleClass("hide-border", true);
        }
      }
      this.body = $('<div class="section-body">').appendTo(this.wrapper);
      if (this.df.body_html) {
        this.body.append(this.df.body_html);
      }
    }
    make_head() {
      this.head = $(`
			<div class="section-head">
				${__(this.df.label)}
				<span class="ml-2 collapse-indicator mb-1"></span>
			</div>
		`);
      this.head.appendTo(this.wrapper);
      this.indicator = this.head.find(".collapse-indicator");
      this.indicator.hide();
      if (this.df.collapsible) {
        this.collapse_link = this.head.on("click", () => {
          this.collapse();
        });
        this.set_icon();
        this.indicator.show();
      }
    }
    add_field(fieldobj) {
      this.fields_list.push(fieldobj);
      this.fields_dict[fieldobj.fieldname] = fieldobj;
      fieldobj.section = this;
    }
    replace_field(fieldname, fieldobj) {
      var _a;
      if ((_a = this.fields_dict[fieldname]) == null ? void 0 : _a.df) {
        const olfldobj = this.fields_dict[fieldname];
        const idx = this.fields_list.findIndex((e) => e == olfldobj);
        this.fields_list.splice(idx, 1, fieldobj);
        this.fields_dict[fieldname] = fieldobj;
        fieldobj.section = this;
      }
    }
    refresh(hide) {
      if (!this.df) {
        return;
      }
      hide = hide || this.df.hidden || this.df.hidden_due_to_dependency;
      this.wrapper.toggleClass("hide-control", Boolean(hide));
    }
    collapse(hide) {
      if (!(this.head && this.body)) {
        return;
      }
      if (hide === void 0) {
        hide = !this.body.hasClass("hide");
      }
      this.body.toggleClass("hide", hide);
      this.head && this.head.toggleClass("collapsed", hide);
      this.set_icon(hide);
      for (const f of this.fields_list) {
        f.on_section_collapse && f.on_section_collapse(hide);
      }
      if (this.df.css_class) {
        localStorage.setItem(`${this.df.css_class}-closed`, hide ? "1" : "");
      }
    }
    set_icon(hide) {
      let indicator_icon = hide ? "down" : "up-line";
      this.indicator && this.indicator.html(frappe.utils.icon(indicator_icon, "sm", "mb-1"));
    }
    is_collapsed() {
      return this.body.hasClass("hide");
    }
    has_missing_mandatory() {
      let missing_mandatory = false;
      for (let j2 = 0, l = this.fields_list.length; j2 < l; j2++) {
        const section_df = this.fields_list[j2].df;
        if (section_df.reqd && this.layout.doc[section_df.fieldname] == null) {
          missing_mandatory = true;
          break;
        }
      }
      return missing_mandatory;
    }
    hide() {
      this.on_section_toggle(false);
    }
    show() {
      this.on_section_toggle(true);
    }
    on_section_toggle(show) {
      this.wrapper.toggleClass("hide-control", !show);
    }
  };
  var Section_default = Section;

  // guigu/public/js/FormDetail/Layout/Tab.ts
  var Tab = class {
    constructor(layout, df, frm, tab_link_container, tabs_content) {
      this.layout = layout;
      this.df = df || {};
      this.frm = frm;
      this.doctype = this.frm.doctype;
      this.label = this.df && this.df.label;
      this.tab_link_container = tab_link_container;
      this.tabs_content = tabs_content;
      this.fields_list = [];
      this.fields_dict = {};
      this.make();
      this.setup_listeners();
      this.refresh();
    }
    make() {
      const id = `form-detail-${frappe.scrub(this.doctype, "-")}-${this.df.fieldname}`;
      this.tab_link = $(`
			<li class="nav-item">
				<a class="nav-link ${this.df.active ? "active" : ""}" id="${id}-tab"
					data-toggle="tab"
					data-fieldname="${this.df.fieldname}"
					href="#${id}"
					role="tab"
					aria-controls="${this.label}">
						${__(this.label)}
				</a>
			</li>
		`).appendTo(this.tab_link_container);
      this.wrapper = $(`<div class="tab-pane fade show ${this.df.active ? "active" : ""}"
			id="${id}" role="tabpanel" aria-labelledby="${id}-tab">`).appendTo(this.tabs_content);
    }
    refresh() {
      if (!this.df) {
        return;
      }
      let hide = this.df.hidden || this.df.hidden_due_to_dependency;
      if (!hide && this.df.show_dashboard && this.frm.is_new()) {
        hide = true;
      }
      if (!hide && this.frm && !this.frm.get_perm(this.df.permlevel || 0, "read")) {
        hide = true;
      }
      if (!hide) {
        hide = true;
        if (this.wrapper.find(
          ".form-section:not(.hide-control, .empty-section), .form-dashboard-section:not(.hide-control, .empty-section)"
        ).length) {
          hide = false;
        }
      }
      this.toggle(!hide);
    }
    toggle(show) {
      this.tab_link.toggleClass("hide", !show);
      this.wrapper.toggleClass("hide", !show);
      this.tab_link.toggleClass("show", show);
      this.wrapper.toggleClass("show", show);
      this.hidden = !show;
    }
    show() {
      this.tab_link.show();
    }
    hide() {
      this.tab_link.hide();
    }
    replace_field(fieldobj) {
      fieldobj.tab = this;
    }
    add_field(fieldobj) {
      fieldobj.tab = this;
    }
    set_active() {
      this.tab_link.find(".nav-link").tab("show");
      this.wrapper.addClass("show");
      this.frm.active_tab = this;
    }
    is_active() {
      return this.wrapper.hasClass("active");
    }
    is_hidden() {
      return this.wrapper.hasClass("hide") && this.tab_link.hasClass("hide");
    }
    setup_listeners() {
      this.tab_link.find(".nav-link").on("shown.bs.tab", () => {
        var _a, _b;
        (_b = this == null ? void 0 : (_a = this.frm).set_active_tab) == null ? void 0 : _b.call(_a, this);
      });
    }
    setup_switch_on_hover() {
      this.tab_link.on("dragenter", () => {
        this.action = setTimeout(() => {
          this.set_active();
        }, 2e3);
      });
      this.tab_link.on("dragout", () => {
        if (this.action) {
          clearTimeout(this.action);
          this.action = null;
        }
      });
    }
  };
  var Tab_default = Tab;

  // guigu/public/js/FormDetail/Layout/Column.ts
  var Column = class {
    constructor(section, df) {
      this.df = df || {};
      this.section = section;
      this.section.columns.push(this);
      this.make();
      this.resize_all_columns();
    }
    make() {
      this.wrapper = $(`
			<div class="form-column" data-fieldname="${this.df.fieldname}">
				<form>
				</form>
			</div>
		`).appendTo(this.section.body);
      this.form = this.wrapper.find("form").on("submit", function() {
        return false;
      });
      if (this.df.label) {
        $(`
				<label class="control-label">
					${__(this.df.label)}
				</label>
			`).appendTo(this.wrapper);
      }
    }
    resize_all_columns() {
      let columns = this.section.wrapper.find(".form-column").length;
      let colspan = cint(12 / columns);
      if (columns == 5) {
        colspan = 20;
      }
      this.section.wrapper.find(".form-column").removeClass().addClass("form-column").addClass(`col-sm-${colspan}`);
    }
    add_field() {
    }
    refresh() {
      this.section.refresh();
    }
  };
  var Column_default = Column;

  // guigu/public/js/FormDetail/Layout/index.ts
  var Layout = class {
    constructor(parent, doctype, doctype_layout, frm, currentTab) {
      this.views = {};
      this.pages = [];
      this.tabs = [];
      this.sections = [];
      this.page_breaks = [];
      this.sections_dict = {};
      this.fields_list = [];
      this.fields_dict = {};
      this.section_count = 0;
      this.column_count = 0;
      this.with_dashboard = true;
      this.card_layout = true;
      this.formTabsList = document.createElement("div");
      this.tabsContent = document.createElement("div");
      var _a, _b;
      this.parent = $(parent);
      this.doctype = doctype;
      this.doctype_layout = doctype_layout;
      this.frm = frm;
      this.currentTab = currentTab;
      const wrapper = parent.querySelector(".form-layout");
      const message = parent.querySelector(".form-message");
      const page = parent.querySelector(".form-page");
      this.wrapper = $(wrapper);
      this.message = $(message);
      this.page = $(page);
      message.innerHTML = "";
      page.innerHTML = "";
      if (!this.fields) {
        this.fields = this.get_doctype_fields();
      }
      if (this.is_tabbed_layout()) {
        this.setup_tabbed_layout();
      }
      this.setup_tab_events();
      this.render();
      const tab = currentTab.value;
      const current = tab && ((_b = (_a = this.tab_link_container) == null ? void 0 : _a[0]) == null ? void 0 : _b.querySelector(`.nav-link[data-fieldname=${tab}]`));
      if (current) {
        $(current).tab("show");
      }
    }
    setup_tabbed_layout() {
      const tab_link_container = $('<ul class="nav form-tabs" id="form-tabs" role="tablist"></ul>');
      const { formTabsList } = this;
      formTabsList.className = "form-tabs-list";
      tab_link_container.appendTo(formTabsList);
      $(formTabsList).appendTo(this.page);
      this.tab_link_container = tab_link_container;
      const { tabsContent } = this;
      tabsContent.className = "form-tab-content tab-content";
      this.tabs_content = $(tabsContent).appendTo(
        this.page
      );
      this.setup_events();
    }
    get_doctype_fields() {
      let fields = [this.get_new_name_field()];
      if (this.doctype_layout) {
        fields = fields.concat(this.get_fields_from_layout());
      } else {
        fields = fields.concat(
          frappe.meta.sort_docfields(frappe.meta.docfield_map[this.doctype])
        );
      }
      return fields;
    }
    get_new_name_field() {
      return {
        parent: this.frm.doctype,
        fieldtype: "Data",
        fieldname: "__newname",
        reqd: 1,
        hidden: 1,
        label: __("Name"),
        get_status(field) {
          if (field.frm && field.frm.is_new() && field.frm.meta.autoname && ["prompt", "name"].includes(field.frm.meta.autoname.toLowerCase())) {
            return "Write";
          }
          return "None";
        }
      };
    }
    get_fields_from_layout() {
      const fields = [];
      for (let f of this.doctype_layout.fields) {
        const docfield = copy_dict(frappe.meta.docfield_map[this.doctype][f.fieldname]);
        docfield.label = f.label;
        fields.push(docfield);
      }
      return fields;
    }
    show_message(html, color) {
      if (this.message_color) {
        this.message.removeClass(this.message_color);
      }
      this.message_color = color && ["yellow", "blue", "red", "green", "orange"].includes(color) ? color : "blue";
      if (html) {
        if (html.substr(0, 1) !== "<") {
          html = `<div>${html}</div>`;
        }
        this.message.removeClass("hidden").addClass(this.message_color);
        $(html).appendTo(this.message);
      } else {
        this.message.empty().addClass("hidden");
      }
    }
    render(new_fields) {
      let fields = new_fields || this.fields;
      this.section = null;
      this.column = null;
      if (this.no_opening_section() && !this.is_tabbed_layout()) {
        this.fields.unshift({ fieldtype: "Section Break" });
      }
      if (this.is_tabbed_layout()) {
        let default_tab = {
          label: __("Details"),
          fieldtype: "Tab Break",
          fieldname: "__details"
        };
        let first_field_visible = this.fields.find((element) => element.hidden == false);
        let first_tab = (first_field_visible == null ? void 0 : first_field_visible.fieldtype) === "Tab Break" ? first_field_visible : null;
        if (first_tab) {
          let newname_field = this.fields.find((df) => df.fieldname === "__newname");
          if (newname_field && newname_field.get_status(this) === "Write") {
            this.fields.splice(0, 1);
            this.fields.splice(1, 0, newname_field);
          }
        } else {
          this.fields.splice(0, 0, default_tab);
        }
      }
      for (const df of fields) {
        switch (df.fieldtype) {
          case "Fold":
            this.make_page(df);
            break;
          case "Page Break":
            this.make_page_break();
            this.make_section(df);
            break;
          case "Section Break":
            this.make_section(df);
            break;
          case "Column Break":
            this.make_column(df);
            break;
          case "Tab Break":
            this.make_tab(df);
            break;
          default:
            this.make_field(df);
        }
      }
    }
    no_opening_section() {
      return this.fields[0] && this.fields[0].fieldtype != "Section Break" || !this.fields.length;
    }
    no_opening_tab() {
      return this.fields[1] && this.fields[1].fieldtype != "Tab Break" || !this.fields.length;
    }
    is_tabbed_layout() {
      return this.fields.find((f) => f.fieldtype === "Tab Break");
    }
    replace_field(fieldname, df, render13) {
      var _a;
      df.fieldname = fieldname;
      if (this.fields_dict[fieldname] && this.fields_dict[fieldname].df) {
        const prev_fieldobj = this.fields_dict[fieldname];
        const fieldobj = this.init_field(df, prev_fieldobj.parent, render13);
        prev_fieldobj.$wrapper.replaceWith(fieldobj.$wrapper);
        const idx = this.fields_list.findIndex((e) => e == prev_fieldobj);
        this.fields_list.splice(idx, 1, fieldobj);
        this.fields_dict[fieldname] = fieldobj;
        for (const section of this.sections) {
          section.replace_field(fieldname, fieldobj);
        }
        (_a = prev_fieldobj.tab) == null ? void 0 : _a.replace_field(fieldobj);
        this.refresh_fields([df]);
      }
    }
    make_field(df, colspan, render13) {
      !this.section && this.make_section();
      !this.column && this.make_column();
      const parent = this.column.wrapper.get(0);
      const fieldobj = this.init_field(df, parent, render13);
      this.fields_list.push(fieldobj);
      this.fields_dict[df.fieldname] = fieldobj;
      this.section.add_field(fieldobj);
      this.column.add_field(fieldobj);
      if (this.current_tab) {
        this.current_tab.add_field(fieldobj);
      }
    }
    init_field(df, parent, render13 = false) {
      const fieldobj = frappe.ui.form.make_control({
        df,
        doctype: this.doctype,
        parent,
        frm: this.frm,
        render_input: render13,
        doc: this.doc,
        layout: this
      });
      fieldobj.layout = this;
      return fieldobj;
    }
    make_page_break() {
      this.page = $('<div class="form-page page-break"></div>').appendTo(this.wrapper);
    }
    make_page(df) {
      let me2 = this;
      let head = $(`
			<div class="form-clickable-section text-center">
				<a class="btn-fold h6 text-muted">
					${__("Show more details")}
				</a>
			</div>
		`).appendTo(this.wrapper);
      this.page = $('<div class="form-page second-page hide"></div>').appendTo(this.wrapper);
      this.fold_btn = head.find(".btn-fold").on("click", function() {
        let page = $(this).parent().next();
        if (page.hasClass("hide")) {
          $(this).removeClass("btn-fold").html(__("Hide details"));
          page.removeClass("hide");
          frappe.utils.scroll_to($(this), true, 30);
          me2.folded = false;
        } else {
          $(this).addClass("btn-fold").html(__("Show more details"));
          page.addClass("hide");
          me2.folded = true;
        }
      });
      this.section = null;
      this.folded = true;
    }
    unfold() {
      this.fold_btn.trigger("click");
    }
    make_section(df = {}) {
      var _a;
      this.section_count++;
      if (!df.fieldname) {
        df.fieldname = `__section_${this.section_count}`;
        df.fieldtype = "Section Break";
      }
      this.section = new Section_default(
        ((_a = this.current_tab) == null ? void 0 : _a.wrapper) || this.page,
        df,
        this.card_layout,
        this
      );
      this.sections.push(this.section);
      this.sections_dict[df.fieldname] = this.section;
      if (df) {
        this.fields_dict[df.fieldname] = this.section;
        this.fields_list.push(this.section);
      }
      this.column = null;
    }
    make_column(df = {}) {
      this.column_count++;
      if (!df.fieldname) {
        df.fieldname = `__column_${this.section_count}`;
        df.fieldtype = "Column Break";
      }
      this.column = new Column_default(this.section, df);
      if (df && df.fieldname) {
        this.fields_list.push(this.column);
      }
    }
    make_tab(df) {
      this.section = null;
      let tab = new Tab_default(this, df, this.frm, this.tab_link_container, this.tabs_content);
      this.current_tab = tab;
      this.make_section({ fieldtype: "Section Break" });
      this.tabs.push(tab);
      return tab;
    }
    refresh(doc) {
      if (doc) {
        this.doc = doc;
      }
      if (this.frm) {
        this.wrapper.find(".empty-form-alert").remove();
      }
      this.attach_doc_and_docfields(true);
      if (this.frm && this.frm.wrapper) {
        $(this.frm.wrapper).trigger("refresh-fields");
      }
      this.refresh_dependency();
      this.refresh_sections();
      if (this.frm) {
        this.refresh_section_collapse();
      }
      if (document.activeElement) {
        if (document.activeElement.tagName == "INPUT" && this.is_numeric_field_active()) {
          document.activeElement.select();
        }
      }
    }
    is_numeric_field_active() {
      const control = $(document.activeElement).closest(".frappe-control");
      const { fieldtype } = control.data() || {};
      return frappe.model.numeric_fieldtypes.includes(fieldtype);
    }
    refresh_sections() {
      this.wrapper.find(".form-section:not(.hide-control)").each(function() {
        const section = $(this).removeClass("empty-section visible-section");
        if (section.find(".frappe-control:not(.hide-control)").length) {
          section.addClass("visible-section");
        } else {
          section.addClass("empty-section");
        }
      });
      this.is_tabbed_layout() && this.refresh_tabs();
    }
    refresh_tabs() {
      for (let tab of this.tabs) {
        tab.refresh();
      }
      const visible_tabs = this.tabs.filter((tab) => !tab.hidden);
      if (visible_tabs && visible_tabs.length == 1) {
        visible_tabs[0].tab_link.toggleClass("hide show");
      }
      this.set_tab_as_active();
    }
    set_tab_as_active() {
      var _a, _b;
      let frm_active_tab = (_b = this == null ? void 0 : (_a = this.frm).get_active_tab) == null ? void 0 : _b.call(_a);
      if (frm_active_tab) {
        frm_active_tab.set_active();
      } else if (this.tabs.length) {
        let first_visible_tab = this.tabs.find((tab) => !tab.is_hidden());
        first_visible_tab && first_visible_tab.set_active();
      }
    }
    refresh_fields(fields) {
      let fieldnames = fields.map((field) => {
        if (field.fieldname) {
          return field.fieldname;
        }
      });
      this.fields_list.map((fieldobj) => {
        if (fieldnames.includes(fieldobj.df.fieldname)) {
          fieldobj.refresh();
          if (fieldobj.df.default) {
            fieldobj.set_input(fieldobj.df.default);
          }
        }
      });
    }
    add_fields(fields) {
      this.render(fields);
      this.refresh_fields(fields);
    }
    refresh_section_collapse() {
      if (!(this.sections && this.sections.length)) {
        return;
      }
      for (let i = 0; i < this.sections.length; i++) {
        let section = this.sections[i];
        let { df } = section;
        if (df && df.collapsible) {
          let collapse = true;
          if (df.collapsible_depends_on) {
            collapse = !this.evaluate_depends_on_value(df.collapsible_depends_on);
          }
          if (collapse && section.has_missing_mandatory()) {
            collapse = false;
          }
          section.collapse(collapse);
        }
      }
    }
    attach_doc_and_docfields(refresh) {
      let me2 = this;
      for (let i = 0, l = this.fields_list.length; i < l; i++) {
        let fieldobj = this.fields_list[i];
        if (me2.doc) {
          fieldobj.doc = me2.doc;
          fieldobj.doctype = me2.doc.doctype;
          fieldobj.docname = me2.doc.name;
          fieldobj.df = frappe.meta.get_docfield(me2.doc.doctype, fieldobj.df.fieldname, me2.doc.name) || fieldobj.df;
        }
        refresh && fieldobj.df && fieldobj.refresh && fieldobj.refresh();
      }
    }
    refresh_section_count() {
      this.wrapper.find(".section-count-label:visible").each(function(i) {
        $(this).html(i + 1);
      });
    }
    setup_events() {
      let last_scroll = 0;
      const { formTabsList } = this;
      let { tabsContent } = this;
      const eventListener = frappe.utils.throttle(() => {
        let current_scroll = document.documentElement.scrollTop;
        if (current_scroll > 0 && last_scroll <= current_scroll) {
          formTabsList.classList.remove("form-tabs-sticky-down");
          formTabsList.classList.add("form-tabs-sticky-up");
        } else {
          formTabsList.classList.remove("form-tabs-sticky-up");
          formTabsList.classList.add("form-tabs-sticky-down");
        }
        last_scroll = current_scroll;
      }, 500);
      window.addEventListener("scroll", eventListener);
      this.tab_link_container.off("click").on("click", ".nav-link", (e) => {
        e.preventDefault();
        e.stopImmediatePropagation();
        const el = e.currentTarget;
        $(el).tab("show");
        const { fieldname } = el.dataset;
        if (fieldname) {
          this.currentTab.value = fieldname;
        }
        if (tabsContent.getBoundingClientRect().top < 100) {
          tabsContent.scrollIntoView();
          setTimeout(() => {
            $(".page-head").css("top", "-15px");
            formTabsList.classList.remove("form-tabs-sticky-down");
            formTabsList.classList.add("form-tabs-sticky-up");
          }, 3);
        }
      });
    }
    setup_tab_events() {
      this.wrapper.on("keydown", (ev) => {
        if (ev.which == 9) {
          let current = $(ev.target);
          let doctype = current.attr("data-doctype");
          let fieldname = current.attr("data-fieldname");
          if (doctype) {
            return this.handle_tab(doctype, fieldname, ev.shiftKey);
          }
        }
      });
    }
    handle_tab(doctype, fieldname, shift) {
      let grid_row = null, prev = null, fields = this.fields_list, focused = false;
      if (doctype != this.doctype) {
        grid_row = this.get_open_grid_row();
        if (!grid_row || !grid_row.layout) {
          return;
        }
        fields = grid_row.layout.fields_list;
      }
      for (let i = 0, len = fields.length; i < len; i++) {
        if (fields[i].df.fieldname == fieldname) {
          if (shift) {
            if (prev) {
              this.set_focus(prev);
            } else {
              $(this.primary_button).focus();
            }
            break;
          }
          if (i < len - 1) {
            focused = this.focus_on_next_field(i, fields);
          }
          if (focused) {
            break;
          }
        }
        if (this.is_visible(fields[i])) {
          prev = fields[i];
        }
      }
      if (!focused) {
        if (grid_row) {
          if (grid_row.doc.idx == grid_row.grid.grid_rows.length) {
            grid_row.toggle_view(false, function() {
              grid_row.grid.frm.layout.handle_tab(
                grid_row.grid.df.parent,
                grid_row.grid.df.fieldname
              );
            });
          } else {
            grid_row.grid.grid_rows[grid_row.doc.idx].toggle_view(true);
          }
        } else if (!shift) {
          $(this.primary_button).focus();
        }
      }
      return false;
    }
    focus_on_next_field(start_idx, fields) {
      for (let i = start_idx + 1, len = fields.length; i < len; i++) {
        let field = fields[i];
        if (this.is_visible(field)) {
          if (field.df.fieldtype === "Table") {
            if (!(field.grid.grid_rows && field.grid.grid_rows.length)) {
              field.grid.add_new_row();
            }
            field.grid.grid_rows[0].show_form();
            return true;
          } else if (!in_list(frappe.model.no_value_type, field.df.fieldtype)) {
            this.set_focus(field);
            return true;
          }
        }
      }
    }
    is_visible(field) {
      return field.disp_status === "Write" && field.df && "hidden" in field.df && !field.df.hidden;
    }
    set_focus(field) {
      if (field.tab) {
        field.tab.set_active();
      }
      if (field.df.fieldtype == "Table") {
        if (field.grid.grid_rows.length) {
          field.grid.grid_rows[0].toggle_view(true);
        } else {
          field.grid.add_new_row(1);
        }
      } else if (field.editor) {
        field.editor.set_focus();
      } else if (field.$input) {
        field.$input.focus();
      }
    }
    get_open_grid_row() {
      return $(".grid-row-open").data("grid_row");
    }
    refresh_dependency() {
      let has_dep = false;
      const fields = this.fields_list.concat(this.tabs);
      for (let fkey in fields) {
        let f = fields[fkey];
        if (f.df.depends_on || f.df.mandatory_depends_on || f.df.read_only_depends_on) {
          has_dep = true;
          break;
        }
      }
      if (!has_dep) {
        return;
      }
      for (let i = fields.length - 1; i >= 0; i--) {
        let f = fields[i];
        f.guardian_has_value = true;
        if (f.df.depends_on) {
          f.guardian_has_value = this.evaluate_depends_on_value(f.df.depends_on);
          if (f.guardian_has_value) {
            if (f.df.hidden_due_to_dependency) {
              f.df.hidden_due_to_dependency = false;
              f.refresh();
            }
          } else if (!f.df.hidden_due_to_dependency) {
            f.df.hidden_due_to_dependency = true;
            f.refresh();
          }
        }
        if (f.df.mandatory_depends_on) {
          this.set_dependant_property(f.df.mandatory_depends_on, f.df.fieldname, "reqd");
        }
        if (f.df.read_only_depends_on) {
          this.set_dependant_property(
            f.df.read_only_depends_on,
            f.df.fieldname,
            "read_only"
          );
        }
      }
      this.refresh_section_count();
    }
    set_dependant_property(condition, fieldname, property) {
      let set_property = this.evaluate_depends_on_value(condition);
      let value = set_property ? 1 : 0;
      let form_obj;
      if (this.frm) {
        form_obj = this.frm;
      } else if (this.is_dialog || this.doctype === "Web Form") {
        form_obj = this;
      }
      if (form_obj) {
        if (this.doc && this.doc.parent && this.doc.parentfield) {
          form_obj.setting_dependency = true;
          form_obj.set_df_property(
            this.doc.parentfield,
            property,
            value,
            this.doc.parent,
            fieldname,
            this.doc.name
          );
          form_obj.setting_dependency = false;
          this.fields_dict[fieldname] && this.fields_dict[fieldname].refresh();
        } else {
          form_obj.set_df_property(fieldname, property, value);
        }
      }
    }
    evaluate_depends_on_value(expression) {
      let out = null;
      let { doc } = this;
      if (!doc && this.get_values) {
        doc = this.get_values(true);
      }
      if (!doc) {
        return;
      }
      let parent = this.frm ? this.frm.doc : this.doc || null;
      if (typeof expression === "boolean") {
        out = expression;
      } else if (typeof expression === "function") {
        out = expression(doc);
      } else if (expression.substr(0, 5) == "eval:") {
        try {
          out = frappe.utils.eval(expression.substr(5), { doc, parent });
          if (parent && parent.istable && expression.includes("is_submittable")) {
            out = true;
          }
        } catch (e) {
          frappe.throw(__('Invalid "depends_on" expression'));
        }
      } else if (expression.substr(0, 3) == "fn:" && this.frm) {
        out = this.frm.script_manager.trigger(
          expression.substr(3),
          this.doctype,
          this.docname
        );
      } else {
        let value = doc[expression];
        if ($.isArray(value)) {
          out = Boolean(value.length);
        } else {
          out = Boolean(value);
        }
      }
      return out;
    }
  };
  var Layout_default = Layout;

  // guigu/public/js/FormDetail/Form.ts
  frappe.provide("frappe.ui.form");
  frappe.provide("frappe.model.docinfo");
  var Form = class {
    constructor(doctype, name, parent, deleted, currentTab, in_form = true, doctype_layout = frappe.router.doctype_layout || doctype, doctype_layout_name) {
      this.docname = "";
      this.hidden = false;
      this.refresh_if_stale_for = 120;
      this.opendocs = {};
      this.custom_buttons = {};
      this.sections = [];
      this.grids = [];
      this.cscript = new frappe.ui.form.Controller({ frm: this });
      this.events = {};
      this.fetch_dict = {};
      this.undo_manager = new UndoManager({ frm: this });
      this.beforeUnloadListener = (event) => {
        event.preventDefault();
        return event.returnValue = "There are unsaved changes, are you sure you want to exit?";
      };
      this.action_perm_type_map = {
        Create: "create",
        Save: "write",
        Submit: "submit",
        Update: "submit",
        Cancel: "cancel",
        Amend: "amend",
        Delete: "delete"
      };
      this.currentTab = currentTab;
      this.__deleted = deleted;
      this.doctype = doctype;
      this.doctype_layout_name = doctype_layout_name;
      this.in_form = in_form ? true : false;
      this.parent = parent;
      this.doctype_layout = frappe.get_doc("DocType Layout", doctype_layout_name);
      this.meta = frappe.get_doc("DocType", this.doctype);
      if (this.meta.istable) {
        this.meta.in_dialog = 1;
      }
      this.perm = frappe.perm.get_perm(this.doctype);
      this.debounced_reload_doc = frappe.utils.debounce(this.reload_doc.bind(this), 1e3);
    }
    setup() {
      this.setup_done = true;
      this.fields = [];
      this.fields_dict = {};
      this.state_fieldname = frappe.workflow.get_state_fieldname(this.doctype);
      this.wrapper = this.parent;
      this.$wrapper = $(this.wrapper);
      const page = new Page_default(this.wrapper, this.meta.hide_toolbar);
      this.page = page;
      this.layout_main = this.parent.querySelector(".layout-main-section");
      this.$wrapper.on("hide", () => {
        this.script_manager.trigger("on_hide");
      });
      this.toolbar = new Toolbar_default(this, page);
      this.add_form_keyboard_shortcuts();
      this.setup_std_layout();
      this.script_manager = new frappe.ui.form.ScriptManager({
        frm: this
      });
      this.script_manager.setup();
      this.watch_model_updates();
      const [mainParent] = page.main.parent();
      if (mainParent) {
        const footer = [...mainParent.children].find((v) => v.classList.contains("layout-footer"));
        if (footer) {
          for (let next; next = footer.nextSibling; ) {
            next == null ? void 0 : next.remove();
          }
        }
      }
      if (!this.meta.hide_toolbar && frappe.boot.desk_settings.timeline) {
        this.footer = new Footer_default({
          frm: this,
          parent: $("<div>").appendTo(page.main.parent())
        });
        $("body").attr("data-sidebar", 1);
      }
      this.setup_file_drop();
      this.setup_doctype_actions();
      this.setup_notify_on_rename();
      this.setup_done = true;
    }
    add_form_keyboard_shortcuts() {
      frappe.ui.keys.add_shortcut({
        shortcut: "shift+ctrl+>",
        action: () => this.navigate_records(0),
        page: this.page,
        description: __("Go to next record"),
        ignore_inputs: true,
        condition: () => !this.is_new()
      });
      frappe.ui.keys.add_shortcut({
        shortcut: "shift+ctrl+<",
        action: () => this.navigate_records(1),
        page: this.page,
        description: __("Go to previous record"),
        ignore_inputs: true,
        condition: () => !this.is_new()
      });
      frappe.ui.keys.add_shortcut({
        shortcut: "ctrl+z",
        action: () => this.undo_manager.undo(),
        page: this.page,
        description: __("Undo last action")
      });
      frappe.ui.keys.add_shortcut({
        shortcut: "shift+ctrl+z",
        action: () => this.undo_manager.redo(),
        page: this.page,
        description: __("Redo last action")
      });
      frappe.ui.keys.add_shortcut({
        shortcut: "ctrl+y",
        action: () => this.undo_manager.redo(),
        page: this.page,
        description: __("Redo last action")
      });
      let grid_shortcut_keys = [
        {
          shortcut: "Up Arrow",
          description: __("Move cursor to above row")
        },
        {
          shortcut: "Down Arrow",
          description: __("Move cursor to below row")
        },
        {
          shortcut: "tab",
          description: __("Move cursor to next column")
        },
        {
          shortcut: "shift+tab",
          description: __("Move cursor to previous column")
        },
        {
          shortcut: "Ctrl+up",
          description: __("Add a row above the current row")
        },
        {
          shortcut: "Ctrl+down",
          description: __("Add a row below the current row")
        },
        {
          shortcut: "Ctrl+shift+up",
          description: __("Add a row at the top")
        },
        {
          shortcut: "Ctrl+shift+down",
          description: __("Add a row at the bottom")
        },
        {
          shortcut: "shift+alt+down",
          description: __("Duplicate current row")
        }
      ];
      for (const row of grid_shortcut_keys) {
        frappe.ui.keys.add_shortcut({
          shortcut: row.shortcut,
          page: this.page,
          description: __(row.description),
          ignore_inputs: true,
          condition: () => !this.is_new()
        });
      }
    }
    setup_std_layout() {
      const main = this.parent.querySelector(".layout-main-section");
      this.form_wrapper = $(main.querySelector("div"));
      const body = main.querySelector(".std-form-layout");
      this.body = $(body);
      this.meta.section_style = "Simple";
      this.layout = new Layout_default(
        body,
        this.doctype,
        this.doctype_layout,
        this,
        this.currentTab
      );
      this.fields_dict = this.layout.fields_dict;
      this.fields = this.layout.fields_list;
      let dashboard_parent = $('<div class="form-dashboard">');
      let dashboard_added = false;
      if (this.layout.tabs.length) {
        this.layout.tabs.every((tab) => {
          if (tab.df.show_dashboard) {
            tab.wrapper.prepend(dashboard_parent);
            dashboard_added = true;
            return false;
          }
          return true;
        });
        if (!dashboard_added) {
          this.layout.tabs[0].wrapper.prepend(dashboard_parent);
        }
      } else {
        this.layout.wrapper.find(".form-page").prepend(dashboard_parent);
      }
      this.dashboard = new frappe.ui.form.Dashboard(dashboard_parent, this);
      this.tour = new frappe.ui.form.FormTour({
        frm: this
      });
      this.states = new frappe.ui.form.States({
        frm: this
      });
    }
    watch_model_updates() {
      let me2 = this;
      frappe.model.on(
        me2.doctype,
        "*",
        function(fieldname, value, doc, skip_dirty_trigger = false) {
          if (doc.name == me2.docname) {
            if (!skip_dirty_trigger) {
              me2.dirty();
            }
            let field = me2.fields_dict[fieldname];
            field && field.refresh(fieldname);
            field && ["Link", "Dynamic Link"].includes(field.df.fieldtype) && field.validate && field.validate(value);
            me2.layout.refresh_dependency();
            me2.layout.refresh_sections();
            return me2.script_manager.trigger(fieldname, doc.doctype, doc.name);
          }
        }
      );
      let table_fields = frappe.get_children("DocType", me2.doctype, "fields", {
        fieldtype: ["in", frappe.model.table_fields]
      });
      $.each(table_fields, function(i, df) {
        frappe.model.on(df.options, "*", function(fieldname, value, doc) {
          if (doc.parent == me2.docname && doc.parentfield === df.fieldname) {
            me2.dirty();
            me2.fields_dict[df.fieldname].grid.set_value(fieldname, value, doc);
            return me2.script_manager.trigger(fieldname, doc.doctype, doc.name);
          }
        });
      });
    }
    setup_notify_on_rename() {
      $(document).on("rename", (ev, dt2, old_name, new_name) => {
        if (dt2 == this.doctype) {
          this.rename_notify(dt2, old_name, new_name);
        }
      });
    }
    setup_file_drop() {
      let me2 = this;
      this.$wrapper.on("dragenter dragover", false).on("drop", function(e) {
        let { dataTransfer } = e.originalEvent;
        if (!(dataTransfer && dataTransfer.files && dataTransfer.files.length > 0)) {
          return;
        }
        e.stopPropagation();
        e.preventDefault();
        if (me2.doc.__islocal) {
          frappe.msgprint(__("Please save before attaching."));
          throw "attach error";
        }
        new frappe.ui.FileUploader({
          doctype: me2.doctype,
          docname: me2.docname,
          frm: me2,
          files: dataTransfer.files,
          folder: "Home/Attachments",
          on_success(file_doc) {
            me2.attachments.attachment_uploaded(file_doc);
          }
        });
      });
    }
    setup_image_autocompletions_in_markdown() {
      this.fields.map((field) => {
        if (field.df.fieldtype === "Markdown Editor") {
          this.set_df_property(field.df.fieldname, "autocompletions", () => {
            let attachments = this.attachments.get_attachments();
            return attachments.filter((file) => frappe.utils.is_image_file(file.file_url)).map((file) => ({
              caption: `image: ${file.file_name}`,
              value: `![](${file.file_url})`,
              meta: "image"
            }));
          });
        }
      });
    }
    refresh(docname) {
      let switched = docname ? true : false;
      removeEventListener("beforeunload", this.beforeUnloadListener, { capture: true });
      if (docname) {
        this.switch_doc(docname);
      }
      cur_frm = this;
      this.undo_manager.erase_history();
      if (!this.docname) {
        return;
      }
      this.save_disabled = false;
      this.doc = frappe.get_doc(this.doctype, this.docname);
      this.fetch_permissions();
      if (!this.has_read_permission()) {
        frappe.show_not_permitted(`${__(this.doctype)} ${__(cstr(this.docname))}`);
        return;
      }
      for (const table of this.grids) {
        table.grid.refresh();
      }
      this.read_only = frappe.workflow.is_read_only(this.doctype, this.docname);
      if (this.read_only) {
        this.set_read_only(true);
        frappe.show_alert(__("This form is not editable due to a Workflow."));
      }
      if (!this.opendocs[this.docname]) {
        this.check_doctype_conflict(this.docname);
      } else if (this.check_reload()) {
        return;
      }
      if (!this.setup_done) {
        this.setup();
      }
      this.trigger_onload(switched);
      if (switched) {
        if (this.show_print_first && this.doc.docstatus === 1) {
          this.print_doc();
        }
      }
      this.$wrapper.removeClass("validated-form").toggleClass("editable-form", this.doc.docstatus === 0).toggleClass("submitted-form", this.doc.docstatus === 1).toggleClass("cancelled-form", this.doc.docstatus === 2);
      this.show_conflict_message();
      if (frappe.boot.read_only) {
        this.disable_form();
      }
    }
    setup_doctype_actions() {
      if (this.meta.actions) {
        for (let action of this.meta.actions) {
          frappe.ui.form.on(this.doctype, "refresh", () => {
            if (!this.is_new()) {
              if (!action.hidden) {
                this.add_custom_button(
                  action.label,
                  () => {
                    this.execute_action(action);
                  },
                  action.group
                );
              }
            }
          });
        }
      }
    }
    execute_action(action) {
      if (typeof action === "string") {
        for (let _action of this.meta.actions) {
          if (_action.label === action) {
            action = _action;
            break;
          }
        }
        if (typeof action === "string") {
          frappe.throw(`Action ${action} not found`);
        }
      }
      if (action.action_type === "Server Action") {
        return frappe.xcall(action.action, { doc: this.doc }).then((doc) => {
          if (doc.doctype) {
            frappe.model.sync(doc);
            this.refresh();
          }
          frappe.msgprint({
            message: __("{} Complete", [action.label]),
            alert: true
          });
        });
      } else if (action.action_type === "Route") {
        return frappe.set_route(action.action);
      }
    }
    switch_doc(docname) {
      for (const grid_obj of this.grids) {
        grid_obj.grid.visible_columns = null;
        grid_obj.grid.grid_pagination.go_to_page(1, true);
      }
      frappe.ui.form.close_grid_form();
      this.viewers && this.viewers.parent.empty();
      this.docname = docname;
      this.setup_docinfo_change_listener();
    }
    check_reload() {
      if (this.doc && !this.doc.__unsaved && this.doc.__last_sync_on && new Date() - this.doc.__last_sync_on > this.refresh_if_stale_for * 1e3) {
        this.debounced_reload_doc();
        return true;
      }
    }
    trigger_onload(switched) {
      this.cscript.is_onload = false;
      if (this.opendocs[this.docname]) {
        this.render_form(switched);
        if (this.doc.localname) {
          delete this.doc.localname;
          $(document).trigger("form-rename", [this]);
        }
      } else {
        let me2 = this;
        this.cscript.is_onload = true;
        this.initialize_new_doc();
        $(document).trigger("form-load", [this]);
        $(this.page.wrapper).on("hide", function() {
          $(document).trigger("form-unload", [me2]);
        });
      }
    }
    initialize_new_doc() {
      let me2 = this;
      this.script_manager.trigger("before_load", this.doctype, this.docname).then(() => {
        me2.script_manager.trigger("onload");
        me2.opendocs[me2.docname] = true;
        me2.render_form();
        frappe.after_ajax(function() {
          me2.trigger_link_fields();
        });
        frappe.breadcrumbs.add(me2.meta.module, me2.doctype);
      });
      if (this.meta.track_seen) {
        $(`.list-id[data-name="${me2.docname}"]`).addClass("seen");
      }
    }
    render_form(switched) {
      if (this.meta.istable) {
        this.refresh_header(switched);
      } else {
        this.layout.doc = this.doc;
        this.layout.attach_doc_and_docfields();
        if (frappe.boot.desk_settings.form_sidebar) {
          this.sidebar = new frappe.ui.form.Sidebar({
            frm: this,
            page: this.page
          });
          this.sidebar.make();
        }
        this.layout.show_message();
        frappe.run_serially([
          () => this.refresh_header(switched),
          () => $(document).trigger("form-refresh", [this]),
          () => this.refresh_fields(),
          () => this.script_manager.trigger("refresh"),
          () => {
            if (this.cscript.is_onload) {
              this.onload_post_render();
              return this.script_manager.trigger("onload_post_render");
            }
          },
          () => this.cscript.is_onload && this.is_new() && this.focus_on_first_input(),
          () => this.run_after_load_hook(),
          () => this.dashboard.after_refresh()
        ]);
      }
      this.$wrapper.trigger("render_complete");
      frappe.after_ajax(() => {
        $(document).ready(() => {
          this.scroll_to_element();
        });
      });
    }
    onload_post_render() {
      this.setup_image_autocompletions_in_markdown();
    }
    focus_on_first_input() {
      let first = this.form_wrapper.find(".form-layout :input:visible:first");
      if (!in_list(["Date", "Datetime"], first.attr("data-fieldtype"))) {
        first.focus();
      }
    }
    run_after_load_hook() {
      if (frappe.route_hooks.after_load) {
        let route_callback = frappe.route_hooks.after_load;
        delete frappe.route_hooks.after_load;
        route_callback(this);
      }
    }
    refresh_fields() {
      this.layout.refresh(this.doc);
      this.layout.primary_button = this.$wrapper.find(".btn-primary");
    }
    cleanup_refresh() {
      if (this.fields_dict.amended_from) {
        if (this.doc.amended_from) {
          unhide_field("amended_from");
          if (this.fields_dict.amendment_date) {
            unhide_field("amendment_date");
          }
        } else {
          hide_field("amended_from");
          if (this.fields_dict.amendment_date) {
            hide_field("amendment_date");
          }
        }
      }
      if (this.fields_dict.trash_reason) {
        if (this.doc.trash_reason && this.doc.docstatus == 2) {
          unhide_field("trash_reason");
        } else {
          hide_field("trash_reason");
        }
      }
      if (this.meta.autoname && this.meta.autoname.substr(0, 6) == "field:" && !this.doc.__islocal) {
        let fn = this.meta.autoname.substr(6);
        if (this.doc[fn]) {
          this.toggle_display(fn, false);
        }
      }
      if (this.meta.autoname == "naming_series:" && !this.doc.__islocal) {
        this.toggle_display("naming_series", false);
      }
    }
    refresh_header(switched) {
      if (this.toolbar) {
        if (switched) {
          this.toolbar.current_status = void 0;
        }
        this.toolbar.refresh();
      }
      this.dashboard.refresh();
      frappe.breadcrumbs.update();
      this.show_submit_message();
      this.clear_custom_buttons();
      this.show_web_link();
    }
    save_or_update() {
      if (this.save_disabled) {
        return;
      }
      if (this.doc.docstatus === 0) {
        this.save();
      } else if (this.doc.docstatus === 1 && this.doc.__unsaved) {
        this.save("Update");
      }
    }
    save(save_action, callback, btn, on_error) {
      let me2 = this;
      return new Promise((resolve, reject) => {
        btn && $(btn).prop("disabled", true);
        frappe.ui.form.close_grid_form();
        me2.validate_and_save(save_action, callback, btn, on_error, resolve, reject);
      }).then(() => {
        me2.show_success_action();
      }).catch((e) => {
        console.error(e);
      });
    }
    validate_and_save(save_action, callback, btn, on_error, resolve, reject) {
      let me2 = this;
      if (!save_action) {
        save_action = "Save";
      }
      this.validate_form_action(save_action, resolve);
      let after_save = function(r) {
        history.replaceState(null, null, " ");
        if (!r.exc) {
          if (["Save", "Update", "Amend"].indexOf(save_action) !== -1) {
            frappe.utils.play_sound("click");
          }
          me2.script_manager.trigger("after_save");
          if (frappe.route_hooks.after_save) {
            let route_callback = frappe.route_hooks.after_save;
            delete frappe.route_hooks.after_save;
            route_callback(me2);
          }
          if (me2.comment_box) {
            me2.comment_box.submit();
          }
          me2.refresh();
        } else if (on_error) {
          on_error();
          reject();
        }
        callback && callback(r);
        resolve();
      };
      let fail = (e) => {
        if (e) {
          console.error(e);
        }
        btn && $(btn).prop("disabled", false);
        if (on_error) {
          on_error();
          reject();
        }
      };
      if (save_action == "Update") {
        frappe.ui.form.save(me2, save_action, after_save, btn);
      } else {
        frappe.validated = true;
        frappe.run_serially([
          () => this.script_manager.trigger("validate"),
          () => this.script_manager.trigger("before_save"),
          () => {
            if (!frappe.validated) {
              fail();
              return;
            }
            frappe.ui.form.save(me2, save_action, after_save, btn);
          }
        ]).catch(fail);
      }
    }
    savesubmit(btn, callback, on_error) {
      let me2 = this;
      return new Promise((resolve) => {
        this.validate_form_action("Submit");
        frappe.confirm(
          __("Permanently Submit {0}?", [this.docname]),
          function() {
            frappe.validated = true;
            me2.script_manager.trigger("before_submit").then(function() {
              if (!frappe.validated) {
                return me2.handle_save_fail(btn, on_error);
              }
              me2.save(
                "Submit",
                function(r) {
                  if (r.exc) {
                    me2.handle_save_fail(btn, on_error);
                  } else {
                    frappe.utils.play_sound("submit");
                    callback && callback();
                    me2.script_manager.trigger("on_submit").then(() => resolve(me2)).then(() => {
                      if (frappe.route_hooks.after_submit) {
                        let route_callback = frappe.route_hooks.after_submit;
                        delete frappe.route_hooks.after_submit;
                        route_callback(me2);
                      }
                    });
                  }
                },
                btn,
                () => me2.handle_save_fail(btn, on_error),
                resolve
              );
            });
          },
          () => me2.handle_save_fail(btn, on_error)
        );
      });
    }
    savecancel(btn, callback, on_error) {
      const me2 = this;
      this.validate_form_action("Cancel");
      me2.ignore_doctypes_on_cancel_all = me2.ignore_doctypes_on_cancel_all || [];
      frappe.call({
        method: "frappe.desk.form.linked_with.get_submitted_linked_docs",
        args: {
          doctype: me2.doc.doctype,
          name: me2.doc.name
        },
        freeze: true
      }).then((r) => {
        if (!r.exc) {
          let doctypes_to_cancel = (r.message.docs || []).map((value) => value.doctype).filter((value) => !me2.ignore_doctypes_on_cancel_all.includes(value));
          if (doctypes_to_cancel.length) {
            return me2._cancel_all(r, btn, callback, on_error);
          }
        }
        return me2._cancel(btn, callback, on_error, false);
      });
    }
    _cancel_all(r, btn, callback, on_error) {
      const me2 = this;
      let links_text = "";
      let links = r.message.docs;
      const doctypes = Array.from(new Set(links.map((link) => link.doctype)));
      me2.ignore_doctypes_on_cancel_all = me2.ignore_doctypes_on_cancel_all || [];
      for (let doctype of doctypes) {
        if (!me2.ignore_doctypes_on_cancel_all.includes(doctype)) {
          let docnames = links.filter((link) => link.doctype == doctype).map((link) => frappe.utils.get_form_link(link.doctype, link.name, true)).join(", ");
          links_text += `<li><strong>${__(doctype)}</strong>: ${docnames}</li>`;
        }
      }
      links_text = `<ul>${links_text}</ul>`;
      let confirm_message = __("{0} {1} is linked with the following submitted documents: {2}", [
        __(me2.doc.doctype).bold(),
        me2.doc.name,
        links_text
      ]);
      let can_cancel = links.every((link) => frappe.model.can_cancel(link.doctype));
      if (can_cancel) {
        confirm_message += __("Do you want to cancel all linked documents?");
      } else {
        confirm_message += __("You do not have permissions to cancel all linked documents.");
      }
      let d2 = new frappe.ui.Dialog(
        {
          title: __("Cancel All Documents"),
          fields: [
            {
              fieldtype: "HTML",
              options: `<p class="frappe-confirm-message">${confirm_message}</p>`
            }
          ]
        },
        () => me2.handle_save_fail(btn, on_error)
      );
      if (can_cancel) {
        d2.set_primary_action(__("Cancel All"), () => {
          d2.hide();
          frappe.call({
            method: "frappe.desk.form.linked_with.cancel_all_linked_docs",
            args: {
              docs: links,
              ignore_doctypes_on_cancel_all: me2.ignore_doctypes_on_cancel_all || []
            },
            freeze: true,
            callback: (resp) => {
              if (!resp.exc) {
                me2.reload_doc();
                me2._cancel(btn, callback, on_error, true);
              }
            }
          });
        });
      }
      d2.show();
    }
    _cancel(btn, callback, on_error, skip_confirm) {
      const me2 = this;
      const cancel_doc = () => {
        frappe.validated = true;
        me2.script_manager.trigger("before_cancel").then(() => {
          if (!frappe.validated) {
            return me2.handle_save_fail(btn, on_error);
          }
          let after_cancel = function(r) {
            if (r.exc) {
              me2.handle_save_fail(btn, on_error);
            } else {
              frappe.utils.play_sound("cancel");
              me2.refresh();
              callback && callback();
              me2.script_manager.trigger("after_cancel");
            }
          };
          frappe.ui.form.save(me2, "cancel", after_cancel, btn);
        });
      };
      if (skip_confirm) {
        cancel_doc();
      } else {
        frappe.confirm(
          __("Permanently Cancel {0}?", [this.docname]),
          cancel_doc,
          me2.handle_save_fail(btn, on_error)
        );
      }
    }
    savetrash() {
      this.validate_form_action("Delete");
      frappe.model.delete_doc(this.doctype, this.docname, () => {
        this.__deleted();
      });
    }
    amend_doc() {
      if (!this.fields_dict.amended_from) {
        frappe.msgprint(__('"amended_from" field must be present to do an amendment.'));
        return;
      }
      frappe.xcall("frappe.client.is_document_amended", {
        doctype: this.doc.doctype,
        docname: this.doc.name
      }).then((is_amended) => {
        if (is_amended) {
          frappe.throw(
            __("This document is already amended, you cannot ammend it again")
          );
        }
        this.validate_form_action("Amend");
        let me2 = this;
        let fn = function(newdoc) {
          newdoc.amended_from = me2.docname;
          if (me2.fields_dict && me2.fields_dict.amendment_date) {
            newdoc.amendment_date = frappe.datetime.obj_to_str(new Date());
          }
        };
        this.copy_doc(fn, 1);
        frappe.utils.play_sound("click");
      });
    }
    validate_form_action(action, resolve) {
      let perm_to_check = this.action_perm_type_map[action];
      let allowed_for_workflow = false;
      let perms = frappe.perm.get_perm(this.doc.doctype)[0];
      if (frappe.workflow.is_read_only(this.doctype, this.docname) && (perms.write || perms.create || perms.submit || perms.cancel) || !frappe.workflow.is_read_only(this.doctype, this.docname)) {
        allowed_for_workflow = true;
      }
      if (!this.perm[0][perm_to_check] && !allowed_for_workflow) {
        if (resolve) {
          resolve();
        }
        frappe.throw(
          __(
            "No permission to '{0}' {1}",
            [__(action), __(this.doc.doctype)],
            "{0} = verb, {1} = object"
          )
        );
      }
    }
    enable_save() {
      this.save_disabled = false;
      this.toolbar.set_primary_action();
    }
    disable_save(set_dirty = false) {
      this.save_disabled = true;
      this.toolbar.current_status = null;
      this.set_dirty = set_dirty;
      this.page.clear_primary_action();
    }
    disable_form() {
      this.set_read_only();
      for (const field of this.fields) {
        this.set_df_property(field.df.fieldname, "read_only", "1");
      }
      this.disable_save();
    }
    handle_save_fail(btn, on_error) {
      $(btn).prop("disabled", false);
      if (on_error) {
        on_error();
      }
    }
    trigger_link_fields() {
      if (this.is_new() && this.doc.__run_link_triggers) {
        $.each(this.fields_dict, function(fieldname, field) {
          if (field.df.fieldtype == "Link" && this.doc[fieldname]) {
            field.set_value(this.doc[fieldname], true);
          }
        });
        delete this.doc.__run_link_triggers;
      }
    }
    show_conflict_message() {
      if (this.doc.__needs_refresh) {
        if (this.doc.__unsaved) {
          this.dashboard.clear_headline();
          this.dashboard.set_headline_alert(
            `${__("This form has been modified after you have loaded it")}<button class="btn btn-xs btn-primary pull-right" onclick="cur_frm.reload_doc()">${__("Refresh")}</button>`,
            "alert-warning"
          );
        } else {
          this.debounced_reload_doc();
        }
      }
    }
    show_submit_message() {
      if (this.meta.is_submittable && this.perm[0] && this.perm[0].submit && !this.is_dirty() && !this.is_new() && !frappe.model.has_workflow(this.doctype) && this.doc.docstatus === 0) {
        this.dashboard.add_comment(__("Submit this document to confirm"), "blue", true);
      }
    }
    show_web_link() {
      if (!this.doc.__islocal && this.doc.__onload && this.doc.__onload.is_website_generator) {
        this.web_link && this.web_link.remove();
        if (this.doc.__onload.published) {
          this.add_web_link(`/${this.doc.route}`);
        }
      }
    }
    add_web_link(path, label) {
      label = __(label) || __("See on Website");
      this.web_link = this.sidebar.add_user_action(__(label), function() {
      }).attr("href", path || this.doc.route).attr("target", "_blank");
    }
    fetch_permissions() {
      let dt2 = this.parent_doctype ? this.parent_doctype : this.doctype;
      this.perm = frappe.perm.get_perm(dt2, this.doc);
    }
    has_read_permission() {
      if (!this.perm[0].read) {
        return 0;
      }
      return 1;
    }
    check_doctype_conflict(docname) {
      if (this.doctype == "DocType" && docname == "DocType") {
        frappe.msgprint(__("Allowing DocType, DocType. Be careful!"));
      } else if (this.doctype == "DocType") {
        if (frappe.views.formview[docname] || frappe.pages[`List/${docname}`]) {
          window.location.reload();
        }
      } else if (frappe.views.formview.DocType && frappe.views.formview.DocType.frm.opendocs[this.doctype]) {
        window.location.reload();
      }
    }
    rename_notify(dt2, old, name) {
      if (this.meta.istable) {
        return;
      }
      if (this.docname == old) {
        this.docname = name;
      } else {
        return;
      }
      if (this && this.opendocs[old] && frappe.meta.docfield_copy[dt2]) {
        frappe.meta.docfield_copy[dt2][name] = frappe.meta.docfield_copy[dt2][old];
        delete frappe.meta.docfield_copy[dt2][old];
      }
      delete this.opendocs[old];
      this.opendocs[name] = true;
    }
    print_doc() {
      frappe.route_options = {
        frm: this
      };
      frappe.set_route("print", this.doctype, this.doc.name);
    }
    navigate_records(prev) {
      let filters, sort_field, sort_order;
      let list_view = frappe.get_list_view(this.doctype);
      if (list_view) {
        filters = list_view.get_filters_for_args();
        sort_field = list_view.sort_by;
        sort_order = list_view.sort_order;
      } else {
        let list_settings = frappe.get_user_settings(this.doctype).List;
        if (list_settings) {
          filters = list_settings.filters;
          sort_field = list_settings.sort_by;
          sort_order = list_settings.sort_order;
        }
      }
      let args = {
        doctype: this.doctype,
        value: this.docname,
        filters,
        sort_order,
        sort_field,
        prev
      };
      frappe.call("frappe.desk.form.utils.get_next", args).then((r) => {
        if (r.message) {
          frappe.set_route("Form", this.doctype, r.message);
          this.focus_on_first_input();
        }
      });
    }
    rename_doc() {
      frappe.model.rename_doc(this.doctype, this.docname, () => this.refresh_header());
    }
    share_doc() {
      this.shared.show();
    }
    email_doc(message) {
      new frappe.views.CommunicationComposer({
        doc: this.doc,
        frm: this,
        subject: `${__(this.meta.name)}: ${this.docname}`,
        recipients: this.doc.email || this.doc.email_id || this.doc.contact_email,
        attach_document_print: true,
        message
      });
    }
    copy_doc(onload, from_amend) {
      this.validate_form_action("Create");
      let newdoc = frappe.model.copy_doc(this.doc, from_amend);
      newdoc.idx = null;
      newdoc.__run_link_triggers = false;
      if (onload) {
        onload(newdoc);
      }
      frappe.set_route("Form", newdoc.doctype, newdoc.name);
    }
    reload_doc() {
      this.check_doctype_conflict(this.docname);
      if (!this.doc.__islocal) {
        frappe.model.remove_from_locals(this.doctype, this.docname);
        return frappe.model.with_doc(this.doctype, this.docname, () => {
          this.refresh();
        });
      }
    }
    refresh_field(fname) {
      if (this.fields_dict[fname] && this.fields_dict[fname].refresh) {
        this.fields_dict[fname].refresh();
        this.layout.refresh_dependency();
        this.layout.refresh_sections();
      }
    }
    add_fetch(link_field, source_field, target_field, target_doctype) {
      if (!target_doctype) {
        target_doctype = "*";
      }
      this.fetch_dict.setDefault(target_doctype, {}).setDefault(link_field, {})[target_field] = source_field;
    }
    has_perm(ptype) {
      return frappe.perm.has_perm(this.doctype, 0, ptype, this.doc);
    }
    dirty() {
      this.doc.__unsaved = 1;
      this.$wrapper.trigger("dirty");
      if (!frappe.boot.developer_mode) {
        addEventListener("beforeunload", this.beforeUnloadListener, { capture: true });
      }
    }
    get_docinfo() {
      return frappe.model.docinfo[this.doctype][this.docname];
    }
    is_dirty() {
      return Boolean(this.doc.__unsaved);
    }
    is_new() {
      return this.doc.__islocal;
    }
    get_perm(permlevel, access_type) {
      return this.perm[permlevel] ? this.perm[permlevel][access_type] : null;
    }
    set_intro(txt, color) {
      this.dashboard.set_headline_alert(txt, color);
    }
    set_footnote(txt) {
      this.footnote_area = frappe.utils.set_footnote(this.footnote_area, this.body, txt);
    }
    add_custom_button(label, fn, group) {
      if (group && group.indexOf("fa fa-") !== -1) {
        group = null;
      }
      let btn = this.page.add_inner_button(label, fn, group);
      if (btn) {
        let menu_item_label = group ? `${group} > ${label}` : label;
        let menu_item = this.page.add_menu_item(menu_item_label, fn, false);
        menu_item.parent().addClass("hidden-xl");
        this.custom_buttons[label] = btn;
      }
      return btn;
    }
    change_custom_button_type(label, group, type) {
      this.page.change_inner_button_type(label, group, type);
    }
    clear_custom_buttons() {
      this.page.clear_inner_toolbar();
      this.page.clear_user_actions();
      this.custom_buttons = {};
    }
    remove_custom_button(label, group) {
      this.page.remove_inner_button(label, group);
    }
    scroll_to_element() {
      if (frappe.route_options && frappe.route_options.scroll_to) {
        let { scroll_to } = frappe.route_options;
        delete frappe.route_options.scroll_to;
        let selector = [];
        for (let key2 in scroll_to) {
          let value = scroll_to[key2];
          selector.push(repl('[data-%(key)s="%(value)s"]', { key: key2, value }));
        }
        selector = $(selector.join(" "));
        if (selector.length) {
          frappe.utils.scroll_to(selector);
        }
      } else if (window.location.hash) {
        if ($(window.location.hash).length) {
          frappe.utils.scroll_to(window.location.hash, true, 200, null, null, true);
        } else {
          this.scroll_to_field(window.location.hash.replace("#", "")) && history.replaceState(null, null, " ");
        }
      }
    }
    show_success_action() {
      const route = frappe.get_route();
      if (route[0] !== "Form") {
        return;
      }
      if (this.meta.is_submittable && this.doc.docstatus !== 1) {
        return;
      }
      const success_action = new frappe.ui.form.SuccessAction(this);
      success_action.show();
    }
    get_doc() {
      return locals[this.doctype][this.docname];
    }
    set_currency_labels(fields_list, currency, parentfield) {
      if (!currency) {
        return;
      }
      let me2 = this;
      let doctype = parentfield ? this.fields_dict[parentfield].grid.doctype : this.doc.doctype;
      let field_label_map = {};
      let grid_field_label_map = {};
      $.each(fields_list, function(i, fname) {
        let docfield = frappe.meta.docfield_map[doctype][fname];
        if (docfield) {
          var label = __(docfield.label || "").replace(/\([^\)]*\)/g, "");
          if (parentfield) {
            grid_field_label_map[`${doctype}-${fname}`] = `${label.trim()} (${__(currency)})`;
          } else {
            field_label_map[fname] = `${label.trim()} (${currency})`;
          }
        }
      });
      $.each(field_label_map, function(fname, label) {
        me2.fields_dict[fname].set_label(label);
      });
      $.each(grid_field_label_map, function(fname, label) {
        fname = fname.split("-");
        me2.fields_dict[parentfield].grid.update_docfield_property(fname[1], "label", label);
      });
    }
    field_map(fnames, fn) {
      if (typeof fnames === "string") {
        if (fnames == "*") {
          fnames = Object.keys(this.fields_dict);
        } else {
          fnames = [fnames];
        }
      }
      for (let i = 0, l = fnames.length; i < l; i++) {
        let fieldname = fnames[i];
        let field = frappe.meta.get_docfield(this.doctype, fieldname, this.docname);
        if (field) {
          fn(field);
          this.refresh_field(fieldname);
        }
      }
    }
    get_docfield(fieldname1, fieldname2) {
      if (fieldname2) {
        let doctype = this.get_docfield(fieldname1).options;
        return frappe.meta.get_docfield(doctype, fieldname2, this.docname);
      }
      return frappe.meta.get_docfield(this.doctype, fieldname1, this.docname);
    }
    set_df_property(fieldname, property, value, docname, table_field, table_row_name = null) {
      let df;
      if (!docname || !table_field) {
        df = this.get_docfield(fieldname);
      } else {
        const { grid } = this.fields_dict[fieldname];
        const filtered_fields = frappe.utils.filter_dict(grid.docfields, {
          fieldname: table_field
        });
        if (filtered_fields.length) {
          df = frappe.meta.get_docfield(
            filtered_fields[0].parent,
            table_field,
            table_row_name
          );
        }
      }
      if (df && df[property] != value) {
        df[property] = value;
        if (table_field && table_row_name) {
          if (this.fields_dict[fieldname].grid.grid_rows_by_docname[table_row_name]) {
            this.fields_dict[fieldname].grid.grid_rows_by_docname[table_row_name].refresh_field(fieldname);
          }
        } else {
          this.refresh_field(fieldname);
        }
      }
    }
    toggle_enable(fnames, enable) {
      this.field_map(fnames, function(field) {
        field.read_only = enable ? 0 : 1;
      });
    }
    toggle_reqd(fnames, mandatory) {
      this.field_map(fnames, function(field) {
        field.reqd = mandatory ? true : false;
      });
    }
    toggle_display(fnames, show) {
      this.field_map(fnames, function(field) {
        field.hidden = show ? 0 : 1;
      });
    }
    get_files() {
      return this.attachments ? frappe.utils.sort(this.attachments.get_attachments(), "file_name", "string") : [];
    }
    set_query(fieldname, opt1, opt2) {
      if (opt2) {
        this.fields_dict[opt1].grid.get_field(fieldname).get_query = opt2;
      } else {
        if (this.fields_dict[fieldname]) {
          this.fields_dict[fieldname].get_query = opt1;
        }
      }
    }
    clear_table(fieldname) {
      frappe.model.clear_table(this.doc, fieldname);
    }
    add_child(fieldname, values) {
      let doc = frappe.model.add_child(
        this.doc,
        frappe.meta.get_docfield(this.doctype, fieldname).options,
        fieldname
      );
      if (values) {
        let d2 = {};
        let unique_keys = ["idx", "name"];
        Object.keys(values).map((key2) => {
          if (!unique_keys.includes(key2)) {
            d2[key2] = values[key2];
          }
        });
        $.extend(doc, d2);
      }
      return doc;
    }
    set_value(field, value, if_missing, skip_dirty_trigger = false) {
      let me2 = this;
      let _set = function(f, v) {
        let fieldobj = me2.fields_dict[f];
        if (fieldobj) {
          if (!if_missing || !frappe.model.has_value(me2.doctype, me2.doc.name, f)) {
            if (frappe.model.table_fields.includes(fieldobj.df.fieldtype) && $.isArray(v)) {
              frappe.model.clear_table(me2.doc, fieldobj.df.fieldname);
              const standard_fields = [
                ...frappe.model.std_fields_list,
                ...frappe.model.child_table_field_list
              ];
              for (const [idx, d2] of v.entries()) {
                let child = frappe.model.add_child(
                  me2.doc,
                  fieldobj.df.options,
                  fieldobj.df.fieldname,
                  idx + 1
                );
                let doc_copy = __spreadValues({}, d2);
                for (const field2 of standard_fields) {
                  delete doc_copy[field2];
                }
                $.extend(child, doc_copy);
              }
              me2.refresh_field(f);
              return Promise.resolve();
            }
            return frappe.model.set_value(
              me2.doctype,
              me2.doc.name,
              f,
              v,
              me2.fieldtype,
              skip_dirty_trigger
            );
          }
        } else {
          frappe.msgprint(__("Field {0} not found.", [f]));
          throw "frm.set_value";
        }
      };
      if (typeof field === "string") {
        return _set(field, value);
      } else if ($.isPlainObject(field)) {
        let tasks = [];
        for (let f in field) {
          let v = field[f];
          if (me2.get_field(f)) {
            tasks.push(() => _set(f, v));
          }
        }
        return frappe.run_serially(tasks);
      }
    }
    call(opts, args, callback) {
      let me2 = this;
      if (typeof opts === "string") {
        opts = {
          method: opts,
          doc: this.doc,
          args,
          callback
        };
      }
      if (opts.doc) {
        opts.original_callback = opts.callback;
        opts.callback = function(r) {
          if (!r.exc) {
            me2.refresh_fields();
          }
          opts.original_callback && opts.original_callback(r);
        };
      } else {
        if (opts.method.indexOf(".") === -1) {
          opts.method = `${frappe.model.get_server_module_name(me2.doctype)}.${opts.method}`;
        }
        opts.original_callback = opts.callback;
        opts.callback = function(r) {
          if ($.isPlainObject(r.message)) {
            if (opts.child) {
              opts.child = locals[opts.child.doctype][opts.child.name];
              let std_field_list = ["doctype"].concat(frappe.model.std_fields_list).concat(frappe.model.child_table_field_list);
              for (let key2 in r.message) {
                if (std_field_list.indexOf(key2) === -1) {
                  opts.child[key2] = r.message[key2];
                }
              }
              me2.fields_dict[opts.child.parentfield].refresh();
            } else {
              me2.set_value(r.message);
            }
          }
          opts.original_callback && opts.original_callback(r);
        };
      }
      return frappe.call(opts);
    }
    get_field(field) {
      return this.fields_dict[field];
    }
    set_read_only() {
      const docperms = frappe.perm.get_perm(this.doc.doctype);
      this.perm = docperms.map((p) => ({
        read: p.read,
        cancel: p.cancel,
        share: p.share,
        print: p.print,
        email: p.email
      }));
    }
    trigger(event, doctype, docname) {
      return this.script_manager.trigger(event, doctype, docname);
    }
    get_formatted(fieldname) {
      return frappe.format(
        this.doc[fieldname],
        frappe.meta.get_docfield(this.doctype, fieldname, this.docname),
        { no_icon: true },
        this.doc
      );
    }
    open_grid_row() {
      return frappe.ui.form.get_open_grid_form();
    }
    get_title() {
      if (this.meta.title_field) {
        return this.doc[this.meta.title_field];
      }
      return String(this.doc.name);
    }
    get_selected() {
      let selected = {}, me2 = this;
      for (const df of frappe.meta.get_table_fields(this.doctype)) {
        let _selected = [];
        if (me2.fields_dict[df.fieldname].grid) {
          _selected = me2.fields_dict[df.fieldname].grid.get_selected();
        }
        if (_selected.length) {
          selected[df.fieldname] = _selected;
        }
      }
      return selected;
    }
    set_indicator_formatter(fieldname, get_color, get_text) {
      let doctype;
      if (frappe.meta.docfield_map[this.doctype][fieldname]) {
        doctype = this.doctype;
      } else {
        frappe.meta.get_table_fields(this.doctype).every(function(df) {
          if (frappe.meta.docfield_map[df.options][fieldname]) {
            doctype = df.options;
            return false;
          }
          return true;
        });
      }
      frappe.meta.docfield_map[doctype][fieldname].formatter = function(value, df, options, doc) {
        if (value) {
          let label;
          if (get_text) {
            label = get_text(doc);
          } else if (frappe.form.link_formatters[df.options]) {
            label = frappe.form.link_formatters[df.options](value, doc);
          } else {
            label = value;
          }
          const escaped_name = encodeURIComponent(value);
          return `
						<a class="indicator ${get_color(doc || {})}"
							href="/app/${frappe.router.slug(df.options)}/${escaped_name}"
							data-doctype="${df.options}"
							data-name="${value}">
							${label}
						</a>
					`;
        }
        return "";
      };
    }
    can_create(doctype) {
      if (!frappe.model.can_create(doctype)) {
        return false;
      }
      if (this.custom_make_buttons && this.custom_make_buttons[doctype]) {
        const key2 = __(this.custom_make_buttons[doctype]);
        return Boolean(this.custom_buttons[key2]);
      }
      if (this.can_make_methods && this.can_make_methods[doctype]) {
        return this.can_make_methods[doctype](this);
      }
      if (this.meta.is_submittable && !this.doc.docstatus == 1) {
        return false;
      }
      return true;
    }
    make_new(doctype) {
      let me2 = this;
      if (this.make_methods && this.make_methods[doctype]) {
        return this.make_methods[doctype](this);
      } else if (this.custom_make_buttons && this.custom_make_buttons[doctype]) {
        this.custom_buttons[__(this.custom_make_buttons[doctype])].trigger("click");
      } else {
        frappe.model.with_doctype(doctype, function() {
          let new_doc = frappe.model.get_new_doc(doctype, null, null, true);
          me2.set_link_field(doctype, new_doc);
          frappe.ui.form.make_quick_entry(doctype, null, null, new_doc);
        });
      }
    }
    set_link_field(doctype, new_doc) {
      let me2 = this;
      for (const df of frappe.get_meta(doctype).fields) {
        if (df.fieldtype === "Link" && df.options === me2.doctype) {
          new_doc[df.fieldname] = me2.doc.name;
        } else if (["Link", "Dynamic Link"].includes(df.fieldtype) && me2.doc[df.fieldname]) {
          new_doc[df.fieldname] = me2.doc[df.fieldname];
        } else if (df.fieldtype === "Table" && df.options && df.reqd) {
          let row = new_doc[df.fieldname][0];
          me2.set_link_field(df.options, row);
        }
      }
    }
    update_in_all_rows(table_fieldname, fieldname, value) {
      if (value === void 0) {
        return;
      }
      for (const child of frappe.model.get_children(this.doc, table_fieldname).filter((child2) => !frappe.model.has_value(child2.doctype, child2.name, fieldname))) {
        frappe.model.set_value(child.doctype, child.name, fieldname, value);
      }
    }
    get_sum(table_fieldname, fieldname) {
      let sum = 0;
      for (let d2 of this.doc[table_fieldname] || []) {
        sum += d2[fieldname];
      }
      return sum;
    }
    scroll_to_field(fieldname, focus = true) {
      var _a;
      let field = this.get_field(fieldname);
      if (!field) {
        return;
      }
      let $el = field.$wrapper;
      if (field.tab && !field.tab.is_active()) {
        field.tab.set_active();
      }
      if ((_a = field.section) == null ? void 0 : _a.is_collapsed()) {
        field.section.collapse(false);
      }
      frappe.utils.scroll_to($el, true, 15);
      if (focus) {
        setTimeout(() => {
          $el.find("input, select, textarea").focus();
        }, 500);
      }
      let control_element = $el.closest(".frappe-control");
      control_element.addClass("highlight");
      setTimeout(() => {
        control_element.removeClass("highlight");
      }, 2e3);
      return true;
    }
    setup_docinfo_change_listener() {
      let { doctype } = this;
      let { docname } = this;
      if (this.doc && !this.is_new()) {
        frappe.socketio.doc_subscribe(doctype, docname);
      }
      frappe.realtime.off("docinfo_update");
      frappe.realtime.on("docinfo_update", ({ doc, key: key2, action = "update" }) => {
        if (!doc.reference_doctype || !doc.reference_name || doc.reference_doctype !== doctype || doc.reference_name !== docname) {
          return;
        }
        let doc_list = frappe.model.docinfo[doctype][docname][key2] || [];
        let docindex = doc_list.findIndex((old_doc) => old_doc.name === doc.name);
        if (action === "add") {
          frappe.model.docinfo[doctype][docname][key2].push(doc);
        }
        if (docindex > -1) {
          if (action === "update") {
            frappe.model.docinfo[doctype][docname][key2].splice(docindex, 1, doc);
          }
          if (action === "delete") {
            frappe.model.docinfo[doctype][docname][key2].splice(docindex, 1);
          }
        }
        if (!(["add", "update"].includes(action) && doc.doctype === "Comment" && doc.owner === frappe.session.user)) {
          this.timeline && this.timeline.refresh();
        }
      });
    }
    set_fields_as_options(fieldname, reference_doctype, filter_function, default_options = [], table_fieldname) {
      if (!reference_doctype) {
        return Promise.resolve();
      }
      let options = default_options || [];
      if (!filter_function) {
        filter_function = (f) => f;
      }
      return new Promise((resolve) => {
        frappe.model.with_doctype(reference_doctype, () => {
          frappe.get_meta(reference_doctype).fields.map((df) => {
            filter_function(df) && options.push({ label: df.label || df.fieldname, value: df.fieldname });
          });
          options && this.set_df_property(
            fieldname,
            "options",
            options,
            this.doc.name,
            table_fieldname
          );
          resolve(options);
        });
      });
    }
    set_active_tab(tab) {
      if (!this.active_tab_map) {
        this.active_tab_map = {};
      }
      this.active_tab_map[this.docname] = tab;
    }
    get_active_tab() {
      return this.active_tab_map && this.active_tab_map[this.docname];
    }
    get_involved_users() {
      let user_fields = this.meta.fields.filter((d2) => d2.fieldtype === "Link" && d2.options === "User").map((d2) => d2.fieldname);
      user_fields = [...user_fields, "owner", "modified_by"];
      let involved_users = user_fields.map((field) => this.doc[field]);
      const docinfo = this.get_docinfo();
      involved_users = involved_users.concat(
        docinfo.communications.map((d2) => d2.sender && d2.delivery_status === "sent"),
        docinfo.comments.map((d2) => d2.owner),
        docinfo.versions.map((d2) => d2.owner),
        docinfo.assignments.map((d2) => d2.owner)
      );
      return involved_users.uniqBy((u) => u).filter((user) => !["Administrator", frappe.session.user].includes(user)).filter(Boolean);
    }
  };
  var Form_default = Form;

  // guigu/public/js/FormDetail/loadDoc.ts
  async function loadDoc(doctype, name) {
    const doc = frappe.get_doc(doctype, name);
    if (doc && frappe.model.get_docinfo(doctype, name) && (doc.__islocal || frappe.model.is_fresh(doc))) {
      return true;
    }
    return new Promise((resolve) => {
      frappe.model.with_doc(doctype, name, (name2, r) => {
        if (r && r["403"]) {
          return resolve(false);
        }
        if (!(locals[doctype] && locals[doctype][name2])) {
          return resolve(false);
        }
        resolve(true);
      });
    });
  }

  // guigu/public/js/FormDetail/useStore.ts
  var import_vue16 = __require("vue");
  var import_pinia = __require("pinia");
  var useStore_default = (0, import_pinia.defineStore)("Guigu:GlobalView:FormDetail", () => {
    const currentTab = (0, import_vue16.shallowRef)("");
    return { currentTab };
  });

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Main.vue?type=script
  var Main_default = /* @__PURE__ */ (0, import_vue17.defineComponent)(__spreadProps(__spreadValues({}, { name: "FormDetail" }), {
    __name: "Main",
    props: {
      meta: { type: null, required: true },
      options: { type: Object, required: true },
      value: { type: null, required: true },
      name: { type: String, required: true },
      loading: { type: Boolean, required: false },
      isHideClose: { type: Boolean, required: false }
    },
    emits: ["refresh", "update:value"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      function hide() {
        emit("update:value");
      }
      const detailState = useStore_default();
      const currentTab = (0, import_vue18.computed)({
        get: () => detailState.currentTab,
        set: (s) => {
          detailState.currentTab = s;
        }
      });
      const single_column = (0, import_vue18.computed)(() => {
        var _a;
        return Boolean((_a = props.meta) == null ? void 0 : _a.hide_toolbar);
      });
      const open = (0, import_core.useStorage)(`mainView:FormDetail:sider:${props.meta.name}`, true);
      const tt2 = __;
      const root = (0, import_vue18.shallowRef)();
      let layout;
      const onUpdate = ({ doctype, name, modified }) => {
        if (doctype !== props.meta.name) {
          return;
        }
        if (name !== props.name) {
          return;
        }
        if (!layout) {
          return;
        }
        if (modified === layout.doc.modified) {
          return;
        }
        if (layout.is_dirty()) {
          layout.show_conflict_message();
        } else {
          layout.reload_doc();
        }
      };
      (0, import_vue18.onMounted)(() => {
        const body = root.value;
        if (!body) {
          return;
        }
        const doctype = props.meta.name;
        const { name } = props;
        loadDoc(doctype, name).then((r) => {
          if (!r) {
            return;
          }
          layout = new Form_default(doctype, name, body, hide, currentTab);
          layout.refresh(name);
        });
        frappe.realtime.on("doc_update", onUpdate);
      });
      (0, import_vue18.onUnmounted)(() => {
        frappe.realtime.off("doc_update", onUpdate);
      });
      const __returned__ = { props, emit, hide, detailState, currentTab, single_column, open, tt: tt2, root, get layout() {
        return layout;
      }, set layout(v) {
        layout = v;
      }, onUpdate, Header: Header_default3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  }));

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/Main.vue?type=template
  var import_vue19 = __require("vue");
  var _hoisted_110 = { ref: "root" };
  var _hoisted_26 = { class: "container page-body" };
  var _hoisted_36 = /* @__PURE__ */ (0, import_vue19.createElementVNode)("div", { class: "page-toolbar hide" }, [
    /* @__PURE__ */ (0, import_vue19.createElementVNode)("div", { class: "container" })
  ], -1);
  var _hoisted_45 = { class: "page-wrapper" };
  var _hoisted_53 = { class: "page-content" };
  var _hoisted_63 = /* @__PURE__ */ (0, import_vue19.createElementVNode)("div", { class: "workflow-button-area btn-group pull-right hide" }, null, -1);
  var _hoisted_72 = /* @__PURE__ */ (0, import_vue19.createElementVNode)("div", { class: "clearfix" }, null, -1);
  var _hoisted_82 = { class: "row layout-main" };
  var _hoisted_92 = /* @__PURE__ */ (0, import_vue19.createStaticVNode)('<div class="col layout-main-section-wrapper"><div class="layout-main-section"><div><div class="std-form-layout"><div class="form-layout"><div class="form-message hidden"></div><div class="form-page"></div></div></div></div></div><div class="layout-footer hide"></div></div>', 1);
  var _hoisted_102 = ["hidden"];
  function render6(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue19.openBlock)(), (0, import_vue19.createElementBlock)("div", _hoisted_110, [
      (0, import_vue19.createVNode)($setup["Header"], {
        open: $setup.open,
        "onUpdate:open": _cache[0] || (_cache[0] = ($event) => $setup.open = $event),
        hasSider: !$setup.single_column,
        isHideClose: $props.isHideClose,
        onHide: $setup.hide
      }, null, 8, ["open", "hasSider", "isHideClose"]),
      (0, import_vue19.createElementVNode)("div", _hoisted_26, [
        _hoisted_36,
        (0, import_vue19.createElementVNode)("div", _hoisted_45, [
          (0, import_vue19.createElementVNode)("div", _hoisted_53, [
            _hoisted_63,
            _hoisted_72,
            (0, import_vue19.createElementVNode)("div", _hoisted_82, [
              _hoisted_92,
              !$setup.single_column ? ((0, import_vue19.openBlock)(), (0, import_vue19.createElementBlock)("div", {
                key: 0,
                hidden: !$setup.open,
                class: "col-lg-2 layout-side-section"
              }, null, 8, _hoisted_102)) : (0, import_vue19.createCommentVNode)("v-if", true)
            ])
          ])
        ])
      ])
    ], 512);
  }

  // guigu/public/js/FormDetail/Main.vue
  Main_default.render = render6;
  Main_default.__file = "guigu/public/js/FormDetail/Main.vue";
  var Main_default2 = Main_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/index.vue?type=script
  var FormDetail_default = /* @__PURE__ */ (0, import_vue20.defineComponent)(__spreadProps(__spreadValues({}, { name: "FormDetail:Root", inheritAttrs: false }), {
    __name: "index",
    props: {
      meta: { type: null, required: true },
      options: { type: Object, required: true },
      value: { type: null, required: false },
      loading: { type: Boolean, required: false },
      linkField: { type: String, required: false },
      isHideClose: { type: Boolean, required: false }
    },
    emits: ["refresh", "update:value"],
    setup(__props, { expose: __expose, emit }) {
      __expose();
      const props = __props;
      function refresh() {
        emit("refresh");
      }
      const doc = (0, import_vue21.computed)({
        get: () => props.value,
        set: (v) => emit("update:value", v)
      });
      let docMetaLoadingDoctype = "";
      let DocTypeLoadingId = 0;
      const linkField = (0, import_vue21.computed)(() => props.linkField);
      const docMetaLoading = (0, import_vue21.shallowRef)();
      const link = (0, import_vue21.computed)(() => getLink(doc.value, props.meta, linkField.value));
      const name = (0, import_vue21.computed)(() => {
        var _a, _b;
        return ((_a = link.value) == null ? void 0 : _a[1]) || ((_b = doc.value) == null ? void 0 : _b.name);
      });
      (0, import_vue21.watch)(() => {
        var _a;
        return (_a = link.value) == null ? void 0 : _a[0];
      }, (doctype) => {
        if (!doctype) {
          return;
        }
        if (doctype === docMetaLoadingDoctype) {
          return;
        }
        docMetaLoadingDoctype = doctype;
        docMetaLoading.value = void 0;
        DocTypeLoadingId++;
        const id = DocTypeLoadingId;
        (async () => {
          await new Promise((r) => frappe.model.with_doctype(doctype, r));
          const meta = frappe.get_doc("DocType", doctype);
          if (id !== DocTypeLoadingId) {
            return;
          }
          if (docMetaLoadingDoctype !== doctype) {
            return;
          }
          docMetaLoading.value = meta || void 0;
        })();
      }, { immediate: true });
      const docMeta = (0, import_vue21.computed)(() => {
        var _a;
        const doctype = (_a = link.value) == null ? void 0 : _a[0];
        if (!doctype) {
          return props.meta;
        }
        if (doctype !== docMetaLoadingDoctype) {
          return;
        }
        return docMetaLoading.value;
      });
      const __returned__ = { props, emit, refresh, doc, get docMetaLoadingDoctype() {
        return docMetaLoadingDoctype;
      }, set docMetaLoadingDoctype(v) {
        docMetaLoadingDoctype = v;
      }, get DocTypeLoadingId() {
        return DocTypeLoadingId;
      }, set DocTypeLoadingId(v) {
        DocTypeLoadingId = v;
      }, linkField, docMetaLoading, link, name, docMeta, Main: Main_default2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  }));

  // sfc-template:/Users/px/Code/frappe-bench/apps/guigu/guigu/public/js/FormDetail/index.vue?type=template
  var import_vue22 = __require("vue");
  function render7(_ctx, _cache, $props, $setup, $data, $options) {
    return $props.value && $setup.docMeta && $setup.name ? ((0, import_vue22.openBlock)(), (0, import_vue22.createBlock)($setup["Main"], {
      key: `${$setup.docMeta.name}:${$props.value.name}`,
      meta: $setup.docMeta,
      options: $props.options,
      loading: $props.loading,
      name: $setup.name,
      isHideClose: $props.isHideClose,
      value: $setup.doc,
      "onUpdate:value": _cache[0] || (_cache[0] = ($event) => $setup.doc = $event),
      onRefresh: $setup.refresh
    }, null, 8, ["meta", "options", "loading", "name", "isHideClose", "value"])) : (0, import_vue22.createCommentVNode)("v-if", true);
  }

  // guigu/public/js/FormDetail/index.vue
  FormDetail_default.render = render7;
  FormDetail_default.__file = "guigu/public/js/FormDetail/index.vue";
  var FormDetail_default2 = FormDetail_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=script
  var Detail_default = /* @__PURE__ */ (0, import_vue23.defineComponent)({
    __name: "Detail",
    props: {
      doctype: { type: String, required: true },
      name: { type: String, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const meta = (0, import_vue24.shallowRef)();
      const detail = (0, import_vue24.ref)();
      const loading = (0, import_vue24.ref)(false);
      (0, import_vue24.watch)(() => props.doctype, () => {
        getMeta(props.doctype);
      }, { immediate: true });
      (0, import_vue24.watch)(() => props.name, () => {
        getDetail();
      }, { immediate: true });
      async function getDetail() {
        loading.value = true;
        if (!props.name) {
          detail.value = void 0;
          loading.value = false;
          return;
        }
        detail.value = await frappe.db.get_doc(props.doctype, props.name);
        loading.value = false;
      }
      async function getMeta(doctype) {
        if (!doctype) {
          return;
        }
        let local_meta = frappe.get_meta(doctype);
        if (local_meta) {
          local_meta.hide_toolbar = true;
          meta.value = local_meta;
          return;
        }
        await frappe.model.with_doctype(doctype);
        local_meta = frappe.get_meta(doctype);
        local_meta.hide_toolbar = true;
        meta.value = local_meta || void 0;
      }
      const __returned__ = { meta, props, detail, loading, getDetail, getMeta, get FormDetail() {
        return FormDetail_default2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=style&index=0
  var Detail_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue?type=template
  var import_vue25 = __require("vue");
  var _hoisted_111 = { class: "form-container" };
  function render8(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue25.openBlock)(), (0, import_vue25.createElementBlock)("div", _hoisted_111, [
      $setup.meta && $setup.detail ? ((0, import_vue25.openBlock)(), (0, import_vue25.createBlock)($setup["FormDetail"], {
        key: 0,
        loading: $setup.loading,
        meta: $setup.meta,
        options: {},
        value: $setup.detail,
        isHideClose: ""
      }, null, 8, ["loading", "meta", "value"])) : (0, import_vue25.createCommentVNode)("v-if", true)
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue
  Detail_default2(Detail_default);
  Detail_default.render = render8;
  Detail_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Detail.vue";
  Detail_default.__scopeId = "data-v-c54e1258";
  var Detail_default3 = Detail_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=script
  var import_vue26 = __require("vue");
  var import_vue27 = __require("vue");

  // ../frappe/node_modules/@editorjs/editorjs/dist/editorjs.mjs
  var Lt = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
  function xe(s) {
    return s && s.__esModule && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s;
  }
  function Be() {
  }
  Object.assign(Be, {
    default: Be,
    register: Be,
    revert: function() {
    },
    __esModule: true
  });
  Element.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function(s) {
    const e = (this.document || this.ownerDocument).querySelectorAll(s);
    let t = e.length;
    for (; --t >= 0 && e.item(t) !== this; )
      ;
    return t > -1;
  });
  Element.prototype.closest || (Element.prototype.closest = function(s) {
    let e = this;
    if (!document.documentElement.contains(e))
      return null;
    do {
      if (e.matches(s))
        return e;
      e = e.parentElement || e.parentNode;
    } while (e !== null);
    return null;
  });
  Element.prototype.prepend || (Element.prototype.prepend = function(e) {
    const t = document.createDocumentFragment();
    Array.isArray(e) || (e = [e]), e.forEach((o) => {
      const i = o instanceof Node;
      t.appendChild(i ? o : document.createTextNode(o));
    }), this.insertBefore(t, this.firstChild);
  });
  Element.prototype.scrollIntoViewIfNeeded || (Element.prototype.scrollIntoViewIfNeeded = function(s) {
    s = arguments.length === 0 ? true : !!s;
    const e = this.parentNode, t = window.getComputedStyle(e, null), o = parseInt(t.getPropertyValue("border-top-width")), i = parseInt(t.getPropertyValue("border-left-width")), n = this.offsetTop - e.offsetTop < e.scrollTop, r = this.offsetTop - e.offsetTop + this.clientHeight - o > e.scrollTop + e.clientHeight, a = this.offsetLeft - e.offsetLeft < e.scrollLeft, l = this.offsetLeft - e.offsetLeft + this.clientWidth - i > e.scrollLeft + e.clientWidth, c = n && !r;
    (n || r) && s && (e.scrollTop = this.offsetTop - e.offsetTop - e.clientHeight / 2 - o + this.clientHeight / 2), (a || l) && s && (e.scrollLeft = this.offsetLeft - e.offsetLeft - e.clientWidth / 2 - i + this.clientWidth / 2), (n || r || a || l) && !s && this.scrollIntoView(c);
  });
  var Ot = (s = 21) => crypto.getRandomValues(new Uint8Array(s)).reduce((e, t) => (t &= 63, t < 36 ? e += t.toString(36) : t < 62 ? e += (t - 26).toString(36).toUpperCase() : t > 62 ? e += "-" : e += "_", e), "");
  var et = /* @__PURE__ */ ((s) => (s.VERBOSE = "VERBOSE", s.INFO = "INFO", s.WARN = "WARN", s.ERROR = "ERROR", s))(et || {});
  var B = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    DOWN: 40,
    RIGHT: 39,
    DELETE: 46,
    META: 91
  };
  var _t = {
    LEFT: 0,
    WHEEL: 1,
    RIGHT: 2,
    BACKWARD: 3,
    FORWARD: 4
  };
  function ge(s, e, t = "log", o, i = "color: inherit") {
    if (!("console" in window) || !window.console[t])
      return;
    const n = ["info", "log", "warn", "error"].includes(t), r = [];
    switch (ge.logLevel) {
      case "ERROR":
        if (t !== "error")
          return;
        break;
      case "WARN":
        if (!["error", "warn"].includes(t))
          return;
        break;
      case "INFO":
        if (!n || s)
          return;
        break;
    }
    o && r.push(o);
    const a = "Editor.js 2.27.0", l = `line-height: 1em;
            color: #006FEA;
            display: inline-block;
            font-size: 11px;
            line-height: 1em;
            background-color: #fff;
            padding: 4px 9px;
            border-radius: 30px;
            border: 1px solid rgba(56, 138, 229, 0.16);
            margin: 4px 5px 4px 0;`;
    s && (n ? (r.unshift(l, i), e = `%c${a}%c ${e}`) : e = `( ${a} )${e}`);
    try {
      n ? o ? console[t](`${e} %o`, ...r) : console[t](e, ...r) : console[t](e);
    } catch (e2) {
    }
  }
  ge.logLevel = "VERBOSE";
  function At(s) {
    ge.logLevel = s;
  }
  var T = ge.bind(window, false);
  var K = ge.bind(window, true);
  function te(s) {
    return Object.prototype.toString.call(s).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
  }
  function D(s) {
    return te(s) === "function" || te(s) === "asyncfunction";
  }
  function j(s) {
    return te(s) === "object";
  }
  function J(s) {
    return te(s) === "string";
  }
  function Nt(s) {
    return te(s) === "boolean";
  }
  function Ve(s) {
    return te(s) === "number";
  }
  function Ze(s) {
    return te(s) === "undefined";
  }
  function V(s) {
    return s ? Object.keys(s).length === 0 && s.constructor === Object : true;
  }
  function tt(s) {
    return s > 47 && s < 58 || s === 32 || s === 13 || s === 229 || s > 64 && s < 91 || s > 95 && s < 112 || s > 185 && s < 193 || s > 218 && s < 223;
  }
  async function ot(s, e = () => {
  }, t = () => {
  }) {
    async function o(i, n, r) {
      try {
        await i.function(i.data), await n(Ze(i.data) ? {} : i.data);
      } catch (e2) {
        r(Ze(i.data) ? {} : i.data);
      }
    }
    return s.reduce(async (i, n) => (await i, o(n, e, t)), Promise.resolve());
  }
  function it(s) {
    return Array.prototype.slice.call(s);
  }
  function oe(s, e) {
    return function() {
      const t = this, o = arguments;
      window.setTimeout(() => s.apply(t, o), e);
    };
  }
  function Rt(s) {
    return s.name.split(".").pop();
  }
  function Dt(s) {
    return /^[-\w]+\/([-+\w]+|\*)$/.test(s);
  }
  function Pt(s, e, t) {
    let o;
    return (...i) => {
      const n = this, r = () => {
        o = null, t || s.apply(n, i);
      }, a = t && !o;
      window.clearTimeout(o), o = window.setTimeout(r, e), a && s.apply(n, i);
    };
  }
  function Te(s, e, t = void 0) {
    let o, i, n, r = null, a = 0;
    t || (t = {});
    const l = function() {
      a = t.leading === false ? 0 : Date.now(), r = null, n = s.apply(o, i), r || (o = i = null);
    };
    return function() {
      const c = Date.now();
      !a && t.leading === false && (a = c);
      const u = e - (c - a);
      return o = this, i = arguments, u <= 0 || u > e ? (r && (clearTimeout(r), r = null), a = c, n = s.apply(o, i), r || (o = i = null)) : !r && t.trailing !== false && (r = setTimeout(l, u)), n;
    };
  }
  function Ft() {
    const s = {
      win: false,
      mac: false,
      x11: false,
      linux: false
    }, e = Object.keys(s).find((t) => window.navigator.appVersion.toLowerCase().indexOf(t) !== -1);
    return e && (s[e] = true), s;
  }
  function ke(s) {
    return s[0].toUpperCase() + s.slice(1);
  }
  function Se(s, ...e) {
    if (!e.length)
      return s;
    const t = e.shift();
    if (j(s) && j(t))
      for (const o in t)
        j(t[o]) ? (s[o] || Object.assign(s, { [o]: {} }), Se(s[o], t[o])) : Object.assign(s, { [o]: t[o] });
    return Se(s, ...e);
  }
  function nt(s) {
    const e = Ft();
    return s = s.replace(/shift/gi, "\u21E7").replace(/backspace/gi, "\u232B").replace(/enter/gi, "\u23CE").replace(/up/gi, "\u2191").replace(/left/gi, "\u2192").replace(/down/gi, "\u2193").replace(/right/gi, "\u2190").replace(/escape/gi, "\u238B").replace(/insert/gi, "Ins").replace(/delete/gi, "\u2421").replace(/\+/gi, " + "), e.mac ? s = s.replace(/ctrl|cmd/gi, "\u2318").replace(/alt/gi, "\u2325") : s = s.replace(/cmd/gi, "Ctrl").replace(/windows/gi, "WIN"), s;
  }
  function Ht(s) {
    try {
      return new URL(s).href;
    } catch (e) {
    }
    return s.substring(0, 2) === "//" ? window.location.protocol + s : window.location.origin + s;
  }
  function zt() {
    return Ot(10);
  }
  function jt(s) {
    window.open(s, "_blank");
  }
  function Ut(s = "") {
    return `${s}${Math.floor(Math.random() * 1e8).toString(16)}`;
  }
  function Ie(s, e, t) {
    const o = `\xAB${e}\xBB is deprecated and will be removed in the next major release. Please use the \xAB${t}\xBB instead.`;
    s && K(o, "warn");
  }
  function ae(s, e, t) {
    const o = t.value ? "value" : "get", i = t[o], n = `#${e}Cache`;
    if (t[o] = function(...r) {
      return this[n] === void 0 && (this[n] = i.apply(this, ...r)), this[n];
    }, o === "get" && t.set) {
      const r = t.set;
      t.set = function(a) {
        delete s[n], r.apply(this, a);
      };
    }
    return t;
  }
  var st = 650;
  function ee() {
    return window.matchMedia(`(max-width: ${st}px)`).matches;
  }
  var Ge = typeof window < "u" && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === "MacIntel" && window.navigator.maxTouchPoints > 1);
  function $t(s, e) {
    const t = Array.isArray(s) || j(s), o = Array.isArray(e) || j(e);
    return t || o ? JSON.stringify(s) === JSON.stringify(e) : s === e;
  }
  var d = class {
    static isSingleTag(e) {
      return e.tagName && [
        "AREA",
        "BASE",
        "BR",
        "COL",
        "COMMAND",
        "EMBED",
        "HR",
        "IMG",
        "INPUT",
        "KEYGEN",
        "LINK",
        "META",
        "PARAM",
        "SOURCE",
        "TRACK",
        "WBR"
      ].includes(e.tagName);
    }
    static isLineBreakTag(e) {
      return e && e.tagName && [
        "BR",
        "WBR"
      ].includes(e.tagName);
    }
    static make(e, t = null, o = {}) {
      const i = document.createElement(e);
      Array.isArray(t) ? i.classList.add(...t) : t && i.classList.add(t);
      for (const n in o)
        Object.prototype.hasOwnProperty.call(o, n) && (i[n] = o[n]);
      return i;
    }
    static text(e) {
      return document.createTextNode(e);
    }
    static append(e, t) {
      Array.isArray(t) ? t.forEach((o) => e.appendChild(o)) : e.appendChild(t);
    }
    static prepend(e, t) {
      Array.isArray(t) ? (t = t.reverse(), t.forEach((o) => e.prepend(o))) : e.prepend(t);
    }
    static swap(e, t) {
      const o = document.createElement("div"), i = e.parentNode;
      i.insertBefore(o, e), i.insertBefore(e, t), i.insertBefore(t, o), i.removeChild(o);
    }
    static find(e = document, t) {
      return e.querySelector(t);
    }
    static get(e) {
      return document.getElementById(e);
    }
    static findAll(e = document, t) {
      return e.querySelectorAll(t);
    }
    static get allInputsSelector() {
      return "[contenteditable=true], textarea, input:not([type]), " + ["text", "password", "email", "number", "search", "tel", "url"].map((t) => `input[type="${t}"]`).join(", ");
    }
    static findAllInputs(e) {
      return it(e.querySelectorAll(d.allInputsSelector)).reduce((t, o) => d.isNativeInput(o) || d.containsOnlyInlineElements(o) ? [...t, o] : [...t, ...d.getDeepestBlockElements(o)], []);
    }
    static getDeepestNode(e, t = false) {
      const o = t ? "lastChild" : "firstChild", i = t ? "previousSibling" : "nextSibling";
      if (e && e.nodeType === Node.ELEMENT_NODE && e[o]) {
        let n = e[o];
        if (d.isSingleTag(n) && !d.isNativeInput(n) && !d.isLineBreakTag(n))
          if (n[i])
            n = n[i];
          else if (n.parentNode[i])
            n = n.parentNode[i];
          else
            return n.parentNode;
        return this.getDeepestNode(n, t);
      }
      return e;
    }
    static isElement(e) {
      return Ve(e) ? false : e && e.nodeType && e.nodeType === Node.ELEMENT_NODE;
    }
    static isFragment(e) {
      return Ve(e) ? false : e && e.nodeType && e.nodeType === Node.DOCUMENT_FRAGMENT_NODE;
    }
    static isContentEditable(e) {
      return e.contentEditable === "true";
    }
    static isNativeInput(e) {
      const t = [
        "INPUT",
        "TEXTAREA"
      ];
      return e && e.tagName ? t.includes(e.tagName) : false;
    }
    static canSetCaret(e) {
      let t = true;
      if (d.isNativeInput(e))
        switch (e.type) {
          case "file":
          case "checkbox":
          case "radio":
          case "hidden":
          case "submit":
          case "button":
          case "image":
          case "reset":
            t = false;
            break;
        }
      else
        t = d.isContentEditable(e);
      return t;
    }
    static isNodeEmpty(e) {
      let t;
      return this.isSingleTag(e) && !this.isLineBreakTag(e) ? false : (this.isElement(e) && this.isNativeInput(e) ? t = e.value : t = e.textContent.replace("\u200B", ""), t.trim().length === 0);
    }
    static isLeaf(e) {
      return e ? e.childNodes.length === 0 : false;
    }
    static isEmpty(e) {
      e.normalize();
      const t = [e];
      for (; t.length > 0; )
        if (e = t.shift(), !!e) {
          if (this.isLeaf(e) && !this.isNodeEmpty(e))
            return false;
          e.childNodes && t.push(...Array.from(e.childNodes));
        }
      return true;
    }
    static isHTMLString(e) {
      const t = d.make("div");
      return t.innerHTML = e, t.childElementCount > 0;
    }
    static getContentLength(e) {
      return d.isNativeInput(e) ? e.value.length : e.nodeType === Node.TEXT_NODE ? e.length : e.textContent.length;
    }
    static get blockElements() {
      return [
        "address",
        "article",
        "aside",
        "blockquote",
        "canvas",
        "div",
        "dl",
        "dt",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "header",
        "hgroup",
        "hr",
        "li",
        "main",
        "nav",
        "noscript",
        "ol",
        "output",
        "p",
        "pre",
        "ruby",
        "section",
        "table",
        "tbody",
        "thead",
        "tr",
        "tfoot",
        "ul",
        "video"
      ];
    }
    static containsOnlyInlineElements(e) {
      let t;
      J(e) ? (t = document.createElement("div"), t.innerHTML = e) : t = e;
      const o = (i) => !d.blockElements.includes(i.tagName.toLowerCase()) && Array.from(i.children).every(o);
      return Array.from(t.children).every(o);
    }
    static getDeepestBlockElements(e) {
      return d.containsOnlyInlineElements(e) ? [e] : Array.from(e.children).reduce((t, o) => [...t, ...d.getDeepestBlockElements(o)], []);
    }
    static getHolder(e) {
      return J(e) ? document.getElementById(e) : e;
    }
    static isAnchor(e) {
      return e.tagName.toLowerCase() === "a";
    }
    static offset(e) {
      const t = e.getBoundingClientRect(), o = window.pageXOffset || document.documentElement.scrollLeft, i = window.pageYOffset || document.documentElement.scrollTop, n = t.top + i, r = t.left + o;
      return {
        top: n,
        left: r,
        bottom: n + t.height,
        right: r + t.width
      };
    }
  };
  var Wt = {
    blockTunes: {
      toggler: {
        "Click to tune": "",
        "or drag to move": ""
      }
    },
    inlineToolbar: {
      converter: {
        "Convert to": ""
      }
    },
    toolbar: {
      toolbox: {
        Add: ""
      }
    },
    popover: {
      Filter: "",
      "Nothing found": ""
    }
  };
  var Yt = {
    Text: "",
    Link: "",
    Bold: "",
    Italic: ""
  };
  var Kt = {
    link: {
      "Add a link": ""
    },
    stub: {
      "The block can not be displayed correctly.": ""
    }
  };
  var Xt = {
    delete: {
      Delete: "",
      "Click to delete": ""
    },
    moveUp: {
      "Move up": ""
    },
    moveDown: {
      "Move down": ""
    }
  };
  var rt = {
    ui: Wt,
    toolNames: Yt,
    tools: Kt,
    blockTunes: Xt
  };
  var ie = class {
    static ui(s, e) {
      return ie._t(s, e);
    }
    static t(s, e) {
      return ie._t(s, e);
    }
    static setDictionary(s) {
      ie.currentDictionary = s;
    }
    static _t(s, e) {
      const t = ie.getNamespace(s);
      return !t || !t[e] ? e : t[e];
    }
    static getNamespace(s) {
      return s.split(".").reduce((t, o) => !t || !Object.keys(t).length ? {} : t[o], ie.currentDictionary);
    }
  };
  var $2 = ie;
  $2.currentDictionary = rt;
  var at = class extends Error {
  };
  var we = class {
    constructor() {
      this.subscribers = {};
    }
    on(e, t) {
      e in this.subscribers || (this.subscribers[e] = []), this.subscribers[e].push(t);
    }
    once(e, t) {
      e in this.subscribers || (this.subscribers[e] = []);
      const o = (i) => {
        const n = t(i), r = this.subscribers[e].indexOf(o);
        return r !== -1 && this.subscribers[e].splice(r, 1), n;
      };
      this.subscribers[e].push(o);
    }
    emit(e, t) {
      V(this.subscribers) || !this.subscribers[e] || this.subscribers[e].reduce((o, i) => {
        const n = i(o);
        return n !== void 0 ? n : o;
      }, t);
    }
    off(e, t) {
      for (let o = 0; o < this.subscribers[e].length; o++)
        if (this.subscribers[e][o] === t) {
          delete this.subscribers[e][o];
          break;
        }
    }
    destroy() {
      this.subscribers = null;
    }
  };
  function he(s) {
    Object.setPrototypeOf(this, {
      get id() {
        return s.id;
      },
      get name() {
        return s.name;
      },
      get config() {
        return s.config;
      },
      get holder() {
        return s.holder;
      },
      get isEmpty() {
        return s.isEmpty;
      },
      get selected() {
        return s.selected;
      },
      set stretched(t) {
        s.stretched = t;
      },
      get stretched() {
        return s.stretched;
      },
      call(t, o) {
        return s.call(t, o);
      },
      save() {
        return s.save();
      },
      validate(t) {
        return s.validate(t);
      },
      dispatchChange() {
        s.dispatchChange();
      }
    });
  }
  var Re = class {
    constructor() {
      this.allListeners = [];
    }
    on(e, t, o, i = false) {
      const n = Ut("l"), r = {
        id: n,
        element: e,
        eventType: t,
        handler: o,
        options: i
      };
      if (!this.findOne(e, t, o))
        return this.allListeners.push(r), e.addEventListener(t, o, i), n;
    }
    off(e, t, o, i) {
      const n = this.findAll(e, t, o);
      n.forEach((r, a) => {
        const l = this.allListeners.indexOf(n[a]);
        l > -1 && (this.allListeners.splice(l, 1), r.element.removeEventListener(r.eventType, r.handler, r.options));
      });
    }
    offById(e) {
      const t = this.findById(e);
      t && t.element.removeEventListener(t.eventType, t.handler, t.options);
    }
    findOne(e, t, o) {
      const i = this.findAll(e, t, o);
      return i.length > 0 ? i[0] : null;
    }
    findAll(e, t, o) {
      let i;
      const n = e ? this.findByEventTarget(e) : [];
      return e && t && o ? i = n.filter((r) => r.eventType === t && r.handler === o) : e && t ? i = n.filter((r) => r.eventType === t) : i = n, i;
    }
    removeAll() {
      this.allListeners.map((e) => {
        e.element.removeEventListener(e.eventType, e.handler, e.options);
      }), this.allListeners = [];
    }
    destroy() {
      this.removeAll();
    }
    findByEventTarget(e) {
      return this.allListeners.filter((t) => {
        if (t.element === e)
          return t;
      });
    }
    findByType(e) {
      return this.allListeners.filter((t) => {
        if (t.eventType === e)
          return t;
      });
    }
    findByHandler(e) {
      return this.allListeners.filter((t) => {
        if (t.handler === e)
          return t;
      });
    }
    findById(e) {
      return this.allListeners.find((t) => t.id === e);
    }
  };
  var S = class {
    constructor({ config: e, eventsDispatcher: t }) {
      if (this.nodes = {}, this.listeners = new Re(), this.readOnlyMutableListeners = {
        on: (o, i, n, r = false) => {
          this.mutableListenerIds.push(
            this.listeners.on(o, i, n, r)
          );
        },
        clearAll: () => {
          for (const o of this.mutableListenerIds)
            this.listeners.offById(o);
          this.mutableListenerIds = [];
        }
      }, this.mutableListenerIds = [], new.target === S)
        throw new TypeError("Constructors for abstract class Module are not allowed.");
      this.config = e, this.eventsDispatcher = t;
    }
    set state(e) {
      this.Editor = e;
    }
    removeAllNodes() {
      for (const e in this.nodes) {
        const t = this.nodes[e];
        t instanceof HTMLElement && t.remove();
      }
    }
    get isRtl() {
      return this.config.i18n.direction === "rtl";
    }
  };
  var m = class {
    constructor() {
      this.instance = null, this.selection = null, this.savedSelectionRange = null, this.isFakeBackgroundEnabled = false, this.commandBackground = "backColor", this.commandRemoveFormat = "removeFormat";
    }
    static get CSS() {
      return {
        editorWrapper: "codex-editor",
        editorZone: "codex-editor__redactor"
      };
    }
    static get anchorNode() {
      const e = window.getSelection();
      return e ? e.anchorNode : null;
    }
    static get anchorElement() {
      const e = window.getSelection();
      if (!e)
        return null;
      const t = e.anchorNode;
      return t ? d.isElement(t) ? t : t.parentElement : null;
    }
    static get anchorOffset() {
      const e = window.getSelection();
      return e ? e.anchorOffset : null;
    }
    static get isCollapsed() {
      const e = window.getSelection();
      return e ? e.isCollapsed : null;
    }
    static get isAtEditor() {
      return this.isSelectionAtEditor(m.get());
    }
    static isSelectionAtEditor(e) {
      if (!e)
        return false;
      let t = e.anchorNode || e.focusNode;
      t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);
      let o = null;
      return t && t instanceof Element && (o = t.closest(`.${m.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : false;
    }
    static isRangeAtEditor(e) {
      if (!e)
        return;
      let t = e.startContainer;
      t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);
      let o = null;
      return t && t instanceof Element && (o = t.closest(`.${m.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : false;
    }
    static get isSelectionExists() {
      return !!m.get().anchorNode;
    }
    static get range() {
      return this.getRangeFromSelection(this.get());
    }
    static getRangeFromSelection(e) {
      return e && e.rangeCount ? e.getRangeAt(0) : null;
    }
    static get rect() {
      let e = document.selection, t, o = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      if (e && e.type !== "Control")
        return e = e, t = e.createRange(), o.x = t.boundingLeft, o.y = t.boundingTop, o.width = t.boundingWidth, o.height = t.boundingHeight, o;
      if (!window.getSelection)
        return T("Method window.getSelection is not supported", "warn"), o;
      if (e = window.getSelection(), e.rangeCount === null || isNaN(e.rangeCount))
        return T("Method SelectionUtils.rangeCount is not supported", "warn"), o;
      if (e.rangeCount === 0)
        return o;
      if (t = e.getRangeAt(0).cloneRange(), t.getBoundingClientRect && (o = t.getBoundingClientRect()), o.x === 0 && o.y === 0) {
        const i = document.createElement("span");
        if (i.getBoundingClientRect) {
          i.appendChild(document.createTextNode("\u200B")), t.insertNode(i), o = i.getBoundingClientRect();
          const n = i.parentNode;
          n.removeChild(i), n.normalize();
        }
      }
      return o;
    }
    static get text() {
      return window.getSelection ? window.getSelection().toString() : "";
    }
    static get() {
      return window.getSelection();
    }
    static setCursor(e, t = 0) {
      const o = document.createRange(), i = window.getSelection();
      return d.isNativeInput(e) ? d.canSetCaret(e) ? (e.focus(), e.selectionStart = e.selectionEnd = t, e.getBoundingClientRect()) : void 0 : (o.setStart(e, t), o.setEnd(e, t), i.removeAllRanges(), i.addRange(o), o.getBoundingClientRect());
    }
    static isRangeInsideContainer(e) {
      const t = m.range;
      return t === null ? false : e.contains(t.startContainer);
    }
    static addFakeCursor() {
      const e = m.range;
      if (e === null)
        return;
      const t = d.make("span", "codex-editor__fake-cursor");
      t.dataset.mutationFree = "true", e.collapse(), e.insertNode(t);
    }
    static isFakeCursorInsideContainer(e) {
      return d.find(e, ".codex-editor__fake-cursor") !== null;
    }
    static removeFakeCursor(e = document.body) {
      const t = d.find(e, ".codex-editor__fake-cursor");
      t && t.remove();
    }
    removeFakeBackground() {
      this.isFakeBackgroundEnabled && (this.isFakeBackgroundEnabled = false, document.execCommand(this.commandRemoveFormat));
    }
    setFakeBackground() {
      document.execCommand(this.commandBackground, false, "#a8d6ff"), this.isFakeBackgroundEnabled = true;
    }
    save() {
      this.savedSelectionRange = m.range;
    }
    restore() {
      if (!this.savedSelectionRange)
        return;
      const e = window.getSelection();
      e.removeAllRanges(), e.addRange(this.savedSelectionRange);
    }
    clearSaved() {
      this.savedSelectionRange = null;
    }
    collapseToEnd() {
      const e = window.getSelection(), t = document.createRange();
      t.selectNodeContents(e.focusNode), t.collapse(false), e.removeAllRanges(), e.addRange(t);
    }
    findParentTag(e, t, o = 10) {
      const i = window.getSelection();
      let n = null;
      return !i || !i.anchorNode || !i.focusNode ? null : ([
        i.anchorNode,
        i.focusNode
      ].forEach((a) => {
        let l = o;
        for (; l > 0 && a.parentNode && !(a.tagName === e && (n = a, t && a.classList && !a.classList.contains(t) && (n = null), n)); )
          a = a.parentNode, l--;
      }), n);
    }
    expandToTag(e) {
      const t = window.getSelection();
      t.removeAllRanges();
      const o = document.createRange();
      o.selectNodeContents(e), t.addRange(o);
    }
  };
  function Vt(s, e) {
    const { type: t, target: o, addedNodes: i, removedNodes: n } = s;
    if (["characterData", "attributes"].includes(t)) {
      const l = o.nodeType === Node.TEXT_NODE ? o.parentNode : o;
      return e.contains(l);
    }
    const r = Array.from(i).some((l) => e.contains(l)), a = Array.from(n).some((l) => e.contains(l));
    return r || a;
  }
  var Me = "redactor dom changed";
  var lt = "block changed";
  var ct = "fake cursor is about to be toggled";
  var dt = "fake cursor have been set";
  var q = /* @__PURE__ */ ((s) => (s.APPEND_CALLBACK = "appendCallback", s.RENDERED = "rendered", s.MOVED = "moved", s.UPDATED = "updated", s.REMOVED = "removed", s.ON_PASTE = "onPaste", s))(q || {});
  var F = class extends we {
    constructor({
      id: e = zt(),
      data: t,
      tool: o,
      api: i,
      readOnly: n,
      tunesData: r
    }, a) {
      super(), this.cachedInputs = [], this.toolRenderedElement = null, this.tunesInstances = /* @__PURE__ */ new Map(), this.defaultTunesInstances = /* @__PURE__ */ new Map(), this.unavailableTunesData = {}, this.inputIndex = 0, this.editorEventBus = null, this.handleFocus = () => {
        this.dropInputsCache(), this.updateCurrentInput();
      }, this.didMutated = (l = void 0) => {
        const c = l === void 0, u = l instanceof InputEvent;
        !c && !u && this.detectToolRootChange(l);
        let h;
        c || u ? h = true : h = !(l.length > 0 && l.every((v) => {
          const { addedNodes: p, removedNodes: k } = v;
          return [
            ...Array.from(p),
            ...Array.from(k)
          ].some((A) => d.isElement(A) ? A.dataset.mutationFree === "true" : false);
        })), h && (this.dropInputsCache(), this.updateCurrentInput(), this.call(
          "updated"
        ), this.emit("didMutated", this));
      }, this.name = o.name, this.id = e, this.settings = o.settings, this.config = o.settings.config || {}, this.api = i, this.editorEventBus = a || null, this.blockAPI = new he(this), this.tool = o, this.toolInstance = o.create(t, this.blockAPI, n), this.tunes = o.tunes, this.composeTunes(r), this.holder = this.compose(), this.watchBlockMutations(), this.addInputEvents();
    }
    static get CSS() {
      return {
        wrapper: "ce-block",
        wrapperStretched: "ce-block--stretched",
        content: "ce-block__content",
        focused: "ce-block--focused",
        selected: "ce-block--selected",
        dropTarget: "ce-block--drop-target"
      };
    }
    get inputs() {
      if (this.cachedInputs.length !== 0)
        return this.cachedInputs;
      const e = d.findAllInputs(this.holder);
      return this.inputIndex > e.length - 1 && (this.inputIndex = e.length - 1), this.cachedInputs = e, e;
    }
    get currentInput() {
      return this.inputs[this.inputIndex];
    }
    set currentInput(e) {
      const t = this.inputs.findIndex((o) => o === e || o.contains(e));
      t !== -1 && (this.inputIndex = t);
    }
    get firstInput() {
      return this.inputs[0];
    }
    get lastInput() {
      const e = this.inputs;
      return e[e.length - 1];
    }
    get nextInput() {
      return this.inputs[this.inputIndex + 1];
    }
    get previousInput() {
      return this.inputs[this.inputIndex - 1];
    }
    get data() {
      return this.save().then((e) => e && !V(e.data) ? e.data : {});
    }
    get sanitize() {
      return this.tool.sanitizeConfig;
    }
    get mergeable() {
      return D(this.toolInstance.merge);
    }
    get isEmpty() {
      const e = d.isEmpty(this.pluginsContent), t = !this.hasMedia;
      return e && t;
    }
    get hasMedia() {
      const e = [
        "img",
        "iframe",
        "video",
        "audio",
        "source",
        "input",
        "textarea",
        "twitterwidget"
      ];
      return !!this.holder.querySelector(e.join(","));
    }
    set focused(e) {
      this.holder.classList.toggle(F.CSS.focused, e);
    }
    get focused() {
      return this.holder.classList.contains(F.CSS.focused);
    }
    set selected(e) {
      var i, n;
      this.holder.classList.toggle(F.CSS.selected, e);
      const t = e === true && m.isRangeInsideContainer(this.holder), o = e === false && m.isFakeCursorInsideContainer(this.holder);
      (t || o) && ((i = this.editorEventBus) == null || i.emit(ct, { state: e }), t ? m.addFakeCursor() : m.removeFakeCursor(this.holder), (n = this.editorEventBus) == null || n.emit(dt, { state: e }));
    }
    get selected() {
      return this.holder.classList.contains(F.CSS.selected);
    }
    set stretched(e) {
      this.holder.classList.toggle(F.CSS.wrapperStretched, e);
    }
    get stretched() {
      return this.holder.classList.contains(F.CSS.wrapperStretched);
    }
    set dropTarget(e) {
      this.holder.classList.toggle(F.CSS.dropTarget, e);
    }
    get pluginsContent() {
      return this.toolRenderedElement;
    }
    call(e, t) {
      if (D(this.toolInstance[e])) {
        e === "appendCallback" && T(
          "`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead",
          "warn"
        );
        try {
          this.toolInstance[e].call(this.toolInstance, t);
        } catch (o) {
          T(`Error during '${e}' call: ${o.message}`, "error");
        }
      }
    }
    async mergeWith(e) {
      await this.toolInstance.merge(e);
    }
    async save() {
      const e = await this.toolInstance.save(this.pluginsContent), t = this.unavailableTunesData;
      [
        ...this.tunesInstances.entries(),
        ...this.defaultTunesInstances.entries()
      ].forEach(([n, r]) => {
        if (D(r.save))
          try {
            t[n] = r.save();
          } catch (a) {
            T(`Tune ${r.constructor.name} save method throws an Error %o`, "warn", a);
          }
      });
      const o = window.performance.now();
      let i;
      return Promise.resolve(e).then((n) => (i = window.performance.now(), {
        id: this.id,
        tool: this.name,
        data: n,
        tunes: t,
        time: i - o
      })).catch((n) => {
        T(`Saving process for ${this.name} tool failed due to the ${n}`, "log", "red");
      });
    }
    async validate(e) {
      let t = true;
      return this.toolInstance.validate instanceof Function && (t = await this.toolInstance.validate(e)), t;
    }
    getTunes() {
      const e = document.createElement("div"), t = [], o = typeof this.toolInstance.renderSettings == "function" ? this.toolInstance.renderSettings() : [], i = [
        ...this.tunesInstances.values(),
        ...this.defaultTunesInstances.values()
      ].map((n) => n.render());
      return [o, i].flat().forEach((n) => {
        d.isElement(n) ? e.appendChild(n) : Array.isArray(n) ? t.push(...n) : t.push(n);
      }), [t, e];
    }
    updateCurrentInput() {
      this.currentInput = d.isNativeInput(document.activeElement) || !m.anchorNode ? document.activeElement : m.anchorNode;
    }
    dispatchChange() {
      this.didMutated();
    }
    destroy() {
      this.unwatchBlockMutations(), this.removeInputEvents(), super.destroy(), D(this.toolInstance.destroy) && this.toolInstance.destroy();
    }
    async getActiveToolboxEntry() {
      const e = this.tool.toolbox;
      if (e.length === 1)
        return Promise.resolve(this.tool.toolbox[0]);
      const t = await this.data;
      return e.find((i) => Object.entries(i.data).some(([n, r]) => t[n] && $t(t[n], r)));
    }
    compose() {
      const e = d.make("div", F.CSS.wrapper), t = d.make("div", F.CSS.content), o = this.toolInstance.render();
      this.toolRenderedElement = o, t.appendChild(this.toolRenderedElement);
      let i = t;
      return [...this.tunesInstances.values(), ...this.defaultTunesInstances.values()].forEach((n) => {
        if (D(n.wrap))
          try {
            i = n.wrap(i);
          } catch (r) {
            T(`Tune ${n.constructor.name} wrap method throws an Error %o`, "warn", r);
          }
      }), e.appendChild(i), e;
    }
    composeTunes(e) {
      Array.from(this.tunes.values()).forEach((t) => {
        (t.isInternal ? this.defaultTunesInstances : this.tunesInstances).set(t.name, t.create(e[t.name], this.blockAPI));
      }), Object.entries(e).forEach(([t, o]) => {
        this.tunesInstances.has(t) || (this.unavailableTunesData[t] = o);
      });
    }
    addInputEvents() {
      this.inputs.forEach((e) => {
        e.addEventListener("focus", this.handleFocus), d.isNativeInput(e) && e.addEventListener("input", this.didMutated);
      });
    }
    removeInputEvents() {
      this.inputs.forEach((e) => {
        e.removeEventListener("focus", this.handleFocus), d.isNativeInput(e) && e.removeEventListener("input", this.didMutated);
      });
    }
    watchBlockMutations() {
      var e;
      this.redactorDomChangedCallback = (t) => {
        const { mutations: o } = t;
        o.some((n) => Vt(n, this.toolRenderedElement)) && this.didMutated(o);
      }, (e = this.editorEventBus) == null || e.on(Me, this.redactorDomChangedCallback);
    }
    unwatchBlockMutations() {
      var e;
      (e = this.editorEventBus) == null || e.off(Me, this.redactorDomChangedCallback);
    }
    detectToolRootChange(e) {
      e.forEach((t) => {
        if (Array.from(t.removedNodes).includes(this.toolRenderedElement)) {
          const i = t.addedNodes[t.addedNodes.length - 1];
          this.toolRenderedElement = i;
        }
      });
    }
    dropInputsCache() {
      this.cachedInputs = [];
    }
  };
  var Zt = class extends S {
    constructor() {
      super(...arguments), this.insert = (e = this.config.defaultBlock, t = {}, o = {}, i, n, r, a) => {
        const l = this.Editor.BlockManager.insert({
          id: a,
          tool: e,
          data: t,
          index: i,
          needToFocus: n,
          replace: r
        });
        return new he(l);
      }, this.composeBlockData = async (e) => {
        const t = this.Editor.Tools.blockTools.get(e);
        return new F({
          tool: t,
          api: this.Editor.API,
          readOnly: true,
          data: {},
          tunesData: {}
        }).data;
      }, this.update = (e, t) => {
        const { BlockManager: o } = this.Editor, i = o.getBlockById(e);
        if (!i) {
          T("blocks.update(): Block with passed id was not found", "warn");
          return;
        }
        const n = o.getBlockIndex(i);
        o.insert({
          id: i.id,
          tool: i.name,
          data: t,
          index: n,
          replace: true,
          tunes: i.tunes
        });
      };
    }
    get methods() {
      return {
        clear: () => this.clear(),
        render: (e) => this.render(e),
        renderFromHTML: (e) => this.renderFromHTML(e),
        delete: (e) => this.delete(e),
        swap: (e, t) => this.swap(e, t),
        move: (e, t) => this.move(e, t),
        getBlockByIndex: (e) => this.getBlockByIndex(e),
        getById: (e) => this.getById(e),
        getCurrentBlockIndex: () => this.getCurrentBlockIndex(),
        getBlockIndex: (e) => this.getBlockIndex(e),
        getBlocksCount: () => this.getBlocksCount(),
        stretchBlock: (e, t = true) => this.stretchBlock(e, t),
        insertNewBlock: () => this.insertNewBlock(),
        insert: this.insert,
        update: this.update,
        composeBlockData: this.composeBlockData
      };
    }
    getBlocksCount() {
      return this.Editor.BlockManager.blocks.length;
    }
    getCurrentBlockIndex() {
      return this.Editor.BlockManager.currentBlockIndex;
    }
    getBlockIndex(e) {
      const t = this.Editor.BlockManager.getBlockById(e);
      if (!t) {
        K("There is no block with id `" + e + "`", "warn");
        return;
      }
      return this.Editor.BlockManager.getBlockIndex(t);
    }
    getBlockByIndex(e) {
      const t = this.Editor.BlockManager.getBlockByIndex(e);
      if (t === void 0) {
        K("There is no block at index `" + e + "`", "warn");
        return;
      }
      return new he(t);
    }
    getById(e) {
      const t = this.Editor.BlockManager.getBlockById(e);
      return t === void 0 ? (K("There is no block with id `" + e + "`", "warn"), null) : new he(t);
    }
    swap(e, t) {
      T(
        "`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead",
        "info"
      ), this.Editor.BlockManager.swap(e, t);
    }
    move(e, t) {
      this.Editor.BlockManager.move(e, t);
    }
    delete(e) {
      try {
        this.Editor.BlockManager.removeBlock(e);
      } catch (t) {
        K(t, "warn");
        return;
      }
      this.Editor.BlockManager.blocks.length === 0 && this.Editor.BlockManager.insert(), this.Editor.BlockManager.currentBlock && this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END), this.Editor.Toolbar.close();
    }
    clear() {
      this.Editor.BlockManager.clear(true), this.Editor.InlineToolbar.close();
    }
    render(e) {
      return this.Editor.BlockManager.clear(), this.Editor.Renderer.render(e.blocks);
    }
    renderFromHTML(e) {
      return this.Editor.BlockManager.clear(), this.Editor.Paste.processText(e, true);
    }
    stretchBlock(e, t = true) {
      Ie(
        true,
        "blocks.stretchBlock()",
        "BlockAPI"
      );
      const o = this.Editor.BlockManager.getBlockByIndex(e);
      o && (o.stretched = t);
    }
    insertNewBlock() {
      T("Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.", "warn"), this.insert();
    }
  };
  var Gt = class extends S {
    constructor() {
      super(...arguments), this.setToFirstBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.firstBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.firstBlock, e, t), true) : false, this.setToLastBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.lastBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.lastBlock, e, t), true) : false, this.setToPreviousBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.previousBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.previousBlock, e, t), true) : false, this.setToNextBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.nextBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.nextBlock, e, t), true) : false, this.setToBlock = (e, t = this.Editor.Caret.positions.DEFAULT, o = 0) => this.Editor.BlockManager.blocks[e] ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.blocks[e], t, o), true) : false, this.focus = (e = false) => e ? this.setToLastBlock(this.Editor.Caret.positions.END) : this.setToFirstBlock(this.Editor.Caret.positions.START);
    }
    get methods() {
      return {
        setToFirstBlock: this.setToFirstBlock,
        setToLastBlock: this.setToLastBlock,
        setToPreviousBlock: this.setToPreviousBlock,
        setToNextBlock: this.setToNextBlock,
        setToBlock: this.setToBlock,
        focus: this.focus
      };
    }
  };
  var qt = class extends S {
    get methods() {
      return {
        emit: (e, t) => this.emit(e, t),
        off: (e, t) => this.off(e, t),
        on: (e, t) => this.on(e, t)
      };
    }
    on(e, t) {
      this.eventsDispatcher.on(e, t);
    }
    emit(e, t) {
      this.eventsDispatcher.emit(e, t);
    }
    off(e, t) {
      this.eventsDispatcher.off(e, t);
    }
  };
  var De = class extends S {
    static getNamespace(e) {
      return e.isTune() ? `blockTunes.${e.name}` : `tools.${e.name}`;
    }
    get methods() {
      return {
        t: () => {
          K("I18n.t() method can be accessed only from Tools", "warn");
        }
      };
    }
    getMethodsForTool(e) {
      return Object.assign(
        this.methods,
        {
          t: (t) => $2.t(De.getNamespace(e), t)
        }
      );
    }
  };
  var Jt = class extends S {
    get methods() {
      return {
        blocks: this.Editor.BlocksAPI.methods,
        caret: this.Editor.CaretAPI.methods,
        events: this.Editor.EventsAPI.methods,
        listeners: this.Editor.ListenersAPI.methods,
        notifier: this.Editor.NotifierAPI.methods,
        sanitizer: this.Editor.SanitizerAPI.methods,
        saver: this.Editor.SaverAPI.methods,
        selection: this.Editor.SelectionAPI.methods,
        styles: this.Editor.StylesAPI.classes,
        toolbar: this.Editor.ToolbarAPI.methods,
        inlineToolbar: this.Editor.InlineToolbarAPI.methods,
        tooltip: this.Editor.TooltipAPI.methods,
        i18n: this.Editor.I18nAPI.methods,
        readOnly: this.Editor.ReadOnlyAPI.methods,
        ui: this.Editor.UiAPI.methods
      };
    }
    getMethodsForTool(e) {
      return Object.assign(
        this.methods,
        {
          i18n: this.Editor.I18nAPI.getMethodsForTool(e)
        }
      );
    }
  };
  var Qt = class extends S {
    get methods() {
      return {
        close: () => this.close(),
        open: () => this.open()
      };
    }
    open() {
      this.Editor.InlineToolbar.tryToShow();
    }
    close() {
      this.Editor.InlineToolbar.close();
    }
  };
  var eo = class extends S {
    get methods() {
      return {
        on: (e, t, o, i) => this.on(e, t, o, i),
        off: (e, t, o, i) => this.off(e, t, o, i),
        offById: (e) => this.offById(e)
      };
    }
    on(e, t, o, i) {
      return this.listeners.on(e, t, o, i);
    }
    off(e, t, o, i) {
      this.listeners.off(e, t, o, i);
    }
    offById(e) {
      this.listeners.offById(e);
    }
  };
  var Le = {};
  var to = {
    get exports() {
      return Le;
    },
    set exports(s) {
      Le = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(window, function() {
      return function(t) {
        var o = {};
        function i(n) {
          if (o[n])
            return o[n].exports;
          var r = o[n] = { i: n, l: false, exports: {} };
          return t[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = t, i.c = o, i.d = function(n, r, a) {
          i.o(n, r) || Object.defineProperty(n, r, { enumerable: true, get: a });
        }, i.r = function(n) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n, "__esModule", { value: true });
        }, i.t = function(n, r) {
          if (1 & r && (n = i(n)), 8 & r || 4 & r && typeof n == "object" && n && n.__esModule)
            return n;
          var a = /* @__PURE__ */ Object.create(null);
          if (i.r(a), Object.defineProperty(a, "default", { enumerable: true, value: n }), 2 & r && typeof n != "string")
            for (var l in n)
              i.d(a, l, function(c) {
                return n[c];
              }.bind(null, l));
          return a;
        }, i.n = function(n) {
          var r = n && n.__esModule ? function() {
            return n.default;
          } : function() {
            return n;
          };
          return i.d(r, "a", r), r;
        }, i.o = function(n, r) {
          return Object.prototype.hasOwnProperty.call(n, r);
        }, i.p = "/", i(i.s = 0);
      }([function(t, o, i) {
        i(1), t.exports = function() {
          var n = i(6), r = "cdx-notify--bounce-in", a = null;
          return { show: function(l) {
            if (l.message) {
              (function() {
                if (a)
                  return true;
                a = n.getWrapper(), document.body.appendChild(a);
              })();
              var c = null, u = l.time || 8e3;
              switch (l.type) {
                case "confirm":
                  c = n.confirm(l);
                  break;
                case "prompt":
                  c = n.prompt(l);
                  break;
                default:
                  c = n.alert(l), window.setTimeout(function() {
                    c.remove();
                  }, u);
              }
              a.appendChild(c), c.classList.add(r);
            }
          } };
        }();
      }, function(t, o, i) {
        var n = i(2);
        typeof n == "string" && (n = [[t.i, n, ""]]);
        var r = { hmr: true, transform: void 0, insertInto: void 0 };
        i(4)(n, r), n.locals && (t.exports = n.locals);
      }, function(t, o, i) {
        (t.exports = i(3)(false)).push([t.i, `.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:'';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:'';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}`, ""]);
      }, function(t, o) {
        t.exports = function(i) {
          var n = [];
          return n.toString = function() {
            return this.map(function(r) {
              var a = function(l, c) {
                var u = l[1] || "", h = l[3];
                if (!h)
                  return u;
                if (c && typeof btoa == "function") {
                  var f = (p = h, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(p)))) + " */"), v = h.sources.map(function(k) {
                    return "/*# sourceURL=" + h.sourceRoot + k + " */";
                  });
                  return [u].concat(v).concat([f]).join(`
`);
                }
                var p;
                return [u].join(`
`);
              }(r, i);
              return r[2] ? "@media " + r[2] + "{" + a + "}" : a;
            }).join("");
          }, n.i = function(r, a) {
            typeof r == "string" && (r = [[null, r, ""]]);
            for (var l = {}, c = 0; c < this.length; c++) {
              var u = this[c][0];
              typeof u == "number" && (l[u] = true);
            }
            for (c = 0; c < r.length; c++) {
              var h = r[c];
              typeof h[0] == "number" && l[h[0]] || (a && !h[2] ? h[2] = a : a && (h[2] = "(" + h[2] + ") and (" + a + ")"), n.push(h));
            }
          }, n;
        };
      }, function(t, o, i) {
        var n, r, a = {}, l = (n = function() {
          return window && document && document.all && !window.atob;
        }, function() {
          return r === void 0 && (r = n.apply(this, arguments)), r;
        }), c = function(b) {
          var g = {};
          return function(E) {
            if (typeof E == "function")
              return E();
            if (g[E] === void 0) {
              var C = function(O) {
                return document.querySelector(O);
              }.call(this, E);
              if (window.HTMLIFrameElement && C instanceof window.HTMLIFrameElement)
                try {
                  C = C.contentDocument.head;
                } catch (e2) {
                  C = null;
                }
              g[E] = C;
            }
            return g[E];
          };
        }(), u = null, h = 0, f = [], v = i(5);
        function p(b, g) {
          for (var E = 0; E < b.length; E++) {
            var C = b[E], O = a[C.id];
            if (O) {
              O.refs++;
              for (var I = 0; I < O.parts.length; I++)
                O.parts[I](C.parts[I]);
              for (; I < C.parts.length; I++)
                O.parts.push(x(C.parts[I], g));
            } else {
              var H = [];
              for (I = 0; I < C.parts.length; I++)
                H.push(x(C.parts[I], g));
              a[C.id] = { id: C.id, refs: 1, parts: H };
            }
          }
        }
        function k(b, g) {
          for (var E = [], C = {}, O = 0; O < b.length; O++) {
            var I = b[O], H = g.base ? I[0] + g.base : I[0], L = { css: I[1], media: I[2], sourceMap: I[3] };
            C[H] ? C[H].parts.push(L) : E.push(C[H] = { id: H, parts: [L] });
          }
          return E;
        }
        function _(b, g) {
          var E = c(b.insertInto);
          if (!E)
            throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
          var C = f[f.length - 1];
          if (b.insertAt === "top")
            C ? C.nextSibling ? E.insertBefore(g, C.nextSibling) : E.appendChild(g) : E.insertBefore(g, E.firstChild), f.push(g);
          else if (b.insertAt === "bottom")
            E.appendChild(g);
          else {
            if (typeof b.insertAt != "object" || !b.insertAt.before)
              throw new Error(`[Style Loader]

 Invalid value for parameter 'insertAt' ('options.insertAt') found.
 Must be 'top', 'bottom', or Object.
 (https://github.com/webpack-contrib/style-loader#insertat)
`);
            var O = c(b.insertInto + " " + b.insertAt.before);
            E.insertBefore(g, O);
          }
        }
        function A(b) {
          if (b.parentNode === null)
            return false;
          b.parentNode.removeChild(b);
          var g = f.indexOf(b);
          g >= 0 && f.splice(g, 1);
        }
        function R(b) {
          var g = document.createElement("style");
          return b.attrs.type === void 0 && (b.attrs.type = "text/css"), y(g, b.attrs), _(b, g), g;
        }
        function y(b, g) {
          Object.keys(g).forEach(function(E) {
            b.setAttribute(E, g[E]);
          });
        }
        function x(b, g) {
          var E, C, O, I;
          if (g.transform && b.css) {
            if (!(I = g.transform(b.css)))
              return function() {
              };
            b.css = I;
          }
          if (g.singleton) {
            var H = h++;
            E = u || (u = R(g)), C = N.bind(null, E, H, false), O = N.bind(null, E, H, true);
          } else
            b.sourceMap && typeof URL == "function" && typeof URL.createObjectURL == "function" && typeof URL.revokeObjectURL == "function" && typeof Blob == "function" && typeof btoa == "function" ? (E = function(L) {
              var W = document.createElement("link");
              return L.attrs.type === void 0 && (L.attrs.type = "text/css"), L.attrs.rel = "stylesheet", y(W, L.attrs), _(L, W), W;
            }(g), C = function(L, W, le) {
              var Q = le.css, Ee = le.sourceMap, It = W.convertToAbsoluteUrls === void 0 && Ee;
              (W.convertToAbsoluteUrls || It) && (Q = v(Q)), Ee && (Q += `
/*# sourceMappingURL=data:application/json;base64,` + btoa(unescape(encodeURIComponent(JSON.stringify(Ee)))) + " */");
              var Mt = new Blob([Q], { type: "text/css" }), Xe = L.href;
              L.href = URL.createObjectURL(Mt), Xe && URL.revokeObjectURL(Xe);
            }.bind(null, E, g), O = function() {
              A(E), E.href && URL.revokeObjectURL(E.href);
            }) : (E = R(g), C = function(L, W) {
              var le = W.css, Q = W.media;
              if (Q && L.setAttribute("media", Q), L.styleSheet)
                L.styleSheet.cssText = le;
              else {
                for (; L.firstChild; )
                  L.removeChild(L.firstChild);
                L.appendChild(document.createTextNode(le));
              }
            }.bind(null, E), O = function() {
              A(E);
            });
          return C(b), function(L) {
            if (L) {
              if (L.css === b.css && L.media === b.media && L.sourceMap === b.sourceMap)
                return;
              C(b = L);
            } else
              O();
          };
        }
        t.exports = function(b, g) {
          if (typeof DEBUG < "u" && DEBUG && typeof document != "object")
            throw new Error("The style-loader cannot be used in a non-browser environment");
          (g = g || {}).attrs = typeof g.attrs == "object" ? g.attrs : {}, g.singleton || typeof g.singleton == "boolean" || (g.singleton = l()), g.insertInto || (g.insertInto = "head"), g.insertAt || (g.insertAt = "bottom");
          var E = k(b, g);
          return p(E, g), function(C) {
            for (var O = [], I = 0; I < E.length; I++) {
              var H = E[I];
              (L = a[H.id]).refs--, O.push(L);
            }
            for (C && p(k(C, g), g), I = 0; I < O.length; I++) {
              var L;
              if ((L = O[I]).refs === 0) {
                for (var W = 0; W < L.parts.length; W++)
                  L.parts[W]();
                delete a[L.id];
              }
            }
          };
        };
        var w, M = (w = [], function(b, g) {
          return w[b] = g, w.filter(Boolean).join(`
`);
        });
        function N(b, g, E, C) {
          var O = E ? "" : C.css;
          if (b.styleSheet)
            b.styleSheet.cssText = M(g, O);
          else {
            var I = document.createTextNode(O), H = b.childNodes;
            H[g] && b.removeChild(H[g]), H.length ? b.insertBefore(I, H[g]) : b.appendChild(I);
          }
        }
      }, function(t, o) {
        t.exports = function(i) {
          var n = typeof window < "u" && window.location;
          if (!n)
            throw new Error("fixUrls requires window.location");
          if (!i || typeof i != "string")
            return i;
          var r = n.protocol + "//" + n.host, a = r + n.pathname.replace(/\/[^\/]*$/, "/");
          return i.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(l, c) {
            var u, h = c.trim().replace(/^"(.*)"$/, function(f, v) {
              return v;
            }).replace(/^'(.*)'$/, function(f, v) {
              return v;
            });
            return /^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(h) ? l : (u = h.indexOf("//") === 0 ? h : h.indexOf("/") === 0 ? r + h : a + h.replace(/^\.\//, ""), "url(" + JSON.stringify(u) + ")");
          });
        };
      }, function(t, o, i) {
        var n, r, a, l, c, u, h, f, v;
        t.exports = (n = "cdx-notifies", r = "cdx-notify", a = "cdx-notify__cross", l = "cdx-notify__button--confirm", c = "cdx-notify__button--cancel", u = "cdx-notify__input", h = "cdx-notify__button", f = "cdx-notify__btns-wrapper", { alert: v = function(p) {
          var k = document.createElement("DIV"), _ = document.createElement("DIV"), A = p.message, R = p.style;
          return k.classList.add(r), R && k.classList.add(r + "--" + R), k.innerHTML = A, _.classList.add(a), _.addEventListener("click", k.remove.bind(k)), k.appendChild(_), k;
        }, confirm: function(p) {
          var k = v(p), _ = document.createElement("div"), A = document.createElement("button"), R = document.createElement("button"), y = k.querySelector("." + a), x = p.cancelHandler, w = p.okHandler;
          return _.classList.add(f), A.innerHTML = p.okText || "Confirm", R.innerHTML = p.cancelText || "Cancel", A.classList.add(h), R.classList.add(h), A.classList.add(l), R.classList.add(c), x && typeof x == "function" && (R.addEventListener("click", x), y.addEventListener("click", x)), w && typeof w == "function" && A.addEventListener("click", w), A.addEventListener("click", k.remove.bind(k)), R.addEventListener("click", k.remove.bind(k)), _.appendChild(A), _.appendChild(R), k.appendChild(_), k;
        }, prompt: function(p) {
          var k = v(p), _ = document.createElement("div"), A = document.createElement("button"), R = document.createElement("input"), y = k.querySelector("." + a), x = p.cancelHandler, w = p.okHandler;
          return _.classList.add(f), A.innerHTML = p.okText || "Ok", A.classList.add(h), A.classList.add(l), R.classList.add(u), p.placeholder && R.setAttribute("placeholder", p.placeholder), p.default && (R.value = p.default), p.inputType && (R.type = p.inputType), x && typeof x == "function" && y.addEventListener("click", x), w && typeof w == "function" && A.addEventListener("click", function() {
            w(R.value);
          }), A.addEventListener("click", k.remove.bind(k)), _.appendChild(R), _.appendChild(A), k.appendChild(_), k;
        }, getWrapper: function() {
          var p = document.createElement("DIV");
          return p.classList.add(n), p;
        } });
      }]);
    });
  })(to);
  var oo = /* @__PURE__ */ xe(Le);
  var io = class {
    show(e) {
      oo.show(e);
    }
  };
  var no = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.notifier = new io();
    }
    get methods() {
      return {
        show: (e) => this.show(e)
      };
    }
    show(e) {
      return this.notifier.show(e);
    }
  };
  var so = class extends S {
    get methods() {
      const e = () => this.isEnabled;
      return {
        toggle: (t) => this.toggle(t),
        get isEnabled() {
          return e();
        }
      };
    }
    toggle(e) {
      return this.Editor.ReadOnly.toggle(e);
    }
    get isEnabled() {
      return this.Editor.ReadOnly.isEnabled;
    }
  };
  var Oe = {};
  var ro = {
    get exports() {
      return Oe;
    },
    set exports(s) {
      Oe = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(Lt, function() {
      function t(h) {
        var f = h.tags, v = Object.keys(f), p = v.map(function(k) {
          return typeof f[k];
        }).every(function(k) {
          return k === "object" || k === "boolean" || k === "function";
        });
        if (!p)
          throw new Error("The configuration was invalid");
        this.config = h;
      }
      var o = ["P", "LI", "TD", "TH", "DIV", "H1", "H2", "H3", "H4", "H5", "H6", "PRE"];
      function i(h) {
        return o.indexOf(h.nodeName) !== -1;
      }
      var n = ["A", "B", "STRONG", "I", "EM", "SUB", "SUP", "U", "STRIKE"];
      function r(h) {
        return n.indexOf(h.nodeName) !== -1;
      }
      t.prototype.clean = function(h) {
        const f = document.implementation.createHTMLDocument(), v = f.createElement("div");
        return v.innerHTML = h, this._sanitize(f, v), v.innerHTML;
      }, t.prototype._sanitize = function(h, f) {
        var v = a(h, f), p = v.firstChild();
        if (p)
          do {
            if (p.nodeType === Node.TEXT_NODE)
              if (p.data.trim() === "" && (p.previousElementSibling && i(p.previousElementSibling) || p.nextElementSibling && i(p.nextElementSibling))) {
                f.removeChild(p), this._sanitize(h, f);
                break;
              } else
                continue;
            if (p.nodeType === Node.COMMENT_NODE) {
              f.removeChild(p), this._sanitize(h, f);
              break;
            }
            var k = r(p), _;
            k && (_ = Array.prototype.some.call(p.childNodes, i));
            var A = !!f.parentNode, R = i(f) && i(p) && A, y = p.nodeName.toLowerCase(), x = l(this.config, y, p), w = k && _;
            if (w || c(p, x) || !this.config.keepNestedBlockElements && R) {
              if (!(p.nodeName === "SCRIPT" || p.nodeName === "STYLE"))
                for (; p.childNodes.length > 0; )
                  f.insertBefore(p.childNodes[0], p);
              f.removeChild(p), this._sanitize(h, f);
              break;
            }
            for (var M = 0; M < p.attributes.length; M += 1) {
              var N = p.attributes[M];
              u(N, x, p) && (p.removeAttribute(N.name), M = M - 1);
            }
            this._sanitize(h, p);
          } while (p = v.nextSibling());
      };
      function a(h, f) {
        return h.createTreeWalker(
          f,
          NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,
          null,
          false
        );
      }
      function l(h, f, v) {
        return typeof h.tags[f] == "function" ? h.tags[f](v) : h.tags[f];
      }
      function c(h, f) {
        return typeof f > "u" ? true : typeof f == "boolean" ? !f : false;
      }
      function u(h, f, v) {
        var p = h.name.toLowerCase();
        return f === true ? false : typeof f[p] == "function" ? !f[p](h.value, v) : typeof f[p] > "u" || f[p] === false ? true : typeof f[p] == "string" ? f[p] !== h.value : false;
      }
      return t;
    });
  })(ro);
  var ao = Oe;
  function ht(s, e) {
    return s.map((t) => {
      const o = D(e) ? e(t.tool) : e;
      return V(o) || (t.data = Pe(t.data, o)), t;
    });
  }
  function Z(s, e = {}) {
    const t = {
      tags: e
    };
    return new ao(t).clean(s);
  }
  function Pe(s, e) {
    return Array.isArray(s) ? lo(s, e) : j(s) ? co(s, e) : J(s) ? ho(s, e) : s;
  }
  function lo(s, e) {
    return s.map((t) => Pe(t, e));
  }
  function co(s, e) {
    const t = {};
    for (const o in s) {
      if (!Object.prototype.hasOwnProperty.call(s, o))
        continue;
      const i = s[o], n = uo(e[o]) ? e[o] : e;
      t[o] = Pe(i, n);
    }
    return t;
  }
  function ho(s, e) {
    return j(e) ? Z(s, e) : e === false ? Z(s, {}) : s;
  }
  function uo(s) {
    return j(s) || Nt(s) || D(s);
  }
  var po = class extends S {
    get methods() {
      return {
        clean: (e, t) => this.clean(e, t)
      };
    }
    clean(e, t) {
      return Z(e, t);
    }
  };
  var fo = class extends S {
    get methods() {
      return {
        save: () => this.save()
      };
    }
    save() {
      const e = "Editor's content can not be saved in read-only mode";
      return this.Editor.ReadOnly.isEnabled ? (K(e, "warn"), Promise.reject(new Error(e))) : this.Editor.Saver.save();
    }
  };
  var go = class extends S {
    get methods() {
      return {
        findParentTag: (e, t) => this.findParentTag(e, t),
        expandToTag: (e) => this.expandToTag(e)
      };
    }
    findParentTag(e, t) {
      return new m().findParentTag(e, t);
    }
    expandToTag(e) {
      new m().expandToTag(e);
    }
  };
  var bo = class extends S {
    get classes() {
      return {
        block: "cdx-block",
        inlineToolButton: "ce-inline-tool",
        inlineToolButtonActive: "ce-inline-tool--active",
        input: "cdx-input",
        loader: "cdx-loader",
        button: "cdx-button",
        settingsButton: "cdx-settings-button",
        settingsButtonActive: "cdx-settings-button--active"
      };
    }
  };
  var mo = class extends S {
    get methods() {
      return {
        close: () => this.close(),
        open: () => this.open(),
        toggleBlockSettings: (e) => this.toggleBlockSettings(e),
        toggleToolbox: (e) => this.toggleToolbox(e)
      };
    }
    open() {
      this.Editor.Toolbar.moveAndOpen();
    }
    close() {
      this.Editor.Toolbar.close();
    }
    toggleBlockSettings(e) {
      if (this.Editor.BlockManager.currentBlockIndex === -1) {
        K("Could't toggle the Toolbar because there is no block selected ", "warn");
        return;
      }
      (e != null ? e : !this.Editor.BlockSettings.opened) ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.open()) : this.Editor.BlockSettings.close();
    }
    toggleToolbox(e) {
      if (this.Editor.BlockManager.currentBlockIndex === -1) {
        K("Could't toggle the Toolbox because there is no block selected ", "warn");
        return;
      }
      (e != null ? e : !this.Editor.Toolbar.toolbox.opened) ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open()) : this.Editor.Toolbar.toolbox.close();
    }
  };
  var _e = {};
  var ko = {
    get exports() {
      return _e;
    },
    set exports(s) {
      _e = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(window, function() {
      return function(t) {
        var o = {};
        function i(n) {
          if (o[n])
            return o[n].exports;
          var r = o[n] = { i: n, l: false, exports: {} };
          return t[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = t, i.c = o, i.d = function(n, r, a) {
          i.o(n, r) || Object.defineProperty(n, r, { enumerable: true, get: a });
        }, i.r = function(n) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n, "__esModule", { value: true });
        }, i.t = function(n, r) {
          if (1 & r && (n = i(n)), 8 & r || 4 & r && typeof n == "object" && n && n.__esModule)
            return n;
          var a = /* @__PURE__ */ Object.create(null);
          if (i.r(a), Object.defineProperty(a, "default", { enumerable: true, value: n }), 2 & r && typeof n != "string")
            for (var l in n)
              i.d(a, l, function(c) {
                return n[c];
              }.bind(null, l));
          return a;
        }, i.n = function(n) {
          var r = n && n.__esModule ? function() {
            return n.default;
          } : function() {
            return n;
          };
          return i.d(r, "a", r), r;
        }, i.o = function(n, r) {
          return Object.prototype.hasOwnProperty.call(n, r);
        }, i.p = "", i(i.s = 0);
      }([function(t, o, i) {
        t.exports = i(1);
      }, function(t, o, i) {
        i.r(o), i.d(o, "default", function() {
          return n;
        });
        class n {
          constructor() {
            this.nodes = { wrapper: null, content: null }, this.showed = false, this.offsetTop = 10, this.offsetLeft = 10, this.offsetRight = 10, this.hidingDelay = 0, this.handleWindowScroll = () => {
              this.showed && this.hide(true);
            }, this.loadStyles(), this.prepare(), window.addEventListener("scroll", this.handleWindowScroll, { passive: true });
          }
          get CSS() {
            return { tooltip: "ct", tooltipContent: "ct__content", tooltipShown: "ct--shown", placement: { left: "ct--left", bottom: "ct--bottom", right: "ct--right", top: "ct--top" } };
          }
          show(a, l, c) {
            this.nodes.wrapper || this.prepare(), this.hidingTimeout && clearTimeout(this.hidingTimeout);
            const u = Object.assign({ placement: "bottom", marginTop: 0, marginLeft: 0, marginRight: 0, marginBottom: 0, delay: 70, hidingDelay: 0 }, c);
            if (u.hidingDelay && (this.hidingDelay = u.hidingDelay), this.nodes.content.innerHTML = "", typeof l == "string")
              this.nodes.content.appendChild(document.createTextNode(l));
            else {
              if (!(l instanceof Node))
                throw Error("[CodeX Tooltip] Wrong type of \xABcontent\xBB passed. It should be an instance of Node or String. But " + typeof l + " given.");
              this.nodes.content.appendChild(l);
            }
            switch (this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)), u.placement) {
              case "top":
                this.placeTop(a, u);
                break;
              case "left":
                this.placeLeft(a, u);
                break;
              case "right":
                this.placeRight(a, u);
                break;
              case "bottom":
              default:
                this.placeBottom(a, u);
            }
            u && u.delay ? this.showingTimeout = setTimeout(() => {
              this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = true;
            }, u.delay) : (this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = true);
          }
          hide(a = false) {
            if (this.hidingDelay && !a)
              return this.hidingTimeout && clearTimeout(this.hidingTimeout), void (this.hidingTimeout = setTimeout(() => {
                this.hide(true);
              }, this.hidingDelay));
            this.nodes.wrapper.classList.remove(this.CSS.tooltipShown), this.showed = false, this.showingTimeout && clearTimeout(this.showingTimeout);
          }
          onHover(a, l, c) {
            a.addEventListener("mouseenter", () => {
              this.show(a, l, c);
            }), a.addEventListener("mouseleave", () => {
              this.hide();
            });
          }
          destroy() {
            this.nodes.wrapper.remove(), window.removeEventListener("scroll", this.handleWindowScroll);
          }
          prepare() {
            this.nodes.wrapper = this.make("div", this.CSS.tooltip), this.nodes.content = this.make("div", this.CSS.tooltipContent), this.append(this.nodes.wrapper, this.nodes.content), this.append(document.body, this.nodes.wrapper);
          }
          loadStyles() {
            const a = "codex-tooltips-style";
            if (document.getElementById(a))
              return;
            const l = i(2), c = this.make("style", null, { textContent: l.toString(), id: a });
            this.prepend(document.head, c);
          }
          placeBottom(a, l) {
            const c = a.getBoundingClientRect(), u = c.left + a.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.bottom + window.pageYOffset + this.offsetTop + l.marginTop;
            this.applyPlacement("bottom", u, h);
          }
          placeTop(a, l) {
            const c = a.getBoundingClientRect(), u = c.left + a.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.top + window.pageYOffset - this.nodes.wrapper.clientHeight - this.offsetTop;
            this.applyPlacement("top", u, h);
          }
          placeLeft(a, l) {
            const c = a.getBoundingClientRect(), u = c.left - this.nodes.wrapper.offsetWidth - this.offsetLeft - l.marginLeft, h = c.top + window.pageYOffset + a.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;
            this.applyPlacement("left", u, h);
          }
          placeRight(a, l) {
            const c = a.getBoundingClientRect(), u = c.right + this.offsetRight + l.marginRight, h = c.top + window.pageYOffset + a.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;
            this.applyPlacement("right", u, h);
          }
          applyPlacement(a, l, c) {
            this.nodes.wrapper.classList.add(this.CSS.placement[a]), this.nodes.wrapper.style.left = l + "px", this.nodes.wrapper.style.top = c + "px";
          }
          make(a, l = null, c = {}) {
            const u = document.createElement(a);
            Array.isArray(l) ? u.classList.add(...l) : l && u.classList.add(l);
            for (const h in c)
              c.hasOwnProperty(h) && (u[h] = c[h]);
            return u;
          }
          append(a, l) {
            Array.isArray(l) ? l.forEach((c) => a.appendChild(c)) : a.appendChild(l);
          }
          prepend(a, l) {
            Array.isArray(l) ? (l = l.reverse()).forEach((c) => a.prepend(c)) : a.prepend(l);
          }
        }
      }, function(t, o) {
        t.exports = `.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:"";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url("")){.ct:before{border-radius:0;-webkit-mask-box-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path d="M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z"/></svg>') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:"";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}`;
      }]).default;
    });
  })(ko);
  var vo = /* @__PURE__ */ xe(_e);
  var Fe = class {
    constructor() {
      this.lib = new vo();
    }
    destroy() {
      this.lib.destroy();
    }
    show(e, t, o) {
      this.lib.show(e, t, o);
    }
    hide(e = false) {
      this.lib.hide(e);
    }
    onHover(e, t, o) {
      this.lib.onHover(e, t, o);
    }
  };
  var xo = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.tooltip = new Fe();
    }
    destroy() {
      this.tooltip.destroy();
    }
    get methods() {
      return {
        show: (e, t, o) => this.show(e, t, o),
        hide: () => this.hide(),
        onHover: (e, t, o) => this.onHover(e, t, o)
      };
    }
    show(e, t, o) {
      this.tooltip.show(e, t, o);
    }
    hide() {
      this.tooltip.hide();
    }
    onHover(e, t, o) {
      this.tooltip.onHover(e, t, o);
    }
  };
  var wo = class extends S {
    get methods() {
      return {
        nodes: this.editorNodes
      };
    }
    get editorNodes() {
      return {
        wrapper: this.Editor.UI.nodes.wrapper,
        redactor: this.Editor.UI.nodes.redactor
      };
    }
  };
  function ut(s, e) {
    const t = {};
    return Object.entries(s).forEach(([o, i]) => {
      if (j(i)) {
        const n = e ? `${e}.${o}` : o;
        Object.values(i).every((a) => J(a)) ? t[o] = n : t[o] = ut(i, n);
        return;
      }
      t[o] = i;
    }), t;
  }
  var X = ut(rt);
  function yo(s, e) {
    const t = {};
    return Object.keys(s).forEach((o) => {
      const i = e[o];
      i !== void 0 ? t[i] = s[o] : t[o] = s[o];
    }), t;
  }
  var Eo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11"/></svg>';
  var pt = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10"/></svg>';
  var Bo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15"/></svg>';
  var Co = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16"/></svg>';
  var To = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="12" cy="12" r="4" stroke="currentColor" stroke-width="2"/></svg>';
  var So = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M13.34 10C12.4223 12.7337 11 17 11 17"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M14.21 7H14.2"/></svg>';
  var qe = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.5691 6.39509 13.9269 6.25143 12.8271 7.17675L11.3901 8.38588C10.0935 9.47674 9.95706 11.4241 11.0888 12.6852L11.12 12.72"/></svg>';
  var Io = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 7.29999H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 7.29999H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.30999 12H9.3"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 12H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 16.7H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 16.7H14.59"/></svg>';
  var Mo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M12 7V12M12 17V12M17 12H12M12 12H7"/></svg>';
  var Lo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="10.5" cy="10.5" r="5.5" stroke="currentColor" stroke-width="2"/><line x1="15.4142" x2="19" y1="15" y2="18.5858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>';
  var Oo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.4701 8.2475 16.5781 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8796 8.49999"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8.24517 12.3883C8.24517 12.3883 7.97171 12.6922 7.47504 13.2161C6.58051 14.1598 6.55467 15.6408 7.44666 16.5869V16.5869C8.37653 17.5731 9.93744 17.5961 10.8959 16.6376L12.1452 15.3883"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6.39064 9.03238L7.58432 9.06668C8.17551 9.08366 8.6522 8.58665 8.61056 7.99669L8.5271 6.81397"/><line x1="12.1142" x2="11.7" y1="12.2" y2="11.7858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>';
  var P = class {
    constructor(e) {
      this.nodes = {
        root: null,
        icon: null
      }, this.confirmationState = null, this.removeSpecialFocusBehavior = () => {
        this.nodes.root.classList.remove(P.CSS.noFocus);
      }, this.removeSpecialHoverBehavior = () => {
        this.nodes.root.classList.remove(P.CSS.noHover);
      }, this.onErrorAnimationEnd = () => {
        this.nodes.icon.classList.remove(P.CSS.wobbleAnimation), this.nodes.icon.removeEventListener("animationend", this.onErrorAnimationEnd);
      }, this.params = e, this.nodes.root = this.make(e);
    }
    get isDisabled() {
      return this.params.isDisabled;
    }
    get toggle() {
      return this.params.toggle;
    }
    get title() {
      return this.params.title;
    }
    get closeOnActivate() {
      return this.params.closeOnActivate;
    }
    get isConfirmationStateEnabled() {
      return this.confirmationState !== null;
    }
    get isFocused() {
      return this.nodes.root.classList.contains(P.CSS.focused);
    }
    static get CSS() {
      return {
        container: "ce-popover-item",
        title: "ce-popover-item__title",
        secondaryTitle: "ce-popover-item__secondary-title",
        icon: "ce-popover-item__icon",
        active: "ce-popover-item--active",
        disabled: "ce-popover-item--disabled",
        focused: "ce-popover-item--focused",
        hidden: "ce-popover-item--hidden",
        confirmationState: "ce-popover-item--confirmation",
        noHover: "ce-popover-item--no-hover",
        noFocus: "ce-popover-item--no-focus",
        wobbleAnimation: "wobble"
      };
    }
    getElement() {
      return this.nodes.root;
    }
    handleClick() {
      if (this.isConfirmationStateEnabled) {
        this.activateOrEnableConfirmationMode(this.confirmationState);
        return;
      }
      this.activateOrEnableConfirmationMode(this.params);
    }
    toggleActive(e) {
      this.nodes.root.classList.toggle(P.CSS.active, e);
    }
    toggleHidden(e) {
      this.nodes.root.classList.toggle(P.CSS.hidden, e);
    }
    reset() {
      this.isConfirmationStateEnabled && this.disableConfirmationMode();
    }
    onFocus() {
      this.disableSpecialHoverAndFocusBehavior();
    }
    make(e) {
      const t = d.make("div", P.CSS.container);
      return e.name && (t.dataset.itemName = e.name), this.nodes.icon = d.make("div", P.CSS.icon, {
        innerHTML: e.icon || To
      }), t.appendChild(this.nodes.icon), t.appendChild(d.make("div", P.CSS.title, {
        innerHTML: e.title || ""
      })), e.secondaryLabel && t.appendChild(d.make("div", P.CSS.secondaryTitle, {
        textContent: e.secondaryLabel
      })), e.isActive && t.classList.add(P.CSS.active), e.isDisabled && t.classList.add(P.CSS.disabled), t;
    }
    enableConfirmationMode(e) {
      const t = __spreadProps(__spreadValues(__spreadValues({}, this.params), e), {
        confirmation: e.confirmation
      }), o = this.make(t);
      this.nodes.root.innerHTML = o.innerHTML, this.nodes.root.classList.add(P.CSS.confirmationState), this.confirmationState = e, this.enableSpecialHoverAndFocusBehavior();
    }
    disableConfirmationMode() {
      const e = this.make(this.params);
      this.nodes.root.innerHTML = e.innerHTML, this.nodes.root.classList.remove(P.CSS.confirmationState), this.confirmationState = null, this.disableSpecialHoverAndFocusBehavior();
    }
    enableSpecialHoverAndFocusBehavior() {
      this.nodes.root.classList.add(P.CSS.noHover), this.nodes.root.classList.add(P.CSS.noFocus), this.nodes.root.addEventListener("mouseleave", this.removeSpecialHoverBehavior, { once: true });
    }
    disableSpecialHoverAndFocusBehavior() {
      this.removeSpecialFocusBehavior(), this.removeSpecialHoverBehavior(), this.nodes.root.removeEventListener("mouseleave", this.removeSpecialHoverBehavior);
    }
    activateOrEnableConfirmationMode(e) {
      if (e.confirmation === void 0)
        try {
          e.onActivate(e), this.disableConfirmationMode();
        } catch (e2) {
          this.animateError();
        }
      else
        this.enableConfirmationMode(e.confirmation);
    }
    animateError() {
      this.nodes.icon.classList.contains(P.CSS.wobbleAnimation) || (this.nodes.icon.classList.add(P.CSS.wobbleAnimation), this.nodes.icon.addEventListener("animationend", this.onErrorAnimationEnd));
    }
  };
  var ce = class {
    constructor(s, e) {
      this.cursor = -1, this.items = [], this.items = s || [], this.focusedCssClass = e;
    }
    get currentItem() {
      return this.cursor === -1 ? null : this.items[this.cursor];
    }
    setCursor(s) {
      s < this.items.length && s >= -1 && (this.dropCursor(), this.cursor = s, this.items[this.cursor].classList.add(this.focusedCssClass));
    }
    setItems(s) {
      this.items = s;
    }
    next() {
      this.cursor = this.leafNodesAndReturnIndex(ce.directions.RIGHT);
    }
    previous() {
      this.cursor = this.leafNodesAndReturnIndex(ce.directions.LEFT);
    }
    dropCursor() {
      this.cursor !== -1 && (this.items[this.cursor].classList.remove(this.focusedCssClass), this.cursor = -1);
    }
    leafNodesAndReturnIndex(s) {
      if (this.items.length === 0)
        return this.cursor;
      let e = this.cursor;
      return e === -1 ? e = s === ce.directions.RIGHT ? -1 : 0 : this.items[e].classList.remove(this.focusedCssClass), s === ce.directions.RIGHT ? e = (e + 1) % this.items.length : e = (this.items.length + e - 1) % this.items.length, d.canSetCaret(this.items[e]) && oe(() => m.setCursor(this.items[e]), 50)(), this.items[e].classList.add(this.focusedCssClass), e;
    }
  };
  var ne = ce;
  ne.directions = {
    RIGHT: "right",
    LEFT: "left"
  };
  var G = class {
    constructor(e) {
      this.iterator = null, this.activated = false, this.flipCallbacks = [], this.onKeyDown = (t) => {
        if (this.isEventReadyForHandling(t))
          switch (G.usedKeys.includes(t.keyCode) && t.preventDefault(), t.keyCode) {
            case B.TAB:
              this.handleTabPress(t);
              break;
            case B.LEFT:
            case B.UP:
              this.flipLeft();
              break;
            case B.RIGHT:
            case B.DOWN:
              this.flipRight();
              break;
            case B.ENTER:
              this.handleEnterPress(t);
              break;
          }
      }, this.iterator = new ne(e.items, e.focusedItemClass), this.activateCallback = e.activateCallback, this.allowedKeys = e.allowedKeys || G.usedKeys;
    }
    get isActivated() {
      return this.activated;
    }
    static get usedKeys() {
      return [
        B.TAB,
        B.LEFT,
        B.RIGHT,
        B.ENTER,
        B.UP,
        B.DOWN
      ];
    }
    activate(e, t) {
      this.activated = true, e && this.iterator.setItems(e), t !== void 0 && this.iterator.setCursor(t), document.addEventListener("keydown", this.onKeyDown, true);
    }
    deactivate() {
      this.activated = false, this.dropCursor(), document.removeEventListener("keydown", this.onKeyDown);
    }
    focusFirst() {
      this.dropCursor(), this.flipRight();
    }
    flipLeft() {
      this.iterator.previous(), this.flipCallback();
    }
    flipRight() {
      this.iterator.next(), this.flipCallback();
    }
    hasFocus() {
      return !!this.iterator.currentItem;
    }
    onFlip(e) {
      this.flipCallbacks.push(e);
    }
    removeOnFlip(e) {
      this.flipCallbacks = this.flipCallbacks.filter((t) => t !== e);
    }
    dropCursor() {
      this.iterator.dropCursor();
    }
    isEventReadyForHandling(e) {
      return this.activated && this.allowedKeys.includes(e.keyCode);
    }
    handleTabPress(e) {
      switch (e.shiftKey ? ne.directions.LEFT : ne.directions.RIGHT) {
        case ne.directions.RIGHT:
          this.flipRight();
          break;
        case ne.directions.LEFT:
          this.flipLeft();
          break;
      }
    }
    handleEnterPress(e) {
      this.activated && (this.iterator.currentItem && (e.stopPropagation(), e.preventDefault(), this.iterator.currentItem.click()), D(this.activateCallback) && this.activateCallback(this.iterator.currentItem));
    }
    flipCallback() {
      this.iterator.currentItem && this.iterator.currentItem.scrollIntoViewIfNeeded(), this.flipCallbacks.forEach((e) => e());
    }
  };
  var ue = class {
    static get CSS() {
      return {
        wrapper: "cdx-search-field",
        icon: "cdx-search-field__icon",
        input: "cdx-search-field__input"
      };
    }
    constructor({ items: e, onSearch: t, placeholder: o }) {
      this.listeners = new Re(), this.items = e, this.onSearch = t, this.render(o);
    }
    getElement() {
      return this.wrapper;
    }
    focus() {
      this.input.focus();
    }
    clear() {
      this.input.value = "", this.searchQuery = "", this.onSearch("", this.foundItems);
    }
    destroy() {
      this.listeners.removeAll();
    }
    render(e) {
      this.wrapper = d.make("div", ue.CSS.wrapper);
      const t = d.make("div", ue.CSS.icon, {
        innerHTML: Lo
      });
      this.input = d.make("input", ue.CSS.input, {
        placeholder: e
      }), this.wrapper.appendChild(t), this.wrapper.appendChild(this.input), this.listeners.on(this.input, "input", () => {
        this.searchQuery = this.input.value, this.onSearch(this.searchQuery, this.foundItems);
      });
    }
    get foundItems() {
      return this.items.filter((e) => this.checkItem(e));
    }
    checkItem(e) {
      var i;
      const t = ((i = e.title) == null ? void 0 : i.toLowerCase()) || "", o = this.searchQuery.toLowerCase();
      return t.includes(o);
    }
  };
  var de = class {
    lock() {
      Ge ? this.lockHard() : document.body.classList.add(de.CSS.scrollLocked);
    }
    unlock() {
      Ge ? this.unlockHard() : document.body.classList.remove(de.CSS.scrollLocked);
    }
    lockHard() {
      this.scrollPosition = window.pageYOffset, document.documentElement.style.setProperty(
        "--window-scroll-offset",
        `${this.scrollPosition}px`
      ), document.body.classList.add(de.CSS.scrollLockedHard);
    }
    unlockHard() {
      document.body.classList.remove(de.CSS.scrollLockedHard), this.scrollPosition !== null && window.scrollTo(0, this.scrollPosition), this.scrollPosition = null;
    }
  };
  var ft = de;
  ft.CSS = {
    scrollLocked: "ce-scroll-locked",
    scrollLockedHard: "ce-scroll-locked--hard"
  };
  var _o = Object.defineProperty;
  var Ao = Object.getOwnPropertyDescriptor;
  var No = (s, e, t, o) => {
    for (var i = o > 1 ? void 0 : o ? Ao(e, t) : e, n = s.length - 1, r; n >= 0; n--)
      (r = s[n]) && (i = (o ? r(e, t, i) : r(i)) || i);
    return o && i && _o(e, t, i), i;
  };
  var fe = /* @__PURE__ */ ((s) => (s.Close = "close", s))(fe || {});
  var z = class extends we {
    constructor(s) {
      super(), this.scopeElement = document.body, this.listeners = new Re(), this.scrollLocker = new ft(), this.nodes = {
        wrapper: null,
        popover: null,
        nothingFoundMessage: null,
        customContent: null,
        items: null,
        overlay: null
      }, this.messages = {
        nothingFound: "Nothing found",
        search: "Search"
      }, this.onFlip = () => {
        this.items.find((t) => t.isFocused).onFocus();
      }, this.items = s.items.map((e) => new P(e)), s.scopeElement !== void 0 && (this.scopeElement = s.scopeElement), s.messages && (this.messages = __spreadValues(__spreadValues({}, this.messages), s.messages)), s.customContentFlippableItems && (this.customContentFlippableItems = s.customContentFlippableItems), this.make(), s.customContent && this.addCustomContent(s.customContent), s.searchable && this.addSearch(), this.initializeFlipper();
    }
    static get CSS() {
      return {
        popover: "ce-popover",
        popoverOpenTop: "ce-popover--open-top",
        popoverOpened: "ce-popover--opened",
        search: "ce-popover__search",
        nothingFoundMessage: "ce-popover__nothing-found-message",
        nothingFoundMessageDisplayed: "ce-popover__nothing-found-message--displayed",
        customContent: "ce-popover__custom-content",
        customContentHidden: "ce-popover__custom-content--hidden",
        items: "ce-popover__items",
        overlay: "ce-popover__overlay",
        overlayHidden: "ce-popover__overlay--hidden"
      };
    }
    getElement() {
      return this.nodes.wrapper;
    }
    hasFocus() {
      return this.flipper.hasFocus();
    }
    show() {
      this.shouldOpenBottom || (this.nodes.popover.style.setProperty("--popover-height", this.height + "px"), this.nodes.popover.classList.add(z.CSS.popoverOpenTop)), this.nodes.overlay.classList.remove(z.CSS.overlayHidden), this.nodes.popover.classList.add(z.CSS.popoverOpened), this.flipper.activate(this.flippableElements), this.search !== void 0 && setTimeout(() => {
        this.search.focus();
      }, 100), ee() && this.scrollLocker.lock();
    }
    hide() {
      this.nodes.popover.classList.remove(z.CSS.popoverOpened), this.nodes.popover.classList.remove(z.CSS.popoverOpenTop), this.nodes.overlay.classList.add(z.CSS.overlayHidden), this.flipper.deactivate(), this.items.forEach((s) => s.reset()), this.search !== void 0 && this.search.clear(), ee() && this.scrollLocker.unlock(), this.emit(
        "close"
      );
    }
    destroy() {
      this.flipper.deactivate(), this.listeners.removeAll(), ee() && this.scrollLocker.unlock();
    }
    make() {
      this.nodes.popover = d.make("div", [z.CSS.popover]), this.nodes.nothingFoundMessage = d.make("div", [z.CSS.nothingFoundMessage], {
        textContent: this.messages.nothingFound
      }), this.nodes.popover.appendChild(this.nodes.nothingFoundMessage), this.nodes.items = d.make("div", [z.CSS.items]), this.items.forEach((s) => {
        this.nodes.items.appendChild(s.getElement());
      }), this.nodes.popover.appendChild(this.nodes.items), this.listeners.on(this.nodes.popover, "click", (s) => {
        const e = this.getTargetItem(s);
        e !== void 0 && this.handleItemClick(e);
      }), this.nodes.wrapper = d.make("div"), this.nodes.overlay = d.make("div", [z.CSS.overlay, z.CSS.overlayHidden]), this.listeners.on(this.nodes.overlay, "click", () => {
        this.hide();
      }), this.nodes.wrapper.appendChild(this.nodes.overlay), this.nodes.wrapper.appendChild(this.nodes.popover);
    }
    addSearch() {
      this.search = new ue({
        items: this.items,
        placeholder: this.messages.search,
        onSearch: (e, t) => {
          this.items.forEach((i) => {
            const n = !t.includes(i);
            i.toggleHidden(n);
          }), this.toggleNothingFoundMessage(t.length === 0), this.toggleCustomContent(e !== "");
          const o = e === "" ? this.flippableElements : t.map((i) => i.getElement());
          this.flipper.isActivated && (this.flipper.deactivate(), this.flipper.activate(o));
        }
      });
      const s = this.search.getElement();
      s.classList.add(z.CSS.search), this.nodes.popover.insertBefore(s, this.nodes.popover.firstChild);
    }
    addCustomContent(s) {
      this.nodes.customContent = s, this.nodes.customContent.classList.add(z.CSS.customContent), this.nodes.popover.insertBefore(s, this.nodes.popover.firstChild);
    }
    getTargetItem(s) {
      return this.items.find((e) => s.composedPath().includes(e.getElement()));
    }
    handleItemClick(s) {
      s.isDisabled || (this.items.filter((e) => e !== s).forEach((e) => e.reset()), s.handleClick(), this.toggleItemActivenessIfNeeded(s), s.closeOnActivate && this.hide());
    }
    initializeFlipper() {
      this.flipper = new G({
        items: this.flippableElements,
        focusedItemClass: P.CSS.focused,
        allowedKeys: [
          B.TAB,
          B.UP,
          B.DOWN,
          B.ENTER
        ]
      }), this.flipper.onFlip(this.onFlip);
    }
    get flippableElements() {
      const s = this.items.map((t) => t.getElement());
      return (this.customContentFlippableItems || []).concat(s);
    }
    get height() {
      let s = 0;
      if (this.nodes.popover === null)
        return s;
      const e = this.nodes.popover.cloneNode(true);
      return e.style.visibility = "hidden", e.style.position = "absolute", e.style.top = "-1000px", e.classList.add(z.CSS.popoverOpened), document.body.appendChild(e), s = e.offsetHeight, e.remove(), s;
    }
    get shouldOpenBottom() {
      const s = this.nodes.popover.getBoundingClientRect(), e = this.scopeElement.getBoundingClientRect(), t = this.height, o = s.top + t, i = s.top - t, n = Math.min(window.innerHeight, e.bottom);
      return i < e.top || o <= n;
    }
    toggleNothingFoundMessage(s) {
      this.nodes.nothingFoundMessage.classList.toggle(z.CSS.nothingFoundMessageDisplayed, s);
    }
    toggleCustomContent(s) {
      var e;
      (e = this.nodes.customContent) == null || e.classList.toggle(z.CSS.customContentHidden, s);
    }
    toggleItemActivenessIfNeeded(s) {
      if (s.toggle === true && s.toggleActive(), typeof s.toggle == "string") {
        const e = this.items.filter((t) => t.toggle === s.toggle);
        if (e.length === 1) {
          s.toggleActive();
          return;
        }
        e.forEach((t) => {
          t.toggleActive(t === s);
        });
      }
    }
  };
  var He = z;
  No([
    ae
  ], He.prototype, "height", 1);
  var Ro = class extends S {
    constructor() {
      super(...arguments), this.opened = false, this.selection = new m(), this.onPopoverClose = () => {
        this.close();
      };
    }
    get events() {
      return {
        opened: "block-settings-opened",
        closed: "block-settings-closed"
      };
    }
    get CSS() {
      return {
        settings: "ce-settings"
      };
    }
    get flipper() {
      var e;
      return (e = this.popover) == null ? void 0 : e.flipper;
    }
    make() {
      this.nodes.wrapper = d.make("div", [this.CSS.settings]);
    }
    destroy() {
      this.removeAllNodes();
    }
    open(e = this.Editor.BlockManager.currentBlock) {
      this.opened = true, this.selection.save(), e.selected = true, this.Editor.BlockSelection.clearCache();
      const [t, o] = e.getTunes();
      this.eventsDispatcher.emit(this.events.opened), this.popover = new He({
        searchable: true,
        items: t.map((i) => this.resolveTuneAliases(i)),
        customContent: o,
        customContentFlippableItems: this.getControls(o),
        scopeElement: this.Editor.API.methods.ui.nodes.redactor,
        messages: {
          nothingFound: $2.ui(X.ui.popover, "Nothing found"),
          search: $2.ui(X.ui.popover, "Filter")
        }
      }), this.popover.on(fe.Close, this.onPopoverClose), this.nodes.wrapper.append(this.popover.getElement()), this.popover.show();
    }
    getElement() {
      return this.nodes.wrapper;
    }
    close() {
      this.opened = false, m.isAtEditor || this.selection.restore(), this.selection.clearSaved(), !this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted && this.Editor.BlockManager.currentBlock && (this.Editor.BlockManager.currentBlock.selected = false), this.eventsDispatcher.emit(this.events.closed), this.popover && (this.popover.off(fe.Close, this.onPopoverClose), this.popover.destroy(), this.popover.getElement().remove(), this.popover = null);
    }
    getControls(e) {
      const { StylesAPI: t } = this.Editor, o = e.querySelectorAll(
        `.${t.classes.settingsButton}, ${d.allInputsSelector}`
      );
      return Array.from(o);
    }
    resolveTuneAliases(e) {
      const t = yo(e, { label: "title" });
      return e.confirmation && (t.confirmation = this.resolveTuneAliases(e.confirmation)), t;
    }
  };
  var Y = class extends S {
    constructor() {
      super(...arguments), this.opened = false, this.tools = [], this.flipper = null, this.togglingCallback = null;
    }
    static get CSS() {
      return {
        conversionToolbarWrapper: "ce-conversion-toolbar",
        conversionToolbarShowed: "ce-conversion-toolbar--showed",
        conversionToolbarTools: "ce-conversion-toolbar__tools",
        conversionToolbarLabel: "ce-conversion-toolbar__label",
        conversionTool: "ce-conversion-tool",
        conversionToolHidden: "ce-conversion-tool--hidden",
        conversionToolIcon: "ce-conversion-tool__icon",
        conversionToolFocused: "ce-conversion-tool--focused",
        conversionToolActive: "ce-conversion-tool--active"
      };
    }
    make() {
      this.nodes.wrapper = d.make("div", [
        Y.CSS.conversionToolbarWrapper,
        ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []
      ]), this.nodes.tools = d.make("div", Y.CSS.conversionToolbarTools);
      const e = d.make("div", Y.CSS.conversionToolbarLabel, {
        textContent: $2.ui(X.ui.inlineToolbar.converter, "Convert to")
      });
      return this.addTools(), this.enableFlipper(), d.append(this.nodes.wrapper, e), d.append(this.nodes.wrapper, this.nodes.tools), this.nodes.wrapper;
    }
    destroy() {
      this.flipper && (this.flipper.deactivate(), this.flipper = null), this.removeAllNodes();
    }
    toggle(e) {
      this.opened ? this.close() : this.open(), D(e) && (this.togglingCallback = e);
    }
    open() {
      this.filterTools(), this.opened = true, this.nodes.wrapper.classList.add(Y.CSS.conversionToolbarShowed), window.requestAnimationFrame(() => {
        this.flipper.activate(this.tools.map((e) => e.button).filter((e) => !e.classList.contains(Y.CSS.conversionToolHidden))), this.flipper.focusFirst(), D(this.togglingCallback) && this.togglingCallback(true);
      });
    }
    close() {
      this.opened = false, this.flipper.deactivate(), this.nodes.wrapper.classList.remove(Y.CSS.conversionToolbarShowed), D(this.togglingCallback) && this.togglingCallback(false);
    }
    hasTools() {
      return this.tools.length === 1 ? this.tools[0].name !== this.config.defaultBlock : true;
    }
    async replaceWithBlock(e, t) {
      const o = this.Editor.BlockManager.currentBlock.tool, n = (await this.Editor.BlockManager.currentBlock.save()).data, r = this.Editor.Tools.blockTools.get(e);
      let a = "";
      const l = o.conversionConfig.export;
      if (D(l))
        a = l(n);
      else if (J(l))
        a = n[l];
      else {
        T("Conversion \xABexport\xBB property must be a string or function. String means key of saved data object to export. Function should export processed string to export.");
        return;
      }
      const c = Z(
        a,
        r.sanitizeConfig
      );
      let u = {};
      const h = r.conversionConfig.import;
      if (D(h))
        u = h(c);
      else if (J(h))
        u[h] = c;
      else {
        T("Conversion \xABimport\xBB property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data.");
        return;
      }
      t && (u = Object.assign(u, t)), this.Editor.BlockManager.replace({
        tool: e,
        data: u
      }), this.Editor.BlockSelection.clearSelection(), this.close(), this.Editor.InlineToolbar.close(), oe(() => {
        this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock);
      }, 10)();
    }
    addTools() {
      const e = this.Editor.Tools.blockTools;
      Array.from(e.entries()).forEach(([t, o]) => {
        const i = o.conversionConfig;
        !i || !i.import || o.toolbox.forEach(
          (n) => this.addToolIfValid(t, n)
        );
      });
    }
    addToolIfValid(e, t) {
      V(t) || !t.icon || this.addTool(e, t);
    }
    addTool(e, t) {
      const o = d.make("div", [Y.CSS.conversionTool]), i = d.make("div", [Y.CSS.conversionToolIcon]);
      o.dataset.tool = e, i.innerHTML = t.icon, d.append(o, i), d.append(o, d.text($2.t(X.toolNames, t.title || ke(e)))), d.append(this.nodes.tools, o), this.tools.push({
        name: e,
        button: o,
        toolboxItem: t
      }), this.listeners.on(o, "click", async () => {
        await this.replaceWithBlock(e, t.data);
      });
    }
    async filterTools() {
      const { currentBlock: e } = this.Editor.BlockManager, t = await e.getActiveToolboxEntry();
      function o(i, n) {
        return i.icon === n.icon && i.title === n.title;
      }
      this.tools.forEach((i) => {
        let n = false;
        if (t) {
          const r = o(t, i.toolboxItem);
          n = i.button.dataset.tool === e.name && r;
        }
        i.button.hidden = n, i.button.classList.toggle(Y.CSS.conversionToolHidden, n);
      });
    }
    enableFlipper() {
      this.flipper = new G({
        focusedItemClass: Y.CSS.conversionToolFocused
      });
    }
  };
  var Ae = {};
  var Do = {
    get exports() {
      return Ae;
    },
    set exports(s) {
      Ae = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(window, function() {
      return function(t) {
        var o = {};
        function i(n) {
          if (o[n])
            return o[n].exports;
          var r = o[n] = { i: n, l: false, exports: {} };
          return t[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = t, i.c = o, i.d = function(n, r, a) {
          i.o(n, r) || Object.defineProperty(n, r, { enumerable: true, get: a });
        }, i.r = function(n) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n, "__esModule", { value: true });
        }, i.t = function(n, r) {
          if (1 & r && (n = i(n)), 8 & r || 4 & r && typeof n == "object" && n && n.__esModule)
            return n;
          var a = /* @__PURE__ */ Object.create(null);
          if (i.r(a), Object.defineProperty(a, "default", { enumerable: true, value: n }), 2 & r && typeof n != "string")
            for (var l in n)
              i.d(a, l, function(c) {
                return n[c];
              }.bind(null, l));
          return a;
        }, i.n = function(n) {
          var r = n && n.__esModule ? function() {
            return n.default;
          } : function() {
            return n;
          };
          return i.d(r, "a", r), r;
        }, i.o = function(n, r) {
          return Object.prototype.hasOwnProperty.call(n, r);
        }, i.p = "", i(i.s = 0);
      }([function(t, o, i) {
        function n(l, c) {
          for (var u = 0; u < c.length; u++) {
            var h = c[u];
            h.enumerable = h.enumerable || false, h.configurable = true, "value" in h && (h.writable = true), Object.defineProperty(l, h.key, h);
          }
        }
        function r(l, c, u) {
          return c && n(l.prototype, c), u && n(l, u), l;
        }
        i.r(o);
        var a = function() {
          function l(c) {
            var u = this;
            (function(h, f) {
              if (!(h instanceof f))
                throw new TypeError("Cannot call a class as a function");
            })(this, l), this.commands = {}, this.keys = {}, this.name = c.name, this.parseShortcutName(c.name), this.element = c.on, this.callback = c.callback, this.executeShortcut = function(h) {
              u.execute(h);
            }, this.element.addEventListener("keydown", this.executeShortcut, false);
          }
          return r(l, null, [{ key: "supportedCommands", get: function() {
            return { SHIFT: ["SHIFT"], CMD: ["CMD", "CONTROL", "COMMAND", "WINDOWS", "CTRL"], ALT: ["ALT", "OPTION"] };
          } }, { key: "keyCodes", get: function() {
            return { 0: 48, 1: 49, 2: 50, 3: 51, 4: 52, 5: 53, 6: 54, 7: 55, 8: 56, 9: 57, A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90, BACKSPACE: 8, ENTER: 13, ESCAPE: 27, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, INSERT: 45, DELETE: 46, ".": 190 };
          } }]), r(l, [{ key: "parseShortcutName", value: function(c) {
            c = c.split("+");
            for (var u = 0; u < c.length; u++) {
              c[u] = c[u].toUpperCase();
              var h = false;
              for (var f in l.supportedCommands)
                if (l.supportedCommands[f].includes(c[u])) {
                  h = this.commands[f] = true;
                  break;
                }
              h || (this.keys[c[u]] = true);
            }
            for (var v in l.supportedCommands)
              this.commands[v] || (this.commands[v] = false);
          } }, { key: "execute", value: function(c) {
            var u, h = { CMD: c.ctrlKey || c.metaKey, SHIFT: c.shiftKey, ALT: c.altKey }, f = true;
            for (u in this.commands)
              this.commands[u] !== h[u] && (f = false);
            var v, p = true;
            for (v in this.keys)
              p = p && c.keyCode === l.keyCodes[v];
            f && p && this.callback(c);
          } }, { key: "remove", value: function() {
            this.element.removeEventListener("keydown", this.executeShortcut);
          } }]), l;
        }();
        o.default = a;
      }]).default;
    });
  })(Do);
  var Po = /* @__PURE__ */ xe(Ae);
  var Fo = class {
    constructor() {
      this.registeredShortcuts = /* @__PURE__ */ new Map();
    }
    add(e) {
      if (this.findShortcut(e.on, e.name))
        throw Error(
          `Shortcut ${e.name} is already registered for ${e.on}. Please remove it before add a new handler.`
        );
      const o = new Po({
        name: e.name,
        on: e.on,
        callback: e.handler
      }), i = this.registeredShortcuts.get(e.on) || [];
      this.registeredShortcuts.set(e.on, [...i, o]);
    }
    remove(e, t) {
      const o = this.findShortcut(e, t);
      if (!o)
        return;
      o.remove();
      const i = this.registeredShortcuts.get(e);
      this.registeredShortcuts.set(e, i.filter((n) => n !== o));
    }
    findShortcut(e, t) {
      return (this.registeredShortcuts.get(e) || []).find(({ name: i }) => i === t);
    }
  };
  var re = new Fo();
  var Ho = Object.defineProperty;
  var zo = Object.getOwnPropertyDescriptor;
  var gt = (s, e, t, o) => {
    for (var i = o > 1 ? void 0 : o ? zo(e, t) : e, n = s.length - 1, r; n >= 0; n--)
      (r = s[n]) && (i = (o ? r(e, t, i) : r(i)) || i);
    return o && i && Ho(e, t, i), i;
  };
  var be = /* @__PURE__ */ ((s) => (s.Opened = "toolbox-opened", s.Closed = "toolbox-closed", s.BlockAdded = "toolbox-block-added", s))(be || {});
  var bt = class extends we {
    constructor({ api: s, tools: e, i18nLabels: t }) {
      super(), this.opened = false, this.nodes = {
        toolbox: null
      }, this.onPopoverClose = () => {
        this.opened = false, this.emit(
          "toolbox-closed"
        );
      }, this.api = s, this.tools = e, this.i18nLabels = t;
    }
    get isEmpty() {
      return this.toolsToBeDisplayed.length === 0;
    }
    static get CSS() {
      return {
        toolbox: "ce-toolbox"
      };
    }
    make() {
      return this.popover = new He({
        scopeElement: this.api.ui.nodes.redactor,
        searchable: true,
        messages: {
          nothingFound: this.i18nLabels.nothingFound,
          search: this.i18nLabels.filter
        },
        items: this.toolboxItemsToBeDisplayed
      }), this.popover.on(fe.Close, this.onPopoverClose), this.enableShortcuts(), this.nodes.toolbox = this.popover.getElement(), this.nodes.toolbox.classList.add(bt.CSS.toolbox), this.nodes.toolbox;
    }
    hasFocus() {
      var s;
      return (s = this.popover) == null ? void 0 : s.hasFocus();
    }
    destroy() {
      var s;
      super.destroy(), this.nodes && this.nodes.toolbox && (this.nodes.toolbox.remove(), this.nodes.toolbox = null), this.removeAllShortcuts(), (s = this.popover) == null || s.off(fe.Close, this.onPopoverClose);
    }
    toolButtonActivated(s, e) {
      this.insertNewBlock(s, e);
    }
    open() {
      var s;
      this.isEmpty || ((s = this.popover) == null || s.show(), this.opened = true, this.emit(
        "toolbox-opened"
      ));
    }
    close() {
      var s;
      (s = this.popover) == null || s.hide(), this.opened = false, this.emit(
        "toolbox-closed"
      );
    }
    toggle() {
      this.opened ? this.close() : this.open();
    }
    get toolsToBeDisplayed() {
      const s = [];
      return this.tools.forEach((e) => {
        e.toolbox && s.push(e);
      }), s;
    }
    get toolboxItemsToBeDisplayed() {
      const s = (e, t) => ({
        icon: e.icon,
        title: $2.t(X.toolNames, e.title || ke(t.name)),
        name: t.name,
        onActivate: () => {
          this.toolButtonActivated(t.name, e.data);
        },
        secondaryLabel: t.shortcut ? nt(t.shortcut) : ""
      });
      return this.toolsToBeDisplayed.reduce((e, t) => (Array.isArray(t.toolbox) ? t.toolbox.forEach((o) => {
        e.push(s(o, t));
      }) : t.toolbox !== void 0 && e.push(s(t.toolbox, t)), e), []);
    }
    enableShortcuts() {
      this.toolsToBeDisplayed.forEach((s) => {
        const e = s.shortcut;
        e && this.enableShortcutForTool(s.name, e);
      });
    }
    enableShortcutForTool(s, e) {
      re.add({
        name: e,
        on: this.api.ui.nodes.redactor,
        handler: (t) => {
          t.preventDefault(), this.insertNewBlock(s);
        }
      });
    }
    removeAllShortcuts() {
      this.toolsToBeDisplayed.forEach((s) => {
        const e = s.shortcut;
        e && re.remove(this.api.ui.nodes.redactor, e);
      });
    }
    async insertNewBlock(s, e) {
      const t = this.api.blocks.getCurrentBlockIndex(), o = this.api.blocks.getBlockByIndex(t);
      if (!o)
        return;
      const i = o.isEmpty ? t : t + 1;
      let n;
      if (e) {
        const a = await this.api.blocks.composeBlockData(s);
        n = Object.assign(a, e);
      }
      const r = this.api.blocks.insert(
        s,
        n,
        void 0,
        i,
        void 0,
        o.isEmpty
      );
      r.call(q.APPEND_CALLBACK), this.api.caret.setToBlock(i), this.emit("toolbox-block-added", {
        block: r
      }), this.api.toolbar.close();
    }
  };
  var ze = bt;
  gt([
    ae
  ], ze.prototype, "toolsToBeDisplayed", 1);
  gt([
    ae
  ], ze.prototype, "toolboxItemsToBeDisplayed", 1);
  var mt = "block hovered";
  var jo = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.tooltip = new Fe();
    }
    get CSS() {
      return {
        toolbar: "ce-toolbar",
        content: "ce-toolbar__content",
        actions: "ce-toolbar__actions",
        actionsOpened: "ce-toolbar__actions--opened",
        toolbarOpened: "ce-toolbar--opened",
        openedToolboxHolderModifier: "codex-editor--toolbox-opened",
        plusButton: "ce-toolbar__plus",
        plusButtonShortcut: "ce-toolbar__plus-shortcut",
        settingsToggler: "ce-toolbar__settings-btn",
        settingsTogglerHidden: "ce-toolbar__settings-btn--hidden"
      };
    }
    get opened() {
      return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened);
    }
    get toolbox() {
      return {
        opened: this.toolboxInstance.opened,
        close: () => {
          this.toolboxInstance.close();
        },
        open: () => {
          this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.open();
        },
        toggle: () => this.toolboxInstance.toggle(),
        hasFocus: () => this.toolboxInstance.hasFocus()
      };
    }
    get blockActions() {
      return {
        hide: () => {
          this.nodes.actions.classList.remove(this.CSS.actionsOpened);
        },
        show: () => {
          this.nodes.actions.classList.add(this.CSS.actionsOpened);
        }
      };
    }
    get blockTunesToggler() {
      return {
        hide: () => this.nodes.settingsToggler.classList.add(this.CSS.settingsTogglerHidden),
        show: () => this.nodes.settingsToggler.classList.remove(this.CSS.settingsTogglerHidden)
      };
    }
    toggleReadOnly(e) {
      e ? (this.destroy(), this.Editor.BlockSettings.destroy(), this.disableModuleBindings()) : (this.drawUI(), this.enableModuleBindings());
    }
    moveAndOpen(e = this.Editor.BlockManager.currentBlock) {
      if (this.toolboxInstance.opened && this.toolboxInstance.close(), this.Editor.BlockSettings.opened && this.Editor.BlockSettings.close(), !e)
        return;
      this.hoveredBlock = e;
      const t = e.holder, { isMobile: o } = this.Editor.UI, i = e.pluginsContent, n = window.getComputedStyle(i), r = parseInt(n.paddingTop, 10), a = t.offsetHeight;
      let l;
      o ? l = t.offsetTop + a : l = t.offsetTop + r, this.nodes.wrapper.style.top = `${Math.floor(l)}px`, this.Editor.BlockManager.blocks.length === 1 && e.isEmpty ? this.blockTunesToggler.hide() : this.blockTunesToggler.show(), this.open();
    }
    close() {
      this.Editor.ReadOnly.isEnabled || (this.nodes.wrapper.classList.remove(this.CSS.toolbarOpened), this.blockActions.hide(), this.toolboxInstance.close(), this.Editor.BlockSettings.close());
    }
    open(e = true) {
      oe(() => {
        this.nodes.wrapper.classList.add(this.CSS.toolbarOpened), e ? this.blockActions.show() : this.blockActions.hide();
      }, 50)();
    }
    make() {
      this.nodes.wrapper = d.make("div", this.CSS.toolbar), ["content", "actions"].forEach((t) => {
        this.nodes[t] = d.make("div", this.CSS[t]);
      }), d.append(this.nodes.wrapper, this.nodes.content), d.append(this.nodes.content, this.nodes.actions), this.nodes.plusButton = d.make("div", this.CSS.plusButton, {
        innerHTML: Mo
      }), d.append(this.nodes.actions, this.nodes.plusButton), this.readOnlyMutableListeners.on(this.nodes.plusButton, "click", () => {
        this.tooltip.hide(true), this.plusButtonClicked();
      }, false);
      const e = d.make("div");
      e.appendChild(document.createTextNode($2.ui(X.ui.toolbar.toolbox, "Add"))), e.appendChild(d.make("div", this.CSS.plusButtonShortcut, {
        textContent: "\u21E5 Tab"
      })), this.tooltip.onHover(this.nodes.plusButton, e, {
        hidingDelay: 400
      }), this.nodes.settingsToggler = d.make("span", this.CSS.settingsToggler, {
        innerHTML: Io
      }), d.append(this.nodes.actions, this.nodes.settingsToggler), this.tooltip.onHover(
        this.nodes.settingsToggler,
        $2.ui(X.ui.blockTunes.toggler, "Click to tune"),
        {
          hidingDelay: 400
        }
      ), d.append(this.nodes.actions, this.makeToolbox()), d.append(this.nodes.actions, this.Editor.BlockSettings.getElement()), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);
    }
    makeToolbox() {
      return this.toolboxInstance = new ze({
        api: this.Editor.API.methods,
        tools: this.Editor.Tools.blockTools,
        i18nLabels: {
          filter: $2.ui(X.ui.popover, "Filter"),
          nothingFound: $2.ui(X.ui.popover, "Nothing found")
        }
      }), this.toolboxInstance.on(be.Opened, () => {
        this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolboxHolderModifier);
      }), this.toolboxInstance.on(be.Closed, () => {
        this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolboxHolderModifier);
      }), this.toolboxInstance.on(be.BlockAdded, ({ block: e }) => {
        const { BlockManager: t, Caret: o } = this.Editor, i = t.getBlockById(e.id);
        i.inputs.length === 0 && (i === t.lastBlock ? (t.insertAtEnd(), o.setToBlock(t.lastBlock)) : o.setToBlock(t.nextBlock));
      }), this.toolboxInstance.make();
    }
    plusButtonClicked() {
      this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.toggle();
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(this.nodes.settingsToggler, "mousedown", (e) => {
        e.stopPropagation(), this.settingsTogglerClicked(), this.toolboxInstance.opened && this.toolboxInstance.close(), this.tooltip.hide(true);
      }, true), ee() || this.eventsDispatcher.on(mt, (e) => {
        this.Editor.BlockSettings.opened || this.toolboxInstance.opened || this.moveAndOpen(e.block);
      });
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    settingsTogglerClicked() {
      this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.BlockSettings.open(this.hoveredBlock);
    }
    drawUI() {
      this.Editor.BlockSettings.make(), this.make();
    }
    destroy() {
      this.removeAllNodes(), this.toolboxInstance && this.toolboxInstance.destroy(), this.tooltip.destroy();
    }
  };
  var ye = /* @__PURE__ */ ((s) => (s[s.Block = 0] = "Block", s[s.Inline = 1] = "Inline", s[s.Tune = 2] = "Tune", s))(ye || {});
  var me = /* @__PURE__ */ ((s) => (s.Shortcut = "shortcut", s.Toolbox = "toolbox", s.EnabledInlineTools = "inlineToolbar", s.EnabledBlockTunes = "tunes", s.Config = "config", s))(me || {});
  var kt = /* @__PURE__ */ ((s) => (s.Shortcut = "shortcut", s.SanitizeConfig = "sanitize", s))(kt || {});
  var se = /* @__PURE__ */ ((s) => (s.IsEnabledLineBreaks = "enableLineBreaks", s.Toolbox = "toolbox", s.ConversionConfig = "conversionConfig", s.IsReadOnlySupported = "isReadOnlySupported", s.PasteConfig = "pasteConfig", s))(se || {});
  var je = /* @__PURE__ */ ((s) => (s.IsInline = "isInline", s.Title = "title", s))(je || {});
  var vt = /* @__PURE__ */ ((s) => (s.IsTune = "isTune", s))(vt || {});
  var Ue = class {
    constructor({
      name: e,
      constructable: t,
      config: o,
      api: i,
      isDefault: n,
      isInternal: r = false,
      defaultPlaceholder: a
    }) {
      this.api = i, this.name = e, this.constructable = t, this.config = o, this.isDefault = n, this.isInternal = r, this.defaultPlaceholder = a;
    }
    get settings() {
      const e = this.config.config || {};
      return this.isDefault && !("placeholder" in e) && this.defaultPlaceholder && (e.placeholder = this.defaultPlaceholder), e;
    }
    reset() {
      if (D(this.constructable.reset))
        return this.constructable.reset();
    }
    prepare() {
      if (D(this.constructable.prepare))
        return this.constructable.prepare({
          toolName: this.name,
          config: this.settings
        });
    }
    get shortcut() {
      const e = this.constructable.shortcut;
      return this.config.shortcut || e;
    }
    get sanitizeConfig() {
      return this.constructable.sanitize || {};
    }
    isInline() {
      return this.type === 1;
    }
    isBlock() {
      return this.type === 0;
    }
    isTune() {
      return this.type === 2;
    }
  };
  var Uo = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.CSS = {
        inlineToolbar: "ce-inline-toolbar",
        inlineToolbarShowed: "ce-inline-toolbar--showed",
        inlineToolbarLeftOriented: "ce-inline-toolbar--left-oriented",
        inlineToolbarRightOriented: "ce-inline-toolbar--right-oriented",
        inlineToolbarShortcut: "ce-inline-toolbar__shortcut",
        buttonsWrapper: "ce-inline-toolbar__buttons",
        actionsWrapper: "ce-inline-toolbar__actions",
        inlineToolButton: "ce-inline-tool",
        inputField: "cdx-input",
        focusedButton: "ce-inline-tool--focused",
        conversionToggler: "ce-inline-toolbar__dropdown",
        conversionTogglerArrow: "ce-inline-toolbar__dropdown-arrow",
        conversionTogglerHidden: "ce-inline-toolbar__dropdown--hidden",
        conversionTogglerContent: "ce-inline-toolbar__dropdown-content",
        togglerAndButtonsWrapper: "ce-inline-toolbar__toggler-and-button-wrapper"
      }, this.opened = false, this.toolbarVerticalMargin = ee() ? 20 : 6, this.buttonsList = null, this.width = 0, this.flipper = null, this.tooltip = new Fe();
    }
    toggleReadOnly(e) {
      e ? (this.destroy(), this.Editor.ConversionToolbar.destroy()) : this.make();
    }
    tryToShow(e = false, t = true) {
      if (!this.allowedToShow()) {
        e && this.close();
        return;
      }
      this.move(), this.open(t), this.Editor.Toolbar.close();
    }
    move() {
      const e = m.rect, t = this.Editor.UI.nodes.wrapper.getBoundingClientRect(), o = {
        x: e.x - t.left,
        y: e.y + e.height - t.top + this.toolbarVerticalMargin
      };
      e.width && (o.x += Math.floor(e.width / 2));
      const i = o.x - this.width / 2, n = o.x + this.width / 2;
      this.nodes.wrapper.classList.toggle(
        this.CSS.inlineToolbarLeftOriented,
        i < this.Editor.UI.contentRect.left
      ), this.nodes.wrapper.classList.toggle(
        this.CSS.inlineToolbarRightOriented,
        n > this.Editor.UI.contentRect.right
      ), this.nodes.wrapper.style.left = Math.floor(o.x) + "px", this.nodes.wrapper.style.top = Math.floor(o.y) + "px";
    }
    close() {
      this.opened && (this.Editor.ReadOnly.isEnabled || (this.nodes.wrapper.classList.remove(this.CSS.inlineToolbarShowed), Array.from(this.toolsInstances.entries()).forEach(([e, t]) => {
        const o = this.getToolShortcut(e);
        o && re.remove(this.Editor.UI.nodes.redactor, o), D(t.clear) && t.clear();
      }), this.opened = false, this.flipper.deactivate(), this.Editor.ConversionToolbar.close()));
    }
    open(e = true) {
      if (this.opened)
        return;
      this.addToolsFiltered(), this.nodes.wrapper.classList.add(this.CSS.inlineToolbarShowed), this.buttonsList = this.nodes.buttons.querySelectorAll(`.${this.CSS.inlineToolButton}`), this.opened = true, e && this.Editor.ConversionToolbar.hasTools() ? this.setConversionTogglerContent() : this.nodes.conversionToggler.hidden = true;
      let t = Array.from(this.buttonsList);
      t.unshift(this.nodes.conversionToggler), t = t.filter((o) => !o.hidden), this.flipper.activate(t);
    }
    containsNode(e) {
      return this.nodes.wrapper.contains(e);
    }
    destroy() {
      this.flipper && (this.flipper.deactivate(), this.flipper = null), this.removeAllNodes(), this.tooltip.destroy();
    }
    make() {
      this.nodes.wrapper = d.make("div", [
        this.CSS.inlineToolbar,
        ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []
      ]), this.nodes.togglerAndButtonsWrapper = d.make("div", this.CSS.togglerAndButtonsWrapper), this.nodes.buttons = d.make("div", this.CSS.buttonsWrapper), this.nodes.actions = d.make("div", this.CSS.actionsWrapper), this.listeners.on(this.nodes.wrapper, "mousedown", (e) => {
        e.target.closest(`.${this.CSS.actionsWrapper}`) || e.preventDefault();
      }), d.append(this.nodes.wrapper, [this.nodes.togglerAndButtonsWrapper, this.nodes.actions]), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper), this.addConversionToggler(), d.append(this.nodes.togglerAndButtonsWrapper, this.nodes.buttons), this.prepareConversionToolbar(), this.recalculateWidth(), this.enableFlipper();
    }
    allowedToShow() {
      const e = ["IMG", "INPUT"], t = m.get(), o = m.text;
      if (!t || !t.anchorNode || t.isCollapsed || o.length < 1)
        return false;
      const i = d.isElement(t.anchorNode) ? t.anchorNode : t.anchorNode.parentElement;
      if (t && e.includes(i.tagName) || i.closest('[contenteditable="true"]') === null)
        return false;
      const r = this.Editor.BlockManager.getBlock(t.anchorNode);
      return r ? r.tool.inlineTools.size !== 0 : false;
    }
    recalculateWidth() {
      this.width = this.nodes.wrapper.offsetWidth;
    }
    addConversionToggler() {
      this.nodes.conversionToggler = d.make("div", this.CSS.conversionToggler), this.nodes.conversionTogglerContent = d.make("div", this.CSS.conversionTogglerContent);
      const e = d.make("div", this.CSS.conversionTogglerArrow, {
        innerHTML: pt
      });
      this.nodes.conversionToggler.appendChild(this.nodes.conversionTogglerContent), this.nodes.conversionToggler.appendChild(e), this.nodes.togglerAndButtonsWrapper.appendChild(this.nodes.conversionToggler), this.listeners.on(this.nodes.conversionToggler, "click", () => {
        this.Editor.ConversionToolbar.toggle((t) => {
          !t && this.opened ? this.flipper.activate() : this.opened && this.flipper.deactivate();
        });
      }), ee() === false && this.tooltip.onHover(this.nodes.conversionToggler, $2.ui(X.ui.inlineToolbar.converter, "Convert to"), {
        placement: "top",
        hidingDelay: 100
      });
    }
    async setConversionTogglerContent() {
      const { BlockManager: e } = this.Editor, { currentBlock: t } = e, o = t.name, i = t.tool.conversionConfig, n = i && i.export;
      this.nodes.conversionToggler.hidden = !n, this.nodes.conversionToggler.classList.toggle(this.CSS.conversionTogglerHidden, !n);
      const r = await t.getActiveToolboxEntry() || {};
      this.nodes.conversionTogglerContent.innerHTML = r.icon || r.title || ke(o);
    }
    prepareConversionToolbar() {
      const e = this.Editor.ConversionToolbar.make();
      d.append(this.nodes.wrapper, e);
    }
    addToolsFiltered() {
      const e = m.get(), t = this.Editor.BlockManager.getBlock(e.anchorNode);
      this.nodes.buttons.innerHTML = "", this.nodes.actions.innerHTML = "", this.toolsInstances = /* @__PURE__ */ new Map(), Array.from(t.tool.inlineTools.values()).forEach((o) => {
        this.addTool(o);
      }), this.recalculateWidth();
    }
    addTool(e) {
      const t = e.create(), o = t.render();
      if (!o) {
        T("Render method must return an instance of Node", "warn", e.name);
        return;
      }
      if (o.dataset.tool = e.name, this.nodes.buttons.appendChild(o), this.toolsInstances.set(e.name, t), D(t.renderActions)) {
        const a = t.renderActions();
        this.nodes.actions.appendChild(a);
      }
      this.listeners.on(o, "click", (a) => {
        this.toolClicked(t), a.preventDefault();
      });
      const i = this.getToolShortcut(e.name);
      if (i)
        try {
          this.enableShortcuts(t, i);
        } catch (e2) {
        }
      const n = d.make("div"), r = $2.t(
        X.toolNames,
        e.title || ke(e.name)
      );
      n.appendChild(d.text(r)), i && n.appendChild(d.make("div", this.CSS.inlineToolbarShortcut, {
        textContent: nt(i)
      })), ee() === false && this.tooltip.onHover(o, n, {
        placement: "top",
        hidingDelay: 100
      }), t.checkState(m.get());
    }
    getToolShortcut(e) {
      const { Tools: t } = this.Editor, o = t.inlineTools.get(e), i = t.internal.inlineTools;
      return Array.from(i.keys()).includes(e) ? this.inlineTools[e][kt.Shortcut] : o.shortcut;
    }
    enableShortcuts(e, t) {
      re.add({
        name: t,
        handler: (o) => {
          const { currentBlock: i } = this.Editor.BlockManager;
          i && i.tool.enabledInlineTools && (o.preventDefault(), this.toolClicked(e));
        },
        on: this.Editor.UI.nodes.redactor
      });
    }
    toolClicked(e) {
      const t = m.range;
      e.surround(t), this.checkToolsState(), e.renderActions !== void 0 && this.flipper.deactivate();
    }
    checkToolsState() {
      this.toolsInstances.forEach((e) => {
        e.checkState(m.get());
      });
    }
    get inlineTools() {
      const e = {};
      return Array.from(this.Editor.Tools.inlineTools.entries()).forEach(([t, o]) => {
        e[t] = o.create();
      }), e;
    }
    enableFlipper() {
      this.flipper = new G({
        focusedItemClass: this.CSS.focusedButton,
        allowedKeys: [
          B.ENTER,
          B.TAB
        ]
      });
    }
  };
  var $o = class extends S {
    keydown(e) {
      switch (this.beforeKeydownProcessing(e), e.keyCode) {
        case B.BACKSPACE:
          this.backspace(e);
          break;
        case B.ENTER:
          this.enter(e);
          break;
        case B.DOWN:
        case B.RIGHT:
          this.arrowRightAndDown(e);
          break;
        case B.UP:
        case B.LEFT:
          this.arrowLeftAndUp(e);
          break;
        case B.TAB:
          this.tabPressed(e);
          break;
      }
    }
    beforeKeydownProcessing(e) {
      this.needToolbarClosing(e) && tt(e.keyCode) && (this.Editor.Toolbar.close(), this.Editor.ConversionToolbar.close(), e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || (this.Editor.BlockManager.clearFocused(), this.Editor.BlockSelection.clearSelection(e)));
    }
    keyup(e) {
      e.shiftKey || this.Editor.UI.checkEmptiness();
    }
    tabPressed(e) {
      this.Editor.BlockSelection.clearSelection(e);
      const { BlockManager: t, InlineToolbar: o, ConversionToolbar: i } = this.Editor, n = t.currentBlock;
      if (!n)
        return;
      const r = n.isEmpty, a = n.tool.isDefault && r, l = !r && i.opened, c = !r && !m.isCollapsed && o.opened;
      a ? this.activateToolbox() : !l && !c && this.activateBlockSettings();
    }
    dragOver(e) {
      const t = this.Editor.BlockManager.getBlockByChildNode(e.target);
      t.dropTarget = true;
    }
    dragLeave(e) {
      const t = this.Editor.BlockManager.getBlockByChildNode(e.target);
      t.dropTarget = false;
    }
    handleCommandC(e) {
      const { BlockSelection: t } = this.Editor;
      t.anyBlockSelected && t.copySelectedBlocks(e);
    }
    handleCommandX(e) {
      const { BlockSelection: t, BlockManager: o, Caret: i } = this.Editor;
      t.anyBlockSelected && t.copySelectedBlocks(e).then(() => {
        const n = o.removeSelectedBlocks(), r = o.insertDefaultBlockAtIndex(n, true);
        i.setToBlock(r, i.positions.START), t.clearSelection(e);
      });
    }
    enter(e) {
      const { BlockManager: t, UI: o } = this.Editor;
      if (t.currentBlock.tool.isLineBreaksEnabled || o.someToolbarOpened && o.someFlipperButtonFocused || e.shiftKey)
        return;
      let n = this.Editor.BlockManager.currentBlock;
      this.Editor.Caret.isAtStart && !this.Editor.BlockManager.currentBlock.hasMedia ? this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex) : this.Editor.Caret.isAtEnd ? n = this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex + 1) : n = this.Editor.BlockManager.split(), this.Editor.Caret.setToBlock(n), this.Editor.Toolbar.moveAndOpen(n), e.preventDefault();
    }
    backspace(e) {
      const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor, n = t.currentBlock, r = n.tool;
      if (n.selected || n.isEmpty && n.currentInput === n.firstInput) {
        e.preventDefault();
        const c = t.currentBlockIndex;
        t.previousBlock && t.previousBlock.inputs.length === 0 ? t.removeBlock(c - 1) : t.removeBlock(), i.setToBlock(
          t.currentBlock,
          c ? i.positions.END : i.positions.START
        ), this.Editor.Toolbar.close(), o.clearSelection(e);
        return;
      }
      if (r.isLineBreaksEnabled && !i.isAtStart)
        return;
      const a = t.currentBlockIndex === 0;
      i.isAtStart && m.isCollapsed && n.currentInput === n.firstInput && !a && (e.preventDefault(), this.mergeBlocks());
    }
    mergeBlocks() {
      const { BlockManager: e, Caret: t, Toolbar: o } = this.Editor, i = e.previousBlock, n = e.currentBlock;
      if (n.name !== i.name || !i.mergeable) {
        if (i.inputs.length === 0 || i.isEmpty) {
          e.removeBlock(e.currentBlockIndex - 1), t.setToBlock(e.currentBlock), o.close();
          return;
        }
        t.navigatePrevious() && o.close();
        return;
      }
      t.createShadow(i.pluginsContent), e.mergeBlocks(i, n).then(() => {
        t.restoreCaret(i.pluginsContent), i.pluginsContent.normalize(), o.close();
      });
    }
    arrowRightAndDown(e) {
      const t = G.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === B.TAB);
      if (this.Editor.UI.someToolbarOpened && t)
        return;
      this.Editor.BlockManager.clearFocused(), this.Editor.Toolbar.close();
      const o = this.Editor.Caret.isAtEnd || this.Editor.BlockSelection.anyBlockSelected;
      if (e.shiftKey && e.keyCode === B.DOWN && o) {
        this.Editor.CrossBlockSelection.toggleBlockSelectedState();
        return;
      }
      (e.keyCode === B.DOWN || e.keyCode === B.RIGHT && !this.isRtl ? this.Editor.Caret.navigateNext() : this.Editor.Caret.navigatePrevious()) ? e.preventDefault() : oe(() => {
        this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();
      }, 20)(), this.Editor.BlockSelection.clearSelection(e);
    }
    arrowLeftAndUp(e) {
      if (this.Editor.UI.someToolbarOpened) {
        if (G.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === B.TAB))
          return;
        this.Editor.UI.closeAllToolbars();
      }
      this.Editor.BlockManager.clearFocused(), this.Editor.Toolbar.close();
      const t = this.Editor.Caret.isAtStart || this.Editor.BlockSelection.anyBlockSelected;
      if (e.shiftKey && e.keyCode === B.UP && t) {
        this.Editor.CrossBlockSelection.toggleBlockSelectedState(false);
        return;
      }
      (e.keyCode === B.UP || e.keyCode === B.LEFT && !this.isRtl ? this.Editor.Caret.navigatePrevious() : this.Editor.Caret.navigateNext()) ? e.preventDefault() : oe(() => {
        this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();
      }, 20)(), this.Editor.BlockSelection.clearSelection(e);
    }
    needToolbarClosing(e) {
      const t = e.keyCode === B.ENTER && this.Editor.Toolbar.toolbox.opened, o = e.keyCode === B.ENTER && this.Editor.BlockSettings.opened, i = e.keyCode === B.ENTER && this.Editor.InlineToolbar.opened, n = e.keyCode === B.ENTER && this.Editor.ConversionToolbar.opened, r = e.keyCode === B.TAB;
      return !(e.shiftKey || r || t || o || i || n);
    }
    activateToolbox() {
      this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open();
    }
    activateBlockSettings() {
      this.Editor.Toolbar.opened || (this.Editor.BlockManager.currentBlock.focused = true, this.Editor.Toolbar.moveAndOpen()), this.Editor.BlockSettings.opened || this.Editor.BlockSettings.open();
    }
  };
  var Ce = class {
    constructor(e) {
      this.blocks = [], this.workingArea = e;
    }
    get length() {
      return this.blocks.length;
    }
    get array() {
      return this.blocks;
    }
    get nodes() {
      return it(this.workingArea.children);
    }
    static set(e, t, o) {
      return isNaN(Number(t)) ? (Reflect.set(e, t, o), true) : (e.insert(+t, o), true);
    }
    static get(e, t) {
      return isNaN(Number(t)) ? Reflect.get(e, t) : e.get(+t);
    }
    push(e) {
      this.blocks.push(e), this.insertToDOM(e);
    }
    swap(e, t) {
      const o = this.blocks[t];
      d.swap(this.blocks[e].holder, o.holder), this.blocks[t] = this.blocks[e], this.blocks[e] = o;
    }
    move(e, t) {
      const o = this.blocks.splice(t, 1)[0], i = e - 1, n = Math.max(0, i), r = this.blocks[n];
      e > 0 ? this.insertToDOM(o, "afterend", r) : this.insertToDOM(o, "beforebegin", r), this.blocks.splice(e, 0, o);
      const a = this.composeBlockEvent("move", {
        fromIndex: t,
        toIndex: e
      });
      o.call(q.MOVED, a);
    }
    insert(e, t, o = false) {
      if (!this.length) {
        this.push(t);
        return;
      }
      e > this.length && (e = this.length), o && (this.blocks[e].holder.remove(), this.blocks[e].call(q.REMOVED));
      const i = o ? 1 : 0;
      if (this.blocks.splice(e, i, t), e > 0) {
        const n = this.blocks[e - 1];
        this.insertToDOM(t, "afterend", n);
      } else {
        const n = this.blocks[e + 1];
        n ? this.insertToDOM(t, "beforebegin", n) : this.insertToDOM(t);
      }
    }
    remove(e) {
      isNaN(e) && (e = this.length - 1), this.blocks[e].holder.remove(), this.blocks[e].call(q.REMOVED), this.blocks.splice(e, 1);
    }
    removeAll() {
      this.workingArea.innerHTML = "", this.blocks.forEach((e) => e.call(q.REMOVED)), this.blocks.length = 0;
    }
    insertAfter(e, t) {
      const o = this.blocks.indexOf(e);
      this.insert(o + 1, t);
    }
    get(e) {
      return this.blocks[e];
    }
    indexOf(e) {
      return this.blocks.indexOf(e);
    }
    insertToDOM(e, t, o) {
      t ? o.holder.insertAdjacentElement(t, e.holder) : this.workingArea.appendChild(e.holder), e.call(q.RENDERED);
    }
    composeBlockEvent(e, t) {
      return new CustomEvent(e, {
        detail: t
      });
    }
  };
  var Je = "block-removed";
  var Qe = "block-added";
  var Wo = "block-moved";
  var Yo = "block-changed";
  var Ko = class extends S {
    constructor() {
      super(...arguments), this._currentBlockIndex = -1, this._blocks = null;
    }
    get currentBlockIndex() {
      return this._currentBlockIndex;
    }
    set currentBlockIndex(e) {
      this._currentBlockIndex = e;
    }
    get firstBlock() {
      return this._blocks[0];
    }
    get lastBlock() {
      return this._blocks[this._blocks.length - 1];
    }
    get currentBlock() {
      return this._blocks[this.currentBlockIndex];
    }
    set currentBlock(e) {
      this.currentBlockIndex = this.getBlockIndex(e);
    }
    get nextBlock() {
      return this.currentBlockIndex === this._blocks.length - 1 ? null : this._blocks[this.currentBlockIndex + 1];
    }
    get nextContentfulBlock() {
      return this.blocks.slice(this.currentBlockIndex + 1).find((t) => !!t.inputs.length);
    }
    get previousContentfulBlock() {
      return this.blocks.slice(0, this.currentBlockIndex).reverse().find((t) => !!t.inputs.length);
    }
    get previousBlock() {
      return this.currentBlockIndex === 0 ? null : this._blocks[this.currentBlockIndex - 1];
    }
    get blocks() {
      return this._blocks.array;
    }
    get isEditorEmpty() {
      return this.blocks.every((e) => e.isEmpty);
    }
    prepare() {
      const e = new Ce(this.Editor.UI.nodes.redactor);
      this._blocks = new Proxy(e, {
        set: Ce.set,
        get: Ce.get
      }), this.listeners.on(
        document,
        "copy",
        (t) => this.Editor.BlockEvents.handleCommandC(t)
      );
    }
    toggleReadOnly(e) {
      e ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    composeBlock({
      tool: e,
      data: t = {},
      id: o = void 0,
      tunes: i = {}
    }) {
      const n = this.Editor.ReadOnly.isEnabled, r = this.Editor.Tools.blockTools.get(e), a = new F({
        id: o,
        data: t,
        tool: r,
        api: this.Editor.API,
        readOnly: n,
        tunesData: i
      }, this.eventsDispatcher);
      return n || this.bindBlockEvents(a), a;
    }
    insert({
      id: e = void 0,
      tool: t = this.config.defaultBlock,
      data: o = {},
      index: i,
      needToFocus: n = true,
      replace: r = false,
      tunes: a = {}
    } = {}) {
      let l = i;
      l === void 0 && (l = this.currentBlockIndex + (r ? 0 : 1));
      const c = this.composeBlock({
        id: e,
        tool: t,
        data: o,
        tunes: a
      });
      return r && this.blockDidMutated(Je, this.getBlockByIndex(l), {
        index: l
      }), this._blocks.insert(l, c, r), this.blockDidMutated(Qe, c, {
        index: l
      }), n ? this.currentBlockIndex = l : l <= this.currentBlockIndex && this.currentBlockIndex++, c;
    }
    replace({
      tool: e = this.config.defaultBlock,
      data: t = {}
    }) {
      return this.insert({
        tool: e,
        data: t,
        index: this.currentBlockIndex,
        replace: true
      });
    }
    paste(e, t, o = false) {
      const i = this.insert({
        tool: e,
        replace: o
      });
      try {
        i.call(q.ON_PASTE, t);
      } catch (n) {
        T(`${e}: onPaste callback call is failed`, "error", n);
      }
      return i;
    }
    insertDefaultBlockAtIndex(e, t = false) {
      const o = this.composeBlock({ tool: this.config.defaultBlock });
      return this._blocks[e] = o, this.blockDidMutated(Qe, o, {
        index: e
      }), t ? this.currentBlockIndex = e : e <= this.currentBlockIndex && this.currentBlockIndex++, o;
    }
    insertAtEnd() {
      return this.currentBlockIndex = this.blocks.length - 1, this.insert();
    }
    async mergeBlocks(e, t) {
      const o = this._blocks.indexOf(t);
      if (t.isEmpty)
        return;
      const i = await t.data;
      V(i) || await e.mergeWith(i), this.removeBlock(o), this.currentBlockIndex = this._blocks.indexOf(e);
    }
    removeBlock(e = this.currentBlockIndex) {
      if (!this.validateIndex(e))
        throw new Error("Can't find a Block to remove");
      const t = this._blocks[e];
      t.destroy(), this._blocks.remove(e), this.blockDidMutated(Je, t, {
        index: e
      }), this.currentBlockIndex >= e && this.currentBlockIndex--, this.blocks.length ? e === 0 && (this.currentBlockIndex = 0) : (this.currentBlockIndex = -1, this.insert());
    }
    removeSelectedBlocks() {
      let e;
      for (let t = this.blocks.length - 1; t >= 0; t--)
        this.blocks[t].selected && (this.removeBlock(t), e = t);
      return e;
    }
    removeAllBlocks() {
      for (let e = this.blocks.length - 1; e >= 0; e--)
        this._blocks.remove(e);
      this.currentBlockIndex = -1, this.insert(), this.currentBlock.firstInput.focus();
    }
    split() {
      const e = this.Editor.Caret.extractFragmentFromCaretPosition(), t = d.make("div");
      t.appendChild(e);
      const o = {
        text: d.isEmpty(t) ? "" : t.innerHTML
      };
      return this.insert({ data: o });
    }
    getBlockByIndex(e) {
      return e === -1 && (e = this._blocks.length - 1), this._blocks[e];
    }
    getBlockIndex(e) {
      return this._blocks.indexOf(e);
    }
    getBlockById(e) {
      return this._blocks.array.find((t) => t.id === e);
    }
    getBlock(e) {
      d.isElement(e) || (e = e.parentNode);
      const t = this._blocks.nodes, o = e.closest(`.${F.CSS.wrapper}`), i = t.indexOf(o);
      if (i >= 0)
        return this._blocks[i];
    }
    highlightCurrentNode() {
      this.clearFocused(), this.currentBlock.focused = true;
    }
    clearFocused() {
      this.blocks.forEach((e) => {
        e.focused = false;
      });
    }
    setCurrentBlockByChildNode(e) {
      d.isElement(e) || (e = e.parentNode);
      const t = e.closest(`.${F.CSS.wrapper}`);
      if (!t)
        return;
      const o = t.closest(`.${this.Editor.UI.CSS.editorWrapper}`);
      if (o != null && o.isEqualNode(this.Editor.UI.nodes.wrapper))
        return this.currentBlockIndex = this._blocks.nodes.indexOf(t), this.currentBlock.updateCurrentInput(), this.currentBlock;
    }
    getBlockByChildNode(e) {
      d.isElement(e) || (e = e.parentNode);
      const t = e.closest(`.${F.CSS.wrapper}`);
      return this.blocks.find((o) => o.holder === t);
    }
    swap(e, t) {
      this._blocks.swap(e, t), this.currentBlockIndex = t;
    }
    move(e, t = this.currentBlockIndex) {
      if (isNaN(e) || isNaN(t)) {
        T("Warning during 'move' call: incorrect indices provided.", "warn");
        return;
      }
      if (!this.validateIndex(e) || !this.validateIndex(t)) {
        T("Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.", "warn");
        return;
      }
      this._blocks.move(e, t), this.currentBlockIndex = e, this.blockDidMutated(Wo, this.currentBlock, {
        fromIndex: t,
        toIndex: e
      });
    }
    dropPointer() {
      this.currentBlockIndex = -1, this.clearFocused();
    }
    clear(e = false) {
      this._blocks.removeAll(), this.dropPointer(), e && this.insert(), this.Editor.UI.checkEmptiness();
    }
    async destroy() {
      await Promise.all(this.blocks.map((e) => e.destroy()));
    }
    bindBlockEvents(e) {
      const { BlockEvents: t } = this.Editor;
      this.readOnlyMutableListeners.on(e.holder, "keydown", (o) => {
        t.keydown(o);
      }), this.readOnlyMutableListeners.on(e.holder, "keyup", (o) => {
        t.keyup(o);
      }), this.readOnlyMutableListeners.on(e.holder, "dragover", (o) => {
        t.dragOver(o);
      }), this.readOnlyMutableListeners.on(e.holder, "dragleave", (o) => {
        t.dragLeave(o);
      }), e.on("didMutated", (o) => this.blockDidMutated(Yo, o, {
        index: this.getBlockIndex(o)
      }));
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(
        document,
        "cut",
        (e) => this.Editor.BlockEvents.handleCommandX(e)
      ), this.blocks.forEach((e) => {
        this.bindBlockEvents(e);
      });
    }
    validateIndex(e) {
      return !(e < 0 || e >= this._blocks.length);
    }
    blockDidMutated(e, t, o) {
      const i = new CustomEvent(e, {
        detail: __spreadValues({
          target: new he(t)
        }, o)
      });
      return this.eventsDispatcher.emit(lt, {
        event: i
      }), t;
    }
  };
  var Xo = class extends S {
    constructor() {
      super(...arguments), this.anyBlockSelectedCache = null, this.needToSelectAll = false, this.nativeInputSelected = false, this.readyToBlockSelection = false;
    }
    get sanitizerConfig() {
      return {
        p: {},
        h1: {},
        h2: {},
        h3: {},
        h4: {},
        h5: {},
        h6: {},
        ol: {},
        ul: {},
        li: {},
        br: true,
        img: {
          src: true,
          width: true,
          height: true
        },
        a: {
          href: true
        },
        b: {},
        i: {},
        u: {}
      };
    }
    get allBlocksSelected() {
      const { BlockManager: e } = this.Editor;
      return e.blocks.every((t) => t.selected === true);
    }
    set allBlocksSelected(e) {
      const { BlockManager: t } = this.Editor;
      t.blocks.forEach((o) => {
        o.selected = e;
      }), this.clearCache();
    }
    get anyBlockSelected() {
      const { BlockManager: e } = this.Editor;
      return this.anyBlockSelectedCache === null && (this.anyBlockSelectedCache = e.blocks.some((t) => t.selected === true)), this.anyBlockSelectedCache;
    }
    get selectedBlocks() {
      return this.Editor.BlockManager.blocks.filter((e) => e.selected);
    }
    prepare() {
      this.selection = new m(), re.add({
        name: "CMD+A",
        handler: (e) => {
          const { BlockManager: t, ReadOnly: o } = this.Editor;
          if (o.isEnabled) {
            e.preventDefault(), this.selectAllBlocks();
            return;
          }
          t.currentBlock && this.handleCommandA(e);
        },
        on: this.Editor.UI.nodes.redactor
      });
    }
    toggleReadOnly() {
      m.get().removeAllRanges(), this.allBlocksSelected = false;
    }
    unSelectBlockByIndex(e) {
      const { BlockManager: t } = this.Editor;
      let o;
      isNaN(e) ? o = t.currentBlock : o = t.getBlockByIndex(e), o.selected = false, this.clearCache();
    }
    clearSelection(e, t = false) {
      const { BlockManager: o, Caret: i, RectangleSelection: n } = this.Editor;
      this.needToSelectAll = false, this.nativeInputSelected = false, this.readyToBlockSelection = false;
      const r = e && e instanceof KeyboardEvent, a = r && tt(e.keyCode);
      if (this.anyBlockSelected && r && a && !m.isSelectionExists) {
        const l = o.removeSelectedBlocks();
        o.insertDefaultBlockAtIndex(l, true), i.setToBlock(o.currentBlock), oe(() => {
          const c = e.key;
          i.insertContentAtCaretPosition(c.length > 1 ? "" : c);
        }, 20)();
      }
      if (this.Editor.CrossBlockSelection.clear(e), !this.anyBlockSelected || n.isRectActivated()) {
        this.Editor.RectangleSelection.clearSelection();
        return;
      }
      t && this.selection.restore(), this.allBlocksSelected = false;
    }
    copySelectedBlocks(e) {
      e.preventDefault();
      const t = d.make("div");
      this.selectedBlocks.forEach((n) => {
        const r = Z(n.holder.innerHTML, this.sanitizerConfig), a = d.make("p");
        a.innerHTML = r, t.appendChild(a);
      });
      const o = Array.from(t.childNodes).map((n) => n.textContent).join(`

`), i = t.innerHTML;
      return e.clipboardData.setData("text/plain", o), e.clipboardData.setData("text/html", i), Promise.all(this.selectedBlocks.map((n) => n.save())).then((n) => {
        try {
          e.clipboardData.setData(this.Editor.Paste.MIME_TYPE, JSON.stringify(n));
        } catch (e2) {
        }
      });
    }
    selectBlockByIndex(e) {
      const { BlockManager: t } = this.Editor;
      t.clearFocused();
      let o;
      isNaN(e) ? o = t.currentBlock : o = t.getBlockByIndex(e), this.selection.save(), m.get().removeAllRanges(), o.selected = true, this.clearCache(), this.Editor.InlineToolbar.close();
    }
    clearCache() {
      this.anyBlockSelectedCache = null;
    }
    destroy() {
      re.remove(this.Editor.UI.nodes.redactor, "CMD+A");
    }
    handleCommandA(e) {
      if (this.Editor.RectangleSelection.clearSelection(), d.isNativeInput(e.target) && !this.readyToBlockSelection) {
        this.readyToBlockSelection = true;
        return;
      }
      const o = this.Editor.BlockManager.getBlock(e.target).inputs;
      if (o.length > 1 && !this.readyToBlockSelection) {
        this.readyToBlockSelection = true;
        return;
      }
      if (o.length === 1 && !this.needToSelectAll) {
        this.needToSelectAll = true;
        return;
      }
      this.needToSelectAll ? (e.preventDefault(), this.selectAllBlocks(), this.needToSelectAll = false, this.readyToBlockSelection = false, this.Editor.ConversionToolbar.close()) : this.readyToBlockSelection && (e.preventDefault(), this.selectBlockByIndex(), this.needToSelectAll = true);
    }
    selectAllBlocks() {
      this.selection.save(), m.get().removeAllRanges(), this.allBlocksSelected = true, this.Editor.InlineToolbar.close();
    }
  };
  var ve = class extends S {
    get positions() {
      return {
        START: "start",
        END: "end",
        DEFAULT: "default"
      };
    }
    static get CSS() {
      return {
        shadowCaret: "cdx-shadow-caret"
      };
    }
    get isAtStart() {
      const e = m.get(), t = d.getDeepestNode(this.Editor.BlockManager.currentBlock.currentInput);
      let o = e.focusNode;
      if (d.isNativeInput(t))
        return t.selectionEnd === 0;
      if (!e.anchorNode)
        return false;
      let i = o.textContent.search(/\S/);
      i === -1 && (i = 0);
      let n = e.focusOffset;
      return o.nodeType !== Node.TEXT_NODE && o.childNodes.length && (o.childNodes[n] ? (o = o.childNodes[n], n = 0) : (o = o.childNodes[n - 1], n = o.textContent.length)), (d.isLineBreakTag(t) || d.isEmpty(t)) && this.getHigherLevelSiblings(o, "left").every((l) => {
        const c = d.isLineBreakTag(l), u = l.children.length === 1 && d.isLineBreakTag(l.children[0]), h = c || u;
        return d.isEmpty(l) && !h;
      }) && n === i ? true : t === null || o === t && n <= i;
    }
    get isAtEnd() {
      const e = m.get();
      let t = e.focusNode;
      const o = d.getDeepestNode(this.Editor.BlockManager.currentBlock.currentInput, true);
      if (d.isNativeInput(o))
        return o.selectionEnd === o.value.length;
      if (!e.focusNode)
        return false;
      let i = e.focusOffset;
      if (t.nodeType !== Node.TEXT_NODE && t.childNodes.length && (t.childNodes[i - 1] ? (t = t.childNodes[i - 1], i = t.textContent.length) : (t = t.childNodes[0], i = 0)), d.isLineBreakTag(o) || d.isEmpty(o)) {
        const r = this.getHigherLevelSiblings(t, "right");
        if (r.every((l, c) => c === r.length - 1 && d.isLineBreakTag(l) || d.isEmpty(l) && !d.isLineBreakTag(l)) && i === t.textContent.length)
          return true;
      }
      const n = o.textContent.replace(/\s+$/, "");
      return t === o && i >= n.length;
    }
    setToBlock(e, t = this.positions.DEFAULT, o = 0) {
      const { BlockManager: i } = this.Editor;
      let n;
      switch (t) {
        case this.positions.START:
          n = e.firstInput;
          break;
        case this.positions.END:
          n = e.lastInput;
          break;
        default:
          n = e.currentInput;
      }
      if (!n)
        return;
      const r = d.getDeepestNode(n, t === this.positions.END), a = d.getContentLength(r);
      switch (true) {
        case t === this.positions.START:
          o = 0;
          break;
        case t === this.positions.END:
        case o > a:
          o = a;
          break;
      }
      oe(() => {
        this.set(r, o);
      }, 20)(), i.setCurrentBlockByChildNode(e.holder), i.currentBlock.currentInput = n;
    }
    setToInput(e, t = this.positions.DEFAULT, o = 0) {
      const { currentBlock: i } = this.Editor.BlockManager, n = d.getDeepestNode(e);
      switch (t) {
        case this.positions.START:
          this.set(n, 0);
          break;
        case this.positions.END:
          this.set(n, d.getContentLength(n));
          break;
        default:
          o && this.set(n, o);
      }
      i.currentInput = e;
    }
    set(e, t = 0) {
      const { top: o, bottom: i } = m.setCursor(e, t), { innerHeight: n } = window;
      o < 0 && window.scrollBy(0, o), i > n && window.scrollBy(0, i - n);
    }
    setToTheLastBlock() {
      const e = this.Editor.BlockManager.lastBlock;
      if (e)
        if (e.tool.isDefault && e.isEmpty)
          this.setToBlock(e);
        else {
          const t = this.Editor.BlockManager.insertAtEnd();
          this.setToBlock(t);
        }
    }
    extractFragmentFromCaretPosition() {
      const e = m.get();
      if (e.rangeCount) {
        const t = e.getRangeAt(0), o = this.Editor.BlockManager.currentBlock.currentInput;
        if (t.deleteContents(), o)
          if (d.isNativeInput(o)) {
            const i = o, n = document.createDocumentFragment(), r = i.value.substring(0, i.selectionStart), a = i.value.substring(i.selectionStart);
            return n.textContent = a, i.value = r, n;
          } else {
            const i = t.cloneRange();
            return i.selectNodeContents(o), i.setStart(t.endContainer, t.endOffset), i.extractContents();
          }
      }
    }
    navigateNext() {
      const { BlockManager: e } = this.Editor, { currentBlock: t, nextContentfulBlock: o } = e, { nextInput: i } = t, n = this.isAtEnd;
      let r = o;
      if (!r && !i) {
        if (t.tool.isDefault || !n)
          return false;
        r = e.insertAtEnd();
      }
      return n ? (i ? this.setToInput(i, this.positions.START) : this.setToBlock(r, this.positions.START), true) : false;
    }
    navigatePrevious() {
      const { currentBlock: e, previousContentfulBlock: t } = this.Editor.BlockManager;
      if (!e)
        return false;
      const { previousInput: o } = e;
      return !t && !o ? false : this.isAtStart ? (o ? this.setToInput(o, this.positions.END) : this.setToBlock(t, this.positions.END), true) : false;
    }
    createShadow(e) {
      const t = document.createElement("span");
      t.classList.add(ve.CSS.shadowCaret), e.insertAdjacentElement("beforeend", t);
    }
    restoreCaret(e) {
      const t = e.querySelector(`.${ve.CSS.shadowCaret}`);
      if (!t)
        return;
      new m().expandToTag(t), setTimeout(() => {
        const i = document.createRange();
        i.selectNode(t), i.extractContents();
      }, 50);
    }
    insertContentAtCaretPosition(e) {
      const t = document.createDocumentFragment(), o = document.createElement("div"), i = m.get(), n = m.range;
      o.innerHTML = e, Array.from(o.childNodes).forEach((l) => t.appendChild(l)), t.childNodes.length === 0 && t.appendChild(new Text());
      const r = t.lastChild;
      n.deleteContents(), n.insertNode(t);
      const a = document.createRange();
      a.setStart(r, r.textContent.length), i.removeAllRanges(), i.addRange(a);
    }
    getHigherLevelSiblings(e, t) {
      let o = e;
      const i = [];
      for (; o.parentNode && o.parentNode.contentEditable !== "true"; )
        o = o.parentNode;
      const n = t === "left" ? "previousSibling" : "nextSibling";
      for (; o[n]; )
        o = o[n], i.push(o);
      return i;
    }
  };
  var Vo = class extends S {
    constructor() {
      super(...arguments), this.onMouseUp = () => {
        this.listeners.off(document, "mouseover", this.onMouseOver), this.listeners.off(document, "mouseup", this.onMouseUp);
      }, this.onMouseOver = (e) => {
        const { BlockManager: t, BlockSelection: o } = this.Editor, i = t.getBlockByChildNode(e.relatedTarget) || this.lastSelectedBlock, n = t.getBlockByChildNode(e.target);
        if (!(!i || !n) && n !== i) {
          if (i === this.firstSelectedBlock) {
            m.get().removeAllRanges(), i.selected = true, n.selected = true, o.clearCache();
            return;
          }
          if (n === this.firstSelectedBlock) {
            i.selected = false, n.selected = false, o.clearCache();
            return;
          }
          this.Editor.InlineToolbar.close(), this.toggleBlocksSelectedState(i, n), this.lastSelectedBlock = n;
        }
      };
    }
    async prepare() {
      this.listeners.on(document, "mousedown", (e) => {
        this.enableCrossBlockSelection(e);
      });
    }
    watchSelection(e) {
      if (e.button !== _t.LEFT)
        return;
      const { BlockManager: t } = this.Editor;
      this.firstSelectedBlock = t.getBlock(e.target), this.lastSelectedBlock = this.firstSelectedBlock, this.listeners.on(document, "mouseover", this.onMouseOver), this.listeners.on(document, "mouseup", this.onMouseUp);
    }
    get isCrossBlockSelectionStarted() {
      return !!this.firstSelectedBlock && !!this.lastSelectedBlock;
    }
    toggleBlockSelectedState(e = true) {
      const { BlockManager: t, BlockSelection: o } = this.Editor;
      this.lastSelectedBlock || (this.lastSelectedBlock = this.firstSelectedBlock = t.currentBlock), this.firstSelectedBlock === this.lastSelectedBlock && (this.firstSelectedBlock.selected = true, o.clearCache(), m.get().removeAllRanges());
      const i = t.blocks.indexOf(this.lastSelectedBlock) + (e ? 1 : -1), n = t.blocks[i];
      n && (this.lastSelectedBlock.selected !== n.selected ? (n.selected = true, o.clearCache()) : (this.lastSelectedBlock.selected = false, o.clearCache()), this.lastSelectedBlock = n, this.Editor.InlineToolbar.close(), n.holder.scrollIntoView({
        block: "nearest"
      }));
    }
    clear(e) {
      const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor, n = t.blocks.indexOf(this.firstSelectedBlock), r = t.blocks.indexOf(this.lastSelectedBlock);
      if (o.anyBlockSelected && n > -1 && r > -1)
        if (e && e instanceof KeyboardEvent)
          switch (e.keyCode) {
            case B.DOWN:
            case B.RIGHT:
              i.setToBlock(t.blocks[Math.max(n, r)], i.positions.END);
              break;
            case B.UP:
            case B.LEFT:
              i.setToBlock(t.blocks[Math.min(n, r)], i.positions.START);
              break;
            default:
              i.setToBlock(t.blocks[Math.max(n, r)], i.positions.END);
          }
        else
          i.setToBlock(t.blocks[Math.max(n, r)], i.positions.END);
      this.firstSelectedBlock = this.lastSelectedBlock = null;
    }
    enableCrossBlockSelection(e) {
      const { UI: t } = this.Editor;
      m.isCollapsed || this.Editor.BlockSelection.clearSelection(e), t.nodes.redactor.contains(e.target) ? this.watchSelection(e) : this.Editor.BlockSelection.clearSelection(e);
    }
    toggleBlocksSelectedState(e, t) {
      const { BlockManager: o, BlockSelection: i } = this.Editor, n = o.blocks.indexOf(e), r = o.blocks.indexOf(t), a = e.selected !== t.selected;
      for (let l = Math.min(n, r); l <= Math.max(n, r); l++) {
        const c = o.blocks[l];
        c !== this.firstSelectedBlock && c !== (a ? e : t) && (o.blocks[l].selected = !o.blocks[l].selected, i.clearCache());
      }
    }
  };
  var Zo = class extends S {
    constructor() {
      super(...arguments), this.isStartedAtEditor = false;
    }
    toggleReadOnly(e) {
      e ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    enableModuleBindings() {
      const { UI: e } = this.Editor;
      this.readOnlyMutableListeners.on(e.nodes.holder, "drop", async (t) => {
        await this.processDrop(t);
      }, true), this.readOnlyMutableListeners.on(e.nodes.holder, "dragstart", () => {
        this.processDragStart();
      }), this.readOnlyMutableListeners.on(e.nodes.holder, "dragover", (t) => {
        this.processDragOver(t);
      }, true);
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    async processDrop(e) {
      const {
        BlockManager: t,
        Caret: o,
        Paste: i
      } = this.Editor;
      e.preventDefault(), t.blocks.forEach((r) => {
        r.dropTarget = false;
      }), m.isAtEditor && !m.isCollapsed && this.isStartedAtEditor && document.execCommand("delete"), this.isStartedAtEditor = false;
      const n = t.setCurrentBlockByChildNode(e.target);
      if (n)
        this.Editor.Caret.setToBlock(n, o.positions.END);
      else {
        const r = t.setCurrentBlockByChildNode(t.lastBlock.holder);
        this.Editor.Caret.setToBlock(r, o.positions.END);
      }
      await i.processDataTransfer(e.dataTransfer, true);
    }
    processDragStart() {
      m.isAtEditor && !m.isCollapsed && (this.isStartedAtEditor = true), this.Editor.InlineToolbar.close();
    }
    processDragOver(e) {
      e.preventDefault();
    }
  };
  var Go = class extends S {
    constructor({ config: e, eventsDispatcher: t }) {
      super({
        config: e,
        eventsDispatcher: t
      }), this.disabled = false, this.batchingTimeout = null, this.batchingOnChangeQueue = /* @__PURE__ */ new Map(), this.batchTime = 400, this.mutationObserver = new MutationObserver((o) => {
        this.redactorChanged(o);
      }), this.eventsDispatcher.on(lt, (o) => {
        this.particularBlockChanged(o.event);
      }), this.eventsDispatcher.on(ct, () => {
        this.disable();
      }), this.eventsDispatcher.on(dt, () => {
        this.enable();
      });
    }
    enable() {
      this.mutationObserver.observe(
        this.Editor.UI.nodes.redactor,
        {
          childList: true,
          subtree: true,
          characterData: true,
          attributes: true
        }
      ), this.disabled = false;
    }
    disable() {
      this.mutationObserver.disconnect(), this.disabled = true;
    }
    particularBlockChanged(e) {
      this.disabled || !D(this.config.onChange) || (this.batchingOnChangeQueue.set(`block:${e.detail.target.id}:event:${e.type}`, e), this.batchingTimeout && clearTimeout(this.batchingTimeout), this.batchingTimeout = setTimeout(() => {
        let t;
        this.batchingOnChangeQueue.size === 1 ? t = this.batchingOnChangeQueue.values().next().value : t = Array.from(this.batchingOnChangeQueue.values()), this.config.onChange && this.config.onChange(this.Editor.API.methods, t), this.batchingOnChangeQueue.clear();
      }, this.batchTime));
    }
    redactorChanged(e) {
      this.eventsDispatcher.emit(Me, {
        mutations: e
      });
    }
  };
  var xt = class extends S {
    constructor() {
      super(...arguments), this.MIME_TYPE = "application/x-editor-js", this.toolsTags = {}, this.tagsByTool = {}, this.toolsPatterns = [], this.toolsFiles = {}, this.exceptionList = [], this.processTool = (s) => {
        try {
          const e = s.create({}, {}, false);
          if (s.pasteConfig === false) {
            this.exceptionList.push(s.name);
            return;
          }
          if (!D(e.onPaste))
            return;
          this.getTagsConfig(s), this.getFilesConfig(s), this.getPatternsConfig(s);
        } catch (e) {
          T(
            `Paste handling for \xAB${s.name}\xBB Tool hasn't been set up because of the error`,
            "warn",
            e
          );
        }
      }, this.handlePasteEvent = async (s) => {
        const { BlockManager: e, Toolbar: t } = this.Editor;
        !e.currentBlock || this.isNativeBehaviour(s.target) && !s.clipboardData.types.includes("Files") || e.currentBlock && this.exceptionList.includes(e.currentBlock.name) || (s.preventDefault(), this.processDataTransfer(s.clipboardData), e.clearFocused(), t.close());
      };
    }
    async prepare() {
      this.processTools();
    }
    toggleReadOnly(s) {
      s ? this.unsetCallback() : this.setCallback();
    }
    async processDataTransfer(s, e = false) {
      const { Tools: t } = this.Editor, o = s.types;
      if ((o.includes ? o.includes("Files") : o.contains("Files")) && !V(this.toolsFiles)) {
        await this.processFiles(s.files);
        return;
      }
      const n = s.getData(this.MIME_TYPE), r = s.getData("text/plain");
      let a = s.getData("text/html");
      if (n)
        try {
          this.insertEditorJSData(JSON.parse(n));
          return;
        } catch (e2) {
        }
      e && r.trim() && a.trim() && (a = "<p>" + (a.trim() ? a : r) + "</p>");
      const l = Object.keys(this.toolsTags).reduce((h, f) => {
        var _a;
        return h[f.toLowerCase()] = (_a = this.toolsTags[f].sanitizationConfig) != null ? _a : {}, h;
      }, {}), c = Object.assign({}, l, t.getAllInlineToolsSanitizeConfig(), { br: {} }), u = Z(a, c);
      !u.trim() || u.trim() === r || !d.isHTMLString(u) ? await this.processText(r) : await this.processText(u, true);
    }
    async processText(s, e = false) {
      const { Caret: t, BlockManager: o } = this.Editor, i = e ? this.processHTML(s) : this.processPlain(s);
      if (!i.length)
        return;
      if (i.length === 1) {
        i[0].isBlock ? this.processSingleBlock(i.pop()) : this.processInlinePaste(i.pop());
        return;
      }
      const r = o.currentBlock && o.currentBlock.tool.isDefault && o.currentBlock.isEmpty;
      i.map(
        async (a, l) => this.insertBlock(a, l === 0 && r)
      ), o.currentBlock && t.setToBlock(o.currentBlock, t.positions.END);
    }
    setCallback() {
      this.listeners.on(this.Editor.UI.nodes.holder, "paste", this.handlePasteEvent);
    }
    unsetCallback() {
      this.listeners.off(this.Editor.UI.nodes.holder, "paste", this.handlePasteEvent);
    }
    processTools() {
      const s = this.Editor.Tools.blockTools;
      Array.from(s.values()).forEach(this.processTool);
    }
    collectTagNames(s) {
      return J(s) ? [s] : j(s) ? Object.keys(s) : [];
    }
    getTagsConfig(s) {
      if (s.pasteConfig === false)
        return;
      const e = s.pasteConfig.tags || [], t = [];
      e.forEach((o) => {
        const i = this.collectTagNames(o);
        t.push(...i), i.forEach((n) => {
          if (Object.prototype.hasOwnProperty.call(this.toolsTags, n)) {
            T(
              `Paste handler for \xAB${s.name}\xBB Tool on \xAB${n}\xBB tag is skipped because it is already used by \xAB${this.toolsTags[n].tool.name}\xBB Tool.`,
              "warn"
            );
            return;
          }
          const r = j(o) ? o[n] : null;
          this.toolsTags[n.toUpperCase()] = {
            tool: s,
            sanitizationConfig: r
          };
        });
      }), this.tagsByTool[s.name] = t.map((o) => o.toUpperCase());
    }
    getFilesConfig(s) {
      if (s.pasteConfig === false)
        return;
      const { files: e = {} } = s.pasteConfig;
      let { extensions: t, mimeTypes: o } = e;
      !t && !o || (t && !Array.isArray(t) && (T(`\xABextensions\xBB property of the onDrop config for \xAB${s.name}\xBB Tool should be an array`), t = []), o && !Array.isArray(o) && (T(`\xABmimeTypes\xBB property of the onDrop config for \xAB${s.name}\xBB Tool should be an array`), o = []), o && (o = o.filter((i) => Dt(i) ? true : (T(`MIME type value \xAB${i}\xBB for the \xAB${s.name}\xBB Tool is not a valid MIME type`, "warn"), false))), this.toolsFiles[s.name] = {
        extensions: t || [],
        mimeTypes: o || []
      });
    }
    getPatternsConfig(s) {
      s.pasteConfig === false || !s.pasteConfig.patterns || V(s.pasteConfig.patterns) || Object.entries(s.pasteConfig.patterns).forEach(([e, t]) => {
        t instanceof RegExp || T(
          `Pattern ${t} for \xAB${s.name}\xBB Tool is skipped because it should be a Regexp instance.`,
          "warn"
        ), this.toolsPatterns.push({
          key: e,
          pattern: t,
          tool: s
        });
      });
    }
    isNativeBehaviour(s) {
      return d.isNativeInput(s);
    }
    async processFiles(s) {
      const { BlockManager: e } = this.Editor;
      let t;
      t = await Promise.all(
        Array.from(s).map((n) => this.processFile(n))
      ), t = t.filter((n) => !!n);
      const i = e.currentBlock.tool.isDefault && e.currentBlock.isEmpty;
      t.forEach(
        (n, r) => {
          e.paste(n.type, n.event, r === 0 && i);
        }
      );
    }
    async processFile(s) {
      const e = Rt(s), t = Object.entries(this.toolsFiles).find(([n, { mimeTypes: r, extensions: a }]) => {
        const [l, c] = s.type.split("/"), u = a.find((f) => f.toLowerCase() === e.toLowerCase()), h = r.find((f) => {
          const [v, p] = f.split("/");
          return v === l && (p === c || p === "*");
        });
        return !!u || !!h;
      });
      if (!t)
        return;
      const [o] = t;
      return {
        event: this.composePasteEvent("file", {
          file: s
        }),
        type: o
      };
    }
    processHTML(s) {
      const { Tools: e } = this.Editor, t = d.make("DIV");
      return t.innerHTML = s, this.getNodes(t).map((i) => {
        let n, r = e.defaultTool, a = false;
        switch (i.nodeType) {
          case Node.DOCUMENT_FRAGMENT_NODE:
            n = d.make("div"), n.appendChild(i);
            break;
          case Node.ELEMENT_NODE:
            n = i, a = true, this.toolsTags[n.tagName] && (r = this.toolsTags[n.tagName].tool);
            break;
        }
        const { tags: l } = r.pasteConfig || { tags: [] }, c = l.reduce((f, v) => (this.collectTagNames(v).forEach((k) => {
          const _ = j(v) ? v[k] : null;
          f[k.toLowerCase()] = _ || {};
        }), f), {}), u = Object.assign({}, c, r.baseSanitizeConfig);
        if (n.tagName.toLowerCase() === "table") {
          const f = Z(n.outerHTML, u);
          n = d.make("div", void 0, {
            innerHTML: f
          }).firstChild;
        } else
          n.innerHTML = Z(n.innerHTML, u);
        const h = this.composePasteEvent("tag", {
          data: n
        });
        return {
          content: n,
          isBlock: a,
          tool: r.name,
          event: h
        };
      }).filter((i) => {
        const n = d.isEmpty(i.content), r = d.isSingleTag(i.content);
        return !n || r;
      });
    }
    processPlain(s) {
      const { defaultBlock: e } = this.config;
      if (!s)
        return [];
      const t = e;
      return s.split(/\r?\n/).filter((o) => o.trim()).map((o) => {
        const i = d.make("div");
        i.textContent = o;
        const n = this.composePasteEvent("tag", {
          data: i
        });
        return {
          content: i,
          tool: t,
          isBlock: false,
          event: n
        };
      });
    }
    async processSingleBlock(s) {
      const { Caret: e, BlockManager: t } = this.Editor, { currentBlock: o } = t;
      if (!o || s.tool !== o.name || !d.containsOnlyInlineElements(s.content.innerHTML)) {
        this.insertBlock(s, (o == null ? void 0 : o.tool.isDefault) && o.isEmpty);
        return;
      }
      e.insertContentAtCaretPosition(s.content.innerHTML);
    }
    async processInlinePaste(s) {
      const { BlockManager: e, Caret: t } = this.Editor, { content: o } = s;
      if (e.currentBlock && e.currentBlock.tool.isDefault && o.textContent.length < xt.PATTERN_PROCESSING_MAX_LENGTH) {
        const n = await this.processPattern(o.textContent);
        if (n) {
          const r = e.currentBlock && e.currentBlock.tool.isDefault && e.currentBlock.isEmpty, a = e.paste(n.tool, n.event, r);
          t.setToBlock(a, t.positions.END);
          return;
        }
      }
      if (e.currentBlock && e.currentBlock.currentInput) {
        const n = e.currentBlock.tool.baseSanitizeConfig;
        document.execCommand(
          "insertHTML",
          false,
          Z(o.innerHTML, n)
        );
      } else
        this.insertBlock(s);
    }
    async processPattern(s) {
      const e = this.toolsPatterns.find((o) => {
        const i = o.pattern.exec(s);
        return i ? s === i.shift() : false;
      });
      return e ? {
        event: this.composePasteEvent("pattern", {
          key: e.key,
          data: s
        }),
        tool: e.tool.name
      } : void 0;
    }
    insertBlock(s, e = false) {
      const { BlockManager: t, Caret: o } = this.Editor, { currentBlock: i } = t;
      let n;
      if (e && i && i.isEmpty) {
        n = t.paste(s.tool, s.event, true), o.setToBlock(n, o.positions.END);
        return;
      }
      n = t.paste(s.tool, s.event), o.setToBlock(n, o.positions.END);
    }
    insertEditorJSData(s) {
      const { BlockManager: e, Caret: t, Tools: o } = this.Editor;
      ht(
        s,
        (n) => o.blockTools.get(n).sanitizeConfig
      ).forEach(({ tool: n, data: r }, a) => {
        let l = false;
        a === 0 && (l = e.currentBlock && e.currentBlock.tool.isDefault && e.currentBlock.isEmpty);
        const c = e.insert({
          tool: n,
          data: r,
          replace: l
        });
        t.setToBlock(c, t.positions.END);
      });
    }
    processElementNode(s, e, t) {
      const o = Object.keys(this.toolsTags), i = s, { tool: n } = this.toolsTags[i.tagName] || {}, r = this.tagsByTool[n == null ? void 0 : n.name] || [], a = o.includes(i.tagName), l = d.blockElements.includes(i.tagName.toLowerCase()), c = Array.from(i.children).some(
        ({ tagName: h }) => o.includes(h) && !r.includes(h)
      ), u = Array.from(i.children).some(
        ({ tagName: h }) => d.blockElements.includes(h.toLowerCase())
      );
      if (!l && !a && !c)
        return t.appendChild(i), [...e, t];
      if (a && !c || l && !u && !c)
        return [...e, t, i];
    }
    getNodes(s) {
      const e = Array.from(s.childNodes);
      let t;
      const o = (i, n) => {
        if (d.isEmpty(n) && !d.isSingleTag(n))
          return i;
        const r = i[i.length - 1];
        let a = new DocumentFragment();
        switch (r && d.isFragment(r) && (a = i.pop()), n.nodeType) {
          case Node.ELEMENT_NODE:
            if (t = this.processElementNode(n, i, a), t)
              return t;
            break;
          case Node.TEXT_NODE:
            return a.appendChild(n), [...i, a];
          default:
            return [...i, a];
        }
        return [...i, ...Array.from(n.childNodes).reduce(o, [])];
      };
      return e.reduce(o, []);
    }
    composePasteEvent(s, e) {
      return new CustomEvent(s, {
        detail: e
      });
    }
  };
  var wt = xt;
  wt.PATTERN_PROCESSING_MAX_LENGTH = 450;
  var qo = class extends S {
    constructor() {
      super(...arguments), this.toolsDontSupportReadOnly = [], this.readOnlyEnabled = false;
    }
    get isEnabled() {
      return this.readOnlyEnabled;
    }
    async prepare() {
      const { Tools: e } = this.Editor, { blockTools: t } = e, o = [];
      Array.from(t.entries()).forEach(([i, n]) => {
        n.isReadOnlySupported || o.push(i);
      }), this.toolsDontSupportReadOnly = o, this.config.readOnly && o.length > 0 && this.throwCriticalError(), this.toggle(this.config.readOnly);
    }
    async toggle(e = !this.readOnlyEnabled) {
      e && this.toolsDontSupportReadOnly.length > 0 && this.throwCriticalError();
      const t = this.readOnlyEnabled;
      this.readOnlyEnabled = e;
      for (const i in this.Editor)
        this.Editor[i].toggleReadOnly && this.Editor[i].toggleReadOnly(e);
      if (t === e)
        return this.readOnlyEnabled;
      const o = await this.Editor.Saver.save();
      return await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(o.blocks), this.readOnlyEnabled;
    }
    throwCriticalError() {
      throw new at(
        `To enable read-only mode all connected tools should support it. Tools ${this.toolsDontSupportReadOnly.join(", ")} don't support read-only mode.`
      );
    }
  };
  var pe = class extends S {
    constructor() {
      super(...arguments), this.isRectSelectionActivated = false, this.SCROLL_SPEED = 3, this.HEIGHT_OF_SCROLL_ZONE = 40, this.BOTTOM_SCROLL_ZONE = 1, this.TOP_SCROLL_ZONE = 2, this.MAIN_MOUSE_BUTTON = 0, this.mousedown = false, this.isScrolling = false, this.inScrollZone = null, this.startX = 0, this.startY = 0, this.mouseX = 0, this.mouseY = 0, this.stackOfSelected = [], this.listenerIds = [];
    }
    static get CSS() {
      return {
        overlay: "codex-editor-overlay",
        overlayContainer: "codex-editor-overlay__container",
        rect: "codex-editor-overlay__rectangle",
        topScrollZone: "codex-editor-overlay__scroll-zone--top",
        bottomScrollZone: "codex-editor-overlay__scroll-zone--bottom"
      };
    }
    prepare() {
      this.enableModuleBindings();
    }
    startSelection(e, t) {
      const o = document.elementFromPoint(e - window.pageXOffset, t - window.pageYOffset);
      o.closest(`.${this.Editor.Toolbar.CSS.toolbar}`) || (this.Editor.BlockSelection.allBlocksSelected = false, this.clearSelection(), this.stackOfSelected = []);
      const n = [
        `.${F.CSS.content}`,
        `.${this.Editor.Toolbar.CSS.toolbar}`,
        `.${this.Editor.InlineToolbar.CSS.inlineToolbar}`
      ], r = o.closest("." + this.Editor.UI.CSS.editorWrapper), a = n.some((l) => !!o.closest(l));
      !r || a || (this.mousedown = true, this.startX = e, this.startY = t);
    }
    endSelection() {
      this.mousedown = false, this.startX = 0, this.startY = 0, this.overlayRectangle.style.display = "none";
    }
    isRectActivated() {
      return this.isRectSelectionActivated;
    }
    clearSelection() {
      this.isRectSelectionActivated = false;
    }
    enableModuleBindings() {
      const { container: e } = this.genHTML();
      this.listeners.on(e, "mousedown", (t) => {
        this.processMouseDown(t);
      }, false), this.listeners.on(document.body, "mousemove", Te((t) => {
        this.processMouseMove(t);
      }, 10), {
        passive: true
      }), this.listeners.on(document.body, "mouseleave", () => {
        this.processMouseLeave();
      }), this.listeners.on(window, "scroll", Te((t) => {
        this.processScroll(t);
      }, 10), {
        passive: true
      }), this.listeners.on(document.body, "mouseup", () => {
        this.processMouseUp();
      }, false);
    }
    processMouseDown(e) {
      if (e.button !== this.MAIN_MOUSE_BUTTON)
        return;
      e.target.closest(d.allInputsSelector) !== null || this.startSelection(e.pageX, e.pageY);
    }
    processMouseMove(e) {
      this.changingRectangle(e), this.scrollByZones(e.clientY);
    }
    processMouseLeave() {
      this.clearSelection(), this.endSelection();
    }
    processScroll(e) {
      this.changingRectangle(e);
    }
    processMouseUp() {
      this.clearSelection(), this.endSelection();
    }
    scrollByZones(e) {
      if (this.inScrollZone = null, e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.TOP_SCROLL_ZONE), document.documentElement.clientHeight - e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.BOTTOM_SCROLL_ZONE), !this.inScrollZone) {
        this.isScrolling = false;
        return;
      }
      this.isScrolling || (this.scrollVertical(this.inScrollZone === this.TOP_SCROLL_ZONE ? -this.SCROLL_SPEED : this.SCROLL_SPEED), this.isScrolling = true);
    }
    genHTML() {
      const { UI: e } = this.Editor, t = e.nodes.holder.querySelector("." + e.CSS.editorWrapper), o = d.make("div", pe.CSS.overlay, {}), i = d.make("div", pe.CSS.overlayContainer, {}), n = d.make("div", pe.CSS.rect, {});
      return i.appendChild(n), o.appendChild(i), t.appendChild(o), this.overlayRectangle = n, {
        container: t,
        overlay: o
      };
    }
    scrollVertical(e) {
      if (!(this.inScrollZone && this.mousedown))
        return;
      const t = window.pageYOffset;
      window.scrollBy(0, e), this.mouseY += window.pageYOffset - t, setTimeout(() => {
        this.scrollVertical(e);
      }, 0);
    }
    changingRectangle(e) {
      if (!this.mousedown)
        return;
      e.pageY !== void 0 && (this.mouseX = e.pageX, this.mouseY = e.pageY);
      const { rightPos: t, leftPos: o, index: i } = this.genInfoForMouseSelection(), n = this.startX > t && this.mouseX > t, r = this.startX < o && this.mouseX < o;
      this.rectCrossesBlocks = !(n || r), this.isRectSelectionActivated || (this.rectCrossesBlocks = false, this.isRectSelectionActivated = true, this.shrinkRectangleToPoint(), this.overlayRectangle.style.display = "block"), this.updateRectangleSize(), this.Editor.Toolbar.close(), i !== void 0 && (this.trySelectNextBlock(i), this.inverseSelection(), m.get().removeAllRanges());
    }
    shrinkRectangleToPoint() {
      this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`;
    }
    inverseSelection() {
      const t = this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;
      if (this.rectCrossesBlocks && !t)
        for (const o of this.stackOfSelected)
          this.Editor.BlockSelection.selectBlockByIndex(o);
      if (!this.rectCrossesBlocks && t)
        for (const o of this.stackOfSelected)
          this.Editor.BlockSelection.unSelectBlockByIndex(o);
    }
    updateRectangleSize() {
      this.mouseY >= this.startY ? (this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.mouseY - window.pageYOffset}px`) : (this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.top = `${this.mouseY - window.pageYOffset}px`), this.mouseX >= this.startX ? (this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.mouseX - window.pageXOffset}px`) : (this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.left = `${this.mouseX - window.pageXOffset}px`);
    }
    genInfoForMouseSelection() {
      const t = document.body.offsetWidth / 2, o = this.mouseY - window.pageYOffset, i = document.elementFromPoint(t, o), n = this.Editor.BlockManager.getBlockByChildNode(i);
      let r;
      n !== void 0 && (r = this.Editor.BlockManager.blocks.findIndex((h) => h.holder === n.holder));
      const a = this.Editor.BlockManager.lastBlock.holder.querySelector("." + F.CSS.content), l = Number.parseInt(window.getComputedStyle(a).width, 10) / 2, c = t - l, u = t + l;
      return {
        index: r,
        leftPos: c,
        rightPos: u
      };
    }
    addBlockInSelection(e) {
      this.rectCrossesBlocks && this.Editor.BlockSelection.selectBlockByIndex(e), this.stackOfSelected.push(e);
    }
    trySelectNextBlock(e) {
      const t = this.stackOfSelected[this.stackOfSelected.length - 1] === e, o = this.stackOfSelected.length, i = 1, n = -1, r = 0;
      if (t)
        return;
      const a = this.stackOfSelected[o - 1] - this.stackOfSelected[o - 2] > 0;
      let l = r;
      o > 1 && (l = a ? i : n);
      const c = e > this.stackOfSelected[o - 1] && l === i, u = e < this.stackOfSelected[o - 1] && l === n, f = !(c || u || l === r);
      if (!f && (e > this.stackOfSelected[o - 1] || this.stackOfSelected[o - 1] === void 0)) {
        let k = this.stackOfSelected[o - 1] + 1 || e;
        for (k; k <= e; k++)
          this.addBlockInSelection(k);
        return;
      }
      if (!f && e < this.stackOfSelected[o - 1]) {
        for (let k = this.stackOfSelected[o - 1] - 1; k >= e; k--)
          this.addBlockInSelection(k);
        return;
      }
      if (!f)
        return;
      let v = o - 1, p;
      for (e > this.stackOfSelected[o - 1] ? p = () => e > this.stackOfSelected[v] : p = () => e < this.stackOfSelected[v]; p(); )
        this.rectCrossesBlocks && this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[v]), this.stackOfSelected.pop(), v--;
    }
  };
  var Jo = class extends S {
    async render(e) {
      const t = e.map((i) => ({ function: () => this.insertBlock(i) }));
      this.Editor.ModificationsObserver.disable();
      const o = await ot(t);
      return this.Editor.ModificationsObserver.enable(), this.Editor.UI.checkEmptiness(), o;
    }
    async insertBlock(e) {
      var l;
      const { Tools: t, BlockManager: o } = this.Editor, { type: i, data: n, tunes: r, id: a } = e;
      if (t.available.has(i))
        try {
          o.insert({
            id: a,
            tool: i,
            data: n,
            tunes: r
          });
        } catch (c) {
          throw T(`Block \xAB${i}\xBB skipped because of plugins error`, "warn", {
            data: n,
            error: c
          }), Error(c);
        }
      else {
        const c = {
          savedData: {
            id: a,
            type: i,
            data: n
          },
          title: i
        };
        if (t.unavailable.has(i)) {
          const f = (l = t.unavailable.get(i).toolbox[0]) == null ? void 0 : l.title;
          c.title = f || c.title;
        }
        const u = o.insert({
          id: a,
          tool: t.stubTool,
          data: c
        });
        u.stretched = true, T(`Tool \xAB${i}\xBB is not found. Check 'tools' property at your initial Editor.js config.`, "warn");
      }
    }
  };
  var Qo = class extends S {
    async save() {
      const { BlockManager: e, Tools: t } = this.Editor, o = e.blocks, i = [];
      try {
        o.forEach((a) => {
          i.push(this.getSavedData(a));
        });
        const n = await Promise.all(i), r = await ht(n, (a) => t.blockTools.get(a).sanitizeConfig);
        return this.makeOutput(r);
      } catch (n) {
        K("Saving failed due to the Error %o", "error", n);
      }
    }
    async getSavedData(e) {
      const t = await e.save(), o = t && await e.validate(t.data);
      return __spreadProps(__spreadValues({}, t), {
        isValid: o
      });
    }
    makeOutput(e) {
      let t = 0;
      const o = [];
      return T("[Editor.js saving]:", "groupCollapsed"), e.forEach(({ id: i, tool: n, data: r, tunes: a, time: l, isValid: c }) => {
        if (t += l, T(`${n.charAt(0).toUpperCase() + n.slice(1)}`, "group"), c)
          T(r), T(void 0, "groupEnd");
        else {
          T(`Block \xAB${n}\xBB skipped because saved data is invalid`), T(void 0, "groupEnd");
          return;
        }
        if (n === this.Editor.Tools.stubTool) {
          o.push(r);
          return;
        }
        const u = __spreadValues({
          id: i,
          type: n,
          data: r
        }, !V(a) && {
          tunes: a
        });
        o.push(u);
      }), T("Total", "log", t), T(void 0, "groupEnd"), {
        time: +/* @__PURE__ */ new Date(),
        blocks: o,
        version: "2.27.0"
      };
    }
  };
  var Ne = {};
  var ei = {
    get exports() {
      return Ne;
    },
    set exports(s) {
      Ne = s;
    }
  };
  (function(s, e) {
    (function(t, o) {
      s.exports = o();
    })(window, function() {
      return function(t) {
        var o = {};
        function i(n) {
          if (o[n])
            return o[n].exports;
          var r = o[n] = { i: n, l: false, exports: {} };
          return t[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = t, i.c = o, i.d = function(n, r, a) {
          i.o(n, r) || Object.defineProperty(n, r, { enumerable: true, get: a });
        }, i.r = function(n) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n, "__esModule", { value: true });
        }, i.t = function(n, r) {
          if (1 & r && (n = i(n)), 8 & r || 4 & r && typeof n == "object" && n && n.__esModule)
            return n;
          var a = /* @__PURE__ */ Object.create(null);
          if (i.r(a), Object.defineProperty(a, "default", { enumerable: true, value: n }), 2 & r && typeof n != "string")
            for (var l in n)
              i.d(a, l, function(c) {
                return n[c];
              }.bind(null, l));
          return a;
        }, i.n = function(n) {
          var r = n && n.__esModule ? function() {
            return n.default;
          } : function() {
            return n;
          };
          return i.d(r, "a", r), r;
        }, i.o = function(n, r) {
          return Object.prototype.hasOwnProperty.call(n, r);
        }, i.p = "/", i(i.s = 4);
      }([function(t, o, i) {
        var n = i(1), r = i(2);
        typeof (r = r.__esModule ? r.default : r) == "string" && (r = [[t.i, r, ""]]);
        var a = { insert: "head", singleton: false };
        n(r, a), t.exports = r.locals || {};
      }, function(t, o, i) {
        var n, r = function() {
          return n === void 0 && (n = !!(window && document && document.all && !window.atob)), n;
        }, a = function() {
          var y = {};
          return function(x) {
            if (y[x] === void 0) {
              var w = document.querySelector(x);
              if (window.HTMLIFrameElement && w instanceof window.HTMLIFrameElement)
                try {
                  w = w.contentDocument.head;
                } catch (e2) {
                  w = null;
                }
              y[x] = w;
            }
            return y[x];
          };
        }(), l = [];
        function c(y) {
          for (var x = -1, w = 0; w < l.length; w++)
            if (l[w].identifier === y) {
              x = w;
              break;
            }
          return x;
        }
        function u(y, x) {
          for (var w = {}, M = [], N = 0; N < y.length; N++) {
            var b = y[N], g = x.base ? b[0] + x.base : b[0], E = w[g] || 0, C = "".concat(g, " ").concat(E);
            w[g] = E + 1;
            var O = c(C), I = { css: b[1], media: b[2], sourceMap: b[3] };
            O !== -1 ? (l[O].references++, l[O].updater(I)) : l.push({ identifier: C, updater: R(I, x), references: 1 }), M.push(C);
          }
          return M;
        }
        function h(y) {
          var x = document.createElement("style"), w = y.attributes || {};
          if (w.nonce === void 0) {
            var M = i.nc;
            M && (w.nonce = M);
          }
          if (Object.keys(w).forEach(function(b) {
            x.setAttribute(b, w[b]);
          }), typeof y.insert == "function")
            y.insert(x);
          else {
            var N = a(y.insert || "head");
            if (!N)
              throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
            N.appendChild(x);
          }
          return x;
        }
        var f, v = (f = [], function(y, x) {
          return f[y] = x, f.filter(Boolean).join(`
`);
        });
        function p(y, x, w, M) {
          var N = w ? "" : M.media ? "@media ".concat(M.media, " {").concat(M.css, "}") : M.css;
          if (y.styleSheet)
            y.styleSheet.cssText = v(x, N);
          else {
            var b = document.createTextNode(N), g = y.childNodes;
            g[x] && y.removeChild(g[x]), g.length ? y.insertBefore(b, g[x]) : y.appendChild(b);
          }
        }
        function k(y, x, w) {
          var M = w.css, N = w.media, b = w.sourceMap;
          if (N ? y.setAttribute("media", N) : y.removeAttribute("media"), b && btoa && (M += `
/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(b)))), " */")), y.styleSheet)
            y.styleSheet.cssText = M;
          else {
            for (; y.firstChild; )
              y.removeChild(y.firstChild);
            y.appendChild(document.createTextNode(M));
          }
        }
        var _ = null, A = 0;
        function R(y, x) {
          var w, M, N;
          if (x.singleton) {
            var b = A++;
            w = _ || (_ = h(x)), M = p.bind(null, w, b, false), N = p.bind(null, w, b, true);
          } else
            w = h(x), M = k.bind(null, w, x), N = function() {
              (function(g) {
                if (g.parentNode === null)
                  return false;
                g.parentNode.removeChild(g);
              })(w);
            };
          return M(y), function(g) {
            if (g) {
              if (g.css === y.css && g.media === y.media && g.sourceMap === y.sourceMap)
                return;
              M(y = g);
            } else
              N();
          };
        }
        t.exports = function(y, x) {
          (x = x || {}).singleton || typeof x.singleton == "boolean" || (x.singleton = r());
          var w = u(y = y || [], x);
          return function(M) {
            if (M = M || [], Object.prototype.toString.call(M) === "[object Array]") {
              for (var N = 0; N < w.length; N++) {
                var b = c(w[N]);
                l[b].references--;
              }
              for (var g = u(M, x), E = 0; E < w.length; E++) {
                var C = c(w[E]);
                l[C].references === 0 && (l[C].updater(), l.splice(C, 1));
              }
              w = g;
            }
          };
        };
      }, function(t, o, i) {
        (o = i(3)(false)).push([t.i, `.ce-paragraph {
    line-height: 1.6em;
    outline: none;
}

.ce-paragraph[data-placeholder]:empty::before{
  content: attr(data-placeholder);
  color: #707684;
  font-weight: normal;
  opacity: 0;
}

/** Show placeholder at the first paragraph if Editor is empty */
.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before {
  opacity: 1;
}

.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before,
.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus::before {
  opacity: 0;
}

.ce-paragraph p:first-of-type{
    margin-top: 0;
}

.ce-paragraph p:last-of-type{
    margin-bottom: 0;
}
`, ""]), t.exports = o;
      }, function(t, o, i) {
        t.exports = function(n) {
          var r = [];
          return r.toString = function() {
            return this.map(function(a) {
              var l = function(c, u) {
                var h = c[1] || "", f = c[3];
                if (!f)
                  return h;
                if (u && typeof btoa == "function") {
                  var v = (k = f, _ = btoa(unescape(encodeURIComponent(JSON.stringify(k)))), A = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(_), "/*# ".concat(A, " */")), p = f.sources.map(function(R) {
                    return "/*# sourceURL=".concat(f.sourceRoot || "").concat(R, " */");
                  });
                  return [h].concat(p).concat([v]).join(`
`);
                }
                var k, _, A;
                return [h].join(`
`);
              }(a, n);
              return a[2] ? "@media ".concat(a[2], " {").concat(l, "}") : l;
            }).join("");
          }, r.i = function(a, l, c) {
            typeof a == "string" && (a = [[null, a, ""]]);
            var u = {};
            if (c)
              for (var h = 0; h < this.length; h++) {
                var f = this[h][0];
                f != null && (u[f] = true);
              }
            for (var v = 0; v < a.length; v++) {
              var p = [].concat(a[v]);
              c && u[p[0]] || (l && (p[2] ? p[2] = "".concat(l, " and ").concat(p[2]) : p[2] = l), r.push(p));
            }
          }, r;
        };
      }, function(t, o, i) {
        i.r(o), i.d(o, "default", function() {
          return a;
        }), i(0);
        function n(l, c) {
          for (var u = 0; u < c.length; u++) {
            var h = c[u];
            h.enumerable = h.enumerable || false, h.configurable = true, "value" in h && (h.writable = true), Object.defineProperty(l, h.key, h);
          }
        }
        function r(l, c, u) {
          return c && n(l.prototype, c), u && n(l, u), l;
        }
        var a = function() {
          function l(c) {
            var u = c.data, h = c.config, f = c.api, v = c.readOnly;
            (function(p, k) {
              if (!(p instanceof k))
                throw new TypeError("Cannot call a class as a function");
            })(this, l), this.api = f, this.readOnly = v, this._CSS = { block: this.api.styles.block, wrapper: "ce-paragraph" }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = h.placeholder ? h.placeholder : l.DEFAULT_PLACEHOLDER, this._data = {}, this._element = this.drawView(), this._preserveBlank = h.preserveBlank !== void 0 && h.preserveBlank, this.data = u;
          }
          return r(l, null, [{ key: "DEFAULT_PLACEHOLDER", get: function() {
            return "";
          } }]), r(l, [{ key: "onKeyUp", value: function(c) {
            c.code !== "Backspace" && c.code !== "Delete" || this._element.textContent === "" && (this._element.innerHTML = "");
          } }, { key: "drawView", value: function() {
            var c = document.createElement("DIV");
            return c.classList.add(this._CSS.wrapper, this._CSS.block), c.contentEditable = false, c.dataset.placeholder = this.api.i18n.t(this._placeholder), this.readOnly || (c.contentEditable = true, c.addEventListener("keyup", this.onKeyUp)), c;
          } }, { key: "render", value: function() {
            return this._element;
          } }, { key: "merge", value: function(c) {
            var u = { text: this.data.text + c.text };
            this.data = u;
          } }, { key: "validate", value: function(c) {
            return !(c.text.trim() === "" && !this._preserveBlank);
          } }, { key: "save", value: function(c) {
            return { text: c.innerHTML };
          } }, { key: "onPaste", value: function(c) {
            var u = { text: c.detail.data.innerHTML };
            this.data = u;
          } }, { key: "data", get: function() {
            var c = this._element.innerHTML;
            return this._data.text = c, this._data;
          }, set: function(c) {
            this._data = c || {}, this._element.innerHTML = this._data.text || "";
          } }], [{ key: "conversionConfig", get: function() {
            return { export: "text", import: "text" };
          } }, { key: "sanitize", get: function() {
            return { text: { br: true } };
          } }, { key: "isReadOnlySupported", get: function() {
            return true;
          } }, { key: "pasteConfig", get: function() {
            return { tags: ["P"] };
          } }, { key: "toolbox", get: function() {
            return { icon: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14"/></svg>', title: "Text" };
          } }]), l;
        }();
      }]).default;
    });
  })(ei);
  var ti = /* @__PURE__ */ xe(Ne);
  var $e = class {
    constructor() {
      this.commandName = "bold", this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--bold"
      }, this.nodes = {
        button: void 0
      };
    }
    static get sanitize() {
      return {
        b: {}
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = Eo, this.nodes.button;
    }
    surround() {
      document.execCommand(this.commandName);
    }
    checkState() {
      const e = document.queryCommandState(this.commandName);
      return this.nodes.button.classList.toggle(this.CSS.buttonActive, e), e;
    }
    get shortcut() {
      return "CMD+B";
    }
  };
  $e.isInline = true;
  $e.title = "Bold";
  var We = class {
    constructor() {
      this.commandName = "italic", this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--italic"
      }, this.nodes = {
        button: null
      };
    }
    static get sanitize() {
      return {
        i: {}
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = So, this.nodes.button;
    }
    surround() {
      document.execCommand(this.commandName);
    }
    checkState() {
      const e = document.queryCommandState(this.commandName);
      return this.nodes.button.classList.toggle(this.CSS.buttonActive, e), e;
    }
    get shortcut() {
      return "CMD+I";
    }
  };
  We.isInline = true;
  We.title = "Italic";
  var Ye = class {
    constructor({ api: e }) {
      this.commandLink = "createLink", this.commandUnlink = "unlink", this.ENTER_KEY = 13, this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--link",
        buttonUnlink: "ce-inline-tool--unlink",
        input: "ce-inline-tool-input",
        inputShowed: "ce-inline-tool-input--showed"
      }, this.nodes = {
        button: null,
        input: null
      }, this.inputOpened = false, this.toolbar = e.toolbar, this.inlineToolbar = e.inlineToolbar, this.notifier = e.notifier, this.i18n = e.i18n, this.selection = new m();
    }
    static get sanitize() {
      return {
        a: {
          href: true,
          target: "_blank",
          rel: "nofollow"
        }
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = qe, this.nodes.button;
    }
    renderActions() {
      return this.nodes.input = document.createElement("input"), this.nodes.input.placeholder = this.i18n.t("Add a link"), this.nodes.input.classList.add(this.CSS.input), this.nodes.input.addEventListener("keydown", (e) => {
        e.keyCode === this.ENTER_KEY && this.enterPressed(e);
      }), this.nodes.input;
    }
    surround(e) {
      if (e) {
        this.inputOpened ? (this.selection.restore(), this.selection.removeFakeBackground()) : (this.selection.setFakeBackground(), this.selection.save());
        const t = this.selection.findParentTag("A");
        if (t) {
          this.selection.expandToTag(t), this.unlink(), this.closeActions(), this.checkState(), this.toolbar.close();
          return;
        }
      }
      this.toggleActions();
    }
    checkState() {
      const e = this.selection.findParentTag("A");
      if (e) {
        this.nodes.button.innerHTML = Oo, this.nodes.button.classList.add(this.CSS.buttonUnlink), this.nodes.button.classList.add(this.CSS.buttonActive), this.openActions();
        const t = e.getAttribute("href");
        this.nodes.input.value = t !== "null" ? t : "", this.selection.save();
      } else
        this.nodes.button.innerHTML = qe, this.nodes.button.classList.remove(this.CSS.buttonUnlink), this.nodes.button.classList.remove(this.CSS.buttonActive);
      return !!e;
    }
    clear() {
      this.closeActions();
    }
    get shortcut() {
      return "CMD+K";
    }
    toggleActions() {
      this.inputOpened ? this.closeActions(false) : this.openActions(true);
    }
    openActions(e = false) {
      this.nodes.input.classList.add(this.CSS.inputShowed), e && this.nodes.input.focus(), this.inputOpened = true;
    }
    closeActions(e = true) {
      if (this.selection.isFakeBackgroundEnabled) {
        const t = new m();
        t.save(), this.selection.restore(), this.selection.removeFakeBackground(), t.restore();
      }
      this.nodes.input.classList.remove(this.CSS.inputShowed), this.nodes.input.value = "", e && this.selection.clearSaved(), this.inputOpened = false;
    }
    enterPressed(e) {
      let t = this.nodes.input.value || "";
      if (!t.trim()) {
        this.selection.restore(), this.unlink(), e.preventDefault(), this.closeActions();
        return;
      }
      if (!this.validateURL(t)) {
        this.notifier.show({
          message: "Pasted link is not valid.",
          style: "error"
        }), T("Incorrect Link pasted", "warn", t);
        return;
      }
      t = this.prepareLink(t), this.selection.restore(), this.selection.removeFakeBackground(), this.insertLink(t), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation(), this.selection.collapseToEnd(), this.inlineToolbar.close();
    }
    validateURL(e) {
      return !/\s/.test(e);
    }
    prepareLink(e) {
      return e = e.trim(), e = this.addProtocol(e), e;
    }
    addProtocol(e) {
      if (/^(\w+):(\/\/)?/.test(e))
        return e;
      const t = /^\/[^/\s]/.test(e), o = e.substring(0, 1) === "#", i = /^\/\/[^/\s]/.test(e);
      return !t && !o && !i && (e = "http://" + e), e;
    }
    insertLink(e) {
      const t = this.selection.findParentTag("A");
      t && this.selection.expandToTag(t), document.execCommand(this.commandLink, false, e);
    }
    unlink() {
      document.execCommand(this.commandUnlink);
    }
  };
  Ye.isInline = true;
  Ye.title = "Link";
  var yt = class {
    constructor({ data: e, api: t }) {
      this.CSS = {
        wrapper: "ce-stub",
        info: "ce-stub__info",
        title: "ce-stub__title",
        subtitle: "ce-stub__subtitle"
      }, this.api = t, this.title = e.title || this.api.i18n.t("Error"), this.subtitle = this.api.i18n.t("The block can not be displayed correctly."), this.savedData = e.savedData, this.wrapper = this.make();
    }
    render() {
      return this.wrapper;
    }
    save() {
      return this.savedData;
    }
    make() {
      const e = d.make("div", this.CSS.wrapper), t = '<svg xmlns="http://www.w3.org/2000/svg" width="52" height="52" viewBox="0 0 52 52"><path fill="#D76B6B" fill-rule="nonzero" d="M26 52C11.64 52 0 40.36 0 26S11.64 0 26 0s26 11.64 26 26-11.64 26-26 26zm0-3.25c12.564 0 22.75-10.186 22.75-22.75S38.564 3.25 26 3.25 3.25 13.436 3.25 26 13.436 48.75 26 48.75zM15.708 33.042a2.167 2.167 0 1 1 0-4.334 2.167 2.167 0 0 1 0 4.334zm23.834 0a2.167 2.167 0 1 1 0-4.334 2.167 2.167 0 0 1 0 4.334zm-15.875 5.452a1.083 1.083 0 1 1-1.834-1.155c1.331-2.114 3.49-3.179 6.334-3.179 2.844 0 5.002 1.065 6.333 3.18a1.083 1.083 0 1 1-1.833 1.154c-.913-1.45-2.366-2.167-4.5-2.167s-3.587.717-4.5 2.167z"/></svg>', o = d.make("div", this.CSS.info), i = d.make("div", this.CSS.title, {
        textContent: this.title
      }), n = d.make("div", this.CSS.subtitle, {
        textContent: this.subtitle
      });
      return e.innerHTML = t, o.appendChild(i), o.appendChild(n), e.appendChild(o), e;
    }
  };
  yt.isReadOnlySupported = true;
  var oi = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Inline;
    }
    get title() {
      return this.constructable[je.Title];
    }
    create() {
      return new this.constructable({
        api: this.api.getMethodsForTool(this),
        config: this.settings
      });
    }
  };
  var ii = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Tune;
    }
    create(e, t) {
      return new this.constructable({
        api: this.api.getMethodsForTool(this),
        config: this.settings,
        block: t,
        data: e
      });
    }
  };
  var U = class extends Map {
    get blockTools() {
      const e = Array.from(this.entries()).filter(([, t]) => t.isBlock());
      return new U(e);
    }
    get inlineTools() {
      const e = Array.from(this.entries()).filter(([, t]) => t.isInline());
      return new U(e);
    }
    get blockTunes() {
      const e = Array.from(this.entries()).filter(([, t]) => t.isTune());
      return new U(e);
    }
    get internalTools() {
      const e = Array.from(this.entries()).filter(([, t]) => t.isInternal);
      return new U(e);
    }
    get externalTools() {
      const e = Array.from(this.entries()).filter(([, t]) => !t.isInternal);
      return new U(e);
    }
  };
  var ni = Object.defineProperty;
  var si = Object.getOwnPropertyDescriptor;
  var Et = (s, e, t, o) => {
    for (var i = o > 1 ? void 0 : o ? si(e, t) : e, n = s.length - 1, r; n >= 0; n--)
      (r = s[n]) && (i = (o ? r(e, t, i) : r(i)) || i);
    return o && i && ni(e, t, i), i;
  };
  var Ke = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Block, this.inlineTools = new U(), this.tunes = new U();
    }
    create(e, t, o) {
      return new this.constructable({
        data: e,
        block: t,
        readOnly: o,
        api: this.api.getMethodsForTool(this),
        config: this.settings
      });
    }
    get isReadOnlySupported() {
      return this.constructable[se.IsReadOnlySupported] === true;
    }
    get isLineBreaksEnabled() {
      return this.constructable[se.IsEnabledLineBreaks];
    }
    get toolbox() {
      const e = this.constructable[se.Toolbox], t = this.config[me.Toolbox];
      if (!V(e) && t !== false)
        return t ? Array.isArray(e) ? Array.isArray(t) ? t.map((o, i) => {
          const n = e[i];
          return n ? __spreadValues(__spreadValues({}, n), o) : o;
        }) : [t] : Array.isArray(t) ? t : [
          __spreadValues(__spreadValues({}, e), t)
        ] : Array.isArray(e) ? e : [e];
    }
    get conversionConfig() {
      return this.constructable[se.ConversionConfig];
    }
    get enabledInlineTools() {
      return this.config[me.EnabledInlineTools] || false;
    }
    get enabledBlockTunes() {
      return this.config[me.EnabledBlockTunes];
    }
    get pasteConfig() {
      var _a;
      return (_a = this.constructable[se.PasteConfig]) != null ? _a : {};
    }
    get sanitizeConfig() {
      const e = super.sanitizeConfig, t = this.baseSanitizeConfig;
      if (V(e))
        return t;
      const o = {};
      for (const i in e)
        if (Object.prototype.hasOwnProperty.call(e, i)) {
          const n = e[i];
          j(n) ? o[i] = Object.assign({}, t, n) : o[i] = n;
        }
      return o;
    }
    get baseSanitizeConfig() {
      const e = {};
      return Array.from(this.inlineTools.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), Array.from(this.tunes.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), e;
    }
  };
  Et([
    ae
  ], Ke.prototype, "sanitizeConfig", 1);
  Et([
    ae
  ], Ke.prototype, "baseSanitizeConfig", 1);
  var ri = class {
    constructor(e, t, o) {
      this.api = o, this.config = e, this.editorConfig = t;
    }
    get(e) {
      const _a = this.config[e], { class: t, isInternal: o = false } = _a, i = __objRest(_a, ["class", "isInternal"]), n = this.getConstructor(t);
      return new n({
        name: e,
        constructable: t,
        config: i,
        api: this.api,
        isDefault: e === this.editorConfig.defaultBlock,
        defaultPlaceholder: this.editorConfig.placeholder,
        isInternal: o
      });
    }
    getConstructor(e) {
      switch (true) {
        case e[je.IsInline]:
          return oi;
        case e[vt.IsTune]:
          return ii;
        default:
          return Ke;
      }
    }
  };
  var Bt = class {
    constructor({ api: e }) {
      this.CSS = {
        animation: "wobble"
      }, this.api = e;
    }
    render() {
      return {
        icon: pt,
        title: this.api.i18n.t("Move down"),
        onActivate: () => this.handleClick(),
        name: "move-down"
      };
    }
    handleClick() {
      const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e + 1);
      if (!t)
        throw new Error("Unable to move Block down since it is already the last");
      const o = t.holder, i = o.getBoundingClientRect();
      let n = Math.abs(window.innerHeight - o.offsetHeight);
      i.top < window.innerHeight && (n = window.scrollY + o.offsetHeight), window.scrollTo(0, n), this.api.blocks.move(e + 1), this.api.toolbar.toggleBlockSettings(true);
    }
  };
  Bt.isTune = true;
  var Ct = class {
    constructor({ api: e }) {
      this.api = e;
    }
    render() {
      return {
        icon: Co,
        title: this.api.i18n.t("Delete"),
        name: "delete",
        confirmation: {
          title: this.api.i18n.t("Click to delete"),
          onActivate: () => this.handleClick()
        }
      };
    }
    handleClick() {
      this.api.blocks.delete();
    }
  };
  Ct.isTune = true;
  var Tt = class {
    constructor({ api: e }) {
      this.CSS = {
        animation: "wobble"
      }, this.api = e;
    }
    render() {
      return {
        icon: Bo,
        title: this.api.i18n.t("Move up"),
        onActivate: () => this.handleClick(),
        name: "move-up"
      };
    }
    handleClick() {
      const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e), o = this.api.blocks.getBlockByIndex(e - 1);
      if (e === 0 || !t || !o)
        throw new Error("Unable to move Block up since it is already the first");
      const i = t.holder, n = o.holder, r = i.getBoundingClientRect(), a = n.getBoundingClientRect();
      let l;
      a.top > 0 ? l = Math.abs(r.top) - Math.abs(a.top) : l = Math.abs(r.top) + a.height, window.scrollBy(0, -1 * l), this.api.blocks.move(e - 1), this.api.toolbar.toggleBlockSettings(true);
    }
  };
  Tt.isTune = true;
  var ai = Object.defineProperty;
  var li = Object.getOwnPropertyDescriptor;
  var ci = (s, e, t, o) => {
    for (var i = o > 1 ? void 0 : o ? li(e, t) : e, n = s.length - 1, r; n >= 0; n--)
      (r = s[n]) && (i = (o ? r(e, t, i) : r(i)) || i);
    return o && i && ai(e, t, i), i;
  };
  var St = class extends S {
    constructor() {
      super(...arguments), this.stubTool = "stub", this.toolsAvailable = new U(), this.toolsUnavailable = new U();
    }
    get available() {
      return this.toolsAvailable;
    }
    get unavailable() {
      return this.toolsUnavailable;
    }
    get inlineTools() {
      return this.available.inlineTools;
    }
    get blockTools() {
      return this.available.blockTools;
    }
    get blockTunes() {
      return this.available.blockTunes;
    }
    get defaultTool() {
      return this.blockTools.get(this.config.defaultBlock);
    }
    get internal() {
      return this.available.internalTools;
    }
    async prepare() {
      if (this.validateTools(), this.config.tools = Se({}, this.internalTools, this.config.tools), !Object.prototype.hasOwnProperty.call(this.config, "tools") || Object.keys(this.config.tools).length === 0)
        throw Error("Can't start without tools");
      const e = this.prepareConfig();
      this.factory = new ri(e, this.config, this.Editor.API);
      const t = this.getListOfPrepareFunctions(e);
      if (t.length === 0)
        return Promise.resolve();
      await ot(t, (o) => {
        this.toolPrepareMethodSuccess(o);
      }, (o) => {
        this.toolPrepareMethodFallback(o);
      }), this.prepareBlockTools();
    }
    getAllInlineToolsSanitizeConfig() {
      const e = {};
      return Array.from(this.inlineTools.values()).forEach((t) => {
        Object.assign(e, t.sanitizeConfig);
      }), e;
    }
    destroy() {
      Object.values(this.available).forEach(async (e) => {
        D(e.reset) && await e.reset();
      });
    }
    get internalTools() {
      return {
        bold: {
          class: $e,
          isInternal: true
        },
        italic: {
          class: We,
          isInternal: true
        },
        link: {
          class: Ye,
          isInternal: true
        },
        paragraph: {
          class: ti,
          inlineToolbar: true,
          isInternal: true
        },
        stub: {
          class: yt,
          isInternal: true
        },
        moveUp: {
          class: Tt,
          isInternal: true
        },
        delete: {
          class: Ct,
          isInternal: true
        },
        moveDown: {
          class: Bt,
          isInternal: true
        }
      };
    }
    toolPrepareMethodSuccess(e) {
      const t = this.factory.get(e.toolName);
      if (t.isInline()) {
        const i = ["render", "surround", "checkState"].filter((n) => !t.create()[n]);
        if (i.length) {
          T(
            `Incorrect Inline Tool: ${t.name}. Some of required methods is not implemented %o`,
            "warn",
            i
          ), this.toolsUnavailable.set(t.name, t);
          return;
        }
      }
      this.toolsAvailable.set(t.name, t);
    }
    toolPrepareMethodFallback(e) {
      this.toolsUnavailable.set(e.toolName, this.factory.get(e.toolName));
    }
    getListOfPrepareFunctions(e) {
      const t = [];
      return Object.entries(e).forEach(([o, i]) => {
        t.push({
          function: D(i.class.prepare) ? i.class.prepare : () => {
          },
          data: {
            toolName: o,
            config: i.config
          }
        });
      }), t;
    }
    prepareBlockTools() {
      Array.from(this.blockTools.values()).forEach((e) => {
        this.assignInlineToolsToBlockTool(e), this.assignBlockTunesToBlockTool(e);
      });
    }
    assignInlineToolsToBlockTool(e) {
      if (this.config.inlineToolbar !== false) {
        if (e.enabledInlineTools === true) {
          e.inlineTools = new U(
            Array.isArray(this.config.inlineToolbar) ? this.config.inlineToolbar.map((t) => [t, this.inlineTools.get(t)]) : Array.from(this.inlineTools.entries())
          );
          return;
        }
        Array.isArray(e.enabledInlineTools) && (e.inlineTools = new U(
          e.enabledInlineTools.map((t) => [t, this.inlineTools.get(t)])
        ));
      }
    }
    assignBlockTunesToBlockTool(e) {
      if (e.enabledBlockTunes !== false) {
        if (Array.isArray(e.enabledBlockTunes)) {
          const t = new U(
            e.enabledBlockTunes.map((o) => [o, this.blockTunes.get(o)])
          );
          e.tunes = new U([...t, ...this.blockTunes.internalTools]);
          return;
        }
        if (Array.isArray(this.config.tunes)) {
          const t = new U(
            this.config.tunes.map((o) => [o, this.blockTunes.get(o)])
          );
          e.tunes = new U([...t, ...this.blockTunes.internalTools]);
          return;
        }
        e.tunes = this.blockTunes.internalTools;
      }
    }
    validateTools() {
      for (const e in this.config.tools)
        if (Object.prototype.hasOwnProperty.call(this.config.tools, e)) {
          if (e in this.internalTools)
            return;
          const t = this.config.tools[e];
          if (!D(t) && !D(t.class))
            throw Error(
              `Tool \xAB${e}\xBB must be a constructor function or an object with function in the \xABclass\xBB property`
            );
        }
    }
    prepareConfig() {
      const e = {};
      for (const t in this.config.tools)
        j(this.config.tools[t]) ? e[t] = this.config.tools[t] : e[t] = { class: this.config.tools[t] };
      return e;
    }
  };
  ci([
    ae
  ], St.prototype, "getAllInlineToolsSanitizeConfig", 1);
  var di = `:root{--selectionColor: #e1f2ff;--inlineSelectionColor: #d4ecff;--bg-light: #eff2f5;--grayText: #707684;--color-dark: #1D202B;--color-active-icon: #388AE5;--color-gray-border: rgba(201, 201, 204, .48);--content-width: 650px;--narrow-mode-right-padding: 50px;--toolbox-buttons-size: 26px;--toolbox-buttons-size--mobile: 36px;--icon-size: 20px;--icon-size--mobile: 28px;--block-padding-vertical: .4em;--color-line-gray: #EFF0F1 }.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide,.codex-editor__redactor--hidden{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:"\\feff"}@media (min-width: 651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor__loader{position:relative;height:30vh}.codex-editor__loader:before{content:"";position:absolute;left:50%;top:50%;width:30px;height:30px;margin-top:-15px;margin-left:-15px;border-radius:50%;border:2px solid rgba(201,201,204,.48);border-top-color:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-animation:editor-loader-spin .8s infinite linear;animation:editor-loader-spin .8s infinite linear;will-change:transform}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0px;left:0px;right:0px;bottom:0px;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:#2eaadc33;border:1px solid transparent}.codex-editor svg{max-height:100%}.codex-editor path{stroke:currentColor}::-moz-selection{background-color:#d4ecff}::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}@-webkit-keyframes editor-loader-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes editor-loader-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.ce-scroll-locked{overflow:hidden}.ce-scroll-locked--hard{overflow:hidden;top:calc(-1 * var(--window-scroll-offset));position:fixed;width:100%}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,top;display:none}.ce-toolbar--opened{display:block}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}.ce-toolbar__plus{color:#1d202b;cursor:pointer;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-flex-negative:0;flex-shrink:0}@media (max-width: 650px){.ce-toolbar__plus{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__plus:hover{background-color:#eff2f5}}.ce-toolbar__plus--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}@media (max-width: 650px){.ce-toolbar__plus{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__plus--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__plus--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__actions{position:absolute;right:100%;opacity:0;display:-webkit-box;display:-ms-flexbox;display:flex;padding-right:5px}.ce-toolbar__actions--opened{opacity:1}@media (max-width: 650px){.ce-toolbar__actions{right:auto}}.ce-toolbar__settings-btn{color:#1d202b;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;margin-left:3px;cursor:pointer;user-select:none}@media (max-width: 650px){.ce-toolbar__settings-btn{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__settings-btn:hover{background-color:#eff2f5}}.ce-toolbar__settings-btn--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}@media (min-width: 651px){.ce-toolbar__settings-btn{width:24px}}.ce-toolbar__settings-btn--hidden{display:none}@media (max-width: 650px){.ce-toolbar__settings-btn{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__settings-btn--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__settings-btn--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__plus svg,.ce-toolbar__settings-btn svg{width:24px;height:24px}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbox .ce-popover{right:0;left:auto;left:initial}}.ce-inline-toolbar{--y-offset: 8px;position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;-webkit-transform:translateX(-50%) translateY(8px) scale(.94);transform:translate(-50%) translateY(8px) scale(.94);opacity:0;visibility:hidden;-webkit-transition:opacity .25s ease,-webkit-transform .15s ease;transition:opacity .25s ease,-webkit-transform .15s ease;transition:transform .15s ease,opacity .25s ease;transition:transform .15s ease,opacity .25s ease,-webkit-transform .15s ease;will-change:transform,opacity;top:0;left:0;z-index:3}.ce-inline-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-inline-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-inline-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:translateX(-50%);transform:translate(-50%)}.ce-inline-toolbar--left-oriented{-webkit-transform:translateX(-23px) translateY(8px) scale(.94);transform:translate(-23px) translateY(8px) scale(.94)}.ce-inline-toolbar--left-oriented.ce-inline-toolbar--showed{-webkit-transform:translateX(-23px);transform:translate(-23px)}.ce-inline-toolbar--right-oriented{-webkit-transform:translateX(-100%) translateY(8px) scale(.94);transform:translate(-100%) translateY(8px) scale(.94);margin-left:23px}.ce-inline-toolbar--right-oriented.ce-inline-toolbar--showed{-webkit-transform:translateX(-100%);transform:translate(-100%)}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;padding:0 6px}.ce-inline-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-box;display:-ms-flexbox;display:flex;padding:6px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48);-webkit-box-sizing:border-box;box-sizing:border-box}@media (hover: hover){.ce-inline-toolbar__dropdown:hover{background:#eff2f5}}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content,.ce-inline-toolbar__dropdown-arrow{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown-content svg,.ce-inline-toolbar__dropdown-arrow svg{width:20px;height:20px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;border-radius:0;line-height:normal}.ce-inline-tool svg{width:20px;height:20px}@media (max-width: 650px){.ce-inline-tool svg{width:28px;height:28px}}@media (hover: hover){.ce-inline-tool:hover{background-color:#eff2f5}}.ce-inline-tool--active{color:#388ae5}.ce-inline-tool--focused{background:rgba(34,186,255,.08)!important}.ce-inline-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-inline-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{outline:none;border:0;border-radius:0 0 4px 4px;margin:0;font-size:13px;padding:10px;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;border-top:1px solid rgba(201,201,204,.48);-webkit-appearance:none;font-family:inherit}@media (max-width: 650px){.ce-inline-tool-input{font-size:15px;font-weight:500}}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-conversion-toolbar{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;opacity:0;visibility:hidden;will-change:transform,opacity;-webkit-transition:opacity .1s ease,-webkit-transform .1s ease;transition:opacity .1s ease,-webkit-transform .1s ease;transition:transform .1s ease,opacity .1s ease;transition:transform .1s ease,opacity .1s ease,-webkit-transform .1s ease;-webkit-transform:translateY(-8px);transform:translateY(-8px);left:-1px;width:150px;margin-top:5px;-webkit-box-sizing:content-box;box-sizing:content-box}.ce-conversion-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-conversion-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-conversion-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:none;transform:none}.ce-conversion-toolbar [hidden]{display:none!important}.ce-conversion-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-conversion-toolbar__label{color:#707684;font-size:11px;font-weight:500;letter-spacing:.33px;padding:10px 10px 5px;text-transform:uppercase}.ce-conversion-tool{display:-webkit-box;display:-ms-flexbox;display:flex;padding:5px 10px;font-size:14px;line-height:20px;font-weight:500;cursor:pointer;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-conversion-tool--hidden{display:none}.ce-conversion-tool--focused{background:rgba(34,186,255,.08)!important}.ce-conversion-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-conversion-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-conversion-tool:hover{background:#eff2f5}.ce-conversion-tool__icon{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px rgba(201,201,204,.48);box-shadow:0 0 0 1px #c9c9cc7a;border-radius:5px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;background:#fff;-webkit-box-sizing:content-box;box-sizing:content-box;-ms-flex-negative:0;flex-shrink:0;margin-right:10px}.ce-conversion-tool__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-conversion-tool__icon{width:36px;height:36px;border-radius:8px}.ce-conversion-tool__icon svg{width:28px;height:28px}}.ce-conversion-tool--last{margin-right:0!important}.ce-conversion-tool--active{color:#388ae5!important}.ce-conversion-tool--active{-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-settings__button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;line-height:32px}.ce-settings__button svg{width:20px;height:20px}@media (max-width: 650px){.ce-settings__button svg{width:28px;height:28px}}@media (hover: hover){.ce-settings__button:hover{background-color:#eff2f5}}.ce-settings__button--active{color:#388ae5}.ce-settings__button--focused{background:rgba(34,186,255,.08)!important}.ce-settings__button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-settings__button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-settings__button:not(:nth-child(3n+3)){margin-right:3px}.ce-settings__button:nth-child(n+4){margin-top:3px}.ce-settings__button--disabled{cursor:not-allowed!important}.ce-settings__button--disabled{opacity:.3}.ce-settings__button--selected{color:#388ae5}@media (min-width: 651px){.codex-editor--narrow .ce-settings .ce-popover{right:0;left:auto;left:initial}}@-webkit-keyframes fade-in{0%{opacity:0}to{opacity:1}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}.ce-block{-webkit-animation:fade-in .3s ease;animation:fade-in .3s ease;-webkit-animation-fill-mode:none;animation-fill-mode:none;-webkit-animation-fill-mode:initial;animation-fill-mode:initial}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content img,.ce-block--selected .ce-block__content .ce-stub{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:"";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388AE5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:"";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388AE5,#388AE5 1px,#fff 1px,#fff 6px)}.ce-block a{cursor:pointer;-webkit-text-decoration:underline;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@media (min-width: 651px){.codex-editor--narrow .ce-block--focused{margin-right:-50px;padding-right:50px}}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}.cdx-block{padding:.4em 0}.cdx-block::-webkit-input-placeholder{line-height:normal!important}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px #232c480f;border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important}.cdx-input[data-placeholder]:before{display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;min-width:26px;min-height:26px}.cdx-settings-button svg{width:20px;height:20px}@media (max-width: 650px){.cdx-settings-button svg{width:28px;height:28px}}@media (hover: hover){.cdx-settings-button:hover{background-color:#eff2f5}}.cdx-settings-button--focused{background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button--active{color:#388ae5}.cdx-settings-button svg{width:auto;height:auto}@media (max-width: 650px){.cdx-settings-button{width:36px;height:36px;border-radius:8px}}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:"";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s infinite linear;animation:cdxRotation 1.2s infinite linear}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px #121e390a;color:#707684;text-align:center;cursor:pointer}@media (hover: hover){.cdx-button:hover{background:#FBFCFE;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px #121e3914}}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:100%;padding:3.5em 0;margin:17px 0;border-radius:3px;background:#fcf7f7;color:#b46262}.ce-stub__info{margin-left:20px}.ce-stub__title{margin-bottom:3px;font-weight:600;font-size:18px;text-transform:capitalize}.ce-stub__subtitle{font-size:16px}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-26px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-26px}@media (max-width: 650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0px solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0px;right:5px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}.cdx-search-field{--icon-margin-right: 10px;background:rgba(232,232,235,.49);border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-search-field__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:var(--icon-margin-right)}.cdx-search-field__icon svg{width:20px;height:20px;color:#707684}.cdx-search-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - 26px - var(--icon-margin-right))}.cdx-search-field__input::-webkit-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-moz-placeholder{color:#707684;font-weight:500}.cdx-search-field__input:-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::placeholder{color:#707684;font-weight:500}.ce-popover{--border-radius: 6px;--width: 200px;--max-height: 270px;--padding: 6px;--offset-from-target: 8px;--color-border: #e8e8eb;--color-shadow: rgba(13,20,33,.13);--color-background: white;--color-text-primary: black;--color-text-secondary: #707684;--color-border-icon: rgba(201, 201, 204, .48);--color-border-icon-disabled: #EFF0F1;--color-text-icon-active: #388AE5;--color-background-icon-active: rgba(56, 138, 229, .1);--color-background-item-focus: rgba(34, 186, 255, .08);--color-shadow-item-focus: rgba(7, 161, 227, .08);--color-background-item-hover: #eff2f5;--color-background-item-confirm: #E24A4A;--color-background-item-confirm-hover: #CE4343;min-width:var(--width);width:var(--width);max-height:var(--max-height);border-radius:var(--border-radius);overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0 3px 15px -3px var(--color-shadow);box-shadow:0 3px 15px -3px var(--color-shadow);position:absolute;left:0;top:calc(100% + var(--offset-from-target));background:var(--color-background);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:4;opacity:0;max-height:0;pointer-events:none;padding:0;border:none}.ce-popover--opened{opacity:1;padding:var(--padding);max-height:var(--max-height);pointer-events:auto;-webkit-animation:panelShowing .1s ease;animation:panelShowing .1s ease;border:1px solid var(--color-border)}@media (max-width: 650px){.ce-popover--opened{-webkit-animation:panelShowingMobile .25s ease;animation:panelShowingMobile .25s ease}}.ce-popover__items{overflow-y:auto;-ms-scroll-chaining:none;overscroll-behavior:contain}@media (max-width: 650px){.ce-popover__overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:#1D202B;z-index:3;opacity:.5;-webkit-transition:opacity .12s ease-in;transition:opacity .12s ease-in;will-change:opacity;visibility:visible}}.ce-popover__overlay--hidden{display:none}.ce-popover--open-top{top:calc(-1 * (var(--offset-from-target) + var(--popover-height)))}@media (max-width: 650px){.ce-popover{--offset: 5px;position:fixed;max-width:none;min-width:calc(100% - var(--offset) * 2);left:var(--offset);right:var(--offset);bottom:calc(var(--offset) + env(safe-area-inset-bottom));top:auto;border-radius:10px}.ce-popover .ce-popover__search{display:none}}.ce-popover__search,.ce-popover__custom-content:not(:empty){margin-bottom:5px}.ce-popover__nothing-found-message{color:#707684;display:none;cursor:default;padding:3px;font-size:14px;line-height:20px;font-weight:500;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ce-popover__nothing-found-message--displayed{display:block}.ce-popover__custom-content:not(:empty){padding:4px}@media (min-width: 651px){.ce-popover__custom-content:not(:empty){padding:0}}.ce-popover__custom-content--hidden{display:none}.ce-popover-item{--border-radius: 6px;--icon-size: 20px;--icon-size-mobile: 28px;border-radius:var(--border-radius);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:3px;color:var(--color-text-primary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}@media (max-width: 650px){.ce-popover-item{padding:4px}}.ce-popover-item:not(:last-of-type){margin-bottom:1px}.ce-popover-item__icon{border-radius:5px;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px var(--color-border-icon);box-shadow:0 0 0 1px var(--color-border-icon);background:#fff;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:10px}.ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover-item__icon{width:36px;height:36px;border-radius:8px}.ce-popover-item__icon svg{width:var(--icon-size-mobile);height:var(--icon-size-mobile)}}.ce-popover-item__title{font-size:14px;line-height:20px;font-weight:500;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}@media (max-width: 650px){.ce-popover-item__title{font-size:16px}}.ce-popover-item__secondary-title{color:var(--color-text-secondary);font-size:12px;margin-left:auto;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;margin-bottom:-2px;opacity:.6}@media (max-width: 650px){.ce-popover-item__secondary-title{display:none}}.ce-popover-item--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}.ce-popover-item--active .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}.ce-popover-item--disabled{color:var(--color-text-secondary);cursor:default;pointer-events:none}.ce-popover-item--disabled .ce-popover-item__icon{-webkit-box-shadow:0 0 0 1px var(--color-border-icon-disabled);box-shadow:0 0 0 1px var(--color-border-icon-disabled)}.ce-popover-item--focused:not(.ce-popover-item--no-focus){background:var(--color-background-item-focus)!important}.ce-popover-item--focused:not(.ce-popover-item--no-focus){-webkit-box-shadow:inset 0 0 0px 1px var(--color-shadow-item-focus);box-shadow:inset 0 0 0 1px var(--color-shadow-item-focus)}.ce-popover-item--hidden{display:none}@media (hover: hover){.ce-popover-item:hover{cursor:pointer}.ce-popover-item:hover:not(.ce-popover-item--no-hover){background-color:var(--color-background-item-hover)}.ce-popover-item:hover .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}}.ce-popover-item--confirmation{background:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__icon{color:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__title{color:#fff}@media (hover: hover){.ce-popover-item--confirmation:not(.ce-popover-item--no-hover):hover{background:var(--color-background-item-confirm-hover)}}.ce-popover-item--confirmation:not(.ce-popover-item--no-focus).ce-popover-item--focused{background:var(--color-background-item-confirm-hover)!important}.ce-popover-item--confirmation .ce-popover-item__icon,.ce-popover-item--active .ce-popover-item__icon,.ce-popover-item--focused .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}
`;
  var hi = class extends S {
    constructor() {
      super(...arguments), this.isMobile = false, this.contentRectCache = void 0, this.resizeDebouncer = Pt(() => {
        this.windowResize();
      }, 200);
    }
    get CSS() {
      return {
        editorWrapper: "codex-editor",
        editorWrapperNarrow: "codex-editor--narrow",
        editorZone: "codex-editor__redactor",
        editorZoneHidden: "codex-editor__redactor--hidden",
        editorLoader: "codex-editor__loader",
        editorEmpty: "codex-editor--empty",
        editorRtlFix: "codex-editor--rtl"
      };
    }
    get contentRect() {
      if (this.contentRectCache)
        return this.contentRectCache;
      const e = this.nodes.wrapper.querySelector(`.${F.CSS.content}`);
      return e ? (this.contentRectCache = e.getBoundingClientRect(), this.contentRectCache) : {
        width: 650,
        left: 0,
        right: 0
      };
    }
    addLoader() {
      this.nodes.loader = d.make("div", this.CSS.editorLoader), this.nodes.wrapper.prepend(this.nodes.loader), this.nodes.redactor.classList.add(this.CSS.editorZoneHidden);
    }
    removeLoader() {
      this.nodes.loader.remove(), this.nodes.redactor.classList.remove(this.CSS.editorZoneHidden);
    }
    async prepare() {
      this.checkIsMobile(), this.make(), this.addLoader(), this.loadStyles();
    }
    toggleReadOnly(e) {
      e ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    checkEmptiness() {
      const { BlockManager: e } = this.Editor;
      this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty, e.isEditorEmpty);
    }
    get someToolbarOpened() {
      const { Toolbar: e, BlockSettings: t, InlineToolbar: o, ConversionToolbar: i } = this.Editor;
      return t.opened || o.opened || i.opened || e.toolbox.opened;
    }
    get someFlipperButtonFocused() {
      return this.Editor.Toolbar.toolbox.hasFocus() ? true : Object.entries(this.Editor).filter(([e, t]) => t.flipper instanceof G).some(([e, t]) => t.flipper.hasFocus());
    }
    destroy() {
      this.nodes.holder.innerHTML = "";
    }
    closeAllToolbars() {
      const { Toolbar: e, BlockSettings: t, InlineToolbar: o, ConversionToolbar: i } = this.Editor;
      t.close(), o.close(), i.close(), e.toolbox.close();
    }
    checkIsMobile() {
      this.isMobile = window.innerWidth < st;
    }
    make() {
      this.nodes.holder = d.getHolder(this.config.holder), this.nodes.wrapper = d.make("div", [
        this.CSS.editorWrapper,
        ...this.isRtl ? [this.CSS.editorRtlFix] : []
      ]), this.nodes.redactor = d.make("div", this.CSS.editorZone), this.nodes.holder.offsetWidth < this.contentRect.width && this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow), this.nodes.redactor.style.paddingBottom = this.config.minHeight + "px", this.nodes.wrapper.appendChild(this.nodes.redactor), this.nodes.holder.appendChild(this.nodes.wrapper);
    }
    loadStyles() {
      const e = "editor-js-styles";
      if (d.get(e))
        return;
      const t = d.make("style", null, {
        id: e,
        textContent: di.toString()
      });
      d.prepend(document.head, t);
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(this.nodes.redactor, "click", (e) => {
        this.redactorClicked(e);
      }, false), this.readOnlyMutableListeners.on(this.nodes.redactor, "mousedown", (e) => {
        this.documentTouched(e);
      }, true), this.readOnlyMutableListeners.on(this.nodes.redactor, "touchstart", (e) => {
        this.documentTouched(e);
      }, true), this.readOnlyMutableListeners.on(document, "keydown", (e) => {
        this.documentKeydown(e);
      }, true), this.readOnlyMutableListeners.on(document, "mousedown", (e) => {
        this.documentClicked(e);
      }, true), this.readOnlyMutableListeners.on(document, "selectionchange", () => {
        this.selectionChanged();
      }, true), this.readOnlyMutableListeners.on(window, "resize", () => {
        this.resizeDebouncer();
      }, {
        passive: true
      }), this.watchBlockHoveredEvents();
    }
    watchBlockHoveredEvents() {
      let e;
      this.readOnlyMutableListeners.on(this.nodes.redactor, "mousemove", Te((t) => {
        const o = t.target.closest(".ce-block");
        this.Editor.BlockSelection.anyBlockSelected || o && e !== o && (e = o, this.eventsDispatcher.emit(mt, {
          block: this.Editor.BlockManager.getBlockByChildNode(o)
        }));
      }, 20), {
        passive: true
      });
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    windowResize() {
      this.contentRectCache = null, this.checkIsMobile();
    }
    documentKeydown(e) {
      switch (e.keyCode) {
        case B.ENTER:
          this.enterPressed(e);
          break;
        case B.BACKSPACE:
          this.backspacePressed(e);
          break;
        case B.ESC:
          this.escapePressed(e);
          break;
        default:
          this.defaultBehaviour(e);
          break;
      }
    }
    defaultBehaviour(e) {
      const { currentBlock: t } = this.Editor.BlockManager, o = e.target.closest(`.${this.CSS.editorWrapper}`), i = e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;
      if (t !== void 0 && o === null) {
        this.Editor.BlockEvents.keydown(e);
        return;
      }
      o || t && i || (this.Editor.BlockManager.dropPointer(), this.Editor.Toolbar.close());
    }
    backspacePressed(e) {
      const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor;
      if (o.anyBlockSelected && !m.isSelectionExists) {
        const n = t.removeSelectedBlocks();
        i.setToBlock(t.insertDefaultBlockAtIndex(n, true), i.positions.START), o.clearSelection(e), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation();
      }
    }
    escapePressed(e) {
      this.Editor.BlockSelection.clearSelection(e), this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.toolbox.close(), this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock)) : this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.ConversionToolbar.opened ? this.Editor.ConversionToolbar.close() : this.Editor.InlineToolbar.opened ? this.Editor.InlineToolbar.close() : this.Editor.Toolbar.close();
    }
    enterPressed(e) {
      const { BlockManager: t, BlockSelection: o } = this.Editor, i = t.currentBlockIndex >= 0;
      if (o.anyBlockSelected && !m.isSelectionExists) {
        o.clearSelection(e), e.preventDefault(), e.stopImmediatePropagation(), e.stopPropagation();
        return;
      }
      if (!this.someToolbarOpened && i && e.target.tagName === "BODY") {
        const n = this.Editor.BlockManager.insert();
        this.Editor.Caret.setToBlock(n), this.Editor.BlockManager.highlightCurrentNode(), this.Editor.Toolbar.moveAndOpen(n);
      }
      this.Editor.BlockSelection.clearSelection(e);
    }
    documentClicked(e) {
      if (!e.isTrusted)
        return;
      const t = e.target;
      this.nodes.holder.contains(t) || m.isAtEditor || (this.Editor.BlockManager.dropPointer(), this.Editor.Toolbar.close());
      const i = this.Editor.BlockSettings.nodes.wrapper.contains(t), n = this.Editor.Toolbar.nodes.settingsToggler.contains(t), r = i || n;
      if (this.Editor.BlockSettings.opened && !r) {
        this.Editor.BlockSettings.close();
        const a = this.Editor.BlockManager.getBlockByChildNode(t);
        this.Editor.Toolbar.moveAndOpen(a);
      }
      this.Editor.BlockSelection.clearSelection(e);
    }
    documentTouched(e) {
      let t = e.target;
      if (t === this.nodes.redactor) {
        const o = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX, i = e instanceof MouseEvent ? e.clientY : e.touches[0].clientY;
        t = document.elementFromPoint(o, i);
      }
      try {
        this.Editor.BlockManager.setCurrentBlockByChildNode(t), this.Editor.BlockManager.highlightCurrentNode();
      } catch (e2) {
        this.Editor.RectangleSelection.isRectActivated() || this.Editor.Caret.setToTheLastBlock();
      }
      this.Editor.Toolbar.moveAndOpen();
    }
    redactorClicked(e) {
      const { BlockSelection: t } = this.Editor;
      if (!m.isCollapsed)
        return;
      const o = () => {
        e.stopImmediatePropagation(), e.stopPropagation();
      }, i = e.target, n = e.metaKey || e.ctrlKey;
      if (d.isAnchor(i) && n) {
        o();
        const u = i.getAttribute("href"), h = Ht(u);
        jt(h);
        return;
      }
      const r = this.Editor.BlockManager.getBlockByIndex(-1), a = d.offset(r.holder).bottom, l = e.pageY;
      if (e.target instanceof Element && e.target.isEqualNode(this.nodes.redactor) && !t.anyBlockSelected && a < l) {
        o();
        const { BlockManager: u, Caret: h, Toolbar: f } = this.Editor;
        (!u.lastBlock.tool.isDefault || !u.lastBlock.isEmpty) && u.insertAtEnd(), h.setToTheLastBlock(), f.moveAndOpen(u.lastBlock);
      }
    }
    selectionChanged() {
      const { CrossBlockSelection: e, BlockSelection: t } = this.Editor, o = m.anchorElement;
      if (e.isCrossBlockSelectionStarted && t.anyBlockSelected && m.get().removeAllRanges(), !o) {
        m.range || this.Editor.InlineToolbar.close();
        return;
      }
      const i = o.closest(`.${F.CSS.content}`) === null;
      if (i && (this.Editor.InlineToolbar.containsNode(o) || this.Editor.InlineToolbar.close(), !(o.dataset.inlineToolbar === "true")))
        return;
      this.Editor.BlockManager.currentBlock || this.Editor.BlockManager.setCurrentBlockByChildNode(o);
      const n = i !== true;
      this.Editor.InlineToolbar.tryToShow(true, n);
    }
  };
  var ui = {
    BlocksAPI: Zt,
    CaretAPI: Gt,
    EventsAPI: qt,
    I18nAPI: De,
    API: Jt,
    InlineToolbarAPI: Qt,
    ListenersAPI: eo,
    NotifierAPI: no,
    ReadOnlyAPI: so,
    SanitizerAPI: po,
    SaverAPI: fo,
    SelectionAPI: go,
    StylesAPI: bo,
    ToolbarAPI: mo,
    TooltipAPI: xo,
    UiAPI: wo,
    BlockSettings: Ro,
    ConversionToolbar: Y,
    Toolbar: jo,
    InlineToolbar: Uo,
    BlockEvents: $o,
    BlockManager: Ko,
    BlockSelection: Xo,
    Caret: ve,
    CrossBlockSelection: Vo,
    DragNDrop: Zo,
    ModificationsObserver: Go,
    Paste: wt,
    ReadOnly: qo,
    RectangleSelection: pe,
    Renderer: Jo,
    Saver: Qo,
    Tools: St,
    UI: hi
  };
  var pi = class {
    constructor(e) {
      this.moduleInstances = {}, this.eventsDispatcher = new we();
      let t, o;
      this.isReady = new Promise((i, n) => {
        t = i, o = n;
      }), Promise.resolve().then(async () => {
        this.configuration = e, await this.validate(), await this.init(), await this.start(), K("I'm ready! (\uFF89\u25D5\u30EE\u25D5)\uFF89*:\uFF65\uFF9F\u2727", "log", "", "color: #E24A75"), setTimeout(async () => {
          if (await this.render(), this.configuration.autofocus) {
            const { BlockManager: i, Caret: n } = this.moduleInstances;
            n.setToBlock(i.blocks[0], n.positions.START), i.highlightCurrentNode();
          }
          this.moduleInstances.UI.removeLoader(), t();
        }, 500);
      }).catch((i) => {
        T(`Editor.js is not ready because of ${i}`, "error"), o(i);
      });
    }
    set configuration(e) {
      var o, i;
      j(e) ? this.config = __spreadValues({}, e) : this.config = {
        holder: e
      }, Ie(!!this.config.holderId, "config.holderId", "config.holder"), this.config.holderId && !this.config.holder && (this.config.holder = this.config.holderId, this.config.holderId = null), this.config.holder == null && (this.config.holder = "editorjs"), this.config.logLevel || (this.config.logLevel = et.VERBOSE), At(this.config.logLevel), Ie(!!this.config.initialBlock, "config.initialBlock", "config.defaultBlock"), this.config.defaultBlock = this.config.defaultBlock || this.config.initialBlock || "paragraph", this.config.minHeight = this.config.minHeight !== void 0 ? this.config.minHeight : 300;
      const t = {
        type: this.config.defaultBlock,
        data: {}
      };
      this.config.placeholder = this.config.placeholder || false, this.config.sanitizer = this.config.sanitizer || {
        p: true,
        b: true,
        a: true
      }, this.config.hideToolbar = this.config.hideToolbar ? this.config.hideToolbar : false, this.config.tools = this.config.tools || {}, this.config.i18n = this.config.i18n || {}, this.config.data = this.config.data || { blocks: [] }, this.config.onReady = this.config.onReady || (() => {
      }), this.config.onChange = this.config.onChange || (() => {
      }), this.config.inlineToolbar = this.config.inlineToolbar !== void 0 ? this.config.inlineToolbar : true, (V(this.config.data) || !this.config.data.blocks || this.config.data.blocks.length === 0) && (this.config.data = { blocks: [t] }), this.config.readOnly = this.config.readOnly || false, (o = this.config.i18n) != null && o.messages && $2.setDictionary(this.config.i18n.messages), this.config.i18n.direction = ((i = this.config.i18n) == null ? void 0 : i.direction) || "ltr";
    }
    get configuration() {
      return this.config;
    }
    async validate() {
      const { holderId: e, holder: t } = this.config;
      if (e && t)
        throw Error("\xABholderId\xBB and \xABholder\xBB param can't assign at the same time.");
      if (J(t) && !d.get(t))
        throw Error(`element with ID \xAB${t}\xBB is missing. Pass correct holder's ID.`);
      if (t && j(t) && !d.isElement(t))
        throw Error("\xABholder\xBB value must be an Element node");
    }
    init() {
      this.constructModules(), this.configureModules();
    }
    async start() {
      await [
        "Tools",
        "UI",
        "BlockManager",
        "Paste",
        "BlockSelection",
        "RectangleSelection",
        "CrossBlockSelection",
        "ReadOnly"
      ].reduce(
        (t, o) => t.then(async () => {
          try {
            await this.moduleInstances[o].prepare();
          } catch (i) {
            if (i instanceof at)
              throw new Error(i.message);
            T(`Module ${o} was skipped because of %o`, "warn", i);
          }
        }),
        Promise.resolve()
      );
    }
    render() {
      return this.moduleInstances.Renderer.render(this.config.data.blocks);
    }
    constructModules() {
      Object.entries(ui).forEach(([e, t]) => {
        try {
          this.moduleInstances[e] = new t({
            config: this.configuration,
            eventsDispatcher: this.eventsDispatcher
          });
        } catch (o) {
          T("[constructModules]", `Module ${e} skipped because`, "error", o);
        }
      });
    }
    configureModules() {
      for (const e in this.moduleInstances)
        Object.prototype.hasOwnProperty.call(this.moduleInstances, e) && (this.moduleInstances[e].state = this.getModulesDiff(e));
    }
    getModulesDiff(e) {
      const t = {};
      for (const o in this.moduleInstances)
        o !== e && (t[o] = this.moduleInstances[o]);
      return t;
    }
  };
  var fi = class {
    static get version() {
      return "2.27.0";
    }
    constructor(e) {
      let t = () => {
      };
      j(e) && D(e.onReady) && (t = e.onReady);
      const o = new pi(e);
      this.isReady = o.isReady.then(() => {
        this.exportAPI(o), t();
      });
    }
    exportAPI(e) {
      const t = ["configuration"], o = () => {
        Object.values(e.moduleInstances).forEach((n) => {
          D(n.destroy) && n.destroy(), n.listeners.removeAll();
        }), e = null;
        for (const n in this)
          Object.prototype.hasOwnProperty.call(this, n) && delete this[n];
        Object.setPrototypeOf(this, null);
      };
      t.forEach((n) => {
        this[n] = e[n];
      }), this.destroy = o, Object.setPrototypeOf(this, e.moduleInstances.API.methods), delete this.exportAPI, Object.entries({
        blocks: {
          clear: "clear",
          render: "render"
        },
        caret: {
          focus: "focus"
        },
        events: {
          on: "on",
          off: "off",
          emit: "emit"
        },
        saver: {
          save: "save"
        }
      }).forEach(([n, r]) => {
        Object.entries(r).forEach(([a, l]) => {
          this[l] = e.moduleInstances.API.methods[n][a];
        });
      });
    }
  };

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/workspace.js
  var import_editorjs_undo = __toESM(require_bundle());
  var Workspace = class extends frappe.views.Workspace {
    constructor(wrapper, organization_name) {
      super(wrapper);
      this.wrapper = $(wrapper);
      this.page = wrapper.page;
      this.blocks = frappe.workspace_block.blocks;
      this.is_read_only = true;
      this.pages = {};
      this.sorted_public_items = [];
      this.sorted_private_items = [];
      this.current_page = {};
      this.sidebar_items = {
        public: {},
        private: {}
      };
      this.organization_name = organization_name;
      this.sidebar_categories = ["My Workspaces", "Public"];
      this.prepare_container();
      this.setup_pages();
      this.register_awesomebar_shortcut();
    }
    prepare_container() {
      if (!this.organization_name) {
        return;
      }
      let list_sidebar = $(`
			<div class="list-sidebar overlay-sidebar hidden-xs hidden-sm">
				<div class="desk-sidebar list-unstyled sidebar-menu"></div>
			</div>
		`).appendTo(this.wrapper.find(".layout-side-section"));
      this.sidebar = list_sidebar.find(".desk-sidebar");
      this.body = this.wrapper.find(".layout-main-section");
    }
    async setup_pages(reload) {
      if (!this.organization_name) {
        return;
      }
      !this.discard && this.create_page_skeleton();
      !this.discard && this.create_sidebar_skeleton();
      this.sidebar_pages = this.discard ? this.sidebar_pages : await this.get_pages();
      this.cached_pages = $.extend(true, {}, this.sidebar_pages);
      this.all_pages = this.sidebar_pages.pages;
      this.has_access = this.sidebar_pages.has_access;
      for (const page of this.all_pages) {
        page.is_editable = !page.public || this.has_access;
      }
      this.public_pages = this.all_pages.filter((page) => page.public);
      this.private_pages = this.all_pages.filter((page) => !page.public);
      if (this.all_pages) {
        frappe.workspaces = {};
        for (let page of this.all_pages) {
          frappe.workspaces[frappe.router.slug(page.name)] = {
            title: page.title,
            public: page.public
          };
        }
        this.make_sidebar();
        reload && this.show();
      }
    }
    get_pages() {
      return frappe.xcall("tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_workspace_sidebar_items", {
        organization_name: this.organization_name
      });
    }
    sidebar_item_container(item2) {
      return $(`
			<div
				class="sidebar-item-container ${item2.is_editable ? "is-draggable" : ""}"
				item-parent="${item2.parent_page}"
				item-name="${item2.title}"
				item-public="${item2.public || 0}"
				item-is-hidden="${item2.is_hidden || 0}"
			>
				<div class="desk-sidebar-item standard-sidebar-item ${item2.selected ? "selected" : ""}">
					<a
						class="item-anchor ${item2.is_editable ? "" : "block-click"} item-a" title="${__(item2.title)}"
					>
						<span class="sidebar-item-icon" item-icon=${item2.icon || "folder-normal"}>${frappe.utils.icon(
        item2.icon || "folder-normal",
        "md"
      )}</span>
						<span class="sidebar-item-label">${__(item2.title.replaceAll(/{{([^}]+)}}/g, ""))}<span>
					</a>
					<div class="sidebar-item-control"></div>
				</div>
				<div class="sidebar-child-item nested-container"></div>
			</div>
		`);
    }
    make_sidebar() {
      if (this.sidebar.find(".standard-sidebar-section")[0]) {
        this.sidebar.find(".standard-sidebar-section").remove();
      }
      for (const category of this.sidebar_categories) {
        if (category != "Public") {
          continue;
        }
        let root_pages = this.public_pages.filter(
          (page) => page.parent_page == "" || page.parent_page == null
        );
        if (category != "Public") {
          root_pages = this.private_pages.filter(
            (page) => page.parent_page == "" || page.parent_page == null
          );
        }
        root_pages = root_pages.uniqBy((d2) => d2.title);
        this.build_sidebar_section(category, root_pages);
      }
      this.sidebar.find(".selected").length && !frappe.dom.is_element_in_viewport(this.sidebar.find(".selected")) && this.sidebar.find(".selected")[0].scrollIntoView();
      this.remove_sidebar_skeleton();
    }
    build_sidebar_section(title, root_pages) {
      let sidebar_section = $(
        `<div class="standard-sidebar-section nested-container" data-title="${title}"></div>`
      );
      let $title = $(`<div class="standard-sidebar-label">
			<span>${frappe.utils.icon("small-down", "xs")}</span>
			<span class="section-title">${__(title)}<span>
		</div>`).appendTo(sidebar_section);
      this.prepare_sidebar(root_pages, sidebar_section, this.sidebar);
      $title.on("click", (e) => {
        let icon = $(e.target).find("span use").attr("href") === "#icon-small-down" ? "#icon-right" : "#icon-small-down";
        $(e.target).find("span use").attr("href", icon);
        $(e.target).parent().find(".sidebar-item-container").toggleClass("hidden");
      });
      if (Object.keys(root_pages).length === 0) {
        sidebar_section.addClass("hidden");
      }
      if (sidebar_section.find(".sidebar-item-container").length && sidebar_section.find("> [item-is-hidden='0']").length == 0) {
        sidebar_section.addClass("hidden show-in-edit-mode");
      }
    }
    prepare_sidebar(items, child_container, item_container) {
      for (const item2 of items) {
        this.append_item(item2, child_container);
      }
      child_container.appendTo(item_container);
    }
    append_item(item2, container) {
      let is_current_page = frappe.router.slug(item2.title) == frappe.router.slug(this.get_page_to_show().name) && item2.public == this.get_page_to_show().public;
      item2.selected = is_current_page;
      if (is_current_page) {
        this.current_page = { name: item2.title, public: item2.public };
      }
      let $item_container = this.sidebar_item_container(item2);
      $item_container.find(".item-a").on("click", () => {
        this.update_selected_sidebar(this.current_page, false);
        this.current_page = {
          name: item2.title,
          public: item2.public
        };
        this.show();
      });
      let sidebar_control = $item_container.find(".sidebar-item-control");
      this.add_sidebar_actions(item2, sidebar_control);
      let pages = item2.public ? this.public_pages : this.private_pages;
      let descendant = [];
      function getDescendant(pages2, title) {
        const children = pages2.filter((page) => page.parent_page == title);
        descendant = [...descendant, ...children];
        for (const child of children) {
          getDescendant(pages2, child.title);
        }
      }
      getDescendant(pages, item2.title);
      const isCurrentParent = descendant.some((page) => page.name === this.get_page_to_show().name && page.public === this.get_page_to_show().public);
      let child_items = pages.filter((page) => page.parent_page == item2.title);
      if (child_items.length > 0) {
        let child_container = $item_container.find(".sidebar-child-item");
        if (!isCurrentParent) {
          child_container.addClass("hidden");
        }
        this.prepare_sidebar(child_items, child_container, $item_container);
      }
      $item_container.appendTo(container);
      this.sidebar_items[item2.public ? "public" : "private"][item2.title] = $item_container;
      const parents = $item_container.parents();
      if (is_current_page) {
        parents.each((parent) => {
          if ($(parent).hasClass("hidden")) {
            parent.toggleClass("hidden");
          }
        });
      }
      this.add_drop_icon(item2, sidebar_control, $item_container);
      if (child_items.length > 0) {
        $item_container.find(".drop-icon").first().addClass("show-in-edit-mode");
      }
      const { organization } = item2;
      if (!this.organization_name) {
        return;
      }
      if (!organization) {
        $item_container.hide();
      }
      if (this.organization_name === organization) {
        return;
      }
      $item_container.hide();
    }
    add_drop_icon(item2, sidebar_control, item_container) {
      let drop_icon = "small-down";
      if (item_container.find(`[item-name="${this.current_page.name}"]`).length) {
        drop_icon = "small-up";
      }
      let $child_item_section = item_container.children(".sidebar-child-item");
      let $drop_icon = $(
        `<span class="drop-icon hidden">${frappe.utils.icon(drop_icon, "sm")}</span>`
      ).appendTo(sidebar_control);
      let pages = item2.public ? this.public_pages : this.private_pages;
      if (pages.some(
        (e) => e.parent_page == item2.title && (e.is_hidden == 0 || !this.is_read_only)
      )) {
        $drop_icon.removeClass("hidden");
      }
      $drop_icon.on("click", () => {
        let icon = $drop_icon.find("use").attr("href") === "#icon-small-down" ? "#icon-small-up" : "#icon-small-down";
        $drop_icon.find("use").attr("href", icon);
        $child_item_section.toggleClass("hidden");
      });
    }
    show() {
      if (!this.all_pages) {
        setTimeout(() => this.show(), 100);
        return;
      }
      let page = this.get_page_to_show();
      this.page.set_title(__(page.name));
      this.update_selected_sidebar(this.current_page, false);
      this.update_selected_sidebar(page, true);
      this.show_page(page);
    }
    update_selected_sidebar(page, add) {
      let section = page.public ? "public" : "private";
      if (this.sidebar && this.sidebar_items[section] && this.sidebar_items[section][page.name]) {
        let $sidebar = this.sidebar_items[section][page.name];
        let pages = page.public ? this.public_pages : this.private_pages;
        let sidebar_page = pages.find((p) => p.title == page.name);
        if (add) {
          $sidebar[0].firstElementChild.classList.add("selected");
          if (sidebar_page) {
            sidebar_page.selected = true;
          }
          $sidebar.parent().hasClass("sidebar-child-item") && $sidebar.parent().hasClass("hidden") && $sidebar.parent().removeClass("hidden");
          this.current_page = { name: page.name, public: page.public };
          localStorage.current_page = page.name;
          localStorage.is_current_page_public = page.public;
        } else {
          $sidebar[0].firstElementChild.classList.remove("selected");
          if (sidebar_page) {
            sidebar_page.selected = false;
          }
        }
      }
    }
    get_data(page) {
      return frappe.call("frappe.desk.desktop.get_desktop_page", {
        page
      }).then((data) => {
        this.page_data = data.message;
        this.pages[page.name] && delete this.pages[page.name];
        this.pages[page.name] = data.message;
        if (!this.page_data || Object.keys(this.page_data).length === 0) {
          return;
        }
        if (this.page_data.charts && this.page_data.charts.items.length === 0) {
          return;
        }
        return frappe.dashboard_utils.get_dashboard_settings().then((settings) => {
          if (settings) {
            let chart_config = settings.chart_config ? JSON.parse(settings.chart_config) : {};
            this.page_data.charts.items.map((chart) => {
              chart.chart_settings = chart_config[chart.chart_name] || {};
            });
            this.pages[page.name] = this.page_data;
          }
        });
      });
    }
    get_page_to_show() {
      var _a, _b;
      let default_page;
      const firstOrganizationPage = (_a = this.all_pages) == null ? void 0 : _a.find((item2) => item2.organization === this.organization_name);
      const defaultOrganizationPage = (_b = this.all_pages) == null ? void 0 : _b.find((item2) => item2.organization === this.organization_name && item2.default === 1);
      if (defaultOrganizationPage) {
        default_page = { name: defaultOrganizationPage.title, public: defaultOrganizationPage.public };
      } else if (firstOrganizationPage) {
        default_page = { name: firstOrganizationPage.title, public: firstOrganizationPage.public };
      } else {
        default_page = { name: "Build", public: true };
      }
      let page = this.current_page.name || default_page.name;
      let is_public = this.current_page.name ? this.current_page.public : default_page.public;
      return { name: page, public: is_public };
    }
    async show_page(page) {
      if (!this.body.find("#editorjs")[0]) {
        this.$page = $(`
				<div id="editorjs" class="desk-page page-main-content"></div>
			`).appendTo(this.body);
      }
      if (this.all_pages.length) {
        this.create_page_skeleton();
        let pages = page.public && this.public_pages.length ? this.public_pages : this.private_pages;
        let current_page = pages.find((p) => p.title == page.name);
        this.content = current_page && JSON.parse(current_page.content);
        this.content && this.add_custom_cards_in_content();
        $(".item-anchor").addClass("disable-click");
        if (this.pages && this.pages[current_page.name]) {
          this.page_data = this.pages[current_page.name];
        } else {
          await frappe.after_ajax(() => this.get_data(current_page));
        }
        this.setup_actions(page);
        this.prepare_editorjs();
        $(".item-anchor").removeClass("disable-click");
        this.remove_page_skeleton();
      }
    }
    add_custom_cards_in_content() {
      let index = -1;
      this.content.find((item2, i) => {
        if (item2.type == "card") {
          index = i;
        }
      });
      if (index !== -1) {
        this.content.splice(index + 1, 0, {
          type: "card",
          data: { card_name: "Custom Documents", col: 4 }
        });
        this.content.splice(index + 2, 0, {
          type: "card",
          data: { card_name: "Custom Reports", col: 4 }
        });
      }
    }
    prepare_editorjs() {
      if (this.editor) {
        this.editor.isReady.then(() => {
          this.editor.configuration.tools.chart.config.page_data = this.page_data;
          this.editor.configuration.tools.shortcut.config.page_data = this.page_data;
          this.editor.configuration.tools.card.config.page_data = this.page_data;
          this.editor.configuration.tools.onboarding.config.page_data = this.page_data;
          this.editor.configuration.tools.quick_list.config.page_data = this.page_data;
          this.editor.configuration.tools.number_card.config.page_data = this.page_data;
          this.editor.configuration.tools.custom_block.config.page_data = this.page_data;
          this.editor.render({ blocks: this.content || [] });
        });
      } else {
        this.initialize_editorjs(this.content);
      }
    }
    setup_actions(page) {
      let pages = page.public ? this.public_pages : this.private_pages;
      let current_page = pages.find((p) => p.title == page.name);
      if (!this.is_read_only) {
        this.setup_customization_buttons(current_page);
        return;
      }
      this.clear_page_actions();
      this.page.set_secondary_action(__("Edit"), async () => {
        if (!this.editor || !this.editor.readOnly) {
          return;
        }
        this.is_read_only = false;
        this.toggle_hidden_workspaces(true);
        await this.editor.readOnly.toggle();
        this.editor.isReady.then(() => {
          this.initialize_editorjs_undo();
          this.setup_customization_buttons(current_page);
          this.show_sidebar_actions();
          this.make_blocks_sortable();
        });
      });
      this.page.add_inner_button(__("Create Workspace"), () => {
        this.initialize_new_page();
      });
    }
    initialize_editorjs_undo() {
      this.undo = new import_editorjs_undo.default({ editor: this.editor });
      this.undo.initialize({ blocks: this.content || [] });
      this.undo.readOnly = false;
    }
    clear_page_actions() {
      this.page.clear_primary_action();
      this.page.clear_secondary_action();
      this.page.clear_inner_toolbar();
    }
    setup_customization_buttons(page) {
      this.clear_page_actions();
      page.is_editable && this.page.set_primary_action(
        __("Save"),
        () => {
          this.clear_page_actions();
          this.save_page(page).then((saved) => {
            if (!saved) {
              return;
            }
            this.undo.readOnly = true;
            this.editor.readOnly.toggle();
            this.is_read_only = true;
          });
        },
        null,
        __("Saving")
      );
      this.page.set_secondary_action(__("Discard"), async () => {
        this.discard = true;
        this.clear_page_actions();
        this.toggle_hidden_workspaces(false);
        await this.editor.readOnly.toggle();
        this.is_read_only = true;
        this.sidebar_pages = this.cached_pages;
        this.reload();
        frappe.show_alert({ message: __("Customizations Discarded"), indicator: "info" });
      });
      if (page.name && this.has_access) {
        this.page.add_inner_button(__("Settings"), () => {
          frappe.set_route(`workspace/${page.name}`);
        });
      }
    }
    toggle_hidden_workspaces(show) {
      $(".desk-sidebar").toggleClass("show-hidden-workspaces", show);
    }
    show_sidebar_actions() {
      this.sidebar.find(".standard-sidebar-section").addClass("show-control");
      this.make_sidebar_sortable();
    }
    add_sidebar_actions(item2, sidebar_control, is_new) {
      if (!item2.is_editable) {
        sidebar_control.parent().click(() => {
          !this.is_read_only && frappe.show_alert(
            {
              message: __("Only Workspace Manager can sort or edit this page"),
              indicator: "info"
            },
            5
          );
        });
        frappe.utils.add_custom_button(
          frappe.utils.icon("duplicate", "sm"),
          () => this.duplicate_page(item2),
          "duplicate-page",
          __("Duplicate Workspace"),
          null,
          sidebar_control
        );
      } else if (item2.is_hidden) {
        frappe.utils.add_custom_button(
          frappe.utils.icon("unhide", "sm"),
          (e) => this.unhide_workspace(item2, e),
          "unhide-workspace-btn",
          __("Unhide Workspace"),
          null,
          sidebar_control
        );
      } else {
        frappe.utils.add_custom_button(
          frappe.utils.icon("drag", "xs"),
          null,
          "drag-handle",
          __("Drag"),
          null,
          sidebar_control
        );
        !is_new && this.add_settings_button(item2, sidebar_control);
      }
    }
    get_parent_pages(page) {
      this.public_parent_pages = [
        "",
        ...this.public_pages.filter((p) => p.organization === this.organization_name).map((p) => p.title)
      ];
      this.private_parent_pages = [
        "",
        ...this.private_pages.filter((p) => p.organization === this.organization_name).map((p) => p.title)
      ];
      if (page) {
        return page.public ? this.public_parent_pages : this.private_parent_pages;
      }
    }
    edit_page(item2) {
      let me2 = this;
      let old_item = item2;
      let parent_pages = this.get_parent_pages(item2);
      let idx = parent_pages.findIndex((x) => x == item2.title);
      if (idx !== -1) {
        parent_pages.splice(idx, 1);
      }
      const title = item2.title.replaceAll(/{{([^}]+)}}/g, "");
      const res = item2.title.match(/{{([^}]+)}}/);
      const suffix = (res == null ? void 0 : res[1]) || "";
      const d2 = new frappe.ui.Dialog({
        title: __("Update Details"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1,
            default: title
          },
          {
            label: __("Suffix"),
            fieldtype: "Data",
            fieldname: "suffix",
            default: suffix
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: parent_pages,
            default: item2.parent_page
          },
          {
            label: __("Default"),
            fieldtype: "Check",
            fieldname: "default",
            default: item2.default
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon",
            default: item2.icon
          }
        ],
        primary_action_label: __("Update"),
        primary_action: (values) => {
          values.title = frappe.utils.escape_html(`${values.title}${values.suffix ? `{{${values.suffix}}}` : ""}`);
          values.is_public = 1;
          let is_title_changed = values.title != old_item.title;
          let is_section_changed = values.is_public != old_item.public;
          if ((is_title_changed || is_section_changed) && !this.validate_page(values, old_item)) {
            return;
          }
          d2.hide();
          frappe.call({
            method: "frappe.desk.doctype.workspace.workspace.update_page",
            args: {
              name: old_item.name,
              title: values.title,
              icon: values.icon || "",
              parent: values.parent || "",
              public: values.is_public || 0
            },
            callback(res2) {
              if (res2.message) {
                frappe.call({
                  method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.set_organization_workspace",
                  args: {
                    workspace_name: res2.message.name,
                    organization_name: me2.organization_name,
                    default: values.default
                  }
                });
                let message = __("Workspace {0} Edited Successfully", [
                  old_item.title.bold()
                ]);
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          this.update_sidebar(old_item, values);
          if (this.make_page_selected) {
            this.update_selected_sidebar(this.current_page, false);
            this.current_page = {
              name: values.title,
              public: values.is_public
            };
            this.show();
            this.make_page_selected = false;
          }
          this.make_sidebar();
          this.show_sidebar_actions();
        }
      });
      d2.show();
    }
    update_sidebar(old_item, new_item) {
      let is_section_changed = old_item.public != (new_item.is_public || 0);
      let is_title_changed = old_item.title != new_item.title;
      let new_updated_item = __spreadValues({}, old_item);
      let pages = old_item.public ? this.public_pages : this.private_pages;
      let child_items = pages.filter((page) => page.parent_page == old_item.title);
      this.make_page_selected = old_item.selected;
      new_updated_item.title = new_item.title;
      new_updated_item.icon = new_item.icon;
      new_updated_item.parent_page = new_item.parent || "";
      new_updated_item.public = new_item.is_public;
      if (is_title_changed || is_section_changed) {
        if (new_item.is_public) {
          new_updated_item.name = new_item.title;
          new_updated_item.label = new_item.title;
          new_updated_item.for_user = "";
        } else {
          let { user } = frappe.session;
          new_updated_item.name = `${new_item.title}-${user}`;
          new_updated_item.label = `${new_item.title}-${user}`;
          new_updated_item.for_user = user;
        }
      }
      this.update_cached_values(old_item, new_updated_item);
      if (child_items.length) {
        for (const child of child_items) {
          child.parent_page = new_item.title;
          is_section_changed && this.update_child_sidebar(child, new_item);
        }
      }
    }
    update_child_sidebar(child, new_item) {
      let old_child = __spreadValues({}, child);
      this.make_page_selected = child.selected;
      child.public = new_item.is_public;
      if (new_item.is_public) {
        child.name = child.title;
        child.label = child.title;
        child.for_user = "";
      } else {
        let { user } = frappe.session;
        child.name = `${child.title}-${user}`;
        child.label = `${child.title}-${user}`;
        child.for_user = user;
      }
      this.update_cached_values(old_child, child);
    }
    update_cached_values(old_item, new_item, duplicate, new_page) {
      let [from_pages, to_pages] = old_item.public ? [this.public_pages, this.private_pages] : [this.private_pages, this.public_pages];
      let old_item_index = from_pages.findIndex((page) => page.title == old_item.title);
      duplicate && old_item_index++;
      if (frappe.workspaces[frappe.router.slug(old_item.name)] || new_page) {
        !duplicate && delete frappe.workspaces[frappe.router.slug(old_item.name)];
        if (new_item) {
          frappe.workspaces[frappe.router.slug(new_item.name)] = { title: new_item.title };
        }
      }
      if (this.pages && this.pages[old_item.name] || new_page) {
        if (new_item) {
          this.pages[new_item.name] = this.pages[old_item.name] || {};
        }
        !duplicate && delete this.pages[old_item.name];
      }
      if (new_item) {
        let is_section_changed = old_item.public != (new_item.is_public || new_item.public || 0);
        if (is_section_changed) {
          !duplicate && from_pages.splice(old_item_index, 1);
          to_pages.push(new_item);
        } else if (new_page) {
          from_pages.push(new_item);
        } else {
          from_pages.splice(old_item_index, duplicate ? 0 : 1, new_item);
        }
      } else {
        from_pages.splice(old_item_index, 1);
      }
      this.sidebar_pages.pages = [...this.public_pages, ...this.private_pages];
      this.cached_pages = this.sidebar_pages;
    }
    add_settings_button(item2, sidebar_control) {
      this.dropdown_list = [
        {
          label: __("Edit"),
          title: __("Edit Workspace"),
          icon: frappe.utils.icon("edit", "sm"),
          action: () => this.edit_page(item2)
        },
        {
          label: __("Duplicate"),
          title: __("Duplicate Workspace"),
          icon: frappe.utils.icon("duplicate", "sm"),
          action: () => this.duplicate_page(item2)
        },
        {
          label: __("Hide"),
          title: __("Hide Workspace"),
          icon: frappe.utils.icon("hide", "sm"),
          action: (e) => this.hide_workspace(item2, e)
        }
      ];
      if (this.is_item_deletable(item2)) {
        this.dropdown_list.push({
          label: __("Delete"),
          title: __("Delete Workspace"),
          icon: frappe.utils.icon("delete-active", "sm"),
          action: () => this.delete_page(item2)
        });
      }
      let $button = $(`
			<div class="btn btn-secondary btn-xs setting-btn dropdown-btn" title="${__("Setting")}">
				${frappe.utils.icon("dot-horizontal", "xs")}
			</div>
			<div class="dropdown-list hidden"></div>
		`);
      let dropdown_item = function(label, title, icon, action) {
        let html = $(`
				<div class="dropdown-item" title="${title}">
					<span class="dropdown-item-icon">${icon}</span>
					<span class="dropdown-item-label">${label}</span>
				</div>
			`);
        html.click((event) => {
          event.stopPropagation();
          action && action(event);
        });
        return html;
      };
      $button.filter(".dropdown-btn").click((event) => {
        event.stopPropagation();
        if ($button.filter(".dropdown-list.hidden").length) {
          $(".dropdown-list:not(.hidden)").addClass("hidden");
        }
        $button.filter(".dropdown-list").toggleClass("hidden");
      });
      sidebar_control.append($button);
      for (const i of this.dropdown_list) {
        $button.filter(".dropdown-list").append(dropdown_item(i.label, i.title, i.icon, i.action));
      }
    }
    is_item_deletable(item2) {
      if (!item2.public || item2.public && (!item2.module || item2.module && frappe.boot.developer_mode)) {
        return true;
      }
      return false;
    }
    delete_page(page) {
      frappe.confirm(
        __("Are you sure you want to delete page {0}?", [page.title.bold()]),
        () => {
          frappe.call({
            method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.delete_page",
            args: { page },
            callback: function(res) {
              if (res.message) {
                let page2 = res.message;
                let message = __("Workspace {0} Deleted Successfully", [
                  page2.title.bold()
                ]);
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          this.page.clear_primary_action();
          this.update_cached_values(page);
          if (this.current_page.name == page.title && this.current_page.public == page.public) {
            this.update_selected_sidebar(this.current_page, false);
            this.current_page = {};
            this.current_page = this.get_page_to_show();
            this.show();
          }
          this.make_sidebar();
          this.show_sidebar_actions();
        }
      );
    }
    duplicate_page(page) {
      let me2 = this;
      let new_page = __spreadValues({}, page);
      if (!this.has_access && new_page.public) {
        new_page.public = 0;
      }
      let parent_pages = this.get_parent_pages({ public: new_page.public });
      const d2 = new frappe.ui.Dialog({
        title: __("Create Duplicate"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1
          },
          {
            label: __("Suffix"),
            fieldtype: "Data",
            fieldname: "suffix"
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: parent_pages,
            default: new_page.parent_page
          },
          {
            label: __("Default"),
            fieldtype: "Check",
            fieldname: "default",
            default: item.default
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon",
            default: new_page.icon
          }
        ],
        primary_action_label: __("Duplicate"),
        primary_action: (values) => {
          values.title = `${values.title}${values.suffix ? `{{${values.suffix}}}` : ""}`;
          values.is_public = 1;
          if (!this.validate_page(values)) {
            return;
          }
          d2.hide();
          frappe.call({
            method: "frappe.desk.doctype.workspace.workspace.duplicate_page",
            args: {
              page_name: page.name,
              new_page: values
            },
            callback(res) {
              if (res.message) {
                frappe.call({
                  method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.save_organization_workspace",
                  args: {
                    workspace_name: res.message.name,
                    organization_name: me2.organization_name,
                    default: values.default
                  }
                });
                let new_page2 = res.message;
                let message = __(
                  "Duplicate of {0} named as {1} is created successfully",
                  [page.title.bold(), new_page2.title.bold()]
                );
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          new_page.title = values.title;
          new_page.public = values.is_public || 0;
          new_page.name = values.title + (new_page.public ? "" : `-${frappe.session.user}`);
          new_page.label = new_page.name;
          new_page.icon = values.icon;
          new_page.parent_page = values.parent || "";
          new_page.for_user = new_page.public ? "" : frappe.session.user;
          new_page.is_editable = !new_page.public;
          new_page.selected = true;
          new_page.organization = this.organization_name;
          this.update_cached_values(page, new_page, true);
          this.update_selected_sidebar(this.current_page, false);
          this.current_page = {
            name: new_page.name,
            public: new_page.public
          };
          this.show();
          me2.make_sidebar();
          me2.show_sidebar_actions();
        }
      });
      d2.show();
    }
    hide_unhide_workspace(page, event, hide) {
      page.is_hidden = hide;
      let sidebar_control = event.target.closest(".sidebar-item-control");
      let sidebar_item_container = sidebar_control.closest(".sidebar-item-container");
      $(sidebar_item_container).attr("item-is-hidden", hide);
      $(sidebar_control).empty();
      this.add_sidebar_actions(page, $(sidebar_control));
      this.add_drop_icon(page, $(sidebar_control), $(sidebar_item_container));
      let cached_page = this.cached_pages.pages.findIndex((p) => p.name === page.name);
      if (cached_page !== -1) {
        this.cached_pages.pages[cached_page].is_hidden = hide;
      }
      let method = hide ? "hide_page" : "unhide_page";
      frappe.call({
        method: `frappe.desk.doctype.workspace.workspace.${method}`,
        args: {
          page_name: page.name
        },
        callback: (r) => {
          if (!r.message) {
            return;
          }
          let message = hide ? "{0} is hidden successfully" : "{0} is unhidden successfully";
          message = __(message, [page.title.bold()]);
          frappe.show_alert({ message, indicator: "green" });
        }
      });
    }
    hide_workspace(page, event) {
      this.hide_unhide_workspace(page, event, 1);
    }
    unhide_workspace(page, event) {
      this.hide_unhide_workspace(page, event, 0);
    }
    make_sidebar_sortable() {
      let me2 = this;
      $(".nested-container").each(function() {
        new Sortable(this, {
          handle: ".drag-handle",
          draggable: ".sidebar-item-container.is-draggable",
          group: "nested",
          animation: 150,
          fallbackOnBody: true,
          swapThreshold: 0.65,
          onEnd: function(evt) {
            let is_public = $(evt.item).attr("item-public") == "1";
            me2.prepare_sorted_sidebar(is_public);
            me2.update_sorted_sidebar();
          }
        });
      });
    }
    prepare_sorted_sidebar(is_public) {
      let pages = is_public ? this.public_pages : this.private_pages;
      if (is_public) {
        this.sorted_public_items = this.sort_sidebar(
          this.sidebar.find(".standard-sidebar-section").last(),
          pages
        );
      } else {
        this.sorted_private_items = this.sort_sidebar(
          this.sidebar.find(".standard-sidebar-section").first(),
          pages
        );
      }
      this.sidebar_pages.pages = [...this.public_pages, ...this.private_pages];
      this.cached_pages = this.sidebar_pages;
    }
    sort_sidebar($sidebar_section, pages) {
      let sorted_items = [];
      for (const [i, page] of Array.from($sidebar_section.find(".sidebar-item-container")).entries()) {
        let parent_page = "";
        if (page.closest(".nested-container").classList.contains("sidebar-child-item")) {
          parent_page = page.parentElement.parentElement.attributes["item-name"].value;
        }
        sorted_items.push({
          title: page.attributes["item-name"].value,
          parent_page,
          public: page.attributes["item-public"].value
        });
        let $drop_icon = $(page).find(".sidebar-item-control .drop-icon").first();
        if ($(page).find(".sidebar-child-item > *").length == 0) {
          $drop_icon.addClass("hidden");
        } else {
          $drop_icon.removeClass("hidden");
        }
        let from_index = pages.findIndex((p) => p.title == page.attributes["item-name"].value);
        let element = pages[from_index];
        element.parent_page = parent_page;
        if (from_index != i) {
          pages.splice(from_index, 1);
          pages.splice(i, 0, element);
        }
      }
      return sorted_items;
    }
    update_sorted_sidebar() {
      if (this.sorted_public_items || this.sorted_private_items) {
        frappe.call({
          method: "frappe.desk.doctype.workspace.workspace.sort_pages",
          args: {
            sb_public_items: this.sorted_public_items,
            sb_private_items: this.sorted_private_items
          },
          callback: function(res) {
            if (res.message) {
              let message = `Sidebar Updated Successfully`;
              frappe.show_alert({ message: __(message), indicator: "green" });
            }
          }
        });
      }
    }
    make_blocks_sortable() {
      let me2 = this;
      this.page_sortable = Sortable.create(
        this.page.main.find(".codex-editor__redactor").get(0),
        {
          handle: ".drag-handle",
          draggable: ".ce-block",
          animation: 150,
          onEnd: function(evt) {
            me2.editor.blocks.move(evt.newIndex, evt.oldIndex);
          },
          setData: function() {
          }
        }
      );
    }
    initialize_new_page() {
      let me2 = this;
      this.get_parent_pages();
      const d2 = new frappe.ui.Dialog({
        title: __("New Workspace"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1
          },
          {
            label: __("Suffix"),
            fieldtype: "Data",
            fieldname: "suffix"
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: this.public_parent_pages
          },
          {
            label: __("Default"),
            fieldtype: "Check",
            fieldname: "default"
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon"
          }
        ],
        primary_action_label: __("Create"),
        primary_action: (values) => {
          values.title = frappe.utils.escape_html(`${values.title}${values.suffix ? `{{${values.suffix}}}` : ""}`);
          values.is_public = 1;
          if (!this.validate_page(values)) {
            return;
          }
          d2.hide();
          this.initialize_editorjs_undo();
          this.setup_customization_buttons({ is_editable: true });
          let name = values.title + (values.is_public ? "" : `-${frappe.session.user}`);
          let blocks2 = [
            {
              type: "header",
              data: { text: values.title }
            }
          ];
          let new_page = {
            content: JSON.stringify(blocks2),
            name,
            label: name,
            title: values.title,
            public: values.is_public || 0,
            for_user: values.is_public ? "" : frappe.session.user,
            icon: values.icon,
            parent_page: values.parent || "",
            is_editable: true,
            selected: true
          };
          const me3 = this;
          this.editor.render({
            blocks: blocks2
          }).then(async () => {
            if (this.editor.configuration.readOnly) {
              this.is_read_only = false;
              await this.editor.readOnly.toggle();
            }
            frappe.call({
              method: "frappe.desk.doctype.workspace.workspace.new_page",
              args: {
                new_page
              },
              callback: function(res) {
                if (res.message) {
                  frappe.call({
                    method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.save_organization_workspace",
                    args: {
                      workspace_name: res.message.name,
                      organization_name: me3.organization_name,
                      default: values.default
                    }
                  });
                  let message = __("Workspace {0} Created Successfully", [
                    new_page.title.bold()
                  ]);
                  frappe.show_alert({
                    message,
                    indicator: "green"
                  });
                }
              }
            });
            new_page.organization = this.organization_name;
            this.update_cached_values(new_page, new_page, true, true);
            this.make_sidebar();
            this.show_sidebar_actions();
            this.update_selected_sidebar(this.current_page, false);
            this.current_page = {
              name: new_page.title,
              public: new_page.public
            };
            this.show();
          });
        }
      });
      d2.show();
    }
    validate_page(new_page, old_page) {
      let message = "";
      let [from_pages, to_pages] = new_page.is_public ? [this.private_pages, this.public_pages] : [this.public_pages, this.private_pages];
      let section = this.sidebar_categories[new_page.is_public];
      if (to_pages && to_pages.find((p) => p.title == new_page.title)) {
        message = __("Page with title {0} already exist.", [new_page.title.bold()]);
      }
      if (frappe.router.doctype_route_exist(frappe.router.slug(new_page.title))) {
        message = __("Doctype with same route already exist. Please choose different title.");
      }
      let child_pages = old_page && from_pages.filter((p) => p.parent_page == old_page.title);
      if (child_pages) {
        child_pages.every((child_page) => {
          if (to_pages && to_pages.find((p) => p.title == child_page.title)) {
            message = __(
              "One of the child page with name {0} already exist in {1} Section. Please update the name of the child page first before moving",
              [child_page.title.bold(), section.bold()]
            );
            cur_dialog.hide();
            return false;
          }
          return true;
        });
      }
      if (message) {
        frappe.throw(__(message));
        return false;
      }
      return true;
    }
    add_page_to_sidebar(page) {
      let $sidebar = $(".standard-sidebar-section");
      let item2 = __spreadValues({}, page);
      item2.selected = true;
      item2.is_editable = true;
      let $sidebar_item = this.sidebar_item_container(item2);
      this.add_sidebar_actions(item2, $sidebar_item.find(".sidebar-item-control"), true);
      $sidebar_item.find(".sidebar-item-control .drag-handle").css("margin-right", "8px");
      let sidebar_section = item2.is_public ? $sidebar[1] : $sidebar[0];
      if (item2.parent) {
        let $item_container = $(sidebar_section).find(`[item-name="${item2.parent}"]`);
        let $child_section = $item_container.find(".sidebar-child-item");
        let $drop_icon = $item_container.find(".drop-icon");
        if (!$child_section[0]) {
          $child_section = $(
            `<div class="sidebar-child-item hidden nested-container"></div>`
          ).appendTo($item_container);
          $drop_icon.toggleClass("hidden");
        }
        $sidebar_item.appendTo($child_section);
        $child_section.removeClass("hidden");
        $item_container.find(".drop-icon.hidden").removeClass("hidden");
        $item_container.find(".drop-icon use").attr("href", "#icon-small-up");
      } else {
        !item2.is_public && $sidebar.first().removeClass("hidden");
        $sidebar_item.appendTo(sidebar_section);
      }
      let section = item2.is_public ? "public" : "private";
      if (this.sidebar_items && this.sidebar_items[section] && !this.sidebar_items[section][item2.title]) {
        this.sidebar_items[section][item2.title] = $sidebar_item;
      }
    }
    initialize_editorjs(blocks2) {
      this.tools = {
        header: {
          class: this.blocks.header,
          inlineToolbar: ["HeaderSize", "bold", "italic", "link"],
          config: {
            default_size: 4
          }
        },
        paragraph: {
          class: this.blocks.paragraph,
          inlineToolbar: ["HeaderSize", "bold", "italic", "link"],
          config: {
            placeholder: __("Choose a block or continue typing")
          }
        },
        chart: {
          class: this.blocks.chart,
          config: {
            page_data: this.page_data || []
          }
        },
        card: {
          class: this.blocks.card,
          config: {
            page_data: this.page_data || []
          }
        },
        shortcut: {
          class: this.blocks.shortcut,
          config: {
            page_data: this.page_data || []
          }
        },
        onboarding: {
          class: this.blocks.onboarding,
          config: {
            page_data: this.page_data || []
          }
        },
        quick_list: {
          class: this.blocks.quick_list,
          config: {
            page_data: this.page_data || []
          }
        },
        number_card: {
          class: this.blocks.number_card,
          config: {
            page_data: this.page_data || []
          }
        },
        custom_block: {
          class: this.blocks.custom_block,
          config: {
            page_data: this.page_data || []
          }
        },
        spacer: this.blocks.spacer,
        HeaderSize: frappe.workspace_block.tunes.header_size
      };
      this.editor = new fi({
        data: {
          blocks: blocks2 || []
        },
        tools: this.tools,
        autofocus: false,
        readOnly: true,
        logLevel: "ERROR"
      });
    }
    save_page(page) {
      let me2 = this;
      this.current_page = { name: page.title, public: page.public };
      return this.editor.save().then((outputData) => {
        let new_widgets = {};
        for (const item2 of outputData.blocks) {
          if (item2.data.new) {
            if (!new_widgets[item2.type]) {
              new_widgets[item2.type] = [];
            }
            new_widgets[item2.type].push(item2.data.new);
            delete item2.data.new;
          }
        }
        let blocks2 = outputData.blocks.filter(
          (item2) => item2.type != "card" || item2.data.card_name !== "Custom Documents" && item2.data.card_name !== "Custom Reports"
        );
        if (page.content == JSON.stringify(blocks2) && Object.keys(new_widgets).length === 0) {
          this.setup_customization_buttons(page);
          frappe.show_alert({
            message: __("No changes made on the page"),
            indicator: "warning"
          });
          return false;
        }
        this.create_page_skeleton();
        page.content = JSON.stringify(blocks2);
        frappe.call({
          method: "frappe.desk.doctype.workspace.workspace.save_page",
          args: {
            title: page.title,
            public: page.public || 0,
            new_widgets,
            blocks: JSON.stringify(blocks2)
          },
          callback: function(res) {
            if (res.message) {
              me2.discard = true;
              me2.update_cached_values(page, page);
              me2.reload();
              frappe.show_alert({
                message: __("Page Saved Successfully"),
                indicator: "green"
              });
            }
          }
        });
        return true;
      }).catch((error) => {
        error;
      });
    }
    reload() {
      this.sorted_public_items = [];
      this.sorted_private_items = [];
      this.setup_pages(true);
      this.discard = false;
      this.undo.readOnly = true;
    }
    create_page_skeleton() {
      if (this.body.find(".workspace-skeleton").length) {
        return;
      }
      this.body.prepend(frappe.render_template("workspace_loading_skeleton"));
      this.body.find(".codex-editor").addClass("hidden");
    }
    remove_page_skeleton() {
      this.body.find(".codex-editor").removeClass("hidden");
      this.body.find(".workspace-skeleton").remove();
    }
    create_sidebar_skeleton() {
      if ($(".workspace-sidebar-skeleton").length) {
        return;
      }
      $(frappe.render_template("workspace_sidebar_loading_skeleton")).insertBefore(this.sidebar);
      this.sidebar.addClass("hidden");
    }
    remove_sidebar_skeleton() {
      this.sidebar.removeClass("hidden");
      $(".workspace-sidebar-skeleton").remove();
    }
    register_awesomebar_shortcut() {
      if (!this.organization_name) {
        return;
      }
      for (const letter of "abcdefghijklmnopqrstuvwxyz".split("")) {
        const default_shortcut = {
          action: (e) => {
            $("#navbar-search").focus();
            return false;
          },
          page: this.page
        };
        frappe.ui.keys.add_shortcut(__spreadValues({ shortcut: letter }, default_shortcut));
        frappe.ui.keys.add_shortcut(__spreadValues({ shortcut: `shift+${letter}` }, default_shortcut));
      }
    }
  };

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=script
  var Workspace_default = /* @__PURE__ */ (0, import_vue26.defineComponent)({
    __name: "Workspace",
    props: {
      organization: { type: String, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const wrapperRef = (0, import_vue27.ref)();
      (0, import_vue27.watch)([wrapperRef, () => props.organization], (_, org) => {
        if (!wrapperRef.value || !props.organization) {
          return;
        }
        wrapperRef.value.innerHTML = "";
        frappe.ui.make_app_page({
          parent: wrapperRef.value,
          name: "Workspaces",
          title: __("Workspace")
        });
        const workspace = new Workspace(wrapperRef.value, props.organization);
        workspace.show();
      }, { immediate: true });
      const __returned__ = { props, wrapperRef };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=style&index=0
  var Workspace_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue?type=template
  var import_vue28 = __require("vue");
  var _hoisted_112 = {
    ref: "wrapperRef",
    class: "content page-container",
    id: "page-Workspaces",
    "data-page-route": "Workspaces"
  };
  function render9(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, import_vue28.openBlock)(), (0, import_vue28.createElementBlock)("div", _hoisted_112, null, 512);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue
  Workspace_default2(Workspace_default);
  Workspace_default.render = render9;
  Workspace_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Workspace.vue";
  Workspace_default.__scopeId = "data-v-89a027f3";
  var Workspace_default3 = Workspace_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=script
  var import_vue29 = __require("vue");
  var import_vue30 = __require("vue");
  var import_element_plus2 = __require("element-plus");
  var Member_default = /* @__PURE__ */ (0, import_vue29.defineComponent)({
    __name: "Member",
    props: {
      organization: { type: String, required: true },
      permissions: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const memberList = (0, import_vue30.ref)([]);
      const loading = (0, import_vue30.ref)(false);
      const tt2 = __;
      (0, import_vue30.watch)(() => props.organization, () => {
        getMembers();
      }, { immediate: true });
      async function getMembers() {
        if (!props.organization) {
          return;
        }
        loading.value = true;
        const res = await frappe.call({
          method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_members",
          args: {
            organization_name: props.organization
          }
        });
        memberList.value = (res == null ? void 0 : res.message) || [];
        loading.value = false;
      }
      function createMember() {
        const newDoc = frappe.model.make_new_doc_and_get_name("Tianjy Organization Member");
        frappe.model.set_value("Tianjy Organization Member", newDoc, "organization", props.organization);
        frappe.set_route(["form", "Tianjy Organization Member", newDoc]);
      }
      function editMember(member) {
        frappe.set_route(["form", "Tianjy Organization Member", member.name]);
      }
      function deleteMember(member) {
        import_element_plus2.ElMessageBox.confirm(
          "\u60A8\u786E\u8BA4\u5220\u9664\u6B64\u4EBA\u5458\u5417?",
          "\u8BF7\u786E\u8BA4",
          {
            confirmButtonText: "\u786E\u5B9A",
            cancelButtonText: "\u53D6\u6D88",
            type: "warning"
          }
        ).then(async () => {
          loading.value = true;
          await frappe.db.delete_doc("Tianjy Organization Member", member.name);
          getMembers();
          (0, import_element_plus2.ElMessage)({
            type: "success",
            message: "\u5220\u9664\u6210\u529F"
          });
        }).catch(() => {
          (0, import_element_plus2.ElMessage)({
            type: "info",
            message: "\u53D6\u6D88\u5220\u9664"
          });
        });
      }
      frappe.socketio.doctype_subscribe("Tianjy Organization Member");
      frappe.realtime.on("list_update", (p) => {
        if (p.doctype !== "Tianjy Organization Member" && p.doctype !== "Tianjy Organization Role") {
          return;
        }
        getMembers();
      });
      const popstateListener = function(event) {
        getMembers();
      };
      (0, import_vue30.onMounted)(() => {
        window.addEventListener("popstate", popstateListener);
      });
      (0, import_vue30.onUnmounted)(() => {
        window.removeEventListener("popstate", popstateListener);
      });
      const __returned__ = { props, memberList, loading, tt: tt2, getMembers, createMember, editMember, deleteMember, popstateListener };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=style&index=0
  var Member_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue?type=template
  var import_vue31 = __require("vue");
  var _hoisted_113 = { class: "member" };
  var _hoisted_27 = { class: "btn-container" };
  function render10(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ElButton = (0, import_vue31.resolveComponent)("ElButton");
    const _component_el_table_column = (0, import_vue31.resolveComponent)("el-table-column");
    const _component_el_table = (0, import_vue31.resolveComponent)("el-table");
    const _directive_loading = (0, import_vue31.resolveDirective)("loading");
    return (0, import_vue31.withDirectives)(((0, import_vue31.openBlock)(), (0, import_vue31.createElementBlock)("div", _hoisted_113, [
      (0, import_vue31.createElementVNode)("div", _hoisted_27, [
        $props.permissions.createPermission ? ((0, import_vue31.openBlock)(), (0, import_vue31.createBlock)(_component_ElButton, {
          key: 0,
          type: "primary",
          onClick: $setup.createMember
        }, {
          default: (0, import_vue31.withCtx)(() => [
            (0, import_vue31.createTextVNode)("\u65B0\u589E\u4EBA\u5458")
          ]),
          _: 1
        })) : (0, import_vue31.createCommentVNode)("v-if", true)
      ]),
      (0, import_vue31.createVNode)(_component_el_table, {
        data: $setup.memberList,
        border: "",
        style: { "width": "100%" },
        height: "100%"
      }, {
        default: (0, import_vue31.withCtx)(() => [
          (0, import_vue31.createVNode)(_component_el_table_column, {
            fixed: "",
            prop: "user_doc.full_name",
            label: "\u7528\u6237",
            width: "180"
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "role",
            label: "\u89D2\u8272"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createElementVNode)("span", null, (0, import_vue31.toDisplayString)(scope.row.roles.map((i) => $setup.tt(i.role)).join(",")), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "visible",
            label: "\u53EF\u89C1",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.visible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "viewable",
            label: "\u53EF\u67E5\u770B",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.viewable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "addible",
            label: "\u53EF\u6DFB\u52A0",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.addible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "editable",
            label: "\u53EF\u7F16\u8F91",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.editable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "deletable",
            label: "\u53EF\u5220\u9664",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.deletable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue31.createVNode)(_component_el_table_column, {
            prop: "manageable",
            label: "\u53EF\u7BA1\u7406",
            width: "60"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              (0, import_vue31.createTextVNode)((0, import_vue31.toDisplayString)(scope.row.manageable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          $props.permissions.writePermission || $props.permissions.deletePermission ? ((0, import_vue31.openBlock)(), (0, import_vue31.createBlock)(_component_el_table_column, {
            key: 0,
            prop: "address",
            label: "\u64CD\u4F5C",
            width: "130"
          }, {
            default: (0, import_vue31.withCtx)((scope) => [
              $props.permissions.writePermission ? ((0, import_vue31.openBlock)(), (0, import_vue31.createBlock)(_component_ElButton, {
                key: 0,
                type: "primary",
                onClick: ($event) => $setup.editMember(scope.row)
              }, {
                default: (0, import_vue31.withCtx)(() => [
                  (0, import_vue31.createTextVNode)("\u7F16\u8F91")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue31.createCommentVNode)("v-if", true),
              $props.permissions.deletePermission ? ((0, import_vue31.openBlock)(), (0, import_vue31.createBlock)(_component_ElButton, {
                key: 1,
                type: "danger",
                onClick: ($event) => $setup.deleteMember(scope.row)
              }, {
                default: (0, import_vue31.withCtx)(() => [
                  (0, import_vue31.createTextVNode)("\u5220\u9664")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue31.createCommentVNode)("v-if", true)
            ]),
            _: 1
          })) : (0, import_vue31.createCommentVNode)("v-if", true)
        ]),
        _: 1
      }, 8, ["data"])
    ])), [
      [_directive_loading, $setup.loading]
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue
  Member_default2(Member_default);
  Member_default.render = render10;
  Member_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Member.vue";
  Member_default.__scopeId = "data-v-b487dc22";
  var Member_default3 = Member_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue?type=script
  var import_vue32 = __require("vue");
  var import_vue33 = __require("vue");
  var import_element_plus3 = __require("element-plus");
  var Inherit_default = /* @__PURE__ */ (0, import_vue32.defineComponent)({
    __name: "Inherit",
    props: {
      organization: { type: String, required: true },
      permissions: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const inheritList = (0, import_vue33.ref)([]);
      const loading = (0, import_vue33.ref)(false);
      (0, import_vue33.watch)(() => props.organization, () => {
        getInherits();
      }, { immediate: true });
      async function getInherits() {
        if (!props.organization) {
          return;
        }
        loading.value = true;
        const res = await frappe.call({
          method: "tianjy_organization.tianjy_organization.page.tianjy_organization_config.tianjy_organization_config.get_inherit",
          args: {
            organization_name: props.organization
          }
        });
        inheritList.value = (res == null ? void 0 : res.message) || [];
        loading.value = false;
      }
      function createInherit() {
        const newDoc = frappe.model.make_new_doc_and_get_name("Tianjy Organization Inheritable");
        frappe.model.set_value("Tianjy Organization Inheritable", newDoc, "organization", props.organization);
        frappe.set_route(["form", "Tianjy Organization Inheritable", newDoc]);
      }
      function editInherit(inheritOrganization) {
        frappe.set_route(["form", "Tianjy Organization Inheritable", inheritOrganization.name]);
      }
      function deleteInherit(inheritOrganization) {
        import_element_plus3.ElMessageBox.confirm(
          "\u60A8\u786E\u8BA4\u5220\u9664\u6B64\u4EBA\u5458\u5417?",
          "\u8BF7\u786E\u8BA4",
          {
            confirmButtonText: "\u786E\u5B9A",
            cancelButtonText: "\u53D6\u6D88",
            type: "warning"
          }
        ).then(async () => {
          loading.value = true;
          await frappe.db.delete_doc("Tianjy Organization Inheritable", inheritOrganization.name);
          getInherits();
          (0, import_element_plus3.ElMessage)({
            type: "success",
            message: "\u5220\u9664\u6210\u529F"
          });
        }).catch(() => {
          (0, import_element_plus3.ElMessage)({
            type: "info",
            message: "\u53D6\u6D88\u5220\u9664"
          });
        });
      }
      frappe.socketio.doctype_subscribe("Tianjy Organization Inheritable");
      frappe.realtime.on("list_update", (p) => {
        if (p.doctype !== "Tianjy Organization Inheritable") {
          return;
        }
        getInherits();
      });
      const __returned__ = { props, inheritList, loading, getInherits, createInherit, editInherit, deleteInherit };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue?type=style&index=0
  var Inherit_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue?type=template
  var import_vue34 = __require("vue");
  var _hoisted_114 = { class: "inheritable-organization" };
  var _hoisted_28 = { class: "btn-container" };
  function render11(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ElButton = (0, import_vue34.resolveComponent)("ElButton");
    const _component_el_table_column = (0, import_vue34.resolveComponent)("el-table-column");
    const _component_el_table = (0, import_vue34.resolveComponent)("el-table");
    const _directive_loading = (0, import_vue34.resolveDirective)("loading");
    return (0, import_vue34.withDirectives)(((0, import_vue34.openBlock)(), (0, import_vue34.createElementBlock)("div", _hoisted_114, [
      (0, import_vue34.createElementVNode)("div", _hoisted_28, [
        $props.permissions.createPermission ? ((0, import_vue34.openBlock)(), (0, import_vue34.createBlock)(_component_ElButton, {
          key: 0,
          type: "primary",
          onClick: $setup.createInherit
        }, {
          default: (0, import_vue34.withCtx)(() => [
            (0, import_vue34.createTextVNode)("\u7EE7\u627F\u7EC4\u7EC7")
          ]),
          _: 1
        })) : (0, import_vue34.createCommentVNode)("v-if", true)
      ]),
      (0, import_vue34.createVNode)(_component_el_table, {
        data: $setup.inheritList,
        border: "",
        style: { "width": "100%" },
        height: "100%"
      }, {
        default: (0, import_vue34.withCtx)(() => [
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "inherit_from_organization_doc.label",
            label: "\u7EE7\u627F\u81EA"
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "visible",
            label: "\u53EF\u89C1",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.visible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "viewable",
            label: "\u53EF\u67E5\u770B",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.viewable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "addible",
            label: "\u53EF\u6DFB\u52A0",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.addible ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "editable",
            label: "\u53EF\u7F16\u8F91",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.editable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "deletable",
            label: "\u53EF\u5220\u9664",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.deletable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          (0, import_vue34.createVNode)(_component_el_table_column, {
            prop: "manageable",
            label: "\u53EF\u7BA1\u7406",
            width: "60"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              (0, import_vue34.createTextVNode)((0, import_vue34.toDisplayString)(scope.row.manageable ? "\u662F" : "\u5426"), 1)
            ]),
            _: 1
          }),
          $props.permissions.writePermission || $props.permissions.deletePermission ? ((0, import_vue34.openBlock)(), (0, import_vue34.createBlock)(_component_el_table_column, {
            key: 0,
            prop: "address",
            label: "\u64CD\u4F5C",
            width: "130"
          }, {
            default: (0, import_vue34.withCtx)((scope) => [
              $props.permissions.writePermission ? ((0, import_vue34.openBlock)(), (0, import_vue34.createBlock)(_component_ElButton, {
                key: 0,
                type: "primary",
                onClick: ($event) => $setup.editInherit(scope.row)
              }, {
                default: (0, import_vue34.withCtx)(() => [
                  (0, import_vue34.createTextVNode)("\u7F16\u8F91")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue34.createCommentVNode)("v-if", true),
              $props.permissions.deletePermission ? ((0, import_vue34.openBlock)(), (0, import_vue34.createBlock)(_component_ElButton, {
                key: 1,
                type: "danger",
                onClick: ($event) => $setup.deleteInherit(scope.row)
              }, {
                default: (0, import_vue34.withCtx)(() => [
                  (0, import_vue34.createTextVNode)("\u5220\u9664")
                ]),
                _: 2
              }, 1032, ["onClick"])) : (0, import_vue34.createCommentVNode)("v-if", true)
            ]),
            _: 1
          })) : (0, import_vue34.createCommentVNode)("v-if", true)
        ]),
        _: 1
      }, 8, ["data"])
    ])), [
      [_directive_loading, $setup.loading]
    ]);
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue
  Inherit_default2(Inherit_default);
  Inherit_default.render = render11;
  Inherit_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/components/Inherit.vue";
  Inherit_default.__scopeId = "data-v-4e2c9cb6";
  var Inherit_default3 = Inherit_default;

  // sfc-script:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=script
  var tianjy_organization_config_default = /* @__PURE__ */ (0, import_vue35.defineComponent)({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const organization = (0, import_vue36.ref)();
      const activeName = (0, import_vue36.ref)("info");
      const organizationMeta = (0, import_vue36.ref)();
      const memberMeta = (0, import_vue36.ref)();
      const inheritMeta = (0, import_vue36.ref)();
      (0, import_vue36.onMounted)(async () => {
        organizationMeta.value = await getMeta("Tianjy Organization");
        memberMeta.value = await getMeta("Tianjy Organization Member");
        inheritMeta.value = await getMeta("Tianjy Organization Inheritable");
      });
      async function getMeta(doctype) {
        let local_meta = frappe.get_meta(doctype);
        if (local_meta) {
          return local_meta;
        }
        await frappe.model.with_doctype(doctype);
        return frappe.get_meta(doctype) || void 0;
      }
      function getPermission(meta) {
        if (!meta) {
          return { deletePermission: false, createPermission: false, writePermission: false };
        }
        const deletePermission = frappe.perm.has_perm(meta.name, 0, "delete");
        const createPermission = frappe.perm.has_perm(meta.name, 0, "create");
        const writePermission = frappe.perm.has_perm(meta.name, 0, "write");
        return { deletePermission, createPermission, writePermission };
      }
      const organizationPermissions = (0, import_vue36.computed)(() => getPermission(organizationMeta.value));
      const memberPermissions = (0, import_vue36.computed)(() => getPermission(memberMeta.value));
      const inheritPermissions = (0, import_vue36.computed)(() => getPermission(inheritMeta.value));
      const __returned__ = { organization, activeName, organizationMeta, memberMeta, inheritMeta, getMeta, getPermission, organizationPermissions, memberPermissions, inheritPermissions, Page: page_default3, OrganizationTree: OrganizationTree_default3, FormDetail: Detail_default3, Workspace: Workspace_default3, Member: Member_default3, Inherit: Inherit_default3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=style&index=0
  var tianjy_organization_config_default2 = () => {
  };

  // sfc-template:/Users/px/Code/frappe-bench/apps/tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue?type=template
  var import_vue37 = __require("vue");
  var _withScopeId3 = (n) => ((0, import_vue37.pushScopeId)("data-v-cb280acd"), n = n(), (0, import_vue37.popScopeId)(), n);
  var _hoisted_115 = /* @__PURE__ */ _withScopeId3(() => /* @__PURE__ */ (0, import_vue37.createElementVNode)("h3", { class: "title" }, "\u7EC4\u7EC7\u8BBE\u7F6E", -1));
  function render12(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_tab_pane = (0, import_vue37.resolveComponent)("el-tab-pane");
    const _component_el_tabs = (0, import_vue37.resolveComponent)("el-tabs");
    return (0, import_vue37.openBlock)(), (0, import_vue37.createBlock)($setup["Page"], null, {
      title: (0, import_vue37.withCtx)(() => [
        _hoisted_115
      ]),
      sider: (0, import_vue37.withCtx)(() => [
        (0, import_vue37.createVNode)($setup["OrganizationTree"], {
          modelValue: $setup.organization,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.organization = $event),
          permissions: $setup.organizationPermissions
        }, null, 8, ["modelValue", "permissions"])
      ]),
      default: (0, import_vue37.withCtx)(() => [
        (0, import_vue37.createVNode)(_component_el_tabs, {
          modelValue: $setup.activeName,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.activeName = $event),
          class: "organization-tabs"
        }, {
          default: (0, import_vue37.withCtx)(() => {
            var _a;
            return [
              (0, import_vue37.createVNode)(_component_el_tab_pane, {
                class: "tab-container",
                label: "\u57FA\u672C\u4FE1\u606F",
                name: "info"
              }, {
                default: (0, import_vue37.withCtx)(() => {
                  var _a2;
                  return [
                    (0, import_vue37.createVNode)($setup["FormDetail"], {
                      name: (_a2 = $setup.organization) == null ? void 0 : _a2.name,
                      doctype: "Tianjy Organization"
                    }, null, 8, ["name"])
                  ];
                }),
                _: 1
              }),
              ((_a = $setup.organization) == null ? void 0 : _a.type_doc.no_workspace) === 0 ? ((0, import_vue37.openBlock)(), (0, import_vue37.createBlock)(_component_el_tab_pane, {
                key: 0,
                class: "tab-container",
                label: "\u5DE5\u4F5C\u533A",
                name: "workspace"
              }, {
                default: (0, import_vue37.withCtx)(() => [
                  $setup.organization ? ((0, import_vue37.openBlock)(), (0, import_vue37.createBlock)($setup["Workspace"], {
                    key: 0,
                    organization: $setup.organization.name
                  }, null, 8, ["organization"])) : (0, import_vue37.createCommentVNode)("v-if", true)
                ]),
                _: 1
              })) : (0, import_vue37.createCommentVNode)("v-if", true),
              (0, import_vue37.createVNode)(_component_el_tab_pane, {
                class: "tab-container",
                label: "\u6210\u5458",
                name: "users"
              }, {
                default: (0, import_vue37.withCtx)(() => [
                  $setup.organization ? ((0, import_vue37.openBlock)(), (0, import_vue37.createBlock)($setup["Member"], {
                    key: 0,
                    organization: $setup.organization.name,
                    permissions: $setup.memberPermissions
                  }, null, 8, ["organization", "permissions"])) : (0, import_vue37.createCommentVNode)("v-if", true)
                ]),
                _: 1
              }),
              (0, import_vue37.createVNode)(_component_el_tab_pane, {
                class: "tab-container",
                label: "\u7EE7\u627F",
                name: "inherit"
              }, {
                default: (0, import_vue37.withCtx)(() => [
                  $setup.organization ? ((0, import_vue37.openBlock)(), (0, import_vue37.createBlock)($setup["Inherit"], {
                    key: 0,
                    organization: $setup.organization.name,
                    permissions: $setup.inheritPermissions
                  }, null, 8, ["organization", "permissions"])) : (0, import_vue37.createCommentVNode)("v-if", true)
                ]),
                _: 1
              })
            ];
          }),
          _: 1
        }, 8, ["modelValue"])
      ]),
      _: 1
    });
  }

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue
  tianjy_organization_config_default2(tianjy_organization_config_default);
  tianjy_organization_config_default.render = render12;
  tianjy_organization_config_default.__file = "../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.vue";
  tianjy_organization_config_default.__scopeId = "data-v-cb280acd";
  var tianjy_organization_config_default3 = tianjy_organization_config_default;

  // ../tianjy_organization/tianjy_organization/tianjy_organization/page/tianjy_organization_config/tianjy_organization_config/index.ts
  var import_element_plus4 = __toESM(__require("element-plus"));
  var import_zh_cn = __toESM(__require("element-plus/dist/locale/zh-cn"));
  frappe.pages["tianjy_organization_config"].on_page_load = function(wrapper) {
    var page = frappe.ui.make_app_page({
      parent: wrapper,
      title: "\u7EC4\u7EC7\u914D\u7F6E",
      single_column: true
    });
    const app = (0, import_vue38.createApp)(tianjy_organization_config_default3, {});
    app.use((app2) => {
      app2.config.globalProperties.$page = page;
    });
    app.use(import_element_plus4.default, { size: "small", locale: import_zh_cn.default });
    app.mount(page.parent);
  };
})();
/*!
 * CodeX.Tooltips
 * 
 * @version 1.0.5
 * 
 * @licence MIT
 * @author CodeX <https://codex.so>
 * 
 * 
 */
/*!
 * Library for handling keyboard shortcuts
 * @copyright CodeX (https://codex.so)
 * @license MIT
 * @author CodeX (https://codex.so)
 * @version 1.2.0
 */
/**
 * Base Paragraph Block for the Editor.js.
 * Represents simple paragraph
 *
 * @author CodeX (team@codex.so)
 * @copyright CodeX 2018
 * @license The MIT License (MIT)
 */
/**
 * Editor.js
 *
 * @license Apache-2.0
 * @see Editor.js <https://editorjs.io>
 * @author CodeX Team <https://codex.so>
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vZnJhcHBlL25vZGVfbW9kdWxlcy9lZGl0b3Jqcy11bmRvL2Rpc3QvYnVuZGxlLmpzIiwgInRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2luZGV4LnRzIiwgIi4uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvaW5kZXgudnVlIiwgIi4uL2d1aWd1X3BtL2d1aWd1X3BtL3B1YmxpYy9qcy9jb21wb25lbnRzL3BhZ2UvaW5kZXgudnVlIiwgIi4uLy4uLy4uLy4uLy4uL2d1aWd1X3BtL2d1aWd1X3BtL3B1YmxpYy9qcy9jb21wb25lbnRzL3BhZ2UvdXNlTWV0YVF1ZXJ5LnRzIiwgIi4uL2d1aWd1X3BtL2d1aWd1X3BtL3B1YmxpYy9qcy9jb21wb25lbnRzL3BhZ2UvVG9nZ2xlQnRuLnZ1ZSIsICJzZmMtc3R5bGU6L1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvZ3VpZ3VfcG0vZ3VpZ3VfcG0vcHVibGljL2pzL2NvbXBvbmVudHMvcGFnZS9Ub2dnbGVCdG4udnVlP3R5cGU9c3R5bGUmaW5kZXg9MCIsICJzZmMtdGVtcGxhdGU6L1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvZ3VpZ3VfcG0vZ3VpZ3VfcG0vcHVibGljL2pzL2NvbXBvbmVudHMvcGFnZS9Ub2dnbGVCdG4udnVlP3R5cGU9dGVtcGxhdGUiLCAiLi4vLi4vLi4vLi4vLi4vZ3VpZ3VfcG0vZ3VpZ3VfcG0vcHVibGljL2pzL2NvbXBvbmVudHMvcGFnZS9Ub2dnbGVCdG4udnVlIiwgInNmYy1zdHlsZTovVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndV9wbS9ndWlndV9wbS9wdWJsaWMvanMvY29tcG9uZW50cy9wYWdlL2luZGV4LnZ1ZT90eXBlPXN0eWxlJmluZGV4PTAiLCAic2ZjLXRlbXBsYXRlOi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL2d1aWd1X3BtL2d1aWd1X3BtL3B1YmxpYy9qcy9jb21wb25lbnRzL3BhZ2UvaW5kZXgudnVlP3R5cGU9dGVtcGxhdGUiLCAiLi4vLi4vLi4vLi4vLi4vZ3VpZ3VfcG0vZ3VpZ3VfcG0vcHVibGljL2pzL2NvbXBvbmVudHMvcGFnZS9pbmRleC52dWUiLCAiLi4vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL09yZ2FuaXphdGlvblRyZWUudnVlIiwgInRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2hlbHBlci50cyIsICIuLi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvVHJlZUl0ZW0udnVlIiwgInNmYy1zdHlsZTovVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvVHJlZUl0ZW0udnVlP3R5cGU9c3R5bGUmaW5kZXg9MCIsICJzZmMtdGVtcGxhdGU6L1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL1RyZWVJdGVtLnZ1ZT90eXBlPXRlbXBsYXRlIiwgInRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvVHJlZUl0ZW0udnVlIiwgInNmYy1zdHlsZTovVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvT3JnYW5pemF0aW9uVHJlZS52dWU/dHlwZT1zdHlsZSZpbmRleD0wIiwgInNmYy10ZW1wbGF0ZTovVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvT3JnYW5pemF0aW9uVHJlZS52dWU/dHlwZT10ZW1wbGF0ZSIsICJ0aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL09yZ2FuaXphdGlvblRyZWUudnVlIiwgIi4uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9EZXRhaWwudnVlIiwgImd1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL2luZGV4LnZ1ZSIsICIuLi8uLi8uLi8uLi8uLi9ndWlndS9ndWlndS9wdWJsaWMvanMvdXRpbHMvZ2V0TGluay50cyIsICJndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9NYWluLnZ1ZSIsICJndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9IZWFkZXIudnVlIiwgInNmYy1zdHlsZTovVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndS9ndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9IZWFkZXIudnVlP3R5cGU9c3R5bGUmaW5kZXg9MCIsICJzZmMtdGVtcGxhdGU6L1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvSGVhZGVyLnZ1ZT90eXBlPXRlbXBsYXRlIiwgIi4uLy4uLy4uLy4uLy4uL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL0hlYWRlci52dWUiLCAiLi4vLi4vLi4vLi4vLi4vZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvRm9vdGVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL1BhZ2UudHMiLCAiLi4vLi4vLi4vLi4vLi4vZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvVG9vbGJhci50cyIsICIuLi8uLi8uLi8uLi8uLi9ndWlndS9ndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC91bmRvX21hbmFnZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvTGF5b3V0L1NlY3Rpb24udHMiLCAiLi4vLi4vLi4vLi4vLi4vZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvTGF5b3V0L1RhYi50cyIsICIuLi8uLi8uLi8uLi8uLi9ndWlndS9ndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9MYXlvdXQvQ29sdW1uLnRzIiwgIi4uLy4uLy4uLy4uLy4uL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL0xheW91dC9pbmRleC50cyIsICIuLi8uLi8uLi8uLi8uLi9ndWlndS9ndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9Gb3JtLnRzIiwgIi4uLy4uLy4uLy4uLy4uL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL2xvYWREb2MudHMiLCAiLi4vLi4vLi4vLi4vLi4vZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvdXNlU3RvcmUudHMiLCAic2ZjLXRlbXBsYXRlOi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL01haW4udnVlP3R5cGU9dGVtcGxhdGUiLCAiLi4vLi4vLi4vLi4vLi4vZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvTWFpbi52dWUiLCAic2ZjLXRlbXBsYXRlOi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL2luZGV4LnZ1ZT90eXBlPXRlbXBsYXRlIiwgIi4uLy4uLy4uLy4uLy4uL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL2luZGV4LnZ1ZSIsICJzZmMtc3R5bGU6L1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL0RldGFpbC52dWU/dHlwZT1zdHlsZSZpbmRleD0wIiwgInNmYy10ZW1wbGF0ZTovVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvRGV0YWlsLnZ1ZT90eXBlPXRlbXBsYXRlIiwgInRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvRGV0YWlsLnZ1ZSIsICIuLi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvV29ya3NwYWNlLnZ1ZSIsICIuLi8uLi8uLi8uLi8uLi9mcmFwcGUvbm9kZV9tb2R1bGVzL0BlZGl0b3Jqcy9lZGl0b3Jqcy9kaXN0L2VkaXRvcmpzLm1qcyIsICJ0aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL3dvcmtzcGFjZS5qcyIsICJzZmMtc3R5bGU6L1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL1dvcmtzcGFjZS52dWU/dHlwZT1zdHlsZSZpbmRleD0wIiwgInNmYy10ZW1wbGF0ZTovVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvV29ya3NwYWNlLnZ1ZT90eXBlPXRlbXBsYXRlIiwgInRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvV29ya3NwYWNlLnZ1ZSIsICIuLi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvTWVtYmVyLnZ1ZSIsICJzZmMtc3R5bGU6L1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL01lbWJlci52dWU/dHlwZT1zdHlsZSZpbmRleD0wIiwgInNmYy10ZW1wbGF0ZTovVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvTWVtYmVyLnZ1ZT90eXBlPXRlbXBsYXRlIiwgInRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvTWVtYmVyLnZ1ZSIsICIuLi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvSW5oZXJpdC52dWUiLCAic2ZjLXN0eWxlOi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Jbmhlcml0LnZ1ZT90eXBlPXN0eWxlJmluZGV4PTAiLCAic2ZjLXRlbXBsYXRlOi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Jbmhlcml0LnZ1ZT90eXBlPXRlbXBsYXRlIiwgInRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvSW5oZXJpdC52dWUiLCAic2ZjLXN0eWxlOi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvaW5kZXgudnVlP3R5cGU9c3R5bGUmaW5kZXg9MCIsICJzZmMtdGVtcGxhdGU6L1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9pbmRleC52dWU/dHlwZT10ZW1wbGF0ZSIsICJ0aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9pbmRleC52dWUiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuVW5kbz1lKCk6dC5VbmRvPWUoKX0od2luZG93LChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgZT17fTtmdW5jdGlvbiBuKGkpe2lmKGVbaV0pcmV0dXJuIGVbaV0uZXhwb3J0czt2YXIgbz1lW2ldPXtpOmksbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtpXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxuKSxvLmw9ITAsby5leHBvcnRzfXJldHVybiBuLm09dCxuLmM9ZSxuLmQ9ZnVuY3Rpb24odCxlLGkpe24ubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDppfSl9LG4ucj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PW4odCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIGk9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIoaSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGksXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpZm9yKHZhciBvIGluIHQpbi5kKGksbyxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLG8pKTtyZXR1cm4gaX0sbi5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBuLmQoZSxcImFcIixlKSxlfSxuLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LG4ucD1cIi9cIixuKG4ucz0wKX0oW2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWVbbl07aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX1uLnIoZSksbi5kKGUsXCJkZWZhdWx0XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHN9KSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsbil7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSx0aGlzLmhvbGRlcj1cInN0cmluZ1wiPT10eXBlb2Ygbj9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChuKTpuLHRoaXMub2JzZXJ2ZXI9bnVsbCx0aGlzLmRlYm91bmNlVGltZXI9MjAwLHRoaXMubXV0YXRpb25EZWJvdW5jZXI9dGhpcy5kZWJvdW5jZSgoZnVuY3Rpb24oKXtlKCl9KSx0aGlzLmRlYm91bmNlVGltZXIpfXZhciBlLG4sbztyZXR1cm4gZT10LChuPVt7a2V5Olwic2V0TXV0YXRpb25PYnNlcnZlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuaG9sZGVyO3RoaXMub2JzZXJ2ZXI9bmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGZ1bmN0aW9uKGUpe3QubXV0YXRpb25IYW5kbGVyKGUpfSkpLHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShlLHtjaGlsZExpc3Q6ITAsYXR0cmlidXRlczohMCxzdWJ0cmVlOiEwLGNoYXJhY3RlckRhdGE6ITAsY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiEwfSl9fSx7a2V5OlwibXV0YXRpb25IYW5kbGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPSExO3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7c3dpdGNoKHQudHlwZSl7Y2FzZVwiY2hpbGRMaXN0XCI6dC50YXJnZXQ9PT1lLmhvbGRlcj9lLm9uRGVzdHJveSgpOm49ITA7YnJlYWs7Y2FzZVwiY2hhcmFjdGVyRGF0YVwiOm49ITA7YnJlYWs7Y2FzZVwiYXR0cmlidXRlc1wiOnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImNlLWJsb2NrXCIpfHwobj0hMCl9fSkpLG4mJnRoaXMubXV0YXRpb25EZWJvdW5jZXIoKX19LHtrZXk6XCJkZWJvdW5jZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG4saT10aGlzO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgbz1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KG8pLHM9MDtzPG87cysrKXJbc109YXJndW1lbnRzW3NdO3ZhciBhPWk7Y2xlYXJUaW1lb3V0KG4pLG49c2V0VGltZW91dCgoZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShhLHIpfSksZSl9fX0se2tleTpcIm9uRGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IEN1c3RvbUV2ZW50KFwiZGVzdHJveVwiKTtkb2N1bWVudC5kaXNwYXRjaEV2ZW50KHQpLHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpfX1dKSYmaShlLnByb3RvdHlwZSxuKSxvJiZpKGUsbyksdH0oKTtmdW5jdGlvbiByKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWVbbl07aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX12YXIgcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIG49dGhpcyxpPWUuZWRpdG9yLHI9ZS5vblVwZGF0ZSxzPWUubWF4TGVuZ3RoOyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIGE9e21heExlbmd0aDozMCxvblVwZGF0ZTpmdW5jdGlvbigpe319LHU9aS5jb25maWd1cmF0aW9uO3RoaXMuZWRpdG9yPWksdGhpcy5zaG91bGRTYXZlSGlzdG9yeT0hMCx0aGlzLnJlYWRPbmx5PXUucmVhZE9ubHksdGhpcy5tYXhMZW5ndGg9c3x8YS5tYXhMZW5ndGgsdGhpcy5vblVwZGF0ZT1yfHxhLm9uVXBkYXRlLG5ldyBvKChmdW5jdGlvbigpe3JldHVybiBuLnJlZ2lzdGVyQ2hhbmdlKCl9KSx1LmhvbGRlcikuc2V0TXV0YXRpb25PYnNlcnZlcigpLHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKSx0aGlzLmluaXRpYWxJdGVtPW51bGwsdGhpcy5jbGVhcigpfXZhciBlLG4saTtyZXR1cm4gZT10LGk9W3trZXk6XCJpc1JlYWRPbmx5U3VwcG9ydGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fV0sKG49W3trZXk6XCJ0cnVuY2F0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7Zm9yKDt0Lmxlbmd0aD5lOyl0LnNoaWZ0KCl9fSx7a2V5OlwiaW5pdGlhbGl6ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVwiYmxvY2tzXCJpbiB0P3QuYmxvY2tzOnQsbj17aW5kZXg6ZS5sZW5ndGgtMSxzdGF0ZTplfTt0aGlzLnN0YWNrWzBdPW4sdGhpcy5pbml0aWFsSXRlbT1ufX0se2tleTpcImNsZWFyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnN0YWNrPXRoaXMuaW5pdGlhbEl0ZW0/W3RoaXMuaW5pdGlhbEl0ZW1dOlt7aW5kZXg6MCxzdGF0ZTpbXX1dLHRoaXMucG9zaXRpb249MCx0aGlzLm9uVXBkYXRlKCl9fSx7a2V5OlwicmVnaXN0ZXJDaGFuZ2VcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5yZWFkT25seXx8KHRoaXMuZWRpdG9yJiZ0aGlzLmVkaXRvci5zYXZlJiZ0aGlzLnNob3VsZFNhdmVIaXN0b3J5JiZ0aGlzLmVkaXRvci5zYXZlKCkudGhlbigoZnVuY3Rpb24oZSl7dC5lZGl0b3JEaWRVcGRhdGUoZS5ibG9ja3MpJiZ0LnNhdmUoZS5ibG9ja3MpfSkpLHRoaXMuc2hvdWxkU2F2ZUhpc3Rvcnk9ITApfX0se2tleTpcImVkaXRvckRpZFVwZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuc3RhY2tbdGhpcy5wb3NpdGlvbl0uc3RhdGU7cmV0dXJuIHQubGVuZ3RoIT09ZS5sZW5ndGh8fEpTT04uc3RyaW5naWZ5KGUpIT09SlNPTi5zdHJpbmdpZnkodCl9fSx7a2V5Olwic2F2ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMucG9zaXRpb24+PXRoaXMubWF4TGVuZ3RoJiZ0aGlzLnRydW5jYXRlKHRoaXMuc3RhY2ssdGhpcy5tYXhMZW5ndGgpLHRoaXMucG9zaXRpb249TWF0aC5taW4odGhpcy5wb3NpdGlvbix0aGlzLnN0YWNrLmxlbmd0aC0xKSx0aGlzLnN0YWNrPXRoaXMuc3RhY2suc2xpY2UoMCx0aGlzLnBvc2l0aW9uKzEpO3ZhciBlPXRoaXMuZWRpdG9yLmJsb2Nrcy5nZXRDdXJyZW50QmxvY2tJbmRleCgpO3RoaXMuc3RhY2sucHVzaCh7aW5kZXg6ZSxzdGF0ZTp0fSksdGhpcy5wb3NpdGlvbis9MSx0aGlzLm9uVXBkYXRlKCl9fSx7a2V5OlwidW5kb1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZih0aGlzLmNhblVuZG8oKSl7dGhpcy5zaG91bGRTYXZlSGlzdG9yeT0hMTt2YXIgZT10aGlzLnN0YWNrW3RoaXMucG9zaXRpb24tPTFdLG49ZS5pbmRleCxpPWUuc3RhdGU7dGhpcy5vblVwZGF0ZSgpLHRoaXMuZWRpdG9yLmJsb2Nrcy5yZW5kZXIoe2Jsb2NrczppfSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gdC5lZGl0b3IuY2FyZXQuc2V0VG9CbG9jayhuLFwiZW5kXCIpfSkpfX19LHtrZXk6XCJyZWRvXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHRoaXMuY2FuUmVkbygpKXt0aGlzLnNob3VsZFNhdmVIaXN0b3J5PSExO3ZhciBlPXRoaXMuc3RhY2tbdGhpcy5wb3NpdGlvbis9MV0sbj1lLmluZGV4LGk9ZS5zdGF0ZTt0aGlzLm9uVXBkYXRlKCksdGhpcy5lZGl0b3IuYmxvY2tzLnJlbmRlcih7YmxvY2tzOml9KS50aGVuKChmdW5jdGlvbigpe3JldHVybiB0LmVkaXRvci5jYXJldC5zZXRUb0Jsb2NrKG4sXCJlbmRcIil9KSl9fX0se2tleTpcImNhblVuZG9cIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiF0aGlzLnJlYWRPbmx5JiZ0aGlzLnBvc2l0aW9uPjB9fSx7a2V5OlwiY2FuUmVkb1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMucmVhZE9ubHkmJnRoaXMucG9zaXRpb248dGhpcy5jb3VudCgpfX0se2tleTpcImNvdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFjay5sZW5ndGgtMX19LHtrZXk6XCJzZXRFdmVudExpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPS8oTWFjKS9pLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKT9cIm1ldGFLZXlcIjpcImN0cmxLZXlcIixuPWZ1bmN0aW9uKG4pe25bZV0mJlwielwiPT09bi5rZXkmJihuLnByZXZlbnREZWZhdWx0KCksdC51bmRvKCkpfSxpPWZ1bmN0aW9uKG4pe25bZV0mJlwieVwiPT09bi5rZXkmJihuLnByZXZlbnREZWZhdWx0KCksdC5yZWRvKCkpfTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLG4pLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsaSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRlc3Ryb3lcIiwoZnVuY3Rpb24oKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLG4pLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsaSl9KSl9fV0pJiZyKGUucHJvdG90eXBlLG4pLGkmJnIoZSxpKSx0fSgpfV0pLmRlZmF1bHR9KSk7IiwgImltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgT3JnYW5pemF0aW9uQ29uZmlnIGZyb20gJy4vaW5kZXgudnVlJztcbmltcG9ydCBFbGVtZW50UGx1cyBmcm9tICdlbGVtZW50LXBsdXMnO1xuaW1wb3J0IHpoQ24gZnJvbSAnZWxlbWVudC1wbHVzL2Rpc3QvbG9jYWxlL3poLWNuJztcblxuZnJhcHBlLnBhZ2VzWyd0aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZyddLm9uX3BhZ2VfbG9hZCA9IGZ1bmN0aW9uKHdyYXBwZXIpIHtcblx0dmFyIHBhZ2UgPSBmcmFwcGUudWkubWFrZV9hcHBfcGFnZSh7XG5cdFx0cGFyZW50OiB3cmFwcGVyLFxuXHRcdHRpdGxlOiAnXHU3RUM0XHU3RUM3XHU5MTREXHU3RjZFJyxcblx0XHRzaW5nbGVfY29sdW1uOiB0cnVlXG5cdH0pO1xuXHRjb25zdCBhcHAgPSBjcmVhdGVBcHAoT3JnYW5pemF0aW9uQ29uZmlnLCB7fSk7XG5cdGFwcC51c2UoYXBwID0+IHsgYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRwYWdlID0gcGFnZTsgfSk7XG5cdGFwcC51c2UoRWxlbWVudFBsdXMsIHsgc2l6ZTogJ3NtYWxsJywgbG9jYWxlOiB6aENuIH0pO1xuXHRhcHAubW91bnQocGFnZS5wYXJlbnQpO1xufVxuIiwgIjx0ZW1wbGF0ZT5cblx0PFBhZ2U+XG5cdFx0PHRlbXBsYXRlICN0aXRsZT5cblx0XHRcdDxoMyBjbGFzcz1cInRpdGxlXCI+XHU3RUM0XHU3RUM3XHU4QkJFXHU3RjZFPC9oMz5cblx0XHQ8L3RlbXBsYXRlPlxuXHRcdDx0ZW1wbGF0ZSAjc2lkZXI+XG5cdFx0XHQ8T3JnYW5pemF0aW9uVHJlZVxuXHRcdFx0XHR2LW1vZGVsPVwib3JnYW5pemF0aW9uXCJcblx0XHRcdFx0OnBlcm1pc3Npb25zPVwib3JnYW5pemF0aW9uUGVybWlzc2lvbnNcIlxuXHRcdFx0PjwvT3JnYW5pemF0aW9uVHJlZT5cblx0XHQ8L3RlbXBsYXRlPlxuXHRcdDxlbC10YWJzIHYtbW9kZWw9XCJhY3RpdmVOYW1lXCIgY2xhc3M9XCJvcmdhbml6YXRpb24tdGFic1wiPlxuXHRcdFx0PGVsLXRhYi1wYW5lIGNsYXNzPVwidGFiLWNvbnRhaW5lclwiIGxhYmVsPVwiXHU1N0ZBXHU2NzJDXHU0RkUxXHU2MDZGXCIgbmFtZT1cImluZm9cIj5cblx0XHRcdFx0PEZvcm1EZXRhaWwgOm5hbWU9XCJvcmdhbml6YXRpb24/Lm5hbWVcIiBkb2N0eXBlPVwiVGlhbmp5IE9yZ2FuaXphdGlvblwiPjwvRm9ybURldGFpbD5cblx0XHRcdDwvZWwtdGFiLXBhbmU+XG5cdFx0XHQ8ZWwtdGFiLXBhbmUgdi1pZj1cIm9yZ2FuaXphdGlvbj8udHlwZV9kb2Mubm9fd29ya3NwYWNlPT09MFwiIGNsYXNzPVwidGFiLWNvbnRhaW5lclwiIGxhYmVsPVwiXHU1REU1XHU0RjVDXHU1MzNBXCIgbmFtZT1cIndvcmtzcGFjZVwiPlxuXHRcdFx0XHQ8V29ya3NwYWNlIHYtaWY9XCJvcmdhbml6YXRpb25cIiA6b3JnYW5pemF0aW9uPVwib3JnYW5pemF0aW9uLm5hbWVcIj48L1dvcmtzcGFjZT5cblx0XHRcdDwvZWwtdGFiLXBhbmU+XG5cdFx0XHQ8ZWwtdGFiLXBhbmUgY2xhc3M9XCJ0YWItY29udGFpbmVyXCIgbGFiZWw9XCJcdTYyMTBcdTU0NThcIiBuYW1lPVwidXNlcnNcIj5cblx0XHRcdFx0PE1lbWJlciB2LWlmPVwib3JnYW5pemF0aW9uXCIgOm9yZ2FuaXphdGlvbj1cIm9yZ2FuaXphdGlvbi5uYW1lXCIgOnBlcm1pc3Npb25zPVwibWVtYmVyUGVybWlzc2lvbnNcIj48L01lbWJlcj5cblx0XHRcdDwvZWwtdGFiLXBhbmU+XG5cdFx0XHQ8ZWwtdGFiLXBhbmUgY2xhc3M9XCJ0YWItY29udGFpbmVyXCIgbGFiZWw9XCJcdTdFRTdcdTYyN0ZcIiBuYW1lPVwiaW5oZXJpdFwiPlxuXHRcdFx0XHQ8SW5oZXJpdCB2LWlmPVwib3JnYW5pemF0aW9uXCIgOm9yZ2FuaXphdGlvbj1cIm9yZ2FuaXphdGlvbi5uYW1lXCIgOnBlcm1pc3Npb25zPVwiaW5oZXJpdFBlcm1pc3Npb25zXCI+PC9Jbmhlcml0PlxuXHRcdFx0PC9lbC10YWItcGFuZT5cblx0XHQ8L2VsLXRhYnM+XG5cdDwvUGFnZT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXAgbGFuZz0ndHMnPlxuaW1wb3J0IHsgY29tcHV0ZWQsIG9uTW91bnRlZCwgcmVmIH0gZnJvbSAndnVlJztcblxuaW1wb3J0IFBhZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vZ3VpZ3VfcG0vZ3VpZ3VfcG0vcHVibGljL2pzL2NvbXBvbmVudHMvcGFnZS9pbmRleC52dWUnO1xuXG5pbXBvcnQgT3JnYW5pemF0aW9uVHJlZSBmcm9tICcuL2NvbXBvbmVudHMvT3JnYW5pemF0aW9uVHJlZS52dWUnO1xuaW1wb3J0IHR5cGUgeyBPcmdhbml6YXRpb24sIE9yZ2FuaXphdGlvblR5cGUgfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IEZvcm1EZXRhaWwgZnJvbSAnLi9jb21wb25lbnRzL0RldGFpbC52dWUnO1xuaW1wb3J0IFdvcmtzcGFjZSBmcm9tICcuL2NvbXBvbmVudHMvV29ya3NwYWNlLnZ1ZSc7XG5pbXBvcnQgTWVtYmVyIGZyb20gJy4vY29tcG9uZW50cy9NZW1iZXIudnVlJztcbmltcG9ydCBJbmhlcml0IGZyb20gJy4vY29tcG9uZW50cy9Jbmhlcml0LnZ1ZSc7XG5cbmNvbnN0IG9yZ2FuaXphdGlvbiA9IHJlZjxPcmdhbml6YXRpb24+KCk7XG5jb25zdCBhY3RpdmVOYW1lID0gcmVmPHN0cmluZz4oJ2luZm8nKTtcbmNvbnN0IG9yZ2FuaXphdGlvbk1ldGEgPSByZWY8bG9jYWxzLkRvY1R5cGU+KCk7XG5jb25zdCBtZW1iZXJNZXRhID0gcmVmPGxvY2Fscy5Eb2NUeXBlPigpO1xuY29uc3QgaW5oZXJpdE1ldGEgPSByZWY8bG9jYWxzLkRvY1R5cGU+KCk7XG5cblxub25Nb3VudGVkKGFzeW5jKCk9Pntcblx0b3JnYW5pemF0aW9uTWV0YS52YWx1ZSA9IGF3YWl0IGdldE1ldGEoJ1RpYW5qeSBPcmdhbml6YXRpb24nKTtcblx0bWVtYmVyTWV0YS52YWx1ZSA9IGF3YWl0IGdldE1ldGEoJ1RpYW5qeSBPcmdhbml6YXRpb24gTWVtYmVyJyk7XG5cdGluaGVyaXRNZXRhLnZhbHVlID0gYXdhaXQgZ2V0TWV0YSgnVGlhbmp5IE9yZ2FuaXphdGlvbiBJbmhlcml0YWJsZScpO1xufSk7XG5hc3luYyBmdW5jdGlvbiBnZXRNZXRhKGRvY3R5cGU6c3RyaW5nKSB7XG5cdGxldCBsb2NhbF9tZXRhID0gZnJhcHBlLmdldF9tZXRhKGRvY3R5cGUpO1xuXHRpZiAobG9jYWxfbWV0YSkge1xuXHRcdHJldHVybiBsb2NhbF9tZXRhO1xuXHR9XG5cdGF3YWl0IGZyYXBwZS5tb2RlbC53aXRoX2RvY3R5cGUoZG9jdHlwZSk7XG5cdHJldHVybiBmcmFwcGUuZ2V0X21ldGEoZG9jdHlwZSl8fHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZ2V0UGVybWlzc2lvbihtZXRhPzpsb2NhbHMuRG9jVHlwZSl7XG5cdGlmICghbWV0YSkge1xuXHRcdHJldHVybiB7IGRlbGV0ZVBlcm1pc3Npb246IGZhbHNlLCBjcmVhdGVQZXJtaXNzaW9uOiBmYWxzZSwgd3JpdGVQZXJtaXNzaW9uOmZhbHNlIH07XG5cdH1cblx0Y29uc3QgZGVsZXRlUGVybWlzc2lvbiA9IGZyYXBwZS5wZXJtLmhhc19wZXJtKG1ldGEubmFtZSwgMCwgJ2RlbGV0ZScpO1xuXHRjb25zdCBjcmVhdGVQZXJtaXNzaW9uID0gZnJhcHBlLnBlcm0uaGFzX3Blcm0obWV0YS5uYW1lLCAwLCAnY3JlYXRlJyk7XG5cdGNvbnN0IHdyaXRlUGVybWlzc2lvbiA9IGZyYXBwZS5wZXJtLmhhc19wZXJtKG1ldGEubmFtZSwgMCwgJ3dyaXRlJyk7XG5cdHJldHVybiB7IGRlbGV0ZVBlcm1pc3Npb24sIGNyZWF0ZVBlcm1pc3Npb24sIHdyaXRlUGVybWlzc2lvbiB9O1xufVxuY29uc3Qgb3JnYW5pemF0aW9uUGVybWlzc2lvbnMgPSBjb21wdXRlZCgoKSA9PiBnZXRQZXJtaXNzaW9uKG9yZ2FuaXphdGlvbk1ldGEudmFsdWUpKTtcbmNvbnN0IG1lbWJlclBlcm1pc3Npb25zID0gY29tcHV0ZWQoKCkgPT4gZ2V0UGVybWlzc2lvbihtZW1iZXJNZXRhLnZhbHVlKSk7XG5jb25zdCBpbmhlcml0UGVybWlzc2lvbnMgPSBjb21wdXRlZCgoKSA9PiBnZXRQZXJtaXNzaW9uKGluaGVyaXRNZXRhLnZhbHVlKSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz0nbGVzcycgc2NvcGVkPlxuLnRpdGxle1xuXHRtYXJnaW4tYm90dG9tOiAwO1xufVxuLm9yZ2FuaXphdGlvbi10YWJze1xuXHRoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuLnRhYi1jb250YWluZXJ7XG5cdGhlaWdodDogMTAwJTtcbn1cbjwvc3R5bGU+XG4iLCAiPHRlbXBsYXRlPlxuXHQ8ZGl2IHYtaWY9XCJoYXNUaXRsZVwiIGNsYXNzPVwidGl0bGUgY29udGFpbmVyXCI+XG5cdFx0PFRvZ2dsZUJ0biB2LW1vZGVsOmV4cGFuZD1cInNob3dTaWRlclwiPjwvVG9nZ2xlQnRuPlxuXHRcdDxzbG90IG5hbWU9XCJ0aXRsZVwiPjwvc2xvdD5cblx0PC9kaXY+XG5cdDxkaXYgY2xhc3M9XCJjb250YWluZXIgZ3VpZ3UtY29udGFpbmVyXCI+XG5cdFx0PGRpdiBjbGFzcz1cInRvb2xzXCIgdi1zaG93PVwiaGFzVG9vbHMmJiFzbWFsbE1ldGFcIj5cblxuXHRcdFx0PHNsb3QgbmFtZT1cInRvb2xzXCI+PC9zbG90PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJ0b29scyBzbWFsbC1tZXRhX3Rvb2xzXCIgdi1zaG93PVwic21hbGxNZXRhXCI+XG5cdFx0XHQ8VG9nZ2xlQnRuIHYtaWY9XCIhaGFzVGl0bGVcIiB2LW1vZGVsOmV4cGFuZD1cInNob3dTaWRlclwiPlxuXHRcdFx0PC9Ub2dnbGVCdG4+XG5cdFx0XHQ8ZGl2IHYtZWxzZT48L2Rpdj5cblx0XHRcdDxlbC1wb3BvdmVyIHBsYWNlbWVudD1cImJvdHRvbS1zdGFydFwiIDp3aWR0aD1cIjMwMFwiIHRyaWdnZXI9XCJjbGlja1wiPlxuXHRcdFx0XHQ8dGVtcGxhdGUgI3JlZmVyZW5jZT5cblx0XHRcdFx0XHQ8ZWwtaWNvbiBzaXplPVwiMjBweFwiPlxuXHRcdFx0XHRcdFx0PE1vcmVGaWxsZWQgLz5cblx0XHRcdFx0XHQ8L2VsLWljb24+XG5cdFx0XHRcdDwvdGVtcGxhdGU+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJwb3BvdmVyLXRvb2xzXCI+XG5cdFx0XHRcdFx0PHNsb3QgbmFtZT1cInRvb2xzXCI+PC9zbG90PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZWwtcG9wb3Zlcj5cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IDpjbGFzcz1cIlttb2RlID09PSAndmVydGljYWwnPyd2ZXJ0aWNhbCc6J2hvcml6b24nLCAnbWFpbi1jb250YWluZXInIF1cIlxuXHRcdFx0cmVmPVwiY29udGFpbmVyXCI+XG5cdFx0XHQ8ZGl2IDpzdHlsZT1cInNpZGVyU3R5bGVcIlxuXHRcdFx0XHQ6Y2xhc3M9XCJbJ3NpZGVyJywge29ubHlTaWRlcjpoYXNTaWRlciYmIWhhc0RldGFpbCYmIWhhc01haW59XVwiXG5cdFx0XHRcdHYtc2hvdz1cImhhc1NpZGVyJiYhc21hbGxNZXRhJiZzaG93U2lkZXJcIiByZWY9XCJzaWRlclwiPlxuXHRcdFx0XHQ8c2xvdCBuYW1lPVwic2lkZXJcIj48L3Nsb3Q+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXZcblx0XHRcdFx0OmNsYXNzPVwiW21vZGUgPT09ICd2ZXJ0aWNhbCc/J3ZlcnRpY2FsJzonaG9yaXpvbicsICdyZXNpemVyLWNvbnRhaW5lcicgXVwiXG5cdFx0XHRcdHYtc2hvdz1cImhhc1NpZGVyJiYoaGFzRGV0YWlsfHxoYXNNYWluKSYmIXNtYWxsTWV0YSYmc2hvd1NpZGVyXCJcblx0XHRcdFx0cmVmPVwicmVzaXplckNvbnRhaW5lclwiPlxuXHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0Y2xhc3M9XCJyZXNpemVyXCJcblx0XHRcdFx0XHR0aXRsZT1cIlx1NEZBN1x1OEZCOVx1NjgwRnJlc2l6ZXJcIlxuXHRcdFx0XHRcdEBwb2ludGVyZG93bj1cImRyYWdMUkNvbnRyb2xsZXJcIj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXZcblx0XHRcdFx0OmNsYXNzPVwiW3JpZ2h0TW9kZSA9PT0gJ3ZlcnRpY2FsJz8ndmVydGljYWwnOidob3Jpem9uJywncmlnaHQnXVwiXG5cdFx0XHRcdHJlZj1cInJpZ2h0Q29udGFpbmVyXCI+XG5cdFx0XHRcdDxkaXYgOnN0eWxlPVwibWFpblN0eWxlXCIgOmNsYXNzPVwiWydtYWluJywge25vRGV0YWlsOiFoYXNEZXRhaWx9XVwiXG5cdFx0XHRcdFx0di1zaG93PVwiaGFzTWFpblwiXG5cdFx0XHRcdFx0cmVmPVwibWFpblwiPlxuXHRcdFx0XHRcdDxzbG90Pjwvc2xvdD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxkaXZcblx0XHRcdFx0XHQ6Y2xhc3M9XCJbcmlnaHRNb2RlID09PSAndmVydGljYWwnPyd2ZXJ0aWNhbCc6J2hvcml6b24nLCAncmVzaXplci1jb250YWluZXInIF1cIlxuXHRcdFx0XHRcdHYtc2hvdz1cImhhc0RldGFpbCYmaGFzTWFpblwiXG5cdFx0XHRcdFx0cmVmPVwibWFpblJlc2l6ZXJDb250YWluZXJcIj5cblx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRjbGFzcz1cInJlc2l6ZXJcIlxuXHRcdFx0XHRcdFx0dGl0bGU9XCJtYWluIHJlc2l6ZXJcIlxuXHRcdFx0XHRcdFx0QHBvaW50ZXJkb3duPVwiZHJhZ0xSQ29udHJvbGxlclwiPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PGRpdiA6c3R5bGU9XCJkZXRhaWxTdHlsZVwiIGNsYXNzPVwiZGV0YWlsXCIgdi1zaG93PVwiaGFzRGV0YWlsXCI+XG5cdFx0XHRcdFx0PHNsb3QgbmFtZT1cImRldGFpbFwiPjwvc2xvdD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG5cdDxlbC1kcmF3ZXJcblx0XHR2LW1vZGVsPVwic2hvd0RyYXdlclwiXG5cdFx0QGNsb3NlPVwiY2xvc2VEcmF3ZXJcIlxuXHRcdHRpdGxlPVwiXCJcblx0XHRkaXJlY3Rpb249XCJsdHJcIlxuXHRcdHNpemU9XCI1MCVcIj5cblx0XHQ8c2xvdCBuYW1lPVwic2lkZXJcIj48L3Nsb3Q+XG5cdDwvZWwtZHJhd2VyPlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCIgc2V0dXA+XG5pbXBvcnQgeyB1c2VTbG90cywgY29tcHV0ZWQsIHJlZiwgZGVmaW5lUHJvcHMsIENTU1Byb3BlcnRpZXMsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7ICBFeHBhbmQsIE1vcmVGaWxsZWR9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJztcblxuaW1wb3J0IHsgdXNlTWV0YVF1ZXJ5IH0gZnJvbSAnLi91c2VNZXRhUXVlcnknO1xuaW1wb3J0IFRvZ2dsZUJ0biBmcm9tICcuL1RvZ2dsZUJ0bi52dWUnO1xuY29uc3Qgc21hbGxNZXRhID0gdXNlTWV0YVF1ZXJ5KCk7XG5pbnRlcmZhY2UgUHJvcHN7XG5cdG1vZGU/OiAnaG9yaXpvbid8ICd2ZXJ0aWNhbCdcblx0cmlnaHRNb2RlPzonaG9yaXpvbid8ICd2ZXJ0aWNhbCdcblx0c2lkZXJTdHlsZT86Q1NTUHJvcGVydGllc1xuXHRtYWluU3R5bGU/OkNTU1Byb3BlcnRpZXNcblx0ZGV0YWlsU3R5bGU/OkNTU1Byb3BlcnRpZXNcbn1cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHM8UHJvcHM+KCk7XG5cbmNvbnN0IHNpZGVyID0gcmVmPEhUTUxFbGVtZW50PigpO1xuY29uc3QgbWFpbiA9IHJlZjxIVE1MRWxlbWVudD4oKTtcbmNvbnN0IGNvbnRhaW5lciA9IHJlZjxIVE1MRWxlbWVudD4oKTtcbmNvbnN0IHJlc2l6ZXJDb250YWluZXIgPXJlZjxIVE1MRWxlbWVudD4oKTtcbmNvbnN0IG1haW5SZXNpemVyQ29udGFpbmVyID0gcmVmPEhUTUxFbGVtZW50PigpO1xuY29uc3QgcmlnaHRDb250YWluZXIgPSByZWY8SFRNTEVsZW1lbnQ+KCk7XG5cbmNvbnN0IGhhc1RpdGxlID0gY29tcHV0ZWQoKCk9PkJvb2xlYW4odXNlU2xvdHMoKS50aXRsZSkpO1xuY29uc3QgaGFzVG9vbHMgPSBjb21wdXRlZCgoKT0+Qm9vbGVhbih1c2VTbG90cygpLnRvb2xzKSk7XG5jb25zdCBoYXNTaWRlciA9IGNvbXB1dGVkKCgpPT5Cb29sZWFuKHVzZVNsb3RzKCkuc2lkZXIpKTtcbmNvbnN0IGhhc01haW4gPSBjb21wdXRlZCgoKT0+Qm9vbGVhbih1c2VTbG90cygpLmRlZmF1bHQpKTtcbmNvbnN0IGhhc0RldGFpbCA9IGNvbXB1dGVkKCgpPT5Cb29sZWFuKHVzZVNsb3RzKCkuZGV0YWlsKSk7XG5cbmNvbnN0IGhlaWdodCA9IGNvbXB1dGVkKCgpPT5oYXNUaXRsZS52YWx1ZT9gY2FsYygxMDB2aCAtIDEzNXB4KWA6YGNhbGMoMTAwdmggLSA2MHB4KWApO1xuY29uc3Qgc2hvd1NpZGVyID0gcmVmPGJvb2xlYW4+KHRydWUpO1xuXG5mdW5jdGlvbiBkcmFnTFJDb250cm9sbGVyKGRyYWdFdmVudDpQb2ludGVyRXZlbnQpe1xuXHRpZiAoIWRyYWdFdmVudC50YXJnZXQpeyByZXR1cm47IH1cblx0ZHJhZ0V2ZW50LnRhcmdldC5zZXRQb2ludGVyQ2FwdHVyZSh0cnVlKTtcblx0ZHJhZ0V2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRkcmFnRXZlbnQudGFyZ2V0LnN0eWxlLmJhY2tncm91bmQgPSAnIzk5OSc7XG5cdGxldCByZXNpemVyQ29udGFpbmVyRWxlbWVudDpIVE1MRWxlbWVudHx1bmRlZmluZWQ7XG5cdGxldCBsZWZ0RWxlbWVudDpIVE1MRWxlbWVudHx1bmRlZmluZWQ7XG5cdGxldCBjb250YWluZXJFbGVtZW50OkhUTUxFbGVtZW50fHVuZGVmaW5lZDtcblx0Y29uc3QgaXNTaWRlclJlc2l6ZSA9IGRyYWdFdmVudC50YXJnZXQgPT09IHJlc2l6ZXJDb250YWluZXIudmFsdWU/LmZpcnN0Q2hpbGQ7XG5cdGNvbnN0IG1vZGUgPSBpc1NpZGVyUmVzaXplPydtb2RlJzoncmlnaHRNb2RlJztcblx0aWYgKGlzU2lkZXJSZXNpemUpe1xuXHRcdHJlc2l6ZXJDb250YWluZXJFbGVtZW50ID0gcmVzaXplckNvbnRhaW5lci52YWx1ZTtcblx0XHRsZWZ0RWxlbWVudCA9IHNpZGVyLnZhbHVlO1xuXHRcdGNvbnRhaW5lckVsZW1lbnQgPSBjb250YWluZXIudmFsdWU7XG5cblx0fSBlbHNlIHtcblx0XHRyZXNpemVyQ29udGFpbmVyRWxlbWVudCA9IG1haW5SZXNpemVyQ29udGFpbmVyLnZhbHVlO1xuXHRcdGxlZnRFbGVtZW50ID0gbWFpbi52YWx1ZTtcblx0XHRjb250YWluZXJFbGVtZW50ID0gcmlnaHRDb250YWluZXIudmFsdWU7XG5cdH1cblxuXHRsZXQgc3RhcnRQbyA9IDA7XG5cdGxldCBjb250YWluZXJDbGllbnRTaXplID0gMDtcblx0bGV0IG9sZFNpZGVyU2l6ZSA9IDA7XG5cdGxldCByZXNpemVyQ29udGFpbmVyRWxlbWVudFNpemUgPSAwO1xuXHRpZiAocHJvcHNbbW9kZV09PT0ndmVydGljYWwnKXtcblx0XHRzdGFydFBvID0gZHJhZ0V2ZW50LmNsaWVudFk7XG5cdFx0ZHJhZ0V2ZW50LnRhcmdldC50b3AgPSBkcmFnRXZlbnQudGFyZ2V0Lm9mZnNldFRvcDtcblx0XHRjb250YWluZXJDbGllbnRTaXplID0gY29udGFpbmVyRWxlbWVudD8uY2xpZW50SGVpZ2h0fHwwO1xuXHRcdG9sZFNpZGVyU2l6ZSA9IChyZXNpemVyQ29udGFpbmVyRWxlbWVudD8ub2Zmc2V0VG9wfHwwKSAtIChjb250YWluZXJFbGVtZW50Py5vZmZzZXRUb3B8fDApO1xuXHRcdHJlc2l6ZXJDb250YWluZXJFbGVtZW50U2l6ZSA9IHJlc2l6ZXJDb250YWluZXJFbGVtZW50Py5jbGllbnRIZWlnaHR8fDA7XG5cdH0gZWxzZSB7XG5cdFx0c3RhcnRQbyA9IGRyYWdFdmVudC5jbGllbnRYO1xuXHRcdGRyYWdFdmVudC50YXJnZXQubGVmdCA9IGRyYWdFdmVudC50YXJnZXQub2Zmc2V0TGVmdDtcblx0XHRjb250YWluZXJDbGllbnRTaXplID0gY29udGFpbmVyRWxlbWVudD8uY2xpZW50V2lkdGh8fDA7XG5cdFx0b2xkU2lkZXJTaXplID0gKHJlc2l6ZXJDb250YWluZXJFbGVtZW50Py5vZmZzZXRMZWZ0fHwwKSAtIChjb250YWluZXJFbGVtZW50Py5vZmZzZXRMZWZ0fHwwKTtcblx0XHRyZXNpemVyQ29udGFpbmVyRWxlbWVudFNpemUgPSByZXNpemVyQ29udGFpbmVyRWxlbWVudD8uY2xpZW50V2lkdGh8fDA7XG5cdH1cblx0bGV0IG5ld1NpZGVyU2l6ZSA9IG9sZFNpZGVyU2l6ZTtcblx0ZG9jdW1lbnQub25wb2ludGVybW92ZSA9IGZ1bmN0aW9uKG1vdmVFdmVudDpQb2ludGVyRXZlbnQpIHtcblx0XHRpZiAoIWRyYWdFdmVudC50YXJnZXQpeyByZXR1cm47IH1cblx0XHRsZXQgZW5kUG8gPSAwO1xuXHRcdGlmIChwcm9wc1ttb2RlXT09PSd2ZXJ0aWNhbCcpe1xuXHRcdFx0ZW5kUG8gPSBtb3ZlRXZlbnQuY2xpZW50WTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZW5kUG8gPSBtb3ZlRXZlbnQuY2xpZW50WDtcblx0XHR9XG5cdFx0bGV0IHJlc2l6ZXJEaWZmID0gZW5kUG8gLSBzdGFydFBvO1xuXHRcdC8vIFx1NURFNlx1OEZCOVx1NTMzQVx1NTdERlx1NjcwMFx1NTQwRVx1NzY4NFx1NUJCRFx1NUVBNiA9IFx1NEU0Qlx1NTI0RFx1NUJCRFx1NUVBNiArIFx1NTNEOFx1NTMxNlx1NUJCRFx1NUVBNlxuXHRcdG5ld1NpZGVyU2l6ZSA9IG9sZFNpZGVyU2l6ZSArIHJlc2l6ZXJEaWZmO1xuXHRcdC8vIFx1NTNGM1x1NEZBN1x1NUJCRFx1NUVBNiA9IFx1NjU3NFx1NEY1M1x1NUJCRFx1NUVBNiAtIFx1NURFNlx1NEZBN1x1NUJCRFx1NUVBNiAtIFx1NjJENlx1NjJGRFx1NjMwOVx1OTRBRVxuXHRcdGNvbnN0IG1haW5TaXplID0gY29udGFpbmVyQ2xpZW50U2l6ZSAtIG5ld1NpZGVyU2l6ZSAtIHJlc2l6ZXJDb250YWluZXJFbGVtZW50U2l6ZTtcblx0XHRsZXQgbWFpbk1heFNpemUgPSBpc1NpZGVyUmVzaXplPzI1MDoxNTA7XG5cdFx0aWYgKGlzU2lkZXJSZXNpemUmJnByb3BzLm1vZGU9PT0ndmVydGljYWwnJiZwcm9wcy5yaWdodE1vZGU9PT0ndmVydGljYWwnJiZtYWluLnZhbHVlPy5zdHlsZT8uaGVpZ2h0KXtcblx0XHRcdGNvbnN0IGFscmVhZHlNYWluSGVpZ2h0ID0gcGFyc2VGbG9hdChtYWluLnZhbHVlLnN0eWxlLmhlaWdodC5yZXBsYWNlQWxsKCdweCcsICcnKXx8JzAnKTtcblx0XHRcdG1haW5NYXhTaXplID0gYWxyZWFkeU1haW5IZWlnaHQgKyAxNTAgKyByZXNpemVyQ29udGFpbmVyRWxlbWVudFNpemU7XG5cdFx0fSBlbHNlIGlmIChpc1NpZGVyUmVzaXplJiZwcm9wcy5tb2RlIT09J3ZlcnRpY2FsJyYmcHJvcHMucmlnaHRNb2RlIT09J3ZlcnRpY2FsJyYmbWFpbi52YWx1ZT8uc3R5bGU/LndpZHRoKXtcblx0XHRcdGNvbnN0IGFscmVhZHlNYWluV2lkdGggPSBwYXJzZUZsb2F0KG1haW4udmFsdWUuc3R5bGUud2lkdGgucmVwbGFjZUFsbCgncHgnLCAnJyl8fCcwJyk7XG5cdFx0XHRtYWluTWF4U2l6ZSA9IGFscmVhZHlNYWluV2lkdGggKyAxNTAgKyByZXNpemVyQ29udGFpbmVyRWxlbWVudFNpemU7XG5cdFx0fVxuXG5cdFx0Ly8gXHU1REU2XHU0RkE3XHU2NzAwXHU1QzBGNTBcblx0XHRpZiAobmV3U2lkZXJTaXplIDwgNTApIHtcblx0XHRcdG5ld1NpZGVyU2l6ZSA9IDUwO1xuXHRcdFx0cmVzaXplckRpZmYgPSBuZXdTaWRlclNpemUgLSBvbGRTaWRlclNpemU7XG5cdFx0fVxuXHRcdC8vIFx1NTNGM1x1NEZBN1x1NjcwMFx1NUMwRjE1MFxuXHRcdGlmICggbWFpblNpemUgPCBtYWluTWF4U2l6ZSApIHtcblx0XHRcdG5ld1NpZGVyU2l6ZSA9IGNvbnRhaW5lckNsaWVudFNpemUgLSBtYWluTWF4U2l6ZSAtIHJlc2l6ZXJDb250YWluZXJFbGVtZW50U2l6ZTtcblx0XHRcdHJlc2l6ZXJEaWZmID0gbmV3U2lkZXJTaXplIC0gb2xkU2lkZXJTaXplO1xuXHRcdH1cblxuXHRcdC8vIFx1OEJCRVx1N0Y2RXJlc2l6ZXJcdTc2ODRcdTRGNERcdTdGNkVcblx0XHRpZiAocHJvcHNbbW9kZV09PT0ndmVydGljYWwnKXtcblx0XHRcdGRyYWdFdmVudC50YXJnZXQuc3R5bGUudG9wID0gYCR7cmVzaXplckRpZmZ9cHhgO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkcmFnRXZlbnQudGFyZ2V0LnN0eWxlLmxlZnQgPSBgJHtyZXNpemVyRGlmZn1weGA7XG5cdFx0fVxuXHR9O1xuXHRkb2N1bWVudC5vbnBvaW50ZXJ1cCA9IGZ1bmN0aW9uKGV2dDpQb2ludGVyRXZlbnQpIHtcblx0XHRpZiAoIWRyYWdFdmVudC50YXJnZXQpeyByZXR1cm47IH1cblx0XHQvL1x1OTg5Q1x1ODI3Mlx1NjA2Mlx1NTkwRFxuXHRcdGRyYWdFdmVudC50YXJnZXQuc3R5bGUuYmFja2dyb3VuZCA9ICcjZDlkOWQ5Jztcblx0XHRkcmFnRXZlbnQudGFyZ2V0LnN0eWxlLmxlZnQgPSAnYXV0byc7XG5cdFx0ZHJhZ0V2ZW50LnRhcmdldC5zdHlsZS50b3AgPSAnYXV0byc7XG5cdFx0aWYgKCFsZWZ0RWxlbWVudCl7IHJldHVybjsgfVxuXHRcdGlmIChwcm9wc1ttb2RlXT09PSd2ZXJ0aWNhbCcpe1xuXHRcdFx0bGVmdEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3U2lkZXJTaXplfXB4YDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGVmdEVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtuZXdTaWRlclNpemV9cHhgO1xuXHRcdH1cblx0XHRkb2N1bWVudC5vbnBvaW50ZXJtb3ZlID0gbnVsbDtcblx0XHRkb2N1bWVudC5vbnBvaW50ZXJ1cCA9IG51bGw7XG5cdH07XG5cbn1cbndhdGNoKCgpPT5zbWFsbE1ldGEudmFsdWUsICgpPT57XG5cdGlmIChzbWFsbE1ldGEudmFsdWUpe1xuXHRcdHNob3dTaWRlci52YWx1ZT1mYWxzZTtcblx0fVxufSwge2ltbWVkaWF0ZTp0cnVlfSk7XG5jb25zdCBzaG93RHJhd2VyID0gY29tcHV0ZWQoKCk9PnNob3dTaWRlci52YWx1ZSYmc21hbGxNZXRhLnZhbHVlKTtcbmZ1bmN0aW9uIGNsb3NlRHJhd2VyKCl7XG5cdHNob3dTaWRlci52YWx1ZSA9IGZhbHNlO1xufVxuZnVuY3Rpb24gdG9nZ2xlU2lkZXIoKXtcblx0c2hvd1NpZGVyLnZhbHVlID0gIXNob3dTaWRlci52YWx1ZTtcbn1cbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCIgc2NvcGVkPlxuLnRpdGxlIHtcblx0aGVpZ2h0OiA3NXB4O1xuXHRoZWlnaHQ6IDc1cHg7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGxpbmUtaGVpZ2h0OiA3NXB4O1xufVxuXG4uZ3VpZ3UtY29udGFpbmVyIHtcblx0Ly8gaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNjBweCk7XG5cdGhlaWdodDogdi1iaW5kKGhlaWdodCk7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG5cblx0Lm1haW4tY29udGFpbmVyIHtcblx0XHRmbGV4OiAxO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblxuXHRcdC5zaWRlciB7XG5cdFx0XHRtaW4td2lkdGg6IDUwcHg7XG5cdFx0XHRtaW4taGVpZ2h0OiA1MHB4O1xuXHRcdH1cblxuXHRcdCYuaG9yaXpvbiB7XG5cdFx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXG5cdFx0XHQuc2lkZXIge1xuXHRcdFx0XHR3aWR0aDogMzAwcHg7XG5cblx0XHRcdFx0Ji5vbmx5U2lkZXIge1xuXHRcdFx0XHRcdHdpZHRoOiAxMDAlXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQmLnZlcnRpY2FsIHtcblx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cblx0XHRcdC5zaWRlciB7XG5cdFx0XHRcdGhlaWdodDogMzAwcHg7XG5cblx0XHRcdFx0Ji5vbmx5U2lkZXIge1xuXHRcdFx0XHRcdGhlaWdodDogMTAwJVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LnJlc2l6ZXItY29udGFpbmVyIHtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRcdGJvcmRlcjogMDtcblxuXHRcdFx0LnJlc2l6ZXIge1xuXHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICNkOWQ5ZDk7XG5cdFx0XHRcdG9wYWNpdHk6IDAuNTtcblx0XHRcdH1cblxuXHRcdFx0Ji5ob3Jpem9uIHtcblx0XHRcdFx0cGFkZGluZzogMCA0cHg7XG5cdFx0XHRcdHdpZHRoOiAxMnB4O1xuXHRcdFx0XHRoZWlnaHQ6IDEwMCU7XG5cblx0XHRcdFx0LnJlc2l6ZXIge1xuXHRcdFx0XHRcdHdpZHRoOiAycHg7XG5cdFx0XHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0XHRcdGN1cnNvcjogY29sLXJlc2l6ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQmLnZlcnRpY2FsIHtcblx0XHRcdFx0cGFkZGluZzogNHB4IDA7XG5cdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHRoZWlnaHQ6IDEycHg7XG5cblx0XHRcdFx0LnJlc2l6ZXIge1xuXHRcdFx0XHRcdGhlaWdodDogMnB4O1xuXHRcdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHRcdGN1cnNvcjogcm93LXJlc2l6ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXG5cdFx0LnJpZ2h0IHtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRmbGV4OiAxO1xuXHRcdFx0b3ZlcmZsb3c6IGF1dG87XG5cblx0XHRcdCYuaG9yaXpvbiB7XG5cdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cblx0XHRcdFx0Lm1haW4ge1xuXHRcdFx0XHRcdHdpZHRoOiA1MCU7XG5cblx0XHRcdFx0XHQmLm5vRGV0YWlsIHtcblx0XHRcdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC5kZXRhaWwge1xuXHRcdFx0XHRcdGZsZXg6IDE7XG5cdFx0XHRcdFx0bWluLXdpZHRoOiAxNTBweDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQmLnZlcnRpY2FsIHtcblx0XHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuXHRcdFx0XHQubWFpbiB7XG5cdFx0XHRcdFx0aGVpZ2h0OiA1MCU7XG5cblx0XHRcdFx0XHQmLm5vRGV0YWlsIHtcblx0XHRcdFx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQuZGV0YWlsIHtcblx0XHRcdFx0XHRmbGV4OiAxO1xuXHRcdFx0XHRcdG1pbi1oZWlnaHQ6IDE1MHB4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdH1cbn1cblxuLnRvb2xzIHtcblx0cGFkZGluZzogOHB4IDA7XG59XG5cbi5zbWFsbC1tZXRhX3Rvb2xzIHtcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuPC9zdHlsZT5cbiIsICJpbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25Vbm1vdW50ZWQsIFJlZiB9IGZyb20gJ3Z1ZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VNZXRhUXVlcnkoKTogUmVmPGJvb2xlYW4+e1xuXHRjb25zdCBzbWFsbE1ldGEgPSByZWY8Ym9vbGVhbj4oJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcblx0bGV0IG1RdWVyeTpNZWRpYVF1ZXJ5TGlzdDtcblx0ZnVuY3Rpb24gbWVkaWFDaGFuZ2UoKXtcblx0XHRpZiAobVF1ZXJ5Lm1hdGNoZXMpe1xuXHRcdFx0c21hbGxNZXRhLnZhbHVlPXRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNtYWxsTWV0YS52YWx1ZT1mYWxzZTtcblx0XHR9XG5cdH1cblx0b25Nb3VudGVkKCgpPT57XG5cdFx0bVF1ZXJ5ID0gd2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDY0MHB4KScpO1xuXHRcdGlmIChtUXVlcnkubWF0Y2hlcyl7XG5cdFx0XHRzbWFsbE1ldGEudmFsdWU9dHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c21hbGxNZXRhLnZhbHVlPWZhbHNlO1xuXHRcdH1cblx0XHRtUXVlcnkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgbWVkaWFDaGFuZ2UpO1xuXHR9KTtcblx0b25Vbm1vdW50ZWQoKCk9Pntcblx0XHRtUXVlcnkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgbWVkaWFDaGFuZ2UpO1xuXHR9KTtcblx0cmV0dXJuIHNtYWxsTWV0YTtcbn1cbiIsICI8dGVtcGxhdGU+XG5cdDxzcGFuIGNsYXNzPVwidG9nZ2xlLWJ0blwiIHRpdGxlPVwiXHU1MjA3XHU2MzYyXHU4RkI5XHU2ODBGXCIgQGNsaWNrPVwidG9nZ2xlU2lkZXJcIj5cblx0XHQ8c3ZnIGNsYXNzPVwiaWNvbiBpY29uLW1kIHNpZGViYXItdG9nZ2xlLXBsYWNlaG9sZGVyXCI+XG5cdFx0XHQ8dXNlIGhyZWY9XCIjaWNvbi1tZW51XCI+PC91c2U+XG5cdFx0PC9zdmc+XG5cdFx0PHNwYW4gY2xhc3M9XCJzaWRlYmFyLXRvZ2dsZS1pY29uXCI+XG5cdFx0XHQ8c3ZnIGNsYXNzPVwiaWNvbiBpY29uLW1kXCI+XG5cdFx0XHRcdDx1c2Vcblx0XHRcdFx0XHQ6aHJlZj1cImV4cGFuZCA/ICcjaWNvbi1zaWRlYmFyLWNvbGxhcHNlJyA6ICcjaWNvbi1zaWRlYmFyLWV4cGFuZCdcIiAvPlxuXHRcdFx0PC9zdmc+XG5cdFx0PC9zcGFuPlxuXHQ8L3NwYW4+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwIGxhbmc9J3RzJz5cbmltcG9ydCB7IHJlZiwgZGVmaW5lUHJvcHMsIGRlZmluZUVtaXRzIH0gZnJvbSAndnVlJztcblxuaW50ZXJmYWNlIFByb3Bze1xuXHRleHBhbmQ6Ym9vbGVhblxufVxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wczxQcm9wcz4oKTtcbmludGVyZmFjZSBFbWl0e1xuXHQoZTogJ3VwZGF0ZTpleHBhbmQnLCBleHBhbmQ6IGJvb2xlYW4pOiB2b2lkXG59XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHM8RW1pdD4oKTtcblxuZnVuY3Rpb24gdG9nZ2xlU2lkZXIoKXtcblx0ZW1pdCgndXBkYXRlOmV4cGFuZCcsICFwcm9wcy5leHBhbmQpO1xufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPSdsZXNzJyBzY29wZWQ+XG4udG9nZ2xlLWJ0biB7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdG1hcmdpbi1yaWdodDogdmFyKC0tbWFyZ2luLXNtKTtcblx0Y3Vyc29yOiBwb2ludGVyO1xuXHQtLWljb24tc3Ryb2tlOiB2YXIoLS1ncmF5LTUwMCk7XG5cblx0LnNpZGViYXItdG9nZ2xlLXBsYWNlaG9sZGVyIHtcblx0XHR0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlLWluLW91dDtcblx0fVxuXG5cdC5zaWRlYmFyLXRvZ2dsZS1pY29uIHtcblx0XHR0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlLWluLW91dDtcblx0XHRkaXNwbGF5OiBub25lO1xuXHR9XG5cblx0Jjpob3ZlciB7XG5cdFx0LnNpZGViYXItdG9nZ2xlLXBsYWNlaG9sZGVyIHtcblx0XHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0fVxuXG5cdFx0LnNpZGViYXItdG9nZ2xlLWljb24ge1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0fVxuXHR9XG5cblxufVxuPC9zdHlsZT5cbiIsICJpbXBvcnQgXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndV9wbS9ndWlndV9wbS9wdWJsaWMvanMvY29tcG9uZW50cy9wYWdlL1RvZ2dsZUJ0bi52dWU/dHlwZT1zdHlsZS1jc3MmaW5kZXg9MFwiO2V4cG9ydCBkZWZhdWx0ICgpID0+e30iLCAiaW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSBcInZ1ZVwiXG5cbmNvbnN0IF93aXRoU2NvcGVJZCA9IG4gPT4gKF9wdXNoU2NvcGVJZChcImRhdGEtdi1jMzk2NDk2OVwiKSxuPW4oKSxfcG9wU2NvcGVJZCgpLG4pXG5jb25zdCBfaG9pc3RlZF8xID0gLyojX19QVVJFX18qLyBfd2l0aFNjb3BlSWQoKCkgPT4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJzdmdcIiwgeyBjbGFzczogXCJpY29uIGljb24tbWQgc2lkZWJhci10b2dnbGUtcGxhY2Vob2xkZXJcIiB9LCBbXG4gIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwidXNlXCIsIHsgaHJlZjogXCIjaWNvbi1tZW51XCIgfSlcbl0sIC0xIC8qIEhPSVNURUQgKi8pKVxuY29uc3QgX2hvaXN0ZWRfMiA9IHsgY2xhc3M6IFwic2lkZWJhci10b2dnbGUtaWNvblwiIH1cbmNvbnN0IF9ob2lzdGVkXzMgPSB7IGNsYXNzOiBcImljb24gaWNvbi1tZFwiIH1cbmNvbnN0IF9ob2lzdGVkXzQgPSBbXCJocmVmXCJdXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwic3BhblwiLCB7XG4gICAgY2xhc3M6IFwidG9nZ2xlLWJ0blwiLFxuICAgIHRpdGxlOiBcIlx1NTIwN1x1NjM2Mlx1OEZCOVx1NjgwRlwiLFxuICAgIG9uQ2xpY2s6ICRzZXR1cC50b2dnbGVTaWRlclxuICB9LCBbXG4gICAgX2hvaXN0ZWRfMSxcbiAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCBfaG9pc3RlZF8yLCBbXG4gICAgICAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwic3ZnXCIsIF9ob2lzdGVkXzMsIFtcbiAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcInVzZVwiLCB7XG4gICAgICAgICAgaHJlZjogJHByb3BzLmV4cGFuZCA/ICcjaWNvbi1zaWRlYmFyLWNvbGxhcHNlJyA6ICcjaWNvbi1zaWRlYmFyLWV4cGFuZCdcbiAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgX2hvaXN0ZWRfNClcbiAgICAgIF0pKVxuICAgIF0pXG4gIF0pKVxufSIsICJpbXBvcnQgc2NyaXB0IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndV9wbS9ndWlndV9wbS9wdWJsaWMvanMvY29tcG9uZW50cy9wYWdlL1RvZ2dsZUJ0bi52dWU/dHlwZT1zY3JpcHRcIjtpbXBvcnQgc3R5bGUwIGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndV9wbS9ndWlndV9wbS9wdWJsaWMvanMvY29tcG9uZW50cy9wYWdlL1RvZ2dsZUJ0bi52dWU/dHlwZT1zdHlsZSZpbmRleD0wXCI7c3R5bGUwKHNjcmlwdCk7aW1wb3J0IHtyZW5kZXIgfSBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvZ3VpZ3VfcG0vZ3VpZ3VfcG0vcHVibGljL2pzL2NvbXBvbmVudHMvcGFnZS9Ub2dnbGVCdG4udnVlP3R5cGU9dGVtcGxhdGVcIjsgc2NyaXB0LnJlbmRlciA9IHJlbmRlcjtzY3JpcHQuX19maWxlID0gXCIuLi9ndWlndV9wbS9ndWlndV9wbS9wdWJsaWMvanMvY29tcG9uZW50cy9wYWdlL1RvZ2dsZUJ0bi52dWVcIjtzY3JpcHQuX19zY29wZUlkID0gXCJkYXRhLXYtYzM5NjQ5NjlcIjtleHBvcnQgZGVmYXVsdCBzY3JpcHQ7IiwgImltcG9ydCBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL2d1aWd1X3BtL2d1aWd1X3BtL3B1YmxpYy9qcy9jb21wb25lbnRzL3BhZ2UvaW5kZXgudnVlP3R5cGU9c3R5bGUtY3NzJmluZGV4PTBcIjtleHBvcnQgZGVmYXVsdCAoKSA9Pnt9IiwgImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVuZGVyU2xvdCBhcyBfcmVuZGVyU2xvdCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgdlNob3cgYXMgX3ZTaG93LCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIHdpdGhDdHggYXMgX3dpdGhDdHgsIG5vcm1hbGl6ZUNsYXNzIGFzIF9ub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUgYXMgX25vcm1hbGl6ZVN0eWxlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfd2l0aFNjb3BlSWQgPSBuID0+IChfcHVzaFNjb3BlSWQoXCJkYXRhLXYtMmNiZGI1ZTlcIiksbj1uKCksX3BvcFNjb3BlSWQoKSxuKVxuY29uc3QgX2hvaXN0ZWRfMSA9IHtcbiAga2V5OiAwLFxuICBjbGFzczogXCJ0aXRsZSBjb250YWluZXJcIlxufVxuY29uc3QgX2hvaXN0ZWRfMiA9IHsgY2xhc3M6IFwiY29udGFpbmVyIGd1aWd1LWNvbnRhaW5lclwiIH1cbmNvbnN0IF9ob2lzdGVkXzMgPSB7IGNsYXNzOiBcInRvb2xzXCIgfVxuY29uc3QgX2hvaXN0ZWRfNCA9IHsgY2xhc3M6IFwidG9vbHMgc21hbGwtbWV0YV90b29sc1wiIH1cbmNvbnN0IF9ob2lzdGVkXzUgPSB7IGtleTogMSB9XG5jb25zdCBfaG9pc3RlZF82ID0geyBjbGFzczogXCJwb3BvdmVyLXRvb2xzXCIgfVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykge1xuICBjb25zdCBfY29tcG9uZW50X2VsX2ljb24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWljb25cIilcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9wb3BvdmVyID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1wb3BvdmVyXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfZHJhd2VyID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1kcmF3ZXJcIilcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtcbiAgICAoJHNldHVwLmhhc1RpdGxlKVxuICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIF9ob2lzdGVkXzEsIFtcbiAgICAgICAgICBfY3JlYXRlVk5vZGUoJHNldHVwW1wiVG9nZ2xlQnRuXCJdLCB7XG4gICAgICAgICAgICBleHBhbmQ6ICRzZXR1cC5zaG93U2lkZXIsXG4gICAgICAgICAgICBcIm9uVXBkYXRlOmV4cGFuZFwiOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICRldmVudCA9PiAoKCRzZXR1cC5zaG93U2lkZXIpID0gJGV2ZW50KSlcbiAgICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJleHBhbmRcIl0pLFxuICAgICAgICAgIF9yZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcInRpdGxlXCIsIHt9LCB1bmRlZmluZWQsIHRydWUpXG4gICAgICAgIF0pKVxuICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzIsIFtcbiAgICAgIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzMsIFtcbiAgICAgICAgX3JlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwidG9vbHNcIiwge30sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICAgIF0sIDUxMiAvKiBORUVEX1BBVENIICovKSwgW1xuICAgICAgICBbX3ZTaG93LCAkc2V0dXAuaGFzVG9vbHMmJiEkc2V0dXAuc21hbGxNZXRhXVxuICAgICAgXSksXG4gICAgICBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF80LCBbXG4gICAgICAgICghJHNldHVwLmhhc1RpdGxlKVxuICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCRzZXR1cFtcIlRvZ2dsZUJ0blwiXSwge1xuICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgIGV4cGFuZDogJHNldHVwLnNob3dTaWRlcixcbiAgICAgICAgICAgICAgXCJvblVwZGF0ZTpleHBhbmRcIjogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAkZXZlbnQgPT4gKCgkc2V0dXAuc2hvd1NpZGVyKSA9ICRldmVudCkpXG4gICAgICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJleHBhbmRcIl0pKVxuICAgICAgICAgIDogKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF81KSksXG4gICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3BvcG92ZXIsIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6IFwiYm90dG9tLXN0YXJ0XCIsXG4gICAgICAgICAgd2lkdGg6IDMwMCxcbiAgICAgICAgICB0cmlnZ2VyOiBcImNsaWNrXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIHJlZmVyZW5jZTogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfaWNvbiwgeyBzaXplOiBcIjIwcHhcIiB9LCB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoJHNldHVwW1wiTW9yZUZpbGxlZFwiXSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfNiwgW1xuICAgICAgICAgICAgICBfcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJ0b29sc1wiLCB7fSwgdW5kZWZpbmVkLCB0cnVlKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAzIC8qIEZPUldBUkRFRCAqL1xuICAgICAgICB9KVxuICAgICAgXSwgNTEyIC8qIE5FRURfUEFUQ0ggKi8pLCBbXG4gICAgICAgIFtfdlNob3csICRzZXR1cC5zbWFsbE1ldGFdXG4gICAgICBdKSxcbiAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBjbGFzczogX25vcm1hbGl6ZUNsYXNzKFskcHJvcHMubW9kZSA9PT0gJ3ZlcnRpY2FsJz8ndmVydGljYWwnOidob3Jpem9uJywgJ21haW4tY29udGFpbmVyJyBdKSxcbiAgICAgICAgcmVmOiBcImNvbnRhaW5lclwiXG4gICAgICB9LCBbXG4gICAgICAgIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBzdHlsZTogX25vcm1hbGl6ZVN0eWxlKCRwcm9wcy5zaWRlclN0eWxlKSxcbiAgICAgICAgICBjbGFzczogX25vcm1hbGl6ZUNsYXNzKFsnc2lkZXInLCB7b25seVNpZGVyOiRzZXR1cC5oYXNTaWRlciYmISRzZXR1cC5oYXNEZXRhaWwmJiEkc2V0dXAuaGFzTWFpbn1dKSxcbiAgICAgICAgICByZWY6IFwic2lkZXJcIlxuICAgICAgICB9LCBbXG4gICAgICAgICAgX3JlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwic2lkZXJcIiwge30sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICAgICAgXSwgNiAvKiBDTEFTUywgU1RZTEUgKi8pLCBbXG4gICAgICAgICAgW192U2hvdywgJHNldHVwLmhhc1NpZGVyJiYhJHNldHVwLnNtYWxsTWV0YSYmJHNldHVwLnNob3dTaWRlcl1cbiAgICAgICAgXSksXG4gICAgICAgIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzczogX25vcm1hbGl6ZUNsYXNzKFskcHJvcHMubW9kZSA9PT0gJ3ZlcnRpY2FsJz8ndmVydGljYWwnOidob3Jpem9uJywgJ3Jlc2l6ZXItY29udGFpbmVyJyBdKSxcbiAgICAgICAgICByZWY6IFwicmVzaXplckNvbnRhaW5lclwiXG4gICAgICAgIH0sIFtcbiAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzOiBcInJlc2l6ZXJcIixcbiAgICAgICAgICAgIHRpdGxlOiBcIlx1NEZBN1x1OEZCOVx1NjgwRnJlc2l6ZXJcIixcbiAgICAgICAgICAgIG9uUG9pbnRlcmRvd246ICRzZXR1cC5kcmFnTFJDb250cm9sbGVyXG4gICAgICAgICAgfSwgbnVsbCwgMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pXG4gICAgICAgIF0sIDIgLyogQ0xBU1MgKi8pLCBbXG4gICAgICAgICAgW192U2hvdywgJHNldHVwLmhhc1NpZGVyJiYoJHNldHVwLmhhc0RldGFpbHx8JHNldHVwLmhhc01haW4pJiYhJHNldHVwLnNtYWxsTWV0YSYmJHNldHVwLnNob3dTaWRlcl1cbiAgICAgICAgXSksXG4gICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzOiBfbm9ybWFsaXplQ2xhc3MoWyRwcm9wcy5yaWdodE1vZGUgPT09ICd2ZXJ0aWNhbCc/J3ZlcnRpY2FsJzonaG9yaXpvbicsJ3JpZ2h0J10pLFxuICAgICAgICAgIHJlZjogXCJyaWdodENvbnRhaW5lclwiXG4gICAgICAgIH0sIFtcbiAgICAgICAgICBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBzdHlsZTogX25vcm1hbGl6ZVN0eWxlKCRwcm9wcy5tYWluU3R5bGUpLFxuICAgICAgICAgICAgY2xhc3M6IF9ub3JtYWxpemVDbGFzcyhbJ21haW4nLCB7bm9EZXRhaWw6ISRzZXR1cC5oYXNEZXRhaWx9XSksXG4gICAgICAgICAgICByZWY6IFwibWFpblwiXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgX3JlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7fSwgdW5kZWZpbmVkLCB0cnVlKVxuICAgICAgICAgIF0sIDYgLyogQ0xBU1MsIFNUWUxFICovKSwgW1xuICAgICAgICAgICAgW192U2hvdywgJHNldHVwLmhhc01haW5dXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgY2xhc3M6IF9ub3JtYWxpemVDbGFzcyhbJHByb3BzLnJpZ2h0TW9kZSA9PT0gJ3ZlcnRpY2FsJz8ndmVydGljYWwnOidob3Jpem9uJywgJ3Jlc2l6ZXItY29udGFpbmVyJyBdKSxcbiAgICAgICAgICAgIHJlZjogXCJtYWluUmVzaXplckNvbnRhaW5lclwiXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBcInJlc2l6ZXJcIixcbiAgICAgICAgICAgICAgdGl0bGU6IFwibWFpbiByZXNpemVyXCIsXG4gICAgICAgICAgICAgIG9uUG9pbnRlcmRvd246ICRzZXR1cC5kcmFnTFJDb250cm9sbGVyXG4gICAgICAgICAgICB9LCBudWxsLCAzMiAvKiBIWURSQVRFX0VWRU5UUyAqLylcbiAgICAgICAgICBdLCAyIC8qIENMQVNTICovKSwgW1xuICAgICAgICAgICAgW192U2hvdywgJHNldHVwLmhhc0RldGFpbCYmJHNldHVwLmhhc01haW5dXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgc3R5bGU6IF9ub3JtYWxpemVTdHlsZSgkcHJvcHMuZGV0YWlsU3R5bGUpLFxuICAgICAgICAgICAgY2xhc3M6IFwiZGV0YWlsXCJcbiAgICAgICAgICB9LCBbXG4gICAgICAgICAgICBfcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJkZXRhaWxcIiwge30sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICAgICAgICBdLCA0IC8qIFNUWUxFICovKSwgW1xuICAgICAgICAgICAgW192U2hvdywgJHNldHVwLmhhc0RldGFpbF1cbiAgICAgICAgICBdKVxuICAgICAgICBdLCAyIC8qIENMQVNTICovKVxuICAgICAgXSwgMiAvKiBDTEFTUyAqLylcbiAgICBdKSxcbiAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9kcmF3ZXIsIHtcbiAgICAgIG1vZGVsVmFsdWU6ICRzZXR1cC5zaG93RHJhd2VyLFxuICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gJGV2ZW50ID0+ICgoJHNldHVwLnNob3dEcmF3ZXIpID0gJGV2ZW50KSksXG4gICAgICBvbkNsb3NlOiAkc2V0dXAuY2xvc2VEcmF3ZXIsXG4gICAgICB0aXRsZTogXCJcIixcbiAgICAgIGRpcmVjdGlvbjogXCJsdHJcIixcbiAgICAgIHNpemU6IFwiNTAlXCJcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgIF9yZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcInNpZGVyXCIsIHt9LCB1bmRlZmluZWQsIHRydWUpXG4gICAgICBdKSxcbiAgICAgIF86IDMgLyogRk9SV0FSREVEICovXG4gICAgfSwgOCAvKiBQUk9QUyAqLywgW1wibW9kZWxWYWx1ZVwiXSlcbiAgXSwgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovKSlcbn0iLCAiaW1wb3J0IHNjcmlwdCBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvZ3VpZ3VfcG0vZ3VpZ3VfcG0vcHVibGljL2pzL2NvbXBvbmVudHMvcGFnZS9pbmRleC52dWU/dHlwZT1zY3JpcHRcIjtpbXBvcnQgc3R5bGUwIGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndV9wbS9ndWlndV9wbS9wdWJsaWMvanMvY29tcG9uZW50cy9wYWdlL2luZGV4LnZ1ZT90eXBlPXN0eWxlJmluZGV4PTBcIjtzdHlsZTAoc2NyaXB0KTtpbXBvcnQge3JlbmRlciB9IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndV9wbS9ndWlndV9wbS9wdWJsaWMvanMvY29tcG9uZW50cy9wYWdlL2luZGV4LnZ1ZT90eXBlPXRlbXBsYXRlXCI7IHNjcmlwdC5yZW5kZXIgPSByZW5kZXI7c2NyaXB0Ll9fZmlsZSA9IFwiLi4vZ3VpZ3VfcG0vZ3VpZ3VfcG0vcHVibGljL2pzL2NvbXBvbmVudHMvcGFnZS9pbmRleC52dWVcIjtzY3JpcHQuX19zY29wZUlkID0gXCJkYXRhLXYtMmNiZGI1ZTlcIjtleHBvcnQgZGVmYXVsdCBzY3JpcHQ7IiwgIlxuPHRlbXBsYXRlPlxuXHQ8ZGl2IGNsYXNzPVwic2lkZXItY29udGFpbmVyXCIgdi1sb2FkaW5nPVwibG9hZGluZ1wiPlxuXHRcdDxkaXYgY2xhc3M9XCJidG4tY29udGFpbmVyXCI+XG5cdFx0XHQ8ZWwtYnV0dG9uIHYtaWY9XCJwZXJtaXNzaW9ucy5jcmVhdGVQZXJtaXNzaW9uXCIgdHlwZT1cInByaW1hcnlcIiBAY2xpY2s9XCJjcmVhdGVPcmdhbml6YXRpb25cIj5cdTY1QjBcdTVFRkFcdTdFQzRcdTdFQzc8L2VsLWJ1dHRvbj5cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPVwidHJlZS1jb250YWluZXJcIj5cblx0XHRcdDxlbC10cmVlXG5cdFx0XHRcdHYtaWY9XCJvcmdhbml6YXRpb25UcmVlLmxlbmd0aD4wXCJcblx0XHRcdFx0OmRhdGE9XCJvcmdhbml6YXRpb25UcmVlXCJcblx0XHRcdFx0QG5vZGUtY2xpY2s9XCJoYW5kbGVOb2RlQ2xpY2tcIlxuXHRcdFx0XHRkZWZhdWx0RXhwYW5kQWxsXG5cdFx0XHRcdGhpZ2hsaWdodEN1cnJlbnRcblx0XHRcdFx0bm9kZUtleT1cIm5hbWVcIlxuXHRcdFx0XHQ6Y3VycmVudE5vZGVLZXk9XCJjdXJyZW50Tm9kZUtleVwiXG5cdFx0XHRcdDpleHBhbmRPbkNsaWNrTm9kZT1cImZhbHNlXCJcblx0XHRcdFx0ZHJhZ2dhYmxlXG5cdFx0XHRcdEBub2RlLWRyb3A9XCJoYW5kbGVEcm9wXCJcblx0XHRcdFx0OmFsbG93RHJvcD1cImFsbG93RHJvcFwiXG5cdFx0XHQ+XG5cdFx0XHRcdDx0ZW1wbGF0ZSAjZGVmYXVsdD1cInsgbm9kZSwgZGF0YSB9XCI+XG5cdFx0XHRcdFx0PFRyZWVJdGVtXG5cdFx0XHRcdFx0XHQ6bm9kZT1cIm5vZGVcIlxuXHRcdFx0XHRcdFx0QHJlbG9hZD1cImdldE9yZ2FuaXphdGlvbnNcIlxuXHRcdFx0XHRcdD48L1RyZWVJdGVtPlxuXHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0PC9lbC10cmVlPlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cCBsYW5nPSd0cyc+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHRvUmF3fSBmcm9tICd2dWUnO1xuaW1wb3J0IHR5cGUge1xuXHRBbGxvd0Ryb3BUeXBlLFxuXHROb2RlRHJvcFR5cGUsXG59IGZyb20gJ2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RyZWUvc3JjL3RyZWUudHlwZSc7XG5pbXBvcnQgdHlwZSB7IERyYWdFdmVudHMgfSBmcm9tICdlbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90cmVlL3NyYy9tb2RlbC91c2VEcmFnTm9kZSc7XG5pbXBvcnQgdHlwZSBOb2RlIGZyb20gJ2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RyZWUvc3JjL21vZGVsL25vZGUnO1xuaW1wb3J0IHsgRWxNZXNzYWdlIH0gZnJvbSAnZWxlbWVudC1wbHVzJztcblxuaW1wb3J0IHsgbGlzdDJUcmVlIH0gZnJvbSAnLi4vaGVscGVyJztcbmltcG9ydCB0eXBlIHsgT3JnYW5pemF0aW9uLCBPcmdhbml6YXRpb25UeXBlLCBQZXJtaXNzaW9ucyB9IGZyb20gJy4uL3R5cGUnO1xuXG5pbXBvcnQgVHJlZUl0ZW0gZnJvbSAnLi9UcmVlSXRlbS52dWUnO1xuaW50ZXJmYWNlIFByb3Bze1xuXHRtb2RlbFZhbHVlPzpPcmdhbml6YXRpb25cblx0cGVybWlzc2lvbnM6IFBlcm1pc3Npb25zXG59XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzPFByb3BzPigpO1xuaW50ZXJmYWNlIEVtaXR7XG5cdChlOid1cGRhdGU6bW9kZWxWYWx1ZScsIG9yZ2FuaXphdGlvbjphbnkgKTp2b2lkXG59XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHM8RW1pdD4oKTtcbmNvbnN0IG9yZ2FuaXphdGlvbkxpc3QgPSByZWY8T3JnYW5pemF0aW9uW10+KFtdKTtcbmNvbnN0IGN1cnJlbnROb2RlS2V5ID0gcmVmPHN0cmluZz4oJycpO1xuY29uc3QgbG9hZGluZyA9IHJlZjxib29sZWFuPihmYWxzZSk7XG5vbk1vdW50ZWQoKCk9Pntcblx0Z2V0T3JnYW5pemF0aW9ucygpO1xufSk7XG5hc3luYyBmdW5jdGlvbiBnZXRPcmdhbml6YXRpb25zKCl7XG5cdGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuXHRjb25zdCByZXMgPSBhd2FpdCBmcmFwcGUuY2FsbDx7IG1lc3NhZ2U6IE9yZ2FuaXphdGlvbltdIH0+KHtcblx0XHRtZXRob2Q6ICd0aWFuanlfb3JnYW5pemF0aW9uLnRpYW5qeV9vcmdhbml6YXRpb24ucGFnZS50aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy50aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy5nZXRfb3JnYW5pemF0aW9ucycsXG5cdH0pO1xuXHRvcmdhbml6YXRpb25MaXN0LnZhbHVlID0gcmVzPy5tZXNzYWdlfHxbXTtcblx0aWYgKCFjdXJyZW50Tm9kZUtleS52YWx1ZSl7XG5cdFx0Y3VycmVudE5vZGVLZXkudmFsdWUgPSBvcmdhbml6YXRpb25MaXN0LnZhbHVlWzBdPy5uYW1lO1xuXHRcdGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgb3JnYW5pemF0aW9uTGlzdC52YWx1ZVswXSk7XG5cdH1cblx0bG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG5jb25zdCBvcmdhbml6YXRpb25UcmVlID0gY29tcHV0ZWQoKCk9Pntcblx0Zm9yIChjb25zdCBvcmcgb2Ygb3JnYW5pemF0aW9uTGlzdC52YWx1ZSl7XG5cdFx0b3JnLnBlcm1pc3Npb25zID0gcHJvcHMucGVybWlzc2lvbnM7XG5cdH1cblx0cmV0dXJuIGxpc3QyVHJlZSh0b1Jhdyhvcmdhbml6YXRpb25MaXN0LnZhbHVlKSwgJ3BhcmVudF9vcmdhbml6YXRpb24nKTtcbn0pO1xuXG5mdW5jdGlvbiBoYW5kbGVOb2RlQ2xpY2soZGF0YTpPcmdhbml6YXRpb24pe1xuXHRlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGRhdGEpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPcmdhbml6YXRpb24oKXtcblx0Y29uc3QgbmV3RG9jID0gZnJhcHBlLm1vZGVsLm1ha2VfbmV3X2RvY19hbmRfZ2V0X25hbWUoJ1RpYW5qeSBPcmdhbml6YXRpb24nKTtcblx0ZnJhcHBlLnNldF9yb3V0ZShbJ2Zvcm0nLCAnVGlhbmp5IE9yZ2FuaXphdGlvbicsIG5ld0RvY10pO1xufVxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlRHJvcChcblx0ZHJhZ2dpbmdOb2RlOiBOb2RlLFxuXHRkcm9wTm9kZTogTm9kZSxcblx0ZHJvcFR5cGU6IE5vZGVEcm9wVHlwZSxcblx0ZXY6IERyYWdFdmVudHMsXG4pe1xuXHRjb25zdCBiZWZvcmUgPSBkcm9wVHlwZT09PSdpbm5lcic/ZmFsc2U6ZHJvcFR5cGUgPT09J2JlZm9yZSc7XG5cdGNvbnN0IGNoaWxkcmVuID0gZHJvcFR5cGU9PT0naW5uZXInO1xuXHRsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcblx0YXdhaXQgZnJhcHBlLmNhbGwoJ2d1aWd1LnRyZWUudHJlZV9zb3J0Jywge1xuXHRcdGRvY3R5cGU6ICdUaWFuankgT3JnYW5pemF0aW9uJyxcblx0XHR0YXJnZXQ6ZHJvcE5vZGUuZGF0YS5uYW1lLFxuXHRcdGRvY3M6W2RyYWdnaW5nTm9kZS5kYXRhLm5hbWVdLFxuXHRcdGJlZm9yZSxcblx0XHRjaGlsZHJlbixcblx0fSk7XG5cdGdldE9yZ2FuaXphdGlvbnMoKTtcbn1cblxuZnVuY3Rpb24gYWxsb3dEcm9wKFxuXHRkcmFnZ2luZ05vZGU6IE5vZGUsXG5cdGRyb3BOb2RlOiBOb2RlLFxuXHRkcm9wVHlwZTogQWxsb3dEcm9wVHlwZSxcbil7XG5cdHN3aXRjaCAoZHJvcFR5cGUpe1xuXHRcdGNhc2UgJ25leHQnOlxuXHRcdGNhc2UgJ3ByZXYnOiByZXR1cm4gYmVmb3JlKGRyYWdnaW5nTm9kZSwgZHJvcE5vZGUpO1xuXHRcdGNhc2UgJ2lubmVyJzogcmV0dXJuIGlubmVyKGRyYWdnaW5nTm9kZSwgZHJvcE5vZGUpO1xuXHRcdGRlZmF1bHQ6IHJldHVybiB0cnVlO1xuXHR9XG59XG5mdW5jdGlvbiBpbm5lcihcblx0ZHJhZ2dpbmdOb2RlOiBOb2RlLFxuXHRkcm9wTm9kZTogTm9kZSxcbil7XG5cdC8vIFx1NjUzRVx1NTIzMFx1NTE3Nlx1NEVENlx1ODI4Mlx1NzBCOVx1NTE4NVxuXHQvLyBcdTUyMjRcdTY1QURcdTgwRkRcdTRFMERcdTgwRkRcdTRGNUNcdTRFM0FcdThGRDlcdTRFMkFcdTgyODJcdTcwQjlcdTc2ODRcdTVCNTBcdTgyODJcdTcwQjlcblx0aWYgKCFkcm9wTm9kZS5kYXRhLmNoaWxkX3R5cGVfbGlzdC5zb21lKHR5cGU9PnR5cGUubmFtZT09PWRyYWdnaW5nTm9kZS5kYXRhLnR5cGUpKXtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBiZWZvcmUoXG5cdGRyYWdnaW5nTm9kZTogTm9kZSxcblx0ZHJvcE5vZGU6IE5vZGUsXG4pe1xuXHRpZiAoZHJvcE5vZGUucGFyZW50LmxldmVsPT09MCYmZHJhZ2dpbmdOb2RlLmRhdGEudHlwZV9kb2Mucm9vdF9vbmx5IT09MSl7XG5cdFx0Y29uc29sZS5sb2coZHJvcE5vZGUucGFyZW50LmxldmVsLCBkcmFnZ2luZ05vZGUuZGF0YS50eXBlX2RvYy5yb290X29ubHksICdmYWxzZScpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHQvLyBcdTRFMERcdTY2MkZcdTY1M0VcdTUyMzBcdTY4MzlcdTgyODJcdTcwQjlcdUZGMENcdTUyMjRcdTY1QURcdTgwRkRcdTRFMERcdTgwRkRcdTRGNUNcdTRFM0FcdTUxNzZcdTRFRDZcdTgyODJcdTcwQjlcdTc2ODRcdTVCNTBcdTdFQTdcblx0aWYgKGRyb3BOb2RlLnBhcmVudC5sZXZlbCE9PTAmJiFkcm9wTm9kZS5wYXJlbnQuZGF0YS5jaGlsZF90eXBlX2xpc3Quc29tZSh0eXBlPT50eXBlLm5hbWU9PT1kcmFnZ2luZ05vZGUuZGF0YS50eXBlKSl7XG5cdFx0Y29uc29sZS5sb2coZHJvcE5vZGUucGFyZW50LmxldmVsLCAnZmFsc2UnKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIHRydWU7XG59XG5mcmFwcGUuc29ja2V0aW8uZG9jdHlwZV9zdWJzY3JpYmUoJ1RpYW5qeSBPcmdhbml6YXRpb24nKTtcbmZyYXBwZS5yZWFsdGltZS5vbignbGlzdF91cGRhdGUnLCBwID0+IHtcblx0aWYgKHAuZG9jdHlwZSAhPT0gJ1RpYW5qeSBPcmdhbml6YXRpb24nKSB7IHJldHVybjsgfVxuXHRnZXRPcmdhbml6YXRpb25zKCk7XG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPSdsZXNzJyBzY29wZWQ+XG4uc2lkZXItY29udGFpbmVye1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRoZWlnaHQ6IDEwMCU7XG5cdHBhZGRpbmctdG9wOiA4cHg7XG5cdC5idG4tY29udGFpbmVye1xuXHRcdG1hcmdpbi1ib3R0b206IDhweDtcblx0fVxuXHQudHJlZS1jb250YWluZXJ7XG5cdFx0b3ZlcmZsb3cteTogYXV0bztcblx0fVxufVxuPC9zdHlsZT5cbiIsICJleHBvcnQgaW50ZXJmYWNlIEl0ZW17XG5cdG5hbWU6c3RyaW5nLFxuXHRbcGFyZW50OnN0cmluZ106YW55XG59XG5leHBvcnQgaW50ZXJmYWNlIFRyZWVJdGVtRGF0YSBleHRlbmRzIEl0ZW0ge1xuICBjaGlsZHJlbj86IHRoaXNbXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsaXN0MlRyZWU8VCBleHRlbmRzIEl0ZW0+KGxpc3REYXRhOiBUW10sIHBhcmVudEZpZWxkOnN0cmluZykge1xuXHRjb25zdCBsaXN0RGF0YUNvcHk6VFtdICA9IHN0cnVjdHVyZWRDbG9uZShsaXN0RGF0YSk7XG5cdGNvbnN0IHRyZWVEYXRhOiAoVCAmIFRyZWVJdGVtRGF0YSlbXSA9IFtdO1xuXHRjb25zdCBtYXA6UmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuXHRsaXN0RGF0YUNvcHkuZm9yRWFjaChpdGVtID0+IHtcblx0ICBtYXBbaXRlbS5uYW1lXSA9IGl0ZW07XG5cdH0pO1xuXHRsaXN0RGF0YUNvcHkuZm9yRWFjaChpdGVtID0+IHtcblx0ICBjb25zdCBwYXJlbnQgPSBtYXBbaXRlbVtwYXJlbnRGaWVsZF0gfHwgMF07XG5cdCAgaWYgKHBhcmVudCkge1xuXHRcdChwYXJlbnQuY2hpbGRyZW4gfHwgKHBhcmVudC5jaGlsZHJlbiA9IFtdKSkucHVzaChpdGVtKTtcblx0ICB9IGVsc2Uge1xuXHRcdHRyZWVEYXRhLnB1c2goaXRlbSk7XG5cdCAgfVxuXHR9KTtcblx0cmV0dXJuIHRyZWVEYXRhO1xuICB9XG4iLCAiXG48dGVtcGxhdGU+XG5cdDxkaXYgY2xhc3M9XCJjdXN0b20tdHJlZS1ub2RlXCI+XG5cdFx0PHNwYW4+e3sgbm9kZS5sYWJlbCB9fTwvc3Bhbj5cblx0XHQ8ZWwtZHJvcGRvd24gQGNvbW1hbmQ9XCJjb21tYW5kXCIgdi1pZj1cIm5vZGUuZGF0YS5wZXJtaXNzaW9ucy5jcmVhdGVQZXJtaXNzaW9ufHxub2RlLmRhdGEucGVybWlzc2lvbnMuZGVsZXRlUGVybWlzc2lvblwiPlxuXHRcdFx0PHNwYW4gY2xhc3M9XCJlbC1kcm9wZG93bi1saW5rXCI+XG5cdFx0XHRcdDxlbC1pY29uIGNsYXNzPVwiZWwtaWNvbi0tcmlnaHRcIiBAY2xpY2s9XCJlPT5lLnN0b3BQcm9wYWdhdGlvbigpXCI+XG5cdFx0XHRcdFx0PE1vcmVGaWxsZWQgLz5cblx0XHRcdFx0PC9lbC1pY29uPlxuXHRcdFx0PC9zcGFuPlxuXHRcdFx0PHRlbXBsYXRlICNkcm9wZG93bj5cblx0XHRcdFx0PGVsLWRyb3Bkb3duLW1lbnU+XG5cdFx0XHRcdFx0PGVsLWRyb3Bkb3duLWl0ZW0gdi1pZj1cImNoaWxkVHlwZXMubGVuZ3RoPjAmJm5vZGUuZGF0YS5wZXJtaXNzaW9ucy5jcmVhdGVQZXJtaXNzaW9uXCIgY29tbWFuZD1cImFkZFwiPlxuXHRcdFx0XHRcdFx0PGVsLXBvcG92ZXIgOnBvcHBlci1zdHlsZT1cIntwYWRkaW5nOjB9XCIgcGxhY2VtZW50PVwicmlnaHQtc3RhcnRcIiB0cmlnZ2VyPVwiaG92ZXJcIiA6b2Zmc2V0PVwiMTVcIj5cblx0XHRcdFx0XHRcdFx0PHRlbXBsYXRlICNyZWZlcmVuY2U+XG5cdFx0XHRcdFx0XHRcdFx0PHNwYW4+XHU2NUIwXHU1RUZBXHU1QjUwXHU4MjgyXHU3MEI5PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0XHRcdFx0XHQ8ZWwtbWVudSBjbGFzcz1cImNyZWF0ZS1tZW51XCIgbW9kZT1cInZlcnRpY2FsXCI+XG5cdFx0XHRcdFx0XHRcdFx0PGVsLW1lbnUtaXRlbSBjbGFzcz1cImNyZWF0ZV90eXBlXCIgdi1mb3I9XCJ0eXBlIGluIGNoaWxkVHlwZXNcIiBAY2xpY2s9XCJjcmVhdGVCeVR5cGUodHlwZSlcIj57eyB0eXBlLm5hbWUgfX08L2VsLW1lbnUtaXRlbT5cblx0XHRcdFx0XHRcdFx0PC9lbC1tZW51PlxuXHRcdFx0XHRcdFx0PC9lbC1wb3BvdmVyPlxuXHRcdFx0XHRcdDwvZWwtZHJvcGRvd24taXRlbT5cblx0XHRcdFx0XHQ8ZWwtZHJvcGRvd24taXRlbSBcblx0XHRcdFx0XHRcdGNvbW1hbmQ9XCJkZWxldGVcIiBcblx0XHRcdFx0XHRcdHYtaWY9XCJub2RlLmRhdGEucGVybWlzc2lvbnMuZGVsZXRlUGVybWlzc2lvbiYmIW5vZGUuZGF0YS5jaGlsZHJlbj8ubGVuZ3RoXCJcblx0XHRcdFx0XHQ+PHNwYW4gY2xhc3M9XCJkZWxldGVcIj5cdTUyMjBcdTk2NjQ8L3NwYW4+PC9lbC1kcm9wZG93bi1pdGVtPlxuXHRcdFx0XHQ8L2VsLWRyb3Bkb3duLW1lbnU+XG5cdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdDwvZWwtZHJvcGRvd24+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cCBsYW5nPSd0cyc+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHRvUmF3fSBmcm9tICd2dWUnO1xuaW1wb3J0IHR5cGUgeyBPcmdhbml6YXRpb24sIE9yZ2FuaXphdGlvblR5cGUgfSBmcm9tICcuLi90eXBlJztcbmltcG9ydCB0eXBlIE5vZGUgZnJvbSAnZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdHJlZS9zcmMvbW9kZWwvbm9kZSdcbmltcG9ydCB7IE1vcmVGaWxsZWQgfSBmcm9tICdAZWxlbWVudC1wbHVzL2ljb25zLXZ1ZSc7XG5pbXBvcnQgeyBFbE1lc3NhZ2UsIEVsTWVzc2FnZUJveCB9IGZyb20gJ2VsZW1lbnQtcGx1cyc7XG5cbmludGVyZmFjZSBQcm9wc3tcblx0bm9kZTpOb2RlLFxufVxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wczxQcm9wcz4oKTtcbmludGVyZmFjZSBFbWl0e1xuXHQoZTondXBkYXRlOm1vZGVsVmFsdWUnLCBvcmdhbml6YXRpb246YW55ICk6dm9pZFxuXHQoZToncmVsb2FkJyApOnZvaWRcbn1cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0czxFbWl0PigpO1xuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVPcmdhbml6YXRpb24oKSB7XG5cdEVsTWVzc2FnZUJveC5jb25maXJtKFxuXHRcdFx0J1x1NjBBOFx1Nzg2RVx1OEJBNFx1NTIyMFx1OTY2NFx1NkI2NFx1N0VDNFx1N0VDN1x1NTQxNz8nLFxuXHRcdFx0J1x1OEJGN1x1Nzg2RVx1OEJBNCcsXG5cdFx0XHR7XG5cdFx0XHRcdGNvbmZpcm1CdXR0b25UZXh0OiAnXHU3ODZFXHU1QjlBJyxcblx0XHRcdFx0Y2FuY2VsQnV0dG9uVGV4dDogJ1x1NTNENlx1NkQ4OCcsXG5cdFx0XHRcdHR5cGU6ICd3YXJuaW5nJyxcblx0XHRcdH1cblx0XHQpLnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdFx0YXdhaXQgZnJhcHBlLmRiLmRlbGV0ZV9kb2MoJ1RpYW5qeSBPcmdhbml6YXRpb24nLCBwcm9wcy5ub2RlLmRhdGEubmFtZSlcblx0XHRcdGVtaXQoJ3JlbG9hZCcpXG5cdFx0XHRFbE1lc3NhZ2Uoe1xuXHRcdFx0XHR0eXBlOiAnc3VjY2VzcycsXG5cdFx0XHRcdG1lc3NhZ2U6ICdcdTUyMjBcdTk2NjRcdTYyMTBcdTUyOUYnLFxuXHRcdFx0fSk7XG5cdFx0fSkuY2F0Y2goKCkgPT4ge1xuXHRcdFx0RWxNZXNzYWdlKHtcblx0XHRcdFx0dHlwZTogJ2luZm8nLFxuXHRcdFx0XHRtZXNzYWdlOiAnXHU1M0Q2XHU2RDg4XHU1MjIwXHU5NjY0Jyxcblx0XHRcdH0pO1xuXHRcdH0pO1xufVxuXG5jb25zdCBjaGlsZFR5cGVzID0gY29tcHV0ZWQoKCk9PnByb3BzLm5vZGUuZGF0YS5jaGlsZF90eXBlX2xpc3QpXG5mdW5jdGlvbiBjb21tYW5kKHY6IHN0cmluZykge1xuXHRzd2l0Y2ggKHYpIHtcblx0XHRjYXNlICdkZWxldGUnOiByZXR1cm4gZGVsZXRlT3JnYW5pemF0aW9uKCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQnlUeXBlKHR5cGU6T3JnYW5pemF0aW9uVHlwZSl7XG5cdGNvbnN0IG5ld0RvYyA9IGZyYXBwZS5tb2RlbC5tYWtlX25ld19kb2NfYW5kX2dldF9uYW1lKCdUaWFuankgT3JnYW5pemF0aW9uJyk7XG5cdGZyYXBwZS5tb2RlbC5zZXRfdmFsdWUoJ1RpYW5qeSBPcmdhbml6YXRpb24nLCBuZXdEb2MsICd0eXBlJywgdHlwZS5uYW1lKTtcblx0ZnJhcHBlLm1vZGVsLnNldF92YWx1ZSgnVGlhbmp5IE9yZ2FuaXphdGlvbicsIG5ld0RvYywgJ3BhcmVudF9vcmdhbml6YXRpb24nLCBwcm9wcy5ub2RlLmRhdGEubmFtZSk7XG5cdGZyYXBwZS5zZXRfcm91dGUoWydmb3JtJywgJ1RpYW5qeSBPcmdhbml6YXRpb24nLCBuZXdEb2NdKTtcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz0nbGVzcycgc2NvcGVkPlxuOmRlZXAoLmRlbGV0ZSl7XG5cdGNvbG9yOiAjZjAwO1xufVxuLmNyZWF0ZV90eXBle1xuXHRoZWlnaHQ6IDI0cHg7XHRcbn1cbi5jcmVhdGUtbWVudXtcblx0Ym9yZGVyLXJpZ2h0OiAwO1xuXHRwYWRkaW5nOjA7XG59XG4uY3VzdG9tLXRyZWUtbm9kZXtcblx0ZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBmbGV4OiAxO1xuXHRwYWRkaW5nLXJpZ2h0OiA4cHg7XG5cdC5lbC1kcm9wZG93bi1saW5rIHtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdHZpc2liaWxpdHk6IGhpZGRlbjtcblx0fVxuXHQmOmhvdmVye1xuXHRcdC5lbC1kcm9wZG93bi1saW5re1xuXHRcdFx0dmlzaWJpbGl0eTogdmlzaWJsZTtcblx0XHR9XG5cdH1cbn1cblxuPC9zdHlsZT5cbiIsICJpbXBvcnQgXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvVHJlZUl0ZW0udnVlP3R5cGU9c3R5bGUtY3NzJmluZGV4PTBcIjtleHBvcnQgZGVmYXVsdCAoKSA9Pnt9IiwgImltcG9ydCB7IHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCByZW5kZXJMaXN0IGFzIF9yZW5kZXJMaXN0LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfd2l0aFNjb3BlSWQgPSBuID0+IChfcHVzaFNjb3BlSWQoXCJkYXRhLXYtYTgzNWFiYTdcIiksbj1uKCksX3BvcFNjb3BlSWQoKSxuKVxuY29uc3QgX2hvaXN0ZWRfMSA9IHsgY2xhc3M6IFwiY3VzdG9tLXRyZWUtbm9kZVwiIH1cbmNvbnN0IF9ob2lzdGVkXzIgPSB7IGNsYXNzOiBcImVsLWRyb3Bkb3duLWxpbmtcIiB9XG5jb25zdCBfaG9pc3RlZF8zID0gLyojX19QVVJFX18qLyBfd2l0aFNjb3BlSWQoKCkgPT4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIG51bGwsIFwiXHU2NUIwXHU1RUZBXHU1QjUwXHU4MjgyXHU3MEI5XCIsIC0xIC8qIEhPSVNURUQgKi8pKVxuY29uc3QgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi8gX3dpdGhTY29wZUlkKCgpID0+IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCB7IGNsYXNzOiBcImRlbGV0ZVwiIH0sIFwiXHU1MjIwXHU5NjY0XCIsIC0xIC8qIEhPSVNURUQgKi8pKVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykge1xuICBjb25zdCBfY29tcG9uZW50X2VsX2ljb24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWljb25cIilcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9tZW51X2l0ZW0gPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLW1lbnUtaXRlbVwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX21lbnUgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLW1lbnVcIilcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9wb3BvdmVyID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC1wb3BvdmVyXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfZHJvcGRvd25faXRlbSA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtZHJvcGRvd24taXRlbVwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX2Ryb3Bkb3duX21lbnUgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWRyb3Bkb3duLW1lbnVcIilcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9kcm9wZG93biA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtZHJvcGRvd25cIilcblxuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF8xLCBbXG4gICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwgbnVsbCwgX3RvRGlzcGxheVN0cmluZygkcHJvcHMubm9kZS5sYWJlbCksIDEgLyogVEVYVCAqLyksXG4gICAgKCRwcm9wcy5ub2RlLmRhdGEucGVybWlzc2lvbnMuY3JlYXRlUGVybWlzc2lvbnx8JHByb3BzLm5vZGUuZGF0YS5wZXJtaXNzaW9ucy5kZWxldGVQZXJtaXNzaW9uKVxuICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9kcm9wZG93biwge1xuICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICBvbkNvbW1hbmQ6ICRzZXR1cC5jb21tYW5kXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkcm9wZG93bjogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfZHJvcGRvd25fbWVudSwgbnVsbCwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgKCRzZXR1cC5jaGlsZFR5cGVzLmxlbmd0aD4wJiYkcHJvcHMubm9kZS5kYXRhLnBlcm1pc3Npb25zLmNyZWF0ZVBlcm1pc3Npb24pXG4gICAgICAgICAgICAgICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX2Ryb3Bkb3duX2l0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogXCJhZGRcIlxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfcG9wb3Zlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcInBvcHBlci1zdHlsZVwiOiB7cGFkZGluZzowfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBcInJpZ2h0LXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IFwiaG92ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxNVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2U6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaG9pc3RlZF8zXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfbWVudSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiY3JlYXRlLW1lbnVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwidmVydGljYWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdCgkc2V0dXAuY2hpbGRUeXBlcywgKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfbWVudV9pdGVtLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogXCJjcmVhdGVfdHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogJGV2ZW50ID0+ICgkc2V0dXAuY3JlYXRlQnlUeXBlKHR5cGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHR5cGUubmFtZSksIDEgLyogVEVYVCAqLylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXzogMiAvKiBEWU5BTUlDICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAzMiAvKiBQUk9QUywgRFlOQU1JQ19TTE9UUyAqLywgW1wib25DbGlja1wiXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAyNTYgLyogVU5LRVlFRF9GUkFHTUVOVCAqLykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAoJHByb3BzLm5vZGUuZGF0YS5wZXJtaXNzaW9ucy5kZWxldGVQZXJtaXNzaW9uJiYhJHByb3BzLm5vZGUuZGF0YS5jaGlsZHJlbj8ubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9kcm9wZG93bl9pdGVtLCB7XG4gICAgICAgICAgICAgICAgICAgICAga2V5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IFwiZGVsZXRlXCJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9ob2lzdGVkXzRcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfOiAxIC8qIFNUQUJMRSAqL1xuICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIF9ob2lzdGVkXzIsIFtcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfaWNvbiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBcImVsLWljb24tLXJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgb25DbGljazogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSBlPT5lLnN0b3BQcm9wYWdhdGlvbigpKVxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKCRzZXR1cFtcIk1vcmVGaWxsZWRcIl0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgfSkpXG4gICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gIF0pKVxufSIsICJpbXBvcnQgc2NyaXB0IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvVHJlZUl0ZW0udnVlP3R5cGU9c2NyaXB0XCI7aW1wb3J0IHN0eWxlMCBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL1RyZWVJdGVtLnZ1ZT90eXBlPXN0eWxlJmluZGV4PTBcIjtzdHlsZTAoc2NyaXB0KTtpbXBvcnQge3JlbmRlciB9IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvVHJlZUl0ZW0udnVlP3R5cGU9dGVtcGxhdGVcIjsgc2NyaXB0LnJlbmRlciA9IHJlbmRlcjtzY3JpcHQuX19maWxlID0gXCIuLi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvVHJlZUl0ZW0udnVlXCI7c2NyaXB0Ll9fc2NvcGVJZCA9IFwiZGF0YS12LWE4MzVhYmE3XCI7ZXhwb3J0IGRlZmF1bHQgc2NyaXB0OyIsICJpbXBvcnQgXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvT3JnYW5pemF0aW9uVHJlZS52dWU/dHlwZT1zdHlsZS1jc3MmaW5kZXg9MFwiO2V4cG9ydCBkZWZhdWx0ICgpID0+e30iLCAiaW1wb3J0IHsgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIHdpdGhDdHggYXMgX3dpdGhDdHgsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tIFwidnVlXCJcblxuY29uc3QgX3dpdGhTY29wZUlkID0gbiA9PiAoX3B1c2hTY29wZUlkKFwiZGF0YS12LTdmZjlkNGRiXCIpLG49bigpLF9wb3BTY29wZUlkKCksbilcbmNvbnN0IF9ob2lzdGVkXzEgPSB7IGNsYXNzOiBcInNpZGVyLWNvbnRhaW5lclwiIH1cbmNvbnN0IF9ob2lzdGVkXzIgPSB7IGNsYXNzOiBcImJ0bi1jb250YWluZXJcIiB9XG5jb25zdCBfaG9pc3RlZF8zID0geyBjbGFzczogXCJ0cmVlLWNvbnRhaW5lclwiIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9idXR0b24gPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLWJ1dHRvblwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX3RyZWUgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLXRyZWVcIilcbiAgY29uc3QgX2RpcmVjdGl2ZV9sb2FkaW5nID0gX3Jlc29sdmVEaXJlY3RpdmUoXCJsb2FkaW5nXCIpXG5cbiAgcmV0dXJuIF93aXRoRGlyZWN0aXZlcygoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIF9ob2lzdGVkXzEsIFtcbiAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzIsIFtcbiAgICAgICgkcHJvcHMucGVybWlzc2lvbnMuY3JlYXRlUGVybWlzc2lvbilcbiAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF9idXR0b24sIHtcbiAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgIHR5cGU6IFwicHJpbWFyeVwiLFxuICAgICAgICAgICAgb25DbGljazogJHNldHVwLmNyZWF0ZU9yZ2FuaXphdGlvblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShcIlx1NjVCMFx1NUVGQVx1N0VDNFx1N0VDN1wiKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfOiAxIC8qIFNUQUJMRSAqL1xuICAgICAgICAgIH0pKVxuICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgXSksXG4gICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF8zLCBbXG4gICAgICAoJHNldHVwLm9yZ2FuaXphdGlvblRyZWUubGVuZ3RoPjApXG4gICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfdHJlZSwge1xuICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgZGF0YTogJHNldHVwLm9yZ2FuaXphdGlvblRyZWUsXG4gICAgICAgICAgICBvbk5vZGVDbGljazogJHNldHVwLmhhbmRsZU5vZGVDbGljayxcbiAgICAgICAgICAgIGRlZmF1bHRFeHBhbmRBbGw6IFwiXCIsXG4gICAgICAgICAgICBoaWdobGlnaHRDdXJyZW50OiBcIlwiLFxuICAgICAgICAgICAgbm9kZUtleTogXCJuYW1lXCIsXG4gICAgICAgICAgICBjdXJyZW50Tm9kZUtleTogJHNldHVwLmN1cnJlbnROb2RlS2V5LFxuICAgICAgICAgICAgZXhwYW5kT25DbGlja05vZGU6IGZhbHNlLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBcIlwiLFxuICAgICAgICAgICAgb25Ob2RlRHJvcDogJHNldHVwLmhhbmRsZURyb3AsXG4gICAgICAgICAgICBhbGxvd0Ryb3A6ICRzZXR1cC5hbGxvd0Ryb3BcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoeyBub2RlLCBkYXRhIH0pID0+IFtcbiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKCRzZXR1cFtcIlRyZWVJdGVtXCJdLCB7XG4gICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICAgICAgICBvblJlbG9hZDogJHNldHVwLmdldE9yZ2FuaXphdGlvbnNcbiAgICAgICAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibm9kZVwiXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgICB9LCA4IC8qIFBST1BTICovLCBbXCJkYXRhXCIsIFwiY3VycmVudE5vZGVLZXlcIl0pKVxuICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgXSlcbiAgXSkpLCBbXG4gICAgW19kaXJlY3RpdmVfbG9hZGluZywgJHNldHVwLmxvYWRpbmddXG4gIF0pXG59IiwgImltcG9ydCBzY3JpcHQgZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Pcmdhbml6YXRpb25UcmVlLnZ1ZT90eXBlPXNjcmlwdFwiO2ltcG9ydCBzdHlsZTAgZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Pcmdhbml6YXRpb25UcmVlLnZ1ZT90eXBlPXN0eWxlJmluZGV4PTBcIjtzdHlsZTAoc2NyaXB0KTtpbXBvcnQge3JlbmRlciB9IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvT3JnYW5pemF0aW9uVHJlZS52dWU/dHlwZT10ZW1wbGF0ZVwiOyBzY3JpcHQucmVuZGVyID0gcmVuZGVyO3NjcmlwdC5fX2ZpbGUgPSBcIi4uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Pcmdhbml6YXRpb25UcmVlLnZ1ZVwiO3NjcmlwdC5fX3Njb3BlSWQgPSBcImRhdGEtdi03ZmY5ZDRkYlwiO2V4cG9ydCBkZWZhdWx0IHNjcmlwdDsiLCAiPHRlbXBsYXRlPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1jb250YWluZXJcIj5cblx0XHQ8Rm9ybURldGFpbCBcblx0XHRcdDpsb2FkaW5nPVwibG9hZGluZ1wiXG5cdFx0XHR2LWlmPVwibWV0YSYmZGV0YWlsXCJcblx0XHRcdDptZXRhPVwibWV0YVwiXG5cdFx0XHQ6b3B0aW9ucz1cInt9XCJcblx0XHRcdDp2YWx1ZT1cImRldGFpbFwiXG5cdFx0XHRpc0hpZGVDbG9zZVxuXHRcdD48L0Zvcm1EZXRhaWw+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cCBsYW5nPSd0cyc+XG5cdGltcG9ydCB7IHJlZiwgd2F0Y2gsIHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnO1xuXHRpbXBvcnQgRm9ybURldGFpbCBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi8uLi9ndWlndS9ndWlndS9wdWJsaWMvanMvRm9ybURldGFpbCdcblxuXHRjb25zdCBtZXRhID0gc2hhbGxvd1JlZjxsb2NhbHMuRG9jVHlwZT4oKTtcblxuXHRpbnRlcmZhY2UgUHJvcHN7XG5cdFx0ZG9jdHlwZTpzdHJpbmcsXG5cdFx0bmFtZT86c3RyaW5nXG5cdH1cblx0Y29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wczxQcm9wcz4oKTtcblx0Y29uc3QgZGV0YWlsID0gcmVmPGFueT4oKVxuXHRjb25zdCBsb2FkaW5nID0gcmVmPGJvb2xlYW4+KGZhbHNlKVxuXHR3YXRjaCgoKT0+cHJvcHMuZG9jdHlwZSwoKT0+e1xuXHRcdGdldE1ldGEocHJvcHMuZG9jdHlwZSlcblx0fSx7aW1tZWRpYXRlOnRydWV9KVxuXHR3YXRjaCgoKT0+cHJvcHMubmFtZSwgKCk9Pntcblx0XHRnZXREZXRhaWwoKVxuXHR9LCB7aW1tZWRpYXRlOnRydWV9KVxuXHRhc3luYyBmdW5jdGlvbiBnZXREZXRhaWwoKXtcblx0XHRsb2FkaW5nLnZhbHVlPXRydWVcblx0XHRpZighcHJvcHMubmFtZSl7XG5cdFx0XHRkZXRhaWwudmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHRsb2FkaW5nLnZhbHVlPWZhbHNlXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGRldGFpbC52YWx1ZSA9IGF3YWl0IGZyYXBwZS5kYi5nZXRfZG9jKHByb3BzLmRvY3R5cGUsIHByb3BzLm5hbWUpO1xuXHRcdGxvYWRpbmcudmFsdWU9ZmFsc2Vcblx0fVxuXHRhc3luYyBmdW5jdGlvbiBnZXRNZXRhKGRvY3R5cGU6IHN0cmluZykge1xuXHRcdGlmICghZG9jdHlwZSkgeyByZXR1cm47IH1cblx0XHRsZXQgbG9jYWxfbWV0YSA9IGZyYXBwZS5nZXRfbWV0YShkb2N0eXBlKTtcblx0XHRpZiAobG9jYWxfbWV0YSkge1xuXHRcdFx0bG9jYWxfbWV0YS5oaWRlX3Rvb2xiYXIgPSB0cnVlXG5cdFx0XHRtZXRhLnZhbHVlID0gbG9jYWxfbWV0YTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0YXdhaXQgZnJhcHBlLm1vZGVsLndpdGhfZG9jdHlwZShkb2N0eXBlKTtcblx0XHRsb2NhbF9tZXRhID0gZnJhcHBlLmdldF9tZXRhKGRvY3R5cGUpO1xuXHRcdGxvY2FsX21ldGEhLmhpZGVfdG9vbGJhciA9IHRydWVcblx0XHRtZXRhLnZhbHVlID0gbG9jYWxfbWV0YSB8fCB1bmRlZmluZWQ7XG5cdH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz0nbGVzcycgc2NvcGVkPlxuLmZvcm0tY29udGFpbmVye1xuXHRib3JkZXI6MXB4IHNvbGlkICNlZWU7XG5cdGhlaWdodDogMTAwJTtcblx0b3ZlcmZsb3c6IGF1dG87XG5cdDpkZWVwKC5mb3JtLXNlY3Rpb24gLmZvcm0tY29sdW1uOmZpcnN0LWNoaWxkKXtcblx0XHRwYWRkaW5nLWxlZnQ6IDE1cHg7XG5cdH1cblx0LnBsYWNlaG9sZGVye1xuXHRcdGhlaWdodDogNTAwcHg7XG5cdFx0bGluZS1oZWlnaHQ6IDUwMHB4O1xuXHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0fVxufVxuPC9zdHlsZT5cbiIsICI8dGVtcGxhdGU+XG5cdDxNYWluXG5cdFx0di1pZj1cInZhbHVlICYmIGRvY01ldGEgJiYgbmFtZVwiXG5cdFx0OmtleT1cImAke2RvY01ldGEubmFtZX06JHt2YWx1ZS5uYW1lfWBcIlxuXHRcdDptZXRhPVwiZG9jTWV0YVwiXG5cdFx0Om9wdGlvbnM9XCJvcHRpb25zXCJcblx0XHQ6bG9hZGluZz1cImxvYWRpbmdcIlxuXHRcdDpuYW1lPVwibmFtZVwiXG5cdFx0OmlzSGlkZUNsb3NlPVwiaXNIaWRlQ2xvc2VcIlxuXHRcdHYtbW9kZWw6dmFsdWU9XCJkb2NcIlxuXHRcdEByZWZyZXNoPVwicmVmcmVzaFwiIC8+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIiBzZXR1cD5cbmltcG9ydCB7IGNvbXB1dGVkLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5cbmltcG9ydCBnZXRMaW5rIGZyb20gJy4uL3V0aWxzL2dldExpbmsnO1xuXG5pbXBvcnQgTWFpbiBmcm9tICcuL01haW4udnVlJztcblxuZGVmaW5lT3B0aW9ucyh7IG5hbWU6ICdGb3JtRGV0YWlsOlJvb3QnLCBpbmhlcml0QXR0cnM6IGZhbHNlIH0pO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wczx7XG5cdC8qKiBcdTVGNTNcdTUyNEQgZG9jdHlwZSBcdTc2ODRcdTRGRTFcdTYwNkYgKi9cblx0bWV0YTogbG9jYWxzLkRvY1R5cGVcblx0LyoqIFx1NjU3MFx1NjM2RVx1OTAwOVx1OTg3OSAqL1xuXHRvcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuXG5cdC8qKiBcdTRFM0JcdTUzM0FcdTU3REZcdTc2ODQgdmFsdWUgKi9cblx0dmFsdWU/OiBhbnk7XG5cblx0LyoqIFx1NEUzQlx1NTMzQVx1NTdERlx1NjU3MFx1NjM2RVx1NjYyRlx1NTQyNlx1NTcyOFx1NTJBMFx1OEY3RFx1NEUyRCAqL1xuXHRsb2FkaW5nPzogYm9vbGVhbjtcblxuXG5cdGxpbmtGaWVsZD86IHN0cmluZztcblx0aXNIaWRlQ2xvc2U/OiBib29sZWFuXG59PigpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzPHtcblx0KGV2ZW50OiAncmVmcmVzaCcpOiB2b2lkO1xuXHQoZXZlbnQ6ICd1cGRhdGU6dmFsdWUnLCB2YWx1ZT86IGFueSk6IHZvaWQ7XG59PigpO1xuZnVuY3Rpb24gcmVmcmVzaCgpIHtcblx0ZW1pdCgncmVmcmVzaCcpO1xufVxuY29uc3QgZG9jID0gY29tcHV0ZWQoe1xuXHRnZXQ6ICgpID0+IHByb3BzLnZhbHVlLFxuXHRzZXQ6IHYgPT4gZW1pdCgndXBkYXRlOnZhbHVlJywgdiksXG59KTtcbmxldCBkb2NNZXRhTG9hZGluZ0RvY3R5cGUgPSAnJztcbmxldCBEb2NUeXBlTG9hZGluZ0lkID0gMDtcbmNvbnN0IGxpbmtGaWVsZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmxpbmtGaWVsZCk7XG5jb25zdCBkb2NNZXRhTG9hZGluZyA9IHNoYWxsb3dSZWY8bG9jYWxzLkRvY1R5cGU+KCk7XG5cbmNvbnN0IGxpbmsgPSBjb21wdXRlZCgoKSA9PiBnZXRMaW5rKGRvYy52YWx1ZSwgcHJvcHMubWV0YSwgbGlua0ZpZWxkLnZhbHVlKSk7XG5jb25zdCBuYW1lID0gY29tcHV0ZWQoKCkgPT4gbGluay52YWx1ZT8uWzFdIHx8IGRvYy52YWx1ZT8ubmFtZSk7XG53YXRjaCgoKSA9PiBsaW5rLnZhbHVlPy5bMF0sIGRvY3R5cGUgPT4ge1xuXHRpZiAoIWRvY3R5cGUpIHsgcmV0dXJuOyB9XG5cdGlmIChkb2N0eXBlID09PSBkb2NNZXRhTG9hZGluZ0RvY3R5cGUpIHsgcmV0dXJuOyB9XG5cdGRvY01ldGFMb2FkaW5nRG9jdHlwZSA9IGRvY3R5cGU7XG5cdGRvY01ldGFMb2FkaW5nLnZhbHVlID0gdW5kZWZpbmVkO1xuXHREb2NUeXBlTG9hZGluZ0lkKys7XG5cdGNvbnN0IGlkID0gRG9jVHlwZUxvYWRpbmdJZDtcblx0KGFzeW5jICgpID0+IHtcblx0XHRhd2FpdCBuZXcgUHJvbWlzZShyID0+IGZyYXBwZS5tb2RlbC53aXRoX2RvY3R5cGUoZG9jdHlwZSwgcikpO1xuXHRcdGNvbnN0IG1ldGEgPSBmcmFwcGUuZ2V0X2RvYygnRG9jVHlwZScsIGRvY3R5cGUpO1xuXHRcdGlmIChpZCAhPT0gRG9jVHlwZUxvYWRpbmdJZCkgeyByZXR1cm47IH1cblx0XHRpZiAoZG9jTWV0YUxvYWRpbmdEb2N0eXBlICE9PSBkb2N0eXBlKSB7IHJldHVybjsgfVxuXHRcdGRvY01ldGFMb2FkaW5nLnZhbHVlID0gbWV0YSB8fCB1bmRlZmluZWQ7XG5cdH0pKCk7XG59LCB7IGltbWVkaWF0ZTogdHJ1ZSB9KTtcbmNvbnN0IGRvY01ldGEgPSBjb21wdXRlZCgoKSA9PiB7XG5cdGNvbnN0IGRvY3R5cGUgPSBsaW5rLnZhbHVlPy5bMF07XG5cdGlmICghZG9jdHlwZSkgeyByZXR1cm4gcHJvcHMubWV0YTsgfVxuXHRpZiAoZG9jdHlwZSAhPT0gZG9jTWV0YUxvYWRpbmdEb2N0eXBlKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHJldHVybiBkb2NNZXRhTG9hZGluZy52YWx1ZTtcbn0pO1xuXG48L3NjcmlwdD5cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMaW5rKFxuXHRkYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pixcblx0bWV0YT86IGxvY2Fscy5Eb2NUeXBlLFxuXHRsaW5rRmllbGQ/OiBzdHJpbmdcbik6IFtzdHJpbmcsIHN0cmluZ10gfCB1bmRlZmluZWQge1xuXHRpZiAoIWRhdGEpIHsgcmV0dXJuOyB9XG5cdGlmICghbWV0YSkgeyByZXR1cm47IH1cblx0aWYgKCFsaW5rRmllbGQpIHsgcmV0dXJuOyB9XG5cdGNvbnN0IHsgZmllbGRzIH0gPSBtZXRhO1xuXHRpZiAoIWZpZWxkcykgeyByZXR1cm47IH1cblxuXHRjb25zdCBsaW5rID0gZGF0YVtsaW5rRmllbGRdO1xuXHRjb25zdCBuYW1lID0gdHlwZW9mIGxpbmsgPT09ICdzdHJpbmcnICYmIGxpbms7XG5cdGlmICghbmFtZSkgeyByZXR1cm47IH1cblxuXHRjb25zdCBmaWVsZCA9IGZpZWxkcy5maW5kKHYgPT4gdi5maWVsZG5hbWUgPT09IGxpbmtGaWVsZCk7XG5cdGlmICghZmllbGQpIHsgcmV0dXJuOyB9XG5cdGNvbnN0IG9wdGlvbiA9IGZpZWxkLm9wdGlvbnM7XG5cdGlmICghb3B0aW9uKSB7IHJldHVybjsgfVxuXG5cdGlmIChmaWVsZC5maWVsZHR5cGUgPT09ICdMaW5rJykgeyByZXR1cm4gW29wdGlvbiwgbmFtZV07IH1cblxuXHRpZiAoZmllbGQuZmllbGR0eXBlICE9PSAnRHluYW1pYyBMaW5rJykgeyByZXR1cm47IH1cblx0Y29uc3QgZHluYW1pY0xpbmtGaWVsZCA9IGZpZWxkcy5maW5kKHYgPT4gdi5maWVsZG5hbWUgPT09IG9wdGlvbik7XG5cdGlmICghZHluYW1pY0xpbmtGaWVsZCkgeyByZXR1cm47IH1cblx0aWYgKGR5bmFtaWNMaW5rRmllbGQuZmllbGR0eXBlICE9PSAnTGluaycpIHsgcmV0dXJuOyB9XG5cdGlmIChkeW5hbWljTGlua0ZpZWxkLm9wdGlvbnMgIT09ICdEb2NUeXBlJykgeyByZXR1cm47IH1cblx0Y29uc3QgZG9jdHlwZSA9IGRhdGFbb3B0aW9uXTtcblx0aWYgKHR5cGVvZiBkb2N0eXBlICE9PSAnc3RyaW5nJyB8fCAhZG9jdHlwZSkgeyByZXR1cm47IH1cblx0cmV0dXJuIFtkb2N0eXBlLCBuYW1lXTtcbn1cbiIsICI8dGVtcGxhdGU+XG5cdDxkaXYgcmVmPVwicm9vdFwiPlxuXHRcdDxIZWFkZXIgdi1tb2RlbDpvcGVuPVwib3BlblwiIDpoYXNTaWRlcj1cIiFzaW5nbGVfY29sdW1uXCIgOmlzSGlkZUNsb3NlPVwiaXNIaWRlQ2xvc2VcIiAgQGhpZGU9XCJoaWRlXCIgLz5cblx0XHQ8ZGl2IGNsYXNzPVwiY29udGFpbmVyIHBhZ2UtYm9keVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cInBhZ2UtdG9vbGJhciBoaWRlXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJwYWdlLXdyYXBwZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cInBhZ2UtY29udGVudFwiPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ3b3JrZmxvdy1idXR0b24tYXJlYSBidG4tZ3JvdXAgcHVsbC1yaWdodCBoaWRlXCI+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInJvdyBsYXlvdXQtbWFpblwiPlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbCBsYXlvdXQtbWFpbi1zZWN0aW9uLXdyYXBwZXJcIj5cblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImxheW91dC1tYWluLXNlY3Rpb25cIj5cblx0XHRcdFx0XHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInN0ZC1mb3JtLWxheW91dFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1sYXlvdXRcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1tZXNzYWdlIGhpZGRlblwiIC8+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tcGFnZVwiIC8+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwibGF5b3V0LWZvb3RlciBoaWRlXCIgLz5cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PGRpdiB2LWlmPVwiIXNpbmdsZV9jb2x1bW5cIiA6aGlkZGVuPVwiIW9wZW5cIlxuXHRcdFx0XHRcdFx0XHRjbGFzcz1cImNvbC1sZy0yIGxheW91dC1zaWRlLXNlY3Rpb25cIiAvPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuaW1wb3J0IHsgY29tcHV0ZWQsIHNoYWxsb3dSZWYsIG9uTW91bnRlZCwgb25Vbm1vdW50ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgdXNlU3RvcmFnZSB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5cbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXIudnVlJztcbmltcG9ydCBGb3JtIGZyb20gJy4vRm9ybSc7XG5pbXBvcnQgbG9hZERvYyBmcm9tICcuL2xvYWREb2MnO1xuaW1wb3J0IHVzZVN0b3JlIGZyb20gJy4vdXNlU3RvcmUnO1xuXG5kZWZpbmVPcHRpb25zKHsgbmFtZTogJ0Zvcm1EZXRhaWwnIH0pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzPHtcblx0LyoqIFx1NUY1M1x1NTI0RCBkb2N0eXBlIFx1NzY4NFx1NEZFMVx1NjA2RiAqL1xuXHRtZXRhOiBsb2NhbHMuRG9jVHlwZVxuXHQvKiogXHU2NTcwXHU2MzZFXHU5MDA5XHU5ODc5ICovXG5cdG9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIGFueT47XG5cblx0LyoqIFx1NEUzQlx1NTMzQVx1NTdERlx1NzY4NCB2YWx1ZSAqL1xuXHR2YWx1ZTogbG9jYWxzLkRvY3R5cGU7XG5cdG5hbWU6IHN0cmluZ1xuXG5cdC8qKiBcdTRFM0JcdTUzM0FcdTU3REZcdTY1NzBcdTYzNkVcdTY2MkZcdTU0MjZcdTU3MjhcdTUyQTBcdThGN0RcdTRFMkQgKi9cblx0bG9hZGluZz86IGJvb2xlYW47XG5cdGlzSGlkZUNsb3NlPzogYm9vbGVhblxufT4oKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0czx7XG5cdChldmVudDogJ3JlZnJlc2gnKTogdm9pZDtcblx0KGV2ZW50OiAndXBkYXRlOnZhbHVlJywgdmFsdWU/OiBhbnkpOiB2b2lkO1xufT4oKTtcblxuZnVuY3Rpb24gaGlkZSgpIHtcblx0ZW1pdCgndXBkYXRlOnZhbHVlJyk7XG59XG5jb25zdCBkZXRhaWxTdGF0ZSA9IHVzZVN0b3JlKCk7XG5jb25zdCBjdXJyZW50VGFiID0gY29tcHV0ZWQoe1xuXHRnZXQ6ICgpID0+IGRldGFpbFN0YXRlLmN1cnJlbnRUYWIsXG5cdHNldDogcyA9PiB7IGRldGFpbFN0YXRlLmN1cnJlbnRUYWIgPSBzOyB9LFxufSk7XG5jb25zdCBzaW5nbGVfY29sdW1uID0gY29tcHV0ZWQoKCkgPT4gQm9vbGVhbihwcm9wcy5tZXRhPy5oaWRlX3Rvb2xiYXIpKTtcblxuY29uc3Qgb3BlbiA9IHVzZVN0b3JhZ2UoYG1haW5WaWV3OkZvcm1EZXRhaWw6c2lkZXI6JHtwcm9wcy5tZXRhLm5hbWV9YCwgdHJ1ZSk7XG5jb25zdCB0dCA9IF9fO1xuXG5jb25zdCByb290ID0gc2hhbGxvd1JlZigpO1xubGV0IGxheW91dDogRm9ybSB8IHVuZGVmaW5lZDtcbmNvbnN0IG9uVXBkYXRlID0gKHsgZG9jdHlwZSwgbmFtZSwgbW9kaWZpZWQgfToge1xuXHRkb2N0eXBlOiBzdHJpbmc7XG5cdG5hbWU6IHN0cmluZztcblx0bW9kaWZpZWQ6IHN0cmluZztcbn0pID0+IHtcblx0aWYgKGRvY3R5cGUgIT09IHByb3BzLm1ldGEubmFtZSkgeyByZXR1cm47IH1cblx0aWYgKG5hbWUgIT09IHByb3BzLm5hbWUpIHsgcmV0dXJuOyB9XG5cdGlmICghbGF5b3V0KSB7IHJldHVybjsgfVxuXG5cdGlmIChtb2RpZmllZCA9PT0gbGF5b3V0LmRvYy5tb2RpZmllZCkgeyByZXR1cm47IH1cblx0aWYgKGxheW91dC5pc19kaXJ0eSgpKSB7XG5cdFx0bGF5b3V0LnNob3dfY29uZmxpY3RfbWVzc2FnZSgpO1xuXHR9IGVsc2Uge1xuXHRcdGxheW91dC5yZWxvYWRfZG9jKCk7XG5cdH1cbn07XG5vbk1vdW50ZWQoKCkgPT4ge1xuXHRjb25zdCBib2R5ID0gcm9vdC52YWx1ZTtcblx0aWYgKCFib2R5KSB7IHJldHVybjsgfVxuXHRjb25zdCBkb2N0eXBlID0gcHJvcHMubWV0YS5uYW1lO1xuXHRjb25zdCB7IG5hbWUgfSA9IHByb3BzO1xuXHRsb2FkRG9jKGRvY3R5cGUsIG5hbWUpLnRoZW4ociA9PiB7XG5cdFx0aWYgKCFyKSB7IHJldHVybjsgfVxuXHRcdGxheW91dCA9IG5ldyBGb3JtKGRvY3R5cGUsIG5hbWUsIGJvZHksIGhpZGUsIGN1cnJlbnRUYWIpO1xuXHRcdGxheW91dC5yZWZyZXNoKG5hbWUpO1xuXHR9KTtcblxuXHRmcmFwcGUucmVhbHRpbWUub24oJ2RvY191cGRhdGUnLCBvblVwZGF0ZSk7XG59KTtcbm9uVW5tb3VudGVkKCgpID0+IHtcblx0ZnJhcHBlLnJlYWx0aW1lLm9mZignZG9jX3VwZGF0ZScsIG9uVXBkYXRlKTtcbn0pO1xuXG48L3NjcmlwdD5cbiIsICI8dGVtcGxhdGU+XG5cdDxkaXYgOmNsYXNzPVwiJHN0eWxlLmhlYWRlclwiPlxuXHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtOCBwYWdlLXRpdGxlXCI+XG5cdFx0XHQ8IS0tIDxkaXYgY2xhc3M9XCJ0aXRsZS1pbWFnZSBoaWRlIGhpZGRlbi1tZCBoaWRkZW4tbGdcIj48L2Rpdj4gLS0+XG5cdFx0XHQ8IS0tIHRpdGxlIC0tPlxuXHRcdFx0PHNwYW5cblx0XHRcdFx0di1pZj1cImhhc1NpZGVyXCJcblx0XHRcdFx0Y2xhc3M9XCJzaWRlYmFyLXRvZ2dsZS1idG5cIlxuXHRcdFx0XHQ6dGl0bGU9XCJ0dCgnVG9nZ2xlIFNpZGViYXInKVwiPlxuXHRcdFx0XHQ8c3ZnIGNsYXNzPVwiaWNvbiBpY29uLW1kIHNpZGViYXItdG9nZ2xlLXBsYWNlaG9sZGVyXCI+XG5cdFx0XHRcdFx0PHVzZSBocmVmPVwiI2ljb24tbWVudVwiIC8+XG5cdFx0XHRcdDwvc3ZnPlxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cInNpZGViYXItdG9nZ2xlLWljb25cIlxuXHRcdFx0XHRcdEBjbGljaz1cIm9wZW5lZCA9ICFvcGVuZWRcIj5cblx0XHRcdFx0XHQ8c3ZnIGNsYXNzPVwiaWNvbiBpY29uLW1kXCI+XG5cdFx0XHRcdFx0XHQ8dXNlIHYtaWY9XCJvcGVuXCIgaHJlZj1cIiNpY29uLXNpZGViYXItZXhwYW5kXCIgLz5cblx0XHRcdFx0XHRcdDx1c2Ugdi1lbHNlIGhyZWY9XCIjaWNvbi1zaWRlYmFyLWNvbGxhcHNlXCIgLz5cblx0XHRcdFx0XHQ8L3N2Zz5cblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0PC9zcGFuPlxuXHRcdFx0PGRpdiBjbGFzcz1cImZsZXggZmlsbC13aWR0aCB0aXRsZS1hcmVhXCI+XG5cdFx0XHRcdDxkaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZsZXhcIj5cblx0XHRcdFx0XHRcdDxoMyBjbGFzcz1cImVsbGlwc2lzIHRpdGxlLXRleHRcIj48L2gzPlxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJpbmRpY2F0b3ItcGlsbCB3aGl0ZXNwYWNlLW5vd3JhcFwiIC8+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImVsbGlwc2lzIHN1Yi1oZWFkaW5nIGhpZGUgdGV4dC1tdXRlZFwiIC8+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IG1vcmUtYnV0dG9uIGhpZGVcIj5cblx0XHRcdFx0XHQ8c3ZnIGNsYXNzPVwiaWNvbiBpY29uLXNtXCI+XG5cdFx0XHRcdFx0XHQ8dXNlIGhyZWY9XCIjaWNvbi1kb3QtaG9yaXpvbnRhbFwiIC8+XG5cdFx0XHRcdFx0PC9zdmc+XG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiBjbGFzcz1cImZsZXggY29sIHBhZ2UtYWN0aW9ucyBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cdFx0XHQ8IS0tIGJ1dHRvbnMgLS0+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY3VzdG9tLWFjdGlvbnMgaGlkZSBoaWRkZW4teHMgaGlkZGVuLW1kXCIgLz5cblx0XHRcdDxkaXYgY2xhc3M9XCJzdGFuZGFyZC1hY3Rpb25zIGZsZXhcIj5cblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJwYWdlLWljb24tZ3JvdXAgaGlkZSBoaWRkZW4teHMgaGlkZGVuLXNtXCIgLz5cblx0XHRcdFx0PGRpdiBjbGFzcz1cIm1lbnUtYnRuLWdyb3VwIGhpZGVcIj5cblx0XHRcdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgaWNvbi1idG5cIlxuXHRcdFx0XHRcdFx0ZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXG5cdFx0XHRcdFx0XHRhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cblx0XHRcdFx0XHRcdDxzcGFuPlxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cIm1lbnUtYnRuLWdyb3VwLWxhYmVsXCI+XG5cdFx0XHRcdFx0XHRcdFx0PHN2ZyBjbGFzcz1cImljb24gaWNvbi1zbVwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHVzZSBocmVmPVwiI2ljb24tZG90LWhvcml6b250YWxcIiAvPlxuXHRcdFx0XHRcdFx0XHRcdDwvc3ZnPlxuXHRcdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0PHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0XCIgcm9sZT1cIm1lbnVcIiAvPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IGJ0bi1kZWZhdWx0IGJ0bi1zbSBoaWRlXCIgLz5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImFjdGlvbnMtYnRuLWdyb3VwIGhpZGVcIj5cblx0XHRcdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHRcdGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIlxuXHRcdFx0XHRcdFx0YXJpYS1leHBhbmRlZD1cImZhbHNlXCI+XG5cdFx0XHRcdFx0XHQ8c3Bhbj5cblx0XHRcdFx0XHRcdFx0PHNwYW5cblx0XHRcdFx0XHRcdFx0XHRjbGFzcz1cImFjdGlvbnMtYnRuLWdyb3VwLWxhYmVsXCI+e3tcblx0XHRcdFx0XHRcdFx0XHRcdHR0KCdBY3Rpb25zJylcblx0XHRcdFx0XHRcdFx0XHR9fTwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0PHN2ZyBjbGFzcz1cImljb24gaWNvbi14c1wiPlxuXHRcdFx0XHRcdFx0XHRcdDx1c2UgaHJlZj1cIiNpY29uLXNlbGVjdFwiIC8+XG5cdFx0XHRcdFx0XHRcdDwvc3ZnPlxuXHRcdFx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0XHRcdDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodFwiIHJvbGU9XCJtZW51XCIgLz5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLXNtIGhpZGUgcHJpbWFyeS1hY3Rpb25cIiAvPlxuXHRcdFx0XHQ8YnV0dG9uIHYtaWY9XCIhaXNIaWRlQ2xvc2VcIiBjbGFzcz1cImJ0biBidG4tc21cIiBAY2xpY2s9XCJoaWRlXCI+XG5cdFx0XHRcdFx0e3sgdHQoJ0Nsb3NlJykgfX1cblx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIiBzZXR1cD5cbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wczx7XG5cdGhhc1NpZGVyPzogYm9vbGVhbjtcblx0b3Blbj86IGJvb2xlYW47XG5cdGlzSGlkZUNsb3NlPzogYm9vbGVhbjtcbn0+KCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHM8e1xuXHQoZXZlbnQ6ICdoaWRlJyk6IHZvaWQ7XG5cdChldmVudDogJ3JlZnJlc2gnKTogdm9pZDtcblx0KGV2ZW50OiAndXBkYXRlOm9wZW4nLCBvcGVuPzogYm9vbGVhbik6IHZvaWQ7XG59PigpO1xuZnVuY3Rpb24gaGlkZSgpIHtcblx0ZW1pdCgnaGlkZScpO1xufVxuY29uc3Qgb3BlbmVkID0gY29tcHV0ZWQoe1xuXHRnZXQ6ICgpID0+IHByb3BzLm9wZW4sXG5cdHNldCh2KSB7IGVtaXQoJ3VwZGF0ZTpvcGVuJywgQm9vbGVhbih2KSk7IH0sXG59KTtcbmNvbnN0IHR0ID0gX187XG5cbjwvc2NyaXB0PlxuPHN0eWxlIG1vZHVsZSBsYW5nPVwibGVzc1wiPlxuLmhlYWRlciB7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGZsZXgtd3JhcDogd3JhcDtcblx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHR6LWluZGV4OiA2O1xuXHRwb3NpdGlvbjogc3RpY2t5O1xuXHR0b3A6IDA7XG5cdGJveC1zaGFkb3c6IHZhcigtLXNoYWRvdy1zbSk7XG5cdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNhcmQtYmcpO1xuXHRtYXJnaW4tYm90dG9tOiA1cHg7XG5cdGhlaWdodDogNDhweDtcbn1cbjwvc3R5bGU+XG4iLCAiaW1wb3J0IFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvSGVhZGVyLnZ1ZT90eXBlPXN0eWxlLWNzcyZpbmRleD0wXCI7Y29uc3Qga2V5ID0gXCIkc3R5bGVcIjtcbmNvbnN0IGNzc01vZHVsZSA9IHtcImhlYWRlclwiOlwiX2hlYWRlcl9wdmU2dV8xXCJ9O1xuZXhwb3J0IGRlZmF1bHQgc2NyaXB0ID0+e1xuXHRpZiAoIXNjcmlwdC5fX2Nzc01vZHVsZXMpIHtcblx0XHRzY3JpcHQuX19jc3NNb2R1bGVzID0ge307XG5cdH1cblx0Y29uc3QgY3NzTW9kdWxlcyA9IHNjcmlwdC5fX2Nzc01vZHVsZXNcblx0Y29uc3QgdmFsdWUgPSBrZXkgaW4gY3NzTW9kdWxlcyAmJiBjc3NNb2R1bGVzW2tleV07XG5cdGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdFx0T2JqZWN0LmFzc2lnbih2YWx1ZSwgY3NzTW9kdWxlKVxuXHR9IGVsc2Uge1xuXHRcdGNzc01vZHVsZXNba2V5XSA9IGNzc01vZHVsZTtcblx0fVxufSIsICJpbXBvcnQgeyBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIG5vcm1hbGl6ZUNsYXNzIGFzIF9ub3JtYWxpemVDbGFzcywgY3JlYXRlU3RhdGljVk5vZGUgYXMgX2NyZWF0ZVN0YXRpY1ZOb2RlIH0gZnJvbSBcInZ1ZVwiXG5cbmNvbnN0IF9ob2lzdGVkXzEgPSB7IGNsYXNzOiBcImNvbC1tZC00IGNvbC1zbS02IGNvbC14cy04IHBhZ2UtdGl0bGVcIiB9XG5jb25zdCBfaG9pc3RlZF8yID0gW1widGl0bGVcIl1cbmNvbnN0IF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcInN2Z1wiLCB7IGNsYXNzOiBcImljb24gaWNvbi1tZCBzaWRlYmFyLXRvZ2dsZS1wbGFjZWhvbGRlclwiIH0sIFtcbiAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJ1c2VcIiwgeyBocmVmOiBcIiNpY29uLW1lbnVcIiB9KVxuXSwgLTEgLyogSE9JU1RFRCAqLylcbmNvbnN0IF9ob2lzdGVkXzQgPSB7IGNsYXNzOiBcImljb24gaWNvbi1tZFwiIH1cbmNvbnN0IF9ob2lzdGVkXzUgPSB7XG4gIGtleTogMCxcbiAgaHJlZjogXCIjaWNvbi1zaWRlYmFyLWV4cGFuZFwiXG59XG5jb25zdCBfaG9pc3RlZF82ID0ge1xuICBrZXk6IDEsXG4gIGhyZWY6IFwiI2ljb24tc2lkZWJhci1jb2xsYXBzZVwiXG59XG5jb25zdCBfaG9pc3RlZF83ID0gLyojX19QVVJFX18qL19jcmVhdGVTdGF0aWNWTm9kZShcIjxkaXYgY2xhc3M9XFxcImZsZXggZmlsbC13aWR0aCB0aXRsZS1hcmVhXFxcIj48ZGl2PjxkaXYgY2xhc3M9XFxcImZsZXhcXFwiPjxoMyBjbGFzcz1cXFwiZWxsaXBzaXMgdGl0bGUtdGV4dFxcXCI+PC9oMz48c3BhbiBjbGFzcz1cXFwiaW5kaWNhdG9yLXBpbGwgd2hpdGVzcGFjZS1ub3dyYXBcXFwiPjwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJlbGxpcHNpcyBzdWItaGVhZGluZyBoaWRlIHRleHQtbXV0ZWRcXFwiPjwvZGl2PjwvZGl2PjxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBtb3JlLWJ1dHRvbiBoaWRlXFxcIj48c3ZnIGNsYXNzPVxcXCJpY29uIGljb24tc21cXFwiPjx1c2UgaHJlZj1cXFwiI2ljb24tZG90LWhvcml6b250YWxcXFwiPjwvdXNlPjwvc3ZnPjwvYnV0dG9uPjwvZGl2PlwiLCAxKVxuY29uc3QgX2hvaXN0ZWRfOCA9IHsgY2xhc3M6IFwiZmxleCBjb2wgcGFnZS1hY3Rpb25zIGp1c3RpZnktY29udGVudC1lbmRcIiB9XG5jb25zdCBfaG9pc3RlZF85ID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgeyBjbGFzczogXCJjdXN0b20tYWN0aW9ucyBoaWRlIGhpZGRlbi14cyBoaWRkZW4tbWRcIiB9LCBudWxsLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfMTAgPSB7IGNsYXNzOiBcInN0YW5kYXJkLWFjdGlvbnMgZmxleFwiIH1cbmNvbnN0IF9ob2lzdGVkXzExID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHsgY2xhc3M6IFwicGFnZS1pY29uLWdyb3VwIGhpZGUgaGlkZGVuLXhzIGhpZGRlbi1zbVwiIH0sIG51bGwsIC0xIC8qIEhPSVNURUQgKi8pXG5jb25zdCBfaG9pc3RlZF8xMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHsgY2xhc3M6IFwibWVudS1idG4tZ3JvdXAgaGlkZVwiIH0sIFtcbiAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJidXR0b25cIiwge1xuICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgY2xhc3M6IFwiYnRuIGJ0bi1kZWZhdWx0IGljb24tYnRuXCIsXG4gICAgXCJkYXRhLXRvZ2dsZVwiOiBcImRyb3Bkb3duXCIsXG4gICAgXCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIlxuICB9LCBbXG4gICAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIG51bGwsIFtcbiAgICAgIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCB7IGNsYXNzOiBcIm1lbnUtYnRuLWdyb3VwLWxhYmVsXCIgfSwgW1xuICAgICAgICAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcInN2Z1wiLCB7IGNsYXNzOiBcImljb24gaWNvbi1zbVwiIH0sIFtcbiAgICAgICAgICAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcInVzZVwiLCB7IGhyZWY6IFwiI2ljb24tZG90LWhvcml6b250YWxcIiB9KVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICBdKVxuICBdKSxcbiAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJ1bFwiLCB7XG4gICAgY2xhc3M6IFwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0XCIsXG4gICAgcm9sZTogXCJtZW51XCJcbiAgfSlcbl0sIC0xIC8qIEhPSVNURUQgKi8pXG5jb25zdCBfaG9pc3RlZF8xMyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwiYnV0dG9uXCIsIHsgY2xhc3M6IFwiYnRuIGJ0bi1zZWNvbmRhcnkgYnRuLWRlZmF1bHQgYnRuLXNtIGhpZGVcIiB9LCBudWxsLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfMTQgPSB7IGNsYXNzOiBcImFjdGlvbnMtYnRuLWdyb3VwIGhpZGVcIiB9XG5jb25zdCBfaG9pc3RlZF8xNSA9IHtcbiAgdHlwZTogXCJidXR0b25cIixcbiAgY2xhc3M6IFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbVwiLFxuICBcImRhdGEtdG9nZ2xlXCI6IFwiZHJvcGRvd25cIixcbiAgXCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIlxufVxuY29uc3QgX2hvaXN0ZWRfMTYgPSB7IGNsYXNzOiBcImFjdGlvbnMtYnRuLWdyb3VwLWxhYmVsXCIgfVxuY29uc3QgX2hvaXN0ZWRfMTcgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcInN2Z1wiLCB7IGNsYXNzOiBcImljb24gaWNvbi14c1wiIH0sIFtcbiAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJ1c2VcIiwgeyBocmVmOiBcIiNpY29uLXNlbGVjdFwiIH0pXG5dLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfMTggPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcInVsXCIsIHtcbiAgY2xhc3M6IFwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0XCIsXG4gIHJvbGU6IFwibWVudVwiXG59LCBudWxsLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfMTkgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7IGNsYXNzOiBcImJ0biBidG4tcHJpbWFyeSBidG4tc20gaGlkZSBwcmltYXJ5LWFjdGlvblwiIH0sIG51bGwsIC0xIC8qIEhPSVNURUQgKi8pXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICBjbGFzczogX25vcm1hbGl6ZUNsYXNzKF9jdHguJHN0eWxlLmhlYWRlcilcbiAgfSwgW1xuICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfMSwgW1xuICAgICAgX2NyZWF0ZUNvbW1lbnRWTm9kZShcIiA8ZGl2IGNsYXNzPVxcXCJ0aXRsZS1pbWFnZSBoaWRlIGhpZGRlbi1tZCBoaWRkZW4tbGdcXFwiPjwvZGl2PiBcIiksXG4gICAgICBfY3JlYXRlQ29tbWVudFZOb2RlKFwiIHRpdGxlIFwiKSxcbiAgICAgICgkcHJvcHMuaGFzU2lkZXIpXG4gICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgY2xhc3M6IFwic2lkZWJhci10b2dnbGUtYnRuXCIsXG4gICAgICAgICAgICB0aXRsZTogJHNldHVwLnR0KCdUb2dnbGUgU2lkZWJhcicpXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgX2hvaXN0ZWRfMyxcbiAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3M6IFwic2lkZWJhci10b2dnbGUtaWNvblwiLFxuICAgICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICRldmVudCA9PiAoJHNldHVwLm9wZW5lZCA9ICEkc2V0dXAub3BlbmVkKSlcbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcInN2Z1wiLCBfaG9pc3RlZF80LCBbXG4gICAgICAgICAgICAgICAgKCRwcm9wcy5vcGVuKVxuICAgICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwidXNlXCIsIF9ob2lzdGVkXzUpKVxuICAgICAgICAgICAgICAgICAgOiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwidXNlXCIsIF9ob2lzdGVkXzYpKVxuICAgICAgICAgICAgICBdKSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSwgOCAvKiBQUk9QUyAqLywgX2hvaXN0ZWRfMikpXG4gICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICBfaG9pc3RlZF83XG4gICAgXSksXG4gICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF84LCBbXG4gICAgICBfY3JlYXRlQ29tbWVudFZOb2RlKFwiIGJ1dHRvbnMgXCIpLFxuICAgICAgX2hvaXN0ZWRfOSxcbiAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfMTAsIFtcbiAgICAgICAgX2hvaXN0ZWRfMTEsXG4gICAgICAgIF9ob2lzdGVkXzEyLFxuICAgICAgICBfaG9pc3RlZF8xMyxcbiAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF8xNCwgW1xuICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJidXR0b25cIiwgX2hvaXN0ZWRfMTUsIFtcbiAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIG51bGwsIFtcbiAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwgX2hvaXN0ZWRfMTYsIF90b0Rpc3BsYXlTdHJpbmcoJHNldHVwLnR0KCdBY3Rpb25zJykpLCAxIC8qIFRFWFQgKi8pLFxuICAgICAgICAgICAgICBfaG9pc3RlZF8xN1xuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfaG9pc3RlZF8xOFxuICAgICAgICBdKSxcbiAgICAgICAgX2hvaXN0ZWRfMTksXG4gICAgICAgICghJHByb3BzLmlzSGlkZUNsb3NlKVxuICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgY2xhc3M6IFwiYnRuIGJ0bi1zbVwiLFxuICAgICAgICAgICAgICBvbkNsaWNrOiAkc2V0dXAuaGlkZVxuICAgICAgICAgICAgfSwgX3RvRGlzcGxheVN0cmluZygkc2V0dXAudHQoJ0Nsb3NlJykpLCAxIC8qIFRFWFQgKi8pKVxuICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgIF0pXG4gICAgXSlcbiAgXSwgMiAvKiBDTEFTUyAqLykpXG59IiwgImltcG9ydCBzY3JpcHQgZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL0hlYWRlci52dWU/dHlwZT1zY3JpcHRcIjtpbXBvcnQgc3R5bGUwIGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndS9ndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9IZWFkZXIudnVlP3R5cGU9c3R5bGUmaW5kZXg9MFwiO3N0eWxlMChzY3JpcHQpO2ltcG9ydCB7cmVuZGVyIH0gZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL0hlYWRlci52dWU/dHlwZT10ZW1wbGF0ZVwiOyBzY3JpcHQucmVuZGVyID0gcmVuZGVyO3NjcmlwdC5fX2ZpbGUgPSBcImd1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL0hlYWRlci52dWVcIjtleHBvcnQgZGVmYXVsdCBzY3JpcHQ7IiwgIi8vIENvcHlyaWdodCAoYykgMjAxNSwgRnJhcHBlIFRlY2hub2xvZ2llcyBQdnQuIEx0ZC4gYW5kIENvbnRyaWJ1dG9yc1xuLy8gTUlUIExpY2Vuc2UuIFNlZSBsaWNlbnNlLnR4dFxuXG5pbXBvcnQgdHlwZSBGb3JtIGZyb20gJy4vRm9ybSc7XG5cbmNsYXNzIEZvb3RlciB7XG5cdGNvbnN0cnVjdG9yKG9wdHM6IHtcblx0XHRmcm06IEZvcm07XG5cdFx0cGFyZW50OiBKUXVlcnk7XG5cdH0pIHtcblx0XHQkLmV4dGVuZCh0aGlzLCBvcHRzKTtcblx0XHR0aGlzLm1ha2UoKTtcblx0XHR0aGlzLm1ha2VfY29tbWVudF9ib3goKTtcblx0XHR0aGlzLm1ha2VfdGltZWxpbmUoKTtcblx0XHQvLyByZW5kZXItY29tcGxldGVcblx0XHQkKHRoaXMuZnJtLndyYXBwZXIpLm9uKCdyZW5kZXJfY29tcGxldGUnLCAoKSA9PiB7XG5cdFx0XHR0aGlzLnJlZnJlc2goKTtcblx0XHR9KTtcblx0fVxuXHRtYWtlKCkge1xuXHRcdGNvbnN0IHdyYXBwZXIgPSAkKGA8ZGl2IGNsYXNzPVwiZm9ybS1mb290ZXJcIj5cblx0PGRpdiBjbGFzcz1cImFmdGVyLXNhdmVcIj5cblx0XHQ8ZGl2IGNsYXNzPVwiY29tbWVudC1ib3hcIj48L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPVwidGltZWxpbmVcIj48L2Rpdj5cblx0PC9kaXY+XG48L2Rpdj5gKS5hcHBlbmRUbyh0aGlzLnBhcmVudCk7XG5cdFx0Y29uc3QgdG9Ub3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblx0XHR0b1RvcC5jbGFzc05hbWUgPSAnc2Nyb2xsLXRvLXRvcCBidG4gYnRuLWRlZmF1bHQgaWNvbi1idG4nO1xuXHRcdHRvVG9wLmlubmVySFRNTCA9ICc8c3ZnIGNsYXNzPVwiaWNvbiBpY29uLXhzXCI+PHVzZSBocmVmPVwiI2ljb24tdXAtbGluZVwiPjwvdXNlPjwvc3ZnPic7XG5cdFx0dG9Ub3AuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHRsZXQgZTogSFRNTEVsZW1lbnQgfCBudWxsID0gdG9Ub3A7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cblx0XHRcdHdoaWxlIChlID0gZS5wYXJlbnRFbGVtZW50KSB7XG5cdFx0XHRcdGlmIChlLnNjcm9sbFRvcCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZSkge1xuXHRcdFx0XHRmcmFwcGUudXRpbHMuc2Nyb2xsX3RvKDAsIHRydWUsIDAsICQoZSkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHdyYXBwZXIuYXBwZW5kKHRvVG9wKTtcblx0XHR0aGlzLndyYXBwZXIgPSB3cmFwcGVyO1xuXHRcdHdyYXBwZXIuZmluZCgnLmJ0bi1zYXZlJykub24oJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0dGhpcy5mcm0uc2F2ZSgnU2F2ZScsIG51bGwsIHRoaXMpO1xuXHRcdH0pO1xuXHR9XG5cdG1ha2VfY29tbWVudF9ib3goKSB7XG5cdFx0ZnJhcHBlLnVpLmZvcm0uRm9vdGVyLnByb3RvdHlwZS5tYWtlX2NvbW1lbnRfYm94LmNhbGwodGhpcyk7XG5cblx0fVxuXHRtYWtlX3RpbWVsaW5lKCkge1xuXHRcdGZyYXBwZS51aS5mb3JtLkZvb3Rlci5wcm90b3R5cGUubWFrZV90aW1lbGluZS5jYWxsKHRoaXMpO1xuXHR9XG5cdHJlZnJlc2goKSB7XG5cdFx0ZnJhcHBlLnVpLmZvcm0uRm9vdGVyLnByb3RvdHlwZS5yZWZyZXNoLmNhbGwodGhpcyk7XG5cdH1cbn1cbmludGVyZmFjZSBGb290ZXIge1xuXHRmcm06IEZvcm07XG5cdHBhcmVudDogSlF1ZXJ5O1xuXHR3cmFwcGVyOiBKUXVlcnk7XG59XG5leHBvcnQgZGVmYXVsdCBGb290ZXI7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgbWF4LWxpbmVzICovXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTUsIEZyYXBwZSBUZWNobm9sb2dpZXMgUHZ0LiBMdGQuIGFuZCBDb250cmlidXRvcnNcbi8vIE1JVCBMaWNlbnNlLiBTZWUgbGljZW5zZS50eHRcblxuXG5jbGFzcyBQYWdlIHtcblx0c2V0X2RvY3VtZW50X3RpdGxlID0gdHJ1ZTtcblx0YnV0dG9ucyA9IHt9O1xuXHRmaWVsZHNfZGljdCA9IHt9O1xuXHR2aWV3czogUmVjb3JkPHN0cmluZywgSlF1ZXJ5PiA9IHt9O1xuXHRjb25zdHJ1Y3RvcihwYXJlbnQ6IEhUTUxFbGVtZW50LCBzaW5nbGVfY29sdW1uPzogYm9vbGVhbiB8IDAgfCAxKSB7XG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0dGhpcy5zaW5nbGVfY29sdW1uID0gc2luZ2xlX2NvbHVtbiA/IHRydWUgOiBmYWxzZTtcblx0XHQvLyBmcmFwcGUudWkucGFnZXNbZnJhcHBlLmdldF9yb3V0ZV9zdHIoKV0gPSB0aGlzO1xuXHRcdHRoaXMud3JhcHBlciA9ICQocGFyZW50KTtcblx0XHRjb25zdCBtYWluVmlldyA9ICQodGhpcy53cmFwcGVyKVxuXHRcdFx0LmZpbmQoJy5wYWdlLWNvbnRlbnQnKS5maW5kKCcucm93LmxheW91dC1tYWluJyk7XG5cblx0XHR0aGlzLnZpZXdzLm1haW4gPSBtYWluVmlldztcblx0XHR0aGlzLmN1cnJlbnRfdmlldyA9IG1haW5WaWV3O1xuXHRcdHRoaXMuc2V0dXBfcGFnZSgpO1xuXHRcdHRoaXMuc2V0dXBfc2Nyb2xsX2hhbmRsZXIoKTtcblx0XHR0aGlzLnNldHVwX3NpZGViYXJfdG9nZ2xlKCk7XG5cdH1cblxuXHRzZXR1cF9zY3JvbGxfaGFuZGxlcigpIHsgfVxuXG5cdGdldF9lbXB0eV9zdGF0ZSh0aXRsZSwgbWVzc2FnZSwgcHJpbWFyeV9hY3Rpb24pIHtcblx0XHRsZXQgJGVtcHR5X3N0YXRlID0gJChgPGRpdiBjbGFzcz1cInBhZ2UtY2FyZC1jb250YWluZXJcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJwYWdlLWNhcmRcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cInBhZ2UtY2FyZC1oZWFkXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJpbmRpY2F0b3IgYmx1ZVwiPlxuXHRcdFx0XHRcdFx0JHt0aXRsZX08L3NwYW4+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8cD4ke21lc3NhZ2V9PC9wPlxuXHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLXNtXCI+JHtwcmltYXJ5X2FjdGlvbn08L2J1dHRvbj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5gKTtcblxuXHRcdHJldHVybiAkZW1wdHlfc3RhdGU7XG5cdH1cblxuXHRsb2FkX2xpYihjYWxsYmFjaykge1xuXHRcdGZyYXBwZS5yZXF1aXJlKHRoaXMucmVxdWlyZWRfbGlicywgY2FsbGJhY2spO1xuXHR9XG5cblx0YWRkX21haW5fc2VjdGlvbigpIHsgfVxuXG5cdHNldHVwX3BhZ2UoKSB7XG5cdFx0dGhpcy4kdGl0bGVfYXJlYSA9IHRoaXMud3JhcHBlci5maW5kKCcudGl0bGUtYXJlYScpO1xuXG5cdFx0dGhpcy4kc3ViX3RpdGxlX2FyZWEgPSB0aGlzLndyYXBwZXIuZmluZCgnaDYnKTtcblxuXHRcdHRoaXMuYm9keSA9IHRoaXMubWFpbiA9IHRoaXMud3JhcHBlci5maW5kKCcubGF5b3V0LW1haW4tc2VjdGlvbicpO1xuXHRcdHRoaXMuY29udGFpbmVyID0gdGhpcy53cmFwcGVyLmZpbmQoJy5wYWdlLWJvZHknKTtcblx0XHR0aGlzLnNpZGViYXIgPSB0aGlzLndyYXBwZXIuZmluZCgnLmxheW91dC1zaWRlLXNlY3Rpb24nKTtcblx0XHR0aGlzLmZvb3RlciA9IHRoaXMud3JhcHBlci5maW5kKCcubGF5b3V0LWZvb3RlcicpO1xuXHRcdHRoaXMuaW5kaWNhdG9yID0gdGhpcy53cmFwcGVyLmZpbmQoJy5pbmRpY2F0b3ItcGlsbCcpO1xuXG5cdFx0dGhpcy5wYWdlX2FjdGlvbnMgPSB0aGlzLndyYXBwZXIuZmluZCgnLnBhZ2UtYWN0aW9ucycpO1xuXG5cdFx0dGhpcy5idG5fcHJpbWFyeSA9IHRoaXMucGFnZV9hY3Rpb25zLmZpbmQoJy5wcmltYXJ5LWFjdGlvbicpO1xuXHRcdHRoaXMuYnRuX3NlY29uZGFyeSA9IHRoaXMucGFnZV9hY3Rpb25zLmZpbmQoJy5idG4tc2Vjb25kYXJ5Jyk7XG5cblx0XHR0aGlzLm1lbnUgPSB0aGlzLnBhZ2VfYWN0aW9ucy5maW5kKCcubWVudS1idG4tZ3JvdXAgLmRyb3Bkb3duLW1lbnUnKTtcblx0XHR0aGlzLm1lbnVfYnRuX2dyb3VwID0gdGhpcy5wYWdlX2FjdGlvbnMuZmluZCgnLm1lbnUtYnRuLWdyb3VwJyk7XG5cblx0XHR0aGlzLmFjdGlvbnMgPSB0aGlzLnBhZ2VfYWN0aW9ucy5maW5kKCcuYWN0aW9ucy1idG4tZ3JvdXAgLmRyb3Bkb3duLW1lbnUnKTtcblx0XHR0aGlzLmFjdGlvbnNfYnRuX2dyb3VwID0gdGhpcy5wYWdlX2FjdGlvbnMuZmluZCgnLmFjdGlvbnMtYnRuLWdyb3VwJyk7XG5cblx0XHR0aGlzLnN0YW5kYXJkX2FjdGlvbnMgPSB0aGlzLnBhZ2VfYWN0aW9ucy5maW5kKCcuc3RhbmRhcmQtYWN0aW9ucycpO1xuXHRcdHRoaXMuY3VzdG9tX2FjdGlvbnMgPSB0aGlzLnBhZ2VfYWN0aW9ucy5maW5kKCcuY3VzdG9tLWFjdGlvbnMnKTtcblxuXHRcdHRoaXMucGFnZV9mb3JtID0gJCgnPGRpdiBjbGFzcz1cInBhZ2UtZm9ybSByb3cgaGlkZVwiPjwvZGl2PicpLnByZXBlbmRUbyh0aGlzLm1haW4pO1xuXHRcdHRoaXMuaW5uZXJfdG9vbGJhciA9IHRoaXMuY3VzdG9tX2FjdGlvbnM7XG5cdFx0dGhpcy5pY29uX2dyb3VwID0gdGhpcy5wYWdlX2FjdGlvbnMuZmluZCgnLnBhZ2UtaWNvbi1ncm91cCcpO1xuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdHRoaXMuY2FyZF9sYXlvdXQgJiYgdGhpcy5tYWluLmFkZENsYXNzKCdmcmFwcGUtY2FyZCcpO1xuXG5cdFx0Ly8ga2V5Ym9hcmQgc2hvcnRjdXRzXG5cdFx0bGV0IG1lbnVfYnRuID0gdGhpcy5tZW51X2J0bl9ncm91cC5maW5kKCdidXR0b24nKTtcblx0XHRtZW51X2J0bi5hdHRyKCd0aXRsZScsIF9fKCdNZW51JykpLnRvb2x0aXAoeyBkZWxheTogeyBzaG93OiA2MDAsIGhpZGU6IDEwMCB9IH0pO1xuXHRcdGZyYXBwZS51aS5rZXlzXG5cdFx0XHQuZ2V0X3Nob3J0Y3V0X2dyb3VwKHRoaXMucGFnZV9hY3Rpb25zWzBdKVxuXHRcdFx0LmFkZChtZW51X2J0biwgbWVudV9idG4uZmluZCgnLm1lbnUtYnRuLWdyb3VwLWxhYmVsJykpO1xuXG5cdFx0bGV0IGFjdGlvbl9idG4gPSB0aGlzLmFjdGlvbnNfYnRuX2dyb3VwLmZpbmQoJ2J1dHRvbicpO1xuXHRcdGZyYXBwZS51aS5rZXlzXG5cdFx0XHQuZ2V0X3Nob3J0Y3V0X2dyb3VwKHRoaXMucGFnZV9hY3Rpb25zWzBdKVxuXHRcdFx0LmFkZChhY3Rpb25fYnRuLCBhY3Rpb25fYnRuLmZpbmQoJy5hY3Rpb25zLWJ0bi1ncm91cC1sYWJlbCcpKTtcblx0fVxuXG5cdHNldHVwX3NpZGViYXJfdG9nZ2xlKCkge1xuXHRcdGxldCBzaWRlYmFyX3RvZ2dsZSA9IHRoaXMud3JhcHBlci5maW5kKCcuZ3VpZ3UtZm9ybS1kZXRhaWwtcGFnZS1oZWFkICcpLmZpbmQoJy5zaWRlYmFyLXRvZ2dsZS1idG4nKTtcblx0XHRsZXQgc2lkZWJhcl93cmFwcGVyID0gdGhpcy53cmFwcGVyLmZpbmQoJy5sYXlvdXQtc2lkZS1zZWN0aW9uJyk7XG5cdFx0c2lkZWJhcl90b2dnbGUuY2xpY2soKCkgPT4ge1xuXHRcdFx0JChkb2N1bWVudC5ib2R5KS50cmlnZ2VyKCd0b2dnbGVTaWRlYmFyJyk7XG5cdFx0XHR0aGlzLnVwZGF0ZV9zaWRlYmFyX2ljb24oKTtcblx0XHR9KTtcblx0fVxuXHRzZXR1cF9vdmVybGF5X3NpZGViYXIoKSB7XG5cdH1cblxuXHR1cGRhdGVfc2lkZWJhcl9pY29uKCkge1xuXHRcdGxldCBzaWRlYmFyX3RvZ2dsZSA9ICQoJy5wYWdlLWhlYWQnKS5maW5kKCcuc2lkZWJhci10b2dnbGUtYnRuJyk7XG5cdFx0bGV0IHNpZGViYXJfdG9nZ2xlX2ljb24gPSBzaWRlYmFyX3RvZ2dsZS5maW5kKCcuc2lkZWJhci10b2dnbGUtaWNvbicpO1xuXHRcdGxldCBzaWRlYmFyX3dyYXBwZXIgPSB0aGlzLndyYXBwZXIuZmluZCgnLmxheW91dC1zaWRlLXNlY3Rpb24nKTtcblx0XHRsZXQgaXNfc2lkZWJhcl92aXNpYmxlID0gJChzaWRlYmFyX3dyYXBwZXIpLmlzKCc6dmlzaWJsZScpO1xuXHRcdHNpZGViYXJfdG9nZ2xlX2ljb24uaHRtbChcblx0XHRcdGZyYXBwZS51dGlscy5pY29uKGlzX3NpZGViYXJfdmlzaWJsZSA/ICdzaWRlYmFyLWNvbGxhcHNlJyA6ICdzaWRlYmFyLWV4cGFuZCcsICdtZCcpLFxuXHRcdCk7XG5cdH1cblxuXHRzZXRfaW5kaWNhdG9yKGxhYmVsLCBjb2xvcikge1xuXHRcdHRoaXMuY2xlYXJfaW5kaWNhdG9yKCkucmVtb3ZlQ2xhc3MoJ2hpZGUnKS5odG1sKGA8c3Bhbj4ke2xhYmVsfTwvc3Bhbj5gKVxuXHRcdFx0LmFkZENsYXNzKGNvbG9yKTtcblx0fVxuXG5cdGFkZF9hY3Rpb25faWNvbihpY29uLCBjbGljaywgY3NzX2NsYXNzID0gJycsIHRvb2x0aXBfbGFiZWwpIHtcblx0XHRjb25zdCBidXR0b24gPSAkKGBcblx0XHRcdDxidXR0b24gY2xhc3M9XCJ0ZXh0LW11dGVkIGJ0biBidG4tZGVmYXVsdCAke2Nzc19jbGFzc30gaWNvbi1idG5cIj5cblx0XHRcdFx0JHtmcmFwcGUudXRpbHMuaWNvbihpY29uKX1cblx0XHRcdDwvYnV0dG9uPlxuXHRcdGApO1xuXG5cdFx0YnV0dG9uLmFwcGVuZFRvKHRoaXMuaWNvbl9ncm91cC5yZW1vdmVDbGFzcygnaGlkZScpKTtcblx0XHRidXR0b24uY2xpY2soY2xpY2spO1xuXHRcdGJ1dHRvblxuXHRcdFx0LmF0dHIoJ3RpdGxlJywgX18odG9vbHRpcF9sYWJlbCB8fCBmcmFwcGUudW5zY3J1YihpY29uKSkpXG5cdFx0XHQudG9vbHRpcCh7IGRlbGF5OiB7IHNob3c6IDYwMCwgaGlkZTogMTAwIH0sIHRyaWdnZXI6ICdob3ZlcicgfSk7XG5cblx0XHRyZXR1cm4gYnV0dG9uO1xuXHR9XG5cblx0Y2xlYXJfaW5kaWNhdG9yKCkge1xuXHRcdHJldHVybiB0aGlzLmluZGljYXRvci5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdpbmRpY2F0b3ItcGlsbCB3aGl0ZXNwYWNlLW5vd3JhcCBoaWRlJyk7XG5cdH1cblxuXHRnZXRfaWNvbl9sYWJlbChpY29uLCBsYWJlbCkge1xuXHRcdGxldCBpY29uX25hbWUgPSBpY29uO1xuXHRcdGxldCBzaXplID0gJ3hzJztcblx0XHRpZiAodHlwZW9mIGljb24gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRpY29uX25hbWUgPSBpY29uLmljb247XG5cdFx0XHRzaXplID0gaWNvbi5zaXplIHx8ICd4cyc7XG5cdFx0fVxuXHRcdHJldHVybiBgJHtpY29uID8gZnJhcHBlLnV0aWxzLmljb24oaWNvbl9uYW1lLCBzaXplKSA6ICcnfSA8c3BhbiBjbGFzcz1cImhpZGRlbi14c1wiPiAke19fKFxuXHRcdFx0bGFiZWwsXG5cdFx0KX0gPC9zcGFuPmA7XG5cdH1cblxuXHRzZXRfYWN0aW9uKGJ0biwgb3B0cykge1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0aWYgKG9wdHMuaWNvbikge1xuXHRcdFx0b3B0cy5sYWJlbCA9IHRoaXMuZ2V0X2ljb25fbGFiZWwob3B0cy5pY29uLCBvcHRzLmxhYmVsKTtcblx0XHR9XG5cblx0XHR0aGlzLmNsZWFyX2FjdGlvbl9vZihidG4pO1xuXG5cdFx0YnRuLnJlbW92ZUNsYXNzKCdoaWRlJylcblx0XHRcdC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKVxuXHRcdFx0Lmh0bWwob3B0cy5sYWJlbClcblx0XHRcdC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGxldCByZXNwb25zZSA9IG9wdHMuY2xpY2suYXBwbHkodGhpcywgW2J0bl0pO1xuXHRcdFx0XHRtZS5idG5fZGlzYWJsZV9lbmFibGUoYnRuLCByZXNwb25zZSk7XG5cdFx0XHR9KTtcblxuXHRcdGlmIChvcHRzLndvcmtpbmdfbGFiZWwpIHtcblx0XHRcdGJ0bi5hdHRyKCdkYXRhLXdvcmtpbmctbGFiZWwnLCBvcHRzLndvcmtpbmdfbGFiZWwpO1xuXHRcdH1cblxuXHRcdC8vIGFsdCBzaG9ydGN1dHNcblx0XHRsZXQgdGV4dF9zcGFuID0gYnRuLmZpbmQoJ3NwYW4nKTtcblx0XHRmcmFwcGUudWkua2V5cy5nZXRfc2hvcnRjdXRfZ3JvdXAodGhpcykuYWRkKGJ0biwgdGV4dF9zcGFuLmxlbmd0aCA/IHRleHRfc3BhbiA6IGJ0bik7XG5cdH1cblxuXHRzZXRfcHJpbWFyeV9hY3Rpb24obGFiZWwsIGNsaWNrLCBpY29uLCB3b3JraW5nX2xhYmVsKSB7XG5cdFx0dGhpcy5zZXRfYWN0aW9uKHRoaXMuYnRuX3ByaW1hcnksIHtcblx0XHRcdGxhYmVsLFxuXHRcdFx0Y2xpY2ssXG5cdFx0XHRpY29uLFxuXHRcdFx0d29ya2luZ19sYWJlbCxcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5idG5fcHJpbWFyeTtcblx0fVxuXG5cdHNldF9zZWNvbmRhcnlfYWN0aW9uKGxhYmVsLCBjbGljaywgaWNvbiwgd29ya2luZ19sYWJlbCkge1xuXHRcdHRoaXMuc2V0X2FjdGlvbih0aGlzLmJ0bl9zZWNvbmRhcnksIHtcblx0XHRcdGxhYmVsLFxuXHRcdFx0Y2xpY2ssXG5cdFx0XHRpY29uLFxuXHRcdFx0d29ya2luZ19sYWJlbCxcblx0XHR9KTtcblxuXHRcdHJldHVybiB0aGlzLmJ0bl9zZWNvbmRhcnk7XG5cdH1cblxuXHRjbGVhcl9hY3Rpb25fb2YoYnRuKSB7XG5cdFx0YnRuLmFkZENsYXNzKCdoaWRlJykudW5iaW5kKCdjbGljaycpLnJlbW92ZUF0dHIoJ2RhdGEtd29ya2luZy1sYWJlbCcpO1xuXHR9XG5cblx0Y2xlYXJfcHJpbWFyeV9hY3Rpb24oKSB7XG5cdFx0dGhpcy5jbGVhcl9hY3Rpb25fb2YodGhpcy5idG5fcHJpbWFyeSk7XG5cdH1cblxuXHRjbGVhcl9zZWNvbmRhcnlfYWN0aW9uKCkge1xuXHRcdHRoaXMuY2xlYXJfYWN0aW9uX29mKHRoaXMuYnRuX3NlY29uZGFyeSk7XG5cdH1cblxuXHRjbGVhcl9hY3Rpb25zKCkge1xuXHRcdHRoaXMuY2xlYXJfcHJpbWFyeV9hY3Rpb24oKTtcblx0XHR0aGlzLmNsZWFyX3NlY29uZGFyeV9hY3Rpb24oKTtcblx0fVxuXG5cdGNsZWFyX2N1c3RvbV9hY3Rpb25zKCkge1xuXHRcdHRoaXMuY3VzdG9tX2FjdGlvbnMuYWRkQ2xhc3MoJ2hpZGUnKS5lbXB0eSgpO1xuXHR9XG5cblx0Y2xlYXJfaWNvbnMoKSB7XG5cdFx0dGhpcy5pY29uX2dyb3VwLmFkZENsYXNzKCdoaWRlJykuZW1wdHkoKTtcblx0fVxuXG5cdC8vLS0tIE1lbnUgLS0vL1xuXG5cdGFkZF9tZW51X2l0ZW0obGFiZWwsIGNsaWNrLCBzdGFuZGFyZCwgc2hvcnRjdXQsIHNob3dfcGFyZW50KSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkX2Ryb3Bkb3duX2l0ZW0oe1xuXHRcdFx0bGFiZWwsXG5cdFx0XHRjbGljayxcblx0XHRcdHN0YW5kYXJkLFxuXHRcdFx0cGFyZW50OiB0aGlzLm1lbnUsXG5cdFx0XHRzaG9ydGN1dCxcblx0XHRcdHNob3dfcGFyZW50LFxuXHRcdH0pO1xuXHR9XG5cblx0YWRkX2N1c3RvbV9tZW51X2l0ZW0ocGFyZW50LCBsYWJlbCwgY2xpY2ssIHN0YW5kYXJkLCBzaG9ydGN1dCwgaWNvbiA9IG51bGwpIHtcblx0XHRyZXR1cm4gdGhpcy5hZGRfZHJvcGRvd25faXRlbSh7XG5cdFx0XHRsYWJlbCxcblx0XHRcdGNsaWNrLFxuXHRcdFx0c3RhbmRhcmQsXG5cdFx0XHRwYXJlbnQsXG5cdFx0XHRzaG9ydGN1dCxcblx0XHRcdGljb24sXG5cdFx0fSk7XG5cdH1cblxuXHRjbGVhcl9tZW51KCkge1xuXHRcdHRoaXMuY2xlYXJfYnRuX2dyb3VwKHRoaXMubWVudSk7XG5cdH1cblxuXHRzaG93X21lbnUoKSB7XG5cdFx0dGhpcy5tZW51X2J0bl9ncm91cC5yZW1vdmVDbGFzcygnaGlkZScpO1xuXHR9XG5cblx0aGlkZV9tZW51KCkge1xuXHRcdHRoaXMubWVudV9idG5fZ3JvdXAuYWRkQ2xhc3MoJ2hpZGUnKTtcblx0fVxuXG5cdHNob3dfaWNvbl9ncm91cCgpIHtcblx0XHR0aGlzLmljb25fZ3JvdXAucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcblx0fVxuXG5cdGhpZGVfaWNvbl9ncm91cCgpIHtcblx0XHR0aGlzLmljb25fZ3JvdXAuYWRkQ2xhc3MoJ2hpZGUnKTtcblx0fVxuXG5cdC8vLS0tIEFjdGlvbnMgTWVudS0tLy9cblxuXHRzaG93X2FjdGlvbnNfbWVudSgpIHtcblx0XHR0aGlzLmFjdGlvbnNfYnRuX2dyb3VwLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG5cdH1cblxuXHRoaWRlX2FjdGlvbnNfbWVudSgpIHtcblx0XHR0aGlzLmFjdGlvbnNfYnRuX2dyb3VwLmFkZENsYXNzKCdoaWRlJyk7XG5cdH1cblxuXHRhZGRfYWN0aW9uX2l0ZW0obGFiZWwsIGNsaWNrLCBzdGFuZGFyZCkge1xuXHRcdHJldHVybiB0aGlzLmFkZF9kcm9wZG93bl9pdGVtKHtcblx0XHRcdGxhYmVsLFxuXHRcdFx0Y2xpY2ssXG5cdFx0XHRzdGFuZGFyZCxcblx0XHRcdHBhcmVudDogdGhpcy5hY3Rpb25zLFxuXHRcdH0pO1xuXHR9XG5cblx0YWRkX2FjdGlvbnNfbWVudV9pdGVtKGxhYmVsLCBjbGljaywgc3RhbmRhcmQsIHNob3J0Y3V0KSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkX2Ryb3Bkb3duX2l0ZW0oe1xuXHRcdFx0bGFiZWwsXG5cdFx0XHRjbGljayxcblx0XHRcdHN0YW5kYXJkLFxuXHRcdFx0c2hvcnRjdXQsXG5cdFx0XHRwYXJlbnQ6IHRoaXMuYWN0aW9ucyxcblx0XHRcdHNob3dfcGFyZW50OiBmYWxzZSxcblx0XHR9KTtcblx0fVxuXG5cdGNsZWFyX2FjdGlvbnNfbWVudSgpIHtcblx0XHR0aGlzLmNsZWFyX2J0bl9ncm91cCh0aGlzLmFjdGlvbnMpO1xuXHR9XG5cblx0Ly8tLSBHZW5lcmljIC0tLy9cblxuXHQvKlxuXHQgKiBBZGQgbGFiZWwgdG8gZ2l2ZW4gZHJvcCBkb3duIG1lbnUuIElmIGxhYmVsLCBpcyBhbHJlYWR5IGNvbnRhaW5lZCBpbiB0aGUgZHJvcFxuXHQgKiBkb3duIG1lbnUsIGl0IHdpbGwgYmUgaWdub3JlZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsIC0gVGV4dCBmb3IgdGhlIGRyb3AgZG93biBtZW51XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGNsaWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gYGxhYmVsYCBpcyBjbGlja2VkXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RhbmRhcmRcblx0ICogQHBhcmFtIHtvYmplY3R9IHBhcmVudCAtIERPTSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBwYXJlbnQgb2YgdGhlIGRyb3AgZG93biBpdGVtIGxpc3RzXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzaG9ydGN1dCAtIEtleWJvYXJkIHNob3J0Y3V0IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IHNob3dfcGFyZW50IC0gV2hldGhlciB0byBzaG93IHRoZSBkcm9wZG93biBidXR0b24gaWYgZHJvcGRvd24gaXRlbSBpcyBhZGRlZFxuXHQgKi9cblx0YWRkX2Ryb3Bkb3duX2l0ZW0oe1xuXHRcdGxhYmVsLFxuXHRcdGNsaWNrLFxuXHRcdHN0YW5kYXJkLFxuXHRcdHBhcmVudCxcblx0XHRzaG9ydGN1dCxcblx0XHRzaG93X3BhcmVudCA9IHRydWUsXG5cdFx0aWNvbiA9IG51bGwsXG5cdH0pIHtcblx0XHRpZiAoc2hvd19wYXJlbnQpIHtcblx0XHRcdHBhcmVudC5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaGlkZSBoaWRkZW4teGwnKTtcblx0XHR9XG5cblx0XHRsZXQgJGxpbmsgPSB0aGlzLmlzX2luX2dyb3VwX2J1dHRvbl9kcm9wZG93bihwYXJlbnQsICdsaSA+IGEuZ3JleS1saW5rID4gc3BhbicsIGxhYmVsKTtcblx0XHRpZiAoJGxpbmspIHsgcmV0dXJuICRsaW5rOyB9XG5cblx0XHRsZXQgJGxpO1xuXHRcdGxldCAkaWNvbiA9IGBgO1xuXG5cdFx0aWYgKGljb24pIHtcblx0XHRcdCRpY29uID0gYDxzcGFuIGNsYXNzPVwibWVudS1pdGVtLWljb25cIj4ke2ZyYXBwZS51dGlscy5pY29uKGljb24pfTwvc3Bhbj5gO1xuXHRcdH1cblxuXHRcdGlmIChzaG9ydGN1dCkge1xuXHRcdFx0bGV0IHNob3J0Y3V0X29iaiA9IHRoaXMucHJlcGFyZV9zaG9ydGN1dF9vYmooc2hvcnRjdXQsIGNsaWNrLCBsYWJlbCk7XG5cdFx0XHQkbGkgPSAkKGBcblx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdDxhIGNsYXNzPVwiZ3JleS1saW5rIGRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI1wiIG9uQ2xpY2s9XCJyZXR1cm4gZmFsc2U7XCI+XG5cdFx0XHRcdFx0XHQkeyRpY29ufVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJtZW51LWl0ZW0tbGFiZWxcIj4ke2xhYmVsfTwvc3Bhbj5cblx0XHRcdFx0XHRcdDxrYmQgY2xhc3M9XCJwdWxsLXJpZ2h0XCI+XG5cdFx0XHRcdFx0XHRcdDxzcGFuPiR7c2hvcnRjdXRfb2JqLnNob3J0Y3V0X2xhYmVsfTwvc3Bhbj5cblx0XHRcdFx0XHRcdDwva2JkPlxuXHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0PC9saT5cblx0XHRcdGApO1xuXHRcdFx0ZnJhcHBlLnVpLmtleXMuYWRkX3Nob3J0Y3V0KHNob3J0Y3V0X29iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRsaSA9ICQoYFxuXHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0PGEgY2xhc3M9XCJncmV5LWxpbmsgZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjXCIgb25DbGljaz1cInJldHVybiBmYWxzZTtcIj5cblx0XHRcdFx0XHRcdCR7JGljb259XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cIm1lbnUtaXRlbS1sYWJlbFwiPiR7bGFiZWx9PC9zcGFuPlxuXHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0PC9saT5cblx0XHRcdGApO1xuXHRcdH1cblxuXHRcdCRsaW5rID0gJGxpLmZpbmQoJ2EnKS5vbignY2xpY2snLCBlID0+IHtcblx0XHRcdGlmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSB7XG5cdFx0XHRcdGZyYXBwZS5vcGVuX2luX25ld190YWIgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNsaWNrKCk7XG5cdFx0fSk7XG5cblx0XHRpZiAoc3RhbmRhcmQpIHtcblx0XHRcdCRsaS5hcHBlbmRUbyhwYXJlbnQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmRpdmlkZXIgPSBwYXJlbnQuZmluZCgnLmRyb3Bkb3duLWRpdmlkZXInKTtcblx0XHRcdGlmICghdGhpcy5kaXZpZGVyLmxlbmd0aCkge1xuXHRcdFx0XHR0aGlzLmRpdmlkZXIgPSAkKCc8bGkgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyIHVzZXItYWN0aW9uXCI+PC9saT4nKS5wcmVwZW5kVG8oXG5cdFx0XHRcdFx0cGFyZW50LFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0JGxpLmFkZENsYXNzKCd1c2VyLWFjdGlvbicpLmluc2VydEJlZm9yZSh0aGlzLmRpdmlkZXIpO1xuXHRcdH1cblxuXHRcdC8vIGFsdCBzaG9ydGN1dFxuXHRcdGZyYXBwZS51aS5rZXlzXG5cdFx0XHQuZ2V0X3Nob3J0Y3V0X2dyb3VwKHBhcmVudC5nZXQoMCkpXG5cdFx0XHQuYWRkKCRsaW5rLCAkbGluay5maW5kKCcubWVudS1pdGVtLWxhYmVsJykpO1xuXG5cdFx0cmV0dXJuICRsaW5rO1xuXHR9XG5cblx0cHJlcGFyZV9zaG9ydGN1dF9vYmooc2hvcnRjdXQsIGNsaWNrLCBsYWJlbCkge1xuXHRcdGxldCBzaG9ydGN1dF9vYmo7XG5cdFx0Ly8gY29udmVydCB0byBvYmplY3QsIGlmIHNob3J0Y3V0IHN0cmluZyBwYXNzZWRcblx0XHRpZiAodHlwZW9mIHNob3J0Y3V0ID09PSAnc3RyaW5nJykge1xuXHRcdFx0c2hvcnRjdXRfb2JqID0geyBzaG9ydGN1dCB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzaG9ydGN1dF9vYmogPSBzaG9ydGN1dDtcblx0XHR9XG5cdFx0Ly8gbGFiZWxcblx0XHRpZiAoZnJhcHBlLnV0aWxzLmlzX21hYygpKSB7XG5cdFx0XHRzaG9ydGN1dF9vYmouc2hvcnRjdXRfbGFiZWwgPSBzaG9ydGN1dF9vYmouc2hvcnRjdXQucmVwbGFjZSgnQ3RybCcsICdcdTIzMTgnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2hvcnRjdXRfb2JqLnNob3J0Y3V0X2xhYmVsID0gc2hvcnRjdXRfb2JqLnNob3J0Y3V0O1xuXHRcdH1cblx0XHQvLyBhY3R1YWwgc2hvcnRjdXQgc3RyaW5nXG5cdFx0c2hvcnRjdXRfb2JqLnNob3J0Y3V0ID0gc2hvcnRjdXRfb2JqLnNob3J0Y3V0LnRvTG93ZXJDYXNlKCk7XG5cdFx0Ly8gYWN0aW9uIGlzIGJ1dHRvbiBjbGlja1xuXHRcdGlmICghc2hvcnRjdXRfb2JqLmFjdGlvbikge1xuXHRcdFx0c2hvcnRjdXRfb2JqLmFjdGlvbiA9IGNsaWNrO1xuXHRcdH1cblx0XHQvLyBzaG9ydGN1dCBkZXNjcmlwdGlvbiBjYW4gYmUgYnV0dG9uIGxhYmVsXG5cdFx0aWYgKCFzaG9ydGN1dF9vYmouZGVzY3JpcHRpb24pIHtcblx0XHRcdHNob3J0Y3V0X29iai5kZXNjcmlwdGlvbiA9IGxhYmVsO1xuXHRcdH1cblx0XHQvLyBwYWdlXG5cdFx0c2hvcnRjdXRfb2JqLnBhZ2UgPSB0aGlzO1xuXHRcdHJldHVybiBzaG9ydGN1dF9vYmo7XG5cdH1cblxuXHQvKlxuXHQgKiBDaGVjayBpZiB0aGVyZSBhbHJlYWR5IGV4aXN0cyBhIGJ1dHRvbiB3aXRoIGEgc3BlY2lmaWVkIGxhYmVsIGluIGEgc3BlY2lmaWVkIGJ1dHRvbiBncm91cFxuXHQgKiBAcGFyYW0ge29iamVjdH0gcGFyZW50IC0gVGhpcyBzaG91bGQgYmUgdGhlIGB1bGAgb2YgdGhlIGJ1dHRvbiBncm91cC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIC0gQ1NTIFNlbGVjdG9yIG9mIHRoZSBidXR0b24gdG8gYmUgc2VhcmNoZWQgZm9yLiBCeSBkZWZhdWx0LCBpdCBpcyBgbGlgLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSBMYWJlbCBvZiB0aGUgYnV0dG9uXG5cdCAqL1xuXHRpc19pbl9ncm91cF9idXR0b25fZHJvcGRvd24ocGFyZW50LCBzZWxlY3RvciwgbGFiZWwpIHtcblx0XHRpZiAoIXNlbGVjdG9yKSB7IHNlbGVjdG9yID0gJ2xpJzsgfVxuXG5cdFx0aWYgKCFsYWJlbCB8fCAhcGFyZW50KSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdFx0Y29uc3QgaXRlbV9zZWxlY3RvciA9IGAke3NlbGVjdG9yfVtkYXRhLWxhYmVsPVwiJHtlbmNvZGVVUklDb21wb25lbnQobGFiZWwpfVwiXWA7XG5cblx0XHRjb25zdCBleGlzdGluZ19pdGVtcyA9ICQocGFyZW50KS5maW5kKGl0ZW1fc2VsZWN0b3IpO1xuXHRcdHJldHVybiBleGlzdGluZ19pdGVtcz8ubGVuZ3RoID4gMCAmJiBleGlzdGluZ19pdGVtcztcblx0fVxuXG5cdGNsZWFyX2J0bl9ncm91cChwYXJlbnQpIHtcblx0XHRwYXJlbnQuZW1wdHkoKTtcblx0XHRwYXJlbnQucGFyZW50KCkuYWRkQ2xhc3MoJ2hpZGUnKTtcblx0fVxuXG5cdGFkZF9kaXZpZGVyKCkge1xuXHRcdHJldHVybiAkKCc8bGkgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9saT4nKS5hcHBlbmRUbyh0aGlzLm1lbnUpO1xuXHR9XG5cblx0Z2V0X29yX2FkZF9pbm5lcl9ncm91cF9idXR0b24obGFiZWwpIHtcblx0XHRsZXQgJGdyb3VwID0gdGhpcy5pbm5lcl90b29sYmFyLmZpbmQoXG5cdFx0XHRgLmlubmVyLWdyb3VwLWJ1dHRvbltkYXRhLWxhYmVsPVwiJHtlbmNvZGVVUklDb21wb25lbnQobGFiZWwpfVwiXWAsXG5cdFx0KTtcblx0XHRpZiAoISRncm91cC5sZW5ndGgpIHtcblx0XHRcdCRncm91cCA9ICQoXG5cdFx0XHRcdGA8ZGl2IGNsYXNzPVwiaW5uZXItZ3JvdXAtYnV0dG9uXCIgZGF0YS1sYWJlbD1cIiR7ZW5jb2RlVVJJQ29tcG9uZW50KGxhYmVsKX1cIj5cblx0XHRcdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBlbGxpcHNpc1wiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuXHRcdFx0XHRcdFx0JHtsYWJlbH1cblx0XHRcdFx0XHRcdCR7ZnJhcHBlLnV0aWxzLmljb24oJ3NlbGVjdCcsICd4cycpfVxuXHRcdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0XHRcdDxkaXYgcm9sZT1cIm1lbnVcIiBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj48L2Rpdj5cblx0XHRcdFx0PC9kaXY+YCxcblx0XHRcdCkuYXBwZW5kVG8odGhpcy5pbm5lcl90b29sYmFyKTtcblx0XHR9XG5cdFx0cmV0dXJuICRncm91cDtcblx0fVxuXG5cdGdldF9pbm5lcl9ncm91cF9idXR0b24obGFiZWwpIHtcblx0XHRyZXR1cm4gdGhpcy5pbm5lcl90b29sYmFyLmZpbmQoXG5cdFx0XHRgLmlubmVyLWdyb3VwLWJ1dHRvbltkYXRhLWxhYmVsPVwiJHtlbmNvZGVVUklDb21wb25lbnQobGFiZWwpfVwiXWAsXG5cdFx0KTtcblx0fVxuXG5cdHNldF9pbm5lcl9idG5fZ3JvdXBfYXNfcHJpbWFyeShsYWJlbCkge1xuXHRcdHRoaXMuZ2V0X29yX2FkZF9pbm5lcl9ncm91cF9idXR0b24obGFiZWwpXG5cdFx0XHQuZmluZCgnYnV0dG9uJylcblx0XHRcdC5yZW1vdmVDbGFzcygnYnRuLWRlZmF1bHQnKVxuXHRcdFx0LmFkZENsYXNzKCdidG4tcHJpbWFyeScpO1xuXHR9XG5cblx0YnRuX2Rpc2FibGVfZW5hYmxlKGJ0biwgcmVzcG9uc2UpIHtcblx0XHRpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UudGhlbikge1xuXHRcdFx0YnRuLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cdFx0XHRyZXNwb25zZS50aGVuKCgpID0+IHtcblx0XHRcdFx0YnRuLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5hbHdheXMpIHtcblx0XHRcdGJ0bi5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuXHRcdFx0cmVzcG9uc2UuYWx3YXlzKCgpID0+IHtcblx0XHRcdFx0YnRuLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Lypcblx0ICogQWRkIGJ1dHRvbiB0byBidXR0b24gZ3JvdXAuIElmIHRoZXJlIGV4aXN0cyBhbm90aGVyIGJ1dHRvbiB3aXRoIHRoZSBzYW1lIGxhYmVsLFxuXHQgKiBgYWRkX2lubmVyX2J1dHRvbmAgd2lsbCBub3QgYWRkIHRoZSBuZXcgYnV0dG9uIHRvIHRoZSBidXR0b24gZ3JvdXAgZXZlbiBpZiB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24gaXMgZGlmZmVyZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSBMYWJlbCBvZiB0aGUgYnV0dG9uIHRvIGJlIGFkZGVkIHRvIHRoZSBncm91cFxuXHQgKiBAcGFyYW0ge29iamVjdH0gYWN0aW9uIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gYnV0dG9uIGlzIGNsaWNrZWRcblx0ICogQHBhcmFtIHtzdHJpbmd9IGdyb3VwIC0gTGFiZWwgb2YgdGhlIGdyb3VwIGJ1dHRvblxuXHQgKi9cblx0YWRkX2lubmVyX2J1dHRvbihsYWJlbCwgYWN0aW9uLCBncm91cCwgdHlwZSA9ICdkZWZhdWx0Jykge1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0bGV0IF9hY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRsZXQgYnRuID0gJCh0aGlzKTtcblx0XHRcdGxldCByZXNwb25zZSA9IGFjdGlvbigpO1xuXHRcdFx0bWUuYnRuX2Rpc2FibGVfZW5hYmxlKGJ0biwgcmVzcG9uc2UpO1xuXHRcdH07XG5cdFx0Ly8gQWRkIGFjdGlvbnMgYXMgbWVudSBpdGVtIGluIE1vYmlsZSBWaWV3XG5cdFx0bGV0IG1lbnVfaXRlbV9sYWJlbCA9IGdyb3VwID8gYCR7Z3JvdXB9ID4gJHtsYWJlbH1gIDogbGFiZWw7XG5cdFx0bGV0IG1lbnVfaXRlbSA9IHRoaXMuYWRkX21lbnVfaXRlbShtZW51X2l0ZW1fbGFiZWwsIF9hY3Rpb24sIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xuXHRcdG1lbnVfaXRlbS5wYXJlbnQoKS5hZGRDbGFzcygnaGlkZGVuLXhsJyk7XG5cdFx0aWYgKHRoaXMubWVudV9idG5fZ3JvdXAuaGFzQ2xhc3MoJ2hpZGUnKSkge1xuXHRcdFx0dGhpcy5tZW51X2J0bl9ncm91cC5yZW1vdmVDbGFzcygnaGlkZScpLmFkZENsYXNzKCdoaWRkZW4teGwnKTtcblx0XHR9XG5cblx0XHRpZiAoZ3JvdXApIHtcblx0XHRcdGxldCAkZ3JvdXAgPSB0aGlzLmdldF9vcl9hZGRfaW5uZXJfZ3JvdXBfYnV0dG9uKGdyb3VwKTtcblx0XHRcdCQodGhpcy5pbm5lcl90b29sYmFyKS5yZW1vdmVDbGFzcygnaGlkZScpO1xuXG5cdFx0XHRpZiAoIXRoaXMuaXNfaW5fZ3JvdXBfYnV0dG9uX2Ryb3Bkb3duKCRncm91cC5maW5kKCcuZHJvcGRvd24tbWVudScpLCAnYScsIGxhYmVsKSkge1xuXHRcdFx0XHRyZXR1cm4gJChcblx0XHRcdFx0XHRgPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNcIiBvbmNsaWNrPVwicmV0dXJuIGZhbHNlO1wiIGRhdGEtbGFiZWw9XCIke2VuY29kZVVSSUNvbXBvbmVudChcblx0XHRcdFx0XHRcdGxhYmVsLFxuXHRcdFx0XHRcdCl9XCI+JHtsYWJlbH08L2E+YCxcblx0XHRcdFx0KVxuXHRcdFx0XHRcdC5vbignY2xpY2snLCBfYWN0aW9uKVxuXHRcdFx0XHRcdC5hcHBlbmRUbygkZ3JvdXAuZmluZCgnLmRyb3Bkb3duLW1lbnUnKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCBidXR0b24gPSB0aGlzLmlubmVyX3Rvb2xiYXIuZmluZChcblx0XHRcdFx0YGJ1dHRvbltkYXRhLWxhYmVsPVwiJHtlbmNvZGVVUklDb21wb25lbnQobGFiZWwpfVwiXWAsXG5cdFx0XHQpO1xuXHRcdFx0aWYgKGJ1dHRvbi5sZW5ndGggPT0gMCkge1xuXHRcdFx0XHRidXR0b24gPSAkKGA8YnV0dG9uIGRhdGEtbGFiZWw9XCIke2VuY29kZVVSSUNvbXBvbmVudChcblx0XHRcdFx0XHRsYWJlbCxcblx0XHRcdFx0KX1cIiBjbGFzcz1cImJ0biBidG4tJHt0eXBlfSBlbGxpcHNpc1wiPlxuXHRcdFx0XHRcdCR7X18obGFiZWwpfVxuXHRcdFx0XHQ8L2J1dHRvbj5gKTtcblx0XHRcdFx0YnV0dG9uLm9uKCdjbGljaycsIF9hY3Rpb24pO1xuXHRcdFx0XHRidXR0b24uYXBwZW5kVG8odGhpcy5pbm5lcl90b29sYmFyLnJlbW92ZUNsYXNzKCdoaWRlJykpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGJ1dHRvbjtcblx0XHR9XG5cdH1cblxuXHRyZW1vdmVfaW5uZXJfYnV0dG9uKGxhYmVsLCBncm91cCkge1xuXHRcdGlmICh0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRsYWJlbCA9IFtsYWJlbF07XG5cdFx0fVxuXHRcdC8vIHRyYW5zbGF0ZVxuXHRcdGxhYmVsID0gbGFiZWwubWFwKGwgPT4gX18obCkpO1xuXG5cdFx0aWYgKGdyb3VwKSB7XG5cdFx0XHRsZXQgJGdyb3VwID0gdGhpcy5nZXRfaW5uZXJfZ3JvdXBfYnV0dG9uKF9fKGdyb3VwKSk7XG5cdFx0XHRpZiAoJGdyb3VwLmxlbmd0aCkge1xuXHRcdFx0XHQkZ3JvdXAuZmluZChgLmRyb3Bkb3duLWl0ZW1bZGF0YS1sYWJlbD1cIiR7ZW5jb2RlVVJJQ29tcG9uZW50KGxhYmVsKX1cIl1gKS5yZW1vdmUoKTtcblx0XHRcdH1cblx0XHRcdGlmICgkZ3JvdXAuZmluZCgnLmRyb3Bkb3duLWl0ZW0nKS5sZW5ndGggPT09IDApIHsgJGdyb3VwLnJlbW92ZSgpOyB9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuaW5uZXJfdG9vbGJhci5maW5kKGBidXR0b25bZGF0YS1sYWJlbD1cIiR7ZW5jb2RlVVJJQ29tcG9uZW50KGxhYmVsKX1cIl1gKS5yZW1vdmUoKTtcblx0XHR9XG5cdH1cblxuXHRjaGFuZ2VfaW5uZXJfYnV0dG9uX3R5cGUobGFiZWwsIGdyb3VwLCB0eXBlKSB7XG5cdFx0bGV0IGJ0bjtcblxuXHRcdGlmIChncm91cCkge1xuXHRcdFx0bGV0ICRncm91cCA9IHRoaXMuZ2V0X2lubmVyX2dyb3VwX2J1dHRvbihfXyhncm91cCkpO1xuXHRcdFx0aWYgKCRncm91cC5sZW5ndGgpIHtcblx0XHRcdFx0YnRuID0gJGdyb3VwLmZpbmQoYC5kcm9wZG93bi1pdGVtW2RhdGEtbGFiZWw9XCIke2VuY29kZVVSSUNvbXBvbmVudChsYWJlbCl9XCJdYCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGJ0biA9IHRoaXMuaW5uZXJfdG9vbGJhci5maW5kKGBidXR0b25bZGF0YS1sYWJlbD1cIiR7ZW5jb2RlVVJJQ29tcG9uZW50KGxhYmVsKX1cIl1gKTtcblx0XHR9XG5cblx0XHRpZiAoYnRuKSB7XG5cdFx0XHRidG4ucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcyhgYnRuIGJ0bi0ke3R5cGV9IGVsbGlwc2lzYCk7XG5cdFx0fVxuXHR9XG5cblx0YWRkX2lubmVyX21lc3NhZ2UobWVzc2FnZSkge1xuXHRcdGxldCAkbWVzc2FnZSA9ICQoYDxzcGFuIGNsYXNzPSdpbm5lci1wYWdlLW1lc3NhZ2UgdGV4dC1tdXRlZCBzbWFsbCc+JHttZXNzYWdlfTwvZGl2PmApO1xuXHRcdHRoaXMuaW5uZXJfdG9vbGJhci5maW5kKCcuaW5uZXItcGFnZS1tZXNzYWdlJykucmVtb3ZlKCk7XG5cdFx0dGhpcy5pbm5lcl90b29sYmFyLnJlbW92ZUNsYXNzKCdoaWRlJykucHJlcGVuZCgkbWVzc2FnZSk7XG5cblx0XHRyZXR1cm4gJG1lc3NhZ2U7XG5cdH1cblxuXHRjbGVhcl9pbm5lcl90b29sYmFyKCkge1xuXHRcdHRoaXMuaW5uZXJfdG9vbGJhci5lbXB0eSgpLmFkZENsYXNzKCdoaWRlJyk7XG5cdH1cblxuXHQvLy0tIFNpZGViYXIgLS0vL1xuXG5cdGFkZF9zaWRlYmFyX2l0ZW0obGFiZWwsIGFjdGlvbiwgaW5zZXJ0X2FmdGVyLCBwcmVwZW5kKSB7XG5cdFx0bGV0IHBhcmVudCA9IHRoaXMuc2lkZWJhci5maW5kKCcuc2lkZWJhci1tZW51LnN0YW5kYXJkLWFjdGlvbnMnKTtcblx0XHRsZXQgbGkgPSAkKCc8bGk+Jyk7XG5cdFx0bGV0IGxpbmsgPSAkKCc8YT4nKS5odG1sKGxhYmVsKS5vbignY2xpY2snLCBhY3Rpb24pXG5cdFx0XHQuYXBwZW5kVG8obGkpO1xuXG5cdFx0aWYgKGluc2VydF9hZnRlcikge1xuXHRcdFx0bGkuaW5zZXJ0QWZ0ZXIocGFyZW50LmZpbmQoaW5zZXJ0X2FmdGVyKSk7XG5cdFx0fSBlbHNlIGlmIChwcmVwZW5kKSB7XG5cdFx0XHRsaS5wcmVwZW5kVG8ocGFyZW50KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGkuYXBwZW5kVG8ocGFyZW50KTtcblx0XHR9XG5cdFx0cmV0dXJuIGxpbms7XG5cdH1cblxuXHQvLy0tLS8vXG5cblx0Y2xlYXJfdXNlcl9hY3Rpb25zKCkge1xuXHRcdHRoaXMubWVudS5maW5kKCcudXNlci1hY3Rpb24nKS5yZW1vdmUoKTtcblx0fVxuXG5cdC8vIHBhZ2U6OnRpdGxlXG5cdGdldF90aXRsZV9hcmVhKCkge1xuXHRcdHJldHVybiB0aGlzLiR0aXRsZV9hcmVhO1xuXHR9XG5cblx0c2V0X3RpdGxlKHRpdGxlLCBpY29uID0gbnVsbCwgc3RyaXAgPSB0cnVlLCB0YWJfdGl0bGUgPSAnJykge1xuXHRcdGlmICghdGl0bGUpIHsgdGl0bGUgPSAnJzsgfVxuXHRcdGlmIChzdHJpcCkge1xuXHRcdFx0dGl0bGUgPSBzdHJpcF9odG1sKHRpdGxlKTtcblx0XHR9XG5cdFx0dGhpcy50aXRsZSA9IHRpdGxlO1xuXHRcdC8vIGZyYXBwZS51dGlscy5zZXRfdGl0bGUodGFiX3RpdGxlIHx8IHRpdGxlKTtcblx0XHRpZiAoaWNvbikge1xuXHRcdFx0dGl0bGUgPSBgJHtmcmFwcGUudXRpbHMuaWNvbihpY29uKX0gJHt0aXRsZX1gO1xuXHRcdH1cblx0XHRsZXQgdGl0bGVfd3JhcHBlciA9IHRoaXMuJHRpdGxlX2FyZWEuZmluZCgnLnRpdGxlLXRleHQnKTtcblx0XHR0aXRsZV93cmFwcGVyLmh0bWwodGl0bGUpO1xuXHRcdHRpdGxlX3dyYXBwZXIuYXR0cigndGl0bGUnLCB0aGlzLnRpdGxlKTtcblx0fVxuXG5cdHNldF90aXRsZV9zdWIodHh0KSB7XG5cdFx0Ly8gc3RyaXAgaWNvblxuXHRcdHRoaXMuJHN1Yl90aXRsZV9hcmVhLmh0bWwodHh0KS50b2dnbGVDbGFzcygnaGlkZScsIEJvb2xlYW4oIXR4dCkpO1xuXHR9XG5cblx0Z2V0X21haW5faWNvbihpY29uKSB7XG5cdFx0cmV0dXJuIHRoaXMuJHRpdGxlX2FyZWFcblx0XHRcdC5maW5kKCcudGl0bGUtaWNvbicpXG5cdFx0XHQuaHRtbChgPGkgY2xhc3M9XCIke2ljb259IGZhLWZ3XCI+PC9pPiBgKVxuXHRcdFx0LnRvZ2dsZSh0cnVlKTtcblx0fVxuXG5cdGFkZF9oZWxwX2J1dHRvbih0eHQpIHtcblx0XHQvL1xuXHR9XG5cblx0YWRkX2J1dHRvbihsYWJlbCwgY2xpY2ssIG9wdHMpIHtcblx0XHRpZiAoIW9wdHMpIHsgb3B0cyA9IHt9OyB9XG5cdFx0bGV0IGJ1dHRvbiA9ICQoYDxidXR0b25cblx0XHRcdGNsYXNzPVwiYnRuICR7b3B0cy5idG5fY2xhc3MgfHwgJ2J0bi1kZWZhdWx0J30gJHtvcHRzLmJ0bl9zaXplIHx8ICdidG4tc20nfSBlbGxpcHNpc1wiPlxuXHRcdFx0XHQke29wdHMuaWNvbiA/IGZyYXBwZS51dGlscy5pY29uKG9wdHMuaWNvbikgOiAnJ31cblx0XHRcdFx0JHtsYWJlbH1cblx0XHQ8L2J1dHRvbj5gKTtcblx0XHQvLyBBZGQgYWN0aW9ucyBhcyBtZW51IGl0ZW0gaW4gTW9iaWxlIFZpZXcgKHNpbWlsYXIgdG8gXCJhZGRfY3VzdG9tX2J1dHRvblwiIGluIGZvcm1zLmpzKVxuXHRcdGxldCBtZW51X2l0ZW0gPSB0aGlzLmFkZF9tZW51X2l0ZW0obGFiZWwsIGNsaWNrLCBmYWxzZSk7XG5cdFx0bWVudV9pdGVtLnBhcmVudCgpLmFkZENsYXNzKCdoaWRkZW4teGwnKTtcblxuXHRcdGJ1dHRvbi5hcHBlbmRUbyh0aGlzLmN1c3RvbV9hY3Rpb25zKTtcblx0XHRidXR0b24ub24oJ2NsaWNrJywgY2xpY2spO1xuXHRcdHRoaXMuY3VzdG9tX2FjdGlvbnMucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcblxuXHRcdHJldHVybiBidXR0b247XG5cdH1cblxuXHRhZGRfY3VzdG9tX2J1dHRvbl9ncm91cChsYWJlbCwgaWNvbiwgcGFyZW50KSB7XG5cdFx0bGV0IGRyb3Bkb3duX2xhYmVsID0gYDxzcGFuIGNsYXNzPVwiaGlkZGVuLXhzXCI+XG5cdFx0XHQ8c3BhbiBjbGFzcz1cImN1c3RvbS1idG4tZ3JvdXAtbGFiZWxcIj4ke19fKGxhYmVsKX08L3NwYW4+XG5cdFx0XHQke2ZyYXBwZS51dGlscy5pY29uKCdzZWxlY3QnLCAneHMnKX1cblx0XHQ8L3NwYW4+YDtcblxuXHRcdGlmIChpY29uKSB7XG5cdFx0XHRkcm9wZG93bl9sYWJlbCA9IGA8c3BhbiBjbGFzcz1cImhpZGRlbi14c1wiPlxuXHRcdFx0XHQke2ZyYXBwZS51dGlscy5pY29uKGljb24pfVxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cImN1c3RvbS1idG4tZ3JvdXAtbGFiZWxcIj4ke19fKGxhYmVsKX08L3NwYW4+XG5cdFx0XHRcdCR7ZnJhcHBlLnV0aWxzLmljb24oJ3NlbGVjdCcsICd4cycpfVxuXHRcdFx0PC9zcGFuPlxuXHRcdFx0PHNwYW4gY2xhc3M9XCJ2aXNpYmxlLXhzXCI+XG5cdFx0XHRcdCR7ZnJhcHBlLnV0aWxzLmljb24oaWNvbil9XG5cdFx0XHQ8L3NwYW4+YDtcblx0XHR9XG5cblx0XHRsZXQgY3VzdG9tX2J0bl9ncm91cCA9ICQoYFxuXHRcdFx0PGRpdiBjbGFzcz1cImN1c3RvbS1idG4tZ3JvdXBcIj5cblx0XHRcdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIGVsbGlwc2lzXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuXHRcdFx0XHRcdCR7ZHJvcGRvd25fbGFiZWx9XG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0XHQ8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgcm9sZT1cIm1lbnVcIj48L3VsPlxuXHRcdFx0PC9kaXY+XG5cdFx0YCk7XG5cblx0XHRpZiAoIXBhcmVudCkgeyBwYXJlbnQgPSB0aGlzLmN1c3RvbV9hY3Rpb25zOyB9XG5cdFx0cGFyZW50LnJlbW92ZUNsYXNzKCdoaWRlJykuYXBwZW5kKGN1c3RvbV9idG5fZ3JvdXApO1xuXG5cdFx0cmV0dXJuIGN1c3RvbV9idG5fZ3JvdXAuZmluZCgnLmRyb3Bkb3duLW1lbnUnKTtcblx0fVxuXG5cdGFkZF9kcm9wZG93bl9idXR0b24ocGFyZW50LCBsYWJlbCwgY2xpY2ssIGljb24pIHtcblx0XHRmcmFwcGUudWkudG9vbGJhci5hZGRfZHJvcGRvd25fYnV0dG9uKHBhcmVudCwgbGFiZWwsIGNsaWNrLCBpY29uKTtcblx0fVxuXG5cdC8vIHBhZ2U6OmZvcm1cblx0YWRkX2xhYmVsKGxhYmVsKSB7XG5cdFx0dGhpcy5zaG93X2Zvcm0oKTtcblx0XHRyZXR1cm4gJChgPGxhYmVsIGNsYXNzPSdjb2wtbWQtMSBwYWdlLW9ubHktbGFiZWwnPiR7bGFiZWx9IDwvbGFiZWw+YCkuYXBwZW5kVG8oXG5cdFx0XHR0aGlzLnBhZ2VfZm9ybSxcblx0XHQpO1xuXHR9XG5cdGFkZF9zZWxlY3QobGFiZWwsIG9wdGlvbnMpIHtcblx0XHRsZXQgZmllbGQgPSB0aGlzLmFkZF9maWVsZCh7IGxhYmVsLCBmaWVsZHR5cGU6ICdTZWxlY3QnIH0pO1xuXHRcdHJldHVybiBmaWVsZC4kd3JhcHBlci5maW5kKCdzZWxlY3QnKS5lbXB0eSgpLmFkZF9vcHRpb25zKG9wdGlvbnMpO1xuXHR9XG5cdGFkZF9kYXRhKGxhYmVsKSB7XG5cdFx0bGV0IGZpZWxkID0gdGhpcy5hZGRfZmllbGQoeyBsYWJlbCwgZmllbGR0eXBlOiAnRGF0YScgfSk7XG5cdFx0cmV0dXJuIGZpZWxkLiR3cmFwcGVyLmZpbmQoJ2lucHV0JykuYXR0cigncGxhY2Vob2xkZXInLCBsYWJlbCk7XG5cdH1cblx0YWRkX2RhdGUobGFiZWwsIGRhdGUpIHtcblx0XHRsZXQgZmllbGQgPSB0aGlzLmFkZF9maWVsZCh7IGxhYmVsLCBmaWVsZHR5cGU6ICdEYXRlJywgZGVmYXVsdDogZGF0ZSB9KTtcblx0XHRyZXR1cm4gZmllbGQuJHdyYXBwZXIuZmluZCgnaW5wdXQnKS5hdHRyKCdwbGFjZWhvbGRlcicsIGxhYmVsKTtcblx0fVxuXHRhZGRfY2hlY2sobGFiZWwpIHtcblx0XHRyZXR1cm4gJChgPGRpdiBjbGFzcz0nY2hlY2tib3gnPjxsYWJlbD48aW5wdXQgdHlwZT0nY2hlY2tib3gnPiR7bGFiZWx9PC9sYWJlbD48L2Rpdj5gKVxuXHRcdFx0LmFwcGVuZFRvKHRoaXMucGFnZV9mb3JtKVxuXHRcdFx0LmZpbmQoJ2lucHV0Jyk7XG5cdH1cblx0YWRkX2JyZWFrKCkge1xuXHRcdC8vIGFkZCBmdXJ0aGVyIGZpZWxkcyBpbiB0aGUgbmV4dCBsaW5lXG5cdFx0dGhpcy5wYWdlX2Zvcm0uYXBwZW5kKCc8ZGl2IGNsYXNzPVwiY2xlYXJmaXggaW52aXNpYmxlLXhzXCI+PC9kaXY+Jyk7XG5cdH1cblx0YWRkX2ZpZWxkKGRmLCBwYXJlbnQpIHtcblx0XHR0aGlzLnNob3dfZm9ybSgpO1xuXG5cdFx0aWYgKCFkZi5wbGFjZWhvbGRlcikge1xuXHRcdFx0ZGYucGxhY2Vob2xkZXIgPSBkZi5sYWJlbDtcblx0XHR9XG5cblx0XHRkZi5pbnB1dF9jbGFzcyA9ICdpbnB1dC14cyc7XG5cblx0XHRsZXQgZiA9IGZyYXBwZS51aS5mb3JtLm1ha2VfY29udHJvbCh7XG5cdFx0XHRkZixcblx0XHRcdHBhcmVudDogcGFyZW50IHx8IHRoaXMucGFnZV9mb3JtLFxuXHRcdFx0b25seV9pbnB1dDogZGYuZmllbGR0eXBlID09ICdDaGVjaycgPyBmYWxzZSA6IHRydWUsXG5cdFx0fSk7XG5cdFx0Zi5yZWZyZXNoKCk7XG5cdFx0JChmLndyYXBwZXIpXG5cdFx0XHQuYWRkQ2xhc3MoJ2NvbC1tZC0yJylcblx0XHRcdC5hdHRyKCd0aXRsZScsIF9fKGRmLmxhYmVsKSlcblx0XHRcdC50b29sdGlwKHtcblx0XHRcdFx0ZGVsYXk6IHsgc2hvdzogNjAwLCBoaWRlOiAxMDAgfSxcblx0XHRcdFx0dHJpZ2dlcjogJ2hvdmVyJyxcblx0XHRcdH0pO1xuXG5cdFx0Ly8gaHRtbCBmaWVsZHMgaW4gdG9vbGJhciBhcmUgb25seSBmb3IgZGlzcGxheVxuXHRcdGlmIChkZi5maWVsZHR5cGUgPT0gJ0hUTUwnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gaGlkZGVuIGZpZWxkcyBkb250IGhhdmUgJGlucHV0XG5cdFx0aWYgKCFmLiRpbnB1dCkgeyBmLm1ha2VfaW5wdXQoKTsgfVxuXG5cdFx0Zi4kaW5wdXQuYXR0cigncGxhY2Vob2xkZXInLCBfXyhkZi5sYWJlbCkpO1xuXG5cdFx0aWYgKGRmLmZpZWxkdHlwZSA9PT0gJ0NoZWNrJykge1xuXHRcdFx0JChmLndyYXBwZXIpLmZpbmQoJzpmaXJzdC1jaGlsZCcpLnJlbW92ZUNsYXNzKCdjb2wtbWQtb2Zmc2V0LTQgY29sLW1kLTgnKTtcblx0XHR9XG5cblx0XHRpZiAoZGYuZmllbGR0eXBlID09ICdCdXR0b24nKSB7XG5cdFx0XHQkKGYud3JhcHBlcikuZmluZCgnLnBhZ2UtY29udHJvbC1sYWJlbCcpLmh0bWwoJyZuYnNwOycpO1xuXHRcdFx0Zi4kaW5wdXQuYWRkQ2xhc3MoJ2J0bi14cycpLmNzcyh7IHdpZHRoOiAnMTAwJScsICdtYXJnaW4tdG9wJzogJy0xcHgnIH0pO1xuXHRcdH1cblxuXHRcdGlmIChkZi5kZWZhdWx0KSB7IGYuc2V0X2lucHV0KGRmLmRlZmF1bHQpOyB9XG5cdFx0dGhpcy5maWVsZHNfZGljdFtkZi5maWVsZG5hbWUgfHwgZGYubGFiZWxdID0gZjtcblx0XHRyZXR1cm4gZjtcblx0fVxuXHRjbGVhcl9maWVsZHMoKSB7XG5cdFx0dGhpcy5wYWdlX2Zvcm0uZW1wdHkoKTtcblx0fVxuXHRzaG93X2Zvcm0oKSB7XG5cdFx0dGhpcy5wYWdlX2Zvcm0ucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcblx0fVxuXHRoaWRlX2Zvcm0oKSB7XG5cdFx0dGhpcy5wYWdlX2Zvcm0uYWRkQ2xhc3MoJ2hpZGUnKTtcblx0fVxuXHRnZXRfZm9ybV92YWx1ZXMoKSB7XG5cdFx0bGV0IHZhbHVlcyA9IHt9O1xuXHRcdGZvciAobGV0IGZpZWxkbmFtZSBpbiB0aGlzLmZpZWxkc19kaWN0KSB7XG5cdFx0XHRsZXQgZmllbGQgPSB0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV07XG5cdFx0XHR2YWx1ZXNbZmllbGRuYW1lXSA9IGZpZWxkLmdldF92YWx1ZSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsdWVzO1xuXHR9XG5cdGFkZF92aWV3KG5hbWU6IHN0cmluZywgaHRtbDogc3RyaW5nIHwgSlF1ZXJ5KSB7XG5cdFx0bGV0IGVsZW1lbnQgPSBodG1sO1xuXHRcdGlmICh0eXBlb2YgaHRtbCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGVsZW1lbnQgPSAkKGh0bWwpO1xuXHRcdH1cblx0XHR0aGlzLnZpZXdzW25hbWVdID0gZWxlbWVudC5hcHBlbmRUbygkKHRoaXMud3JhcHBlcikuZmluZCgnLnBhZ2UtY29udGVudCcpKTtcblx0XHRpZiAodGhpcy5jdXJyZW50X3ZpZXcpIHtcblx0XHRcdHRoaXMudmlld3NbbmFtZV0udG9nZ2xlKGZhbHNlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jdXJyZW50X3ZpZXcgPSB0aGlzLnZpZXdzW25hbWVdO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3c1tuYW1lXTtcblx0fVxuXHRzZXRfdmlldyhuYW1lKSB7XG5cdFx0aWYgKHRoaXMuY3VycmVudF92aWV3X25hbWUgPT09IG5hbWUpIHsgcmV0dXJuOyB9XG5cdFx0dGhpcy5jdXJyZW50X3ZpZXc/LnRvZ2dsZShmYWxzZSk7XG5cdFx0dGhpcy5jdXJyZW50X3ZpZXcgPSB0aGlzLnZpZXdzW25hbWVdO1xuXG5cdFx0dGhpcy5wcmV2aW91c192aWV3X25hbWUgPSB0aGlzLmN1cnJlbnRfdmlld19uYW1lO1xuXHRcdHRoaXMuY3VycmVudF92aWV3X25hbWUgPSBuYW1lO1xuXG5cdFx0dGhpcy52aWV3c1tuYW1lXS50b2dnbGUodHJ1ZSk7XG5cblx0XHR0aGlzLndyYXBwZXIudHJpZ2dlcigndmlldy1jaGFuZ2UnKTtcblx0fVxufVxuXG5pbnRlcmZhY2UgUGFnZSB7XG5cdHBhcmVudDogSFRNTEVsZW1lbnQ7XG5cdHNpbmdsZV9jb2x1bW46IGJvb2xlYW47XG5cdGN1cnJlbnRfdmlldz86IEpRdWVyeTtcblx0d3JhcHBlcjogSlF1ZXJ5O1xuXHRjdXJyZW50X3ZpZXdfbmFtZT86IHN0cmluZztcblx0cHJldmlvdXNfdmlld19uYW1lPzogc3RyaW5nO1xuXG5cdCR0aXRsZV9hcmVhOiBKUXVlcnlcblxuXHQkc3ViX3RpdGxlX2FyZWE6IEpRdWVyeVxuXG5cdG1haW46IEpRdWVyeVxuXHRib2R5OiBKUXVlcnlcblx0Y29udGFpbmVyOiBKUXVlcnlcblx0c2lkZWJhcjogSlF1ZXJ5XG5cdGZvb3RlcjogSlF1ZXJ5XG5cdGluZGljYXRvcjogSlF1ZXJ5XG5cblx0cGFnZV9hY3Rpb25zOiBKUXVlcnlcblxuXHRidG5fcHJpbWFyeTogSlF1ZXJ5XG5cdGJ0bl9zZWNvbmRhcnk6IEpRdWVyeVxuXG5cdG1lbnU6IEpRdWVyeVxuXHRtZW51X2J0bl9ncm91cDogSlF1ZXJ5XG5cblx0YWN0aW9uczogSlF1ZXJ5XG5cdGFjdGlvbnNfYnRuX2dyb3VwOiBKUXVlcnlcblxuXHRzdGFuZGFyZF9hY3Rpb25zOiBKUXVlcnlcblx0Y3VzdG9tX2FjdGlvbnM6IEpRdWVyeVxuXG5cdHBhZ2VfZm9ybTogSlF1ZXJ5XG5cdGlubmVyX3Rvb2xiYXI6IEpRdWVyeVxuXHRpY29uX2dyb3VwOiBKUXVlcnlcbn1cbmV4cG9ydCBkZWZhdWx0IFBhZ2U7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgbWF4LWxpbmVzICovXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTUsIEZyYXBwZSBUZWNobm9sb2dpZXMgUHZ0LiBMdGQuIGFuZCBDb250cmlidXRvcnNcbi8vIE1JVCBMaWNlbnNlLiBTZWUgbGljZW5zZS50eHRcbmltcG9ydCB0eXBlIEZvcm0gZnJvbSAnLi9Gb3JtJztcbmltcG9ydCB0eXBlIFBhZ2UgZnJvbSAnLi9QYWdlJztcblxuY2xhc3MgVG9vbGJhciB7XG5cdHBhZ2U6IFBhZ2U7XG5cdGZybTogRm9ybTtcblx0Y29uc3RydWN0b3IoZnJtOiBGb3JtLCBwYWdlOiBQYWdlKSB7XG5cdFx0dGhpcy5mcm0gPSBmcm07XG5cdFx0dGhpcy5wYWdlID0gcGFnZTtcblx0XHR0aGlzLnJlZnJlc2goKTtcblx0XHR0aGlzLmFkZF91cGRhdGVfYnV0dG9uX29uX2RpcnR5KCk7XG5cdFx0dGhpcy5zZXR1cF9lZGl0YWJsZV90aXRsZSgpO1xuXHR9XG5cdHJlZnJlc2goKSB7XG5cdFx0dGhpcy5tYWtlX21lbnUoKTtcblx0XHR0aGlzLm1ha2Vfdmlld2VycygpO1xuXHRcdHRoaXMuc2V0X3RpdGxlKCk7XG5cdFx0dGhpcy5wYWdlLmNsZWFyX3VzZXJfYWN0aW9ucygpO1xuXHRcdHRoaXMuc2hvd190aXRsZV9hc19kaXJ0eSgpO1xuXHRcdHRoaXMuc2V0X3ByaW1hcnlfYWN0aW9uKCk7XG5cblx0XHRpZiAodGhpcy5mcm0ubWV0YS5oaWRlX3Rvb2xiYXIpIHtcblx0XHRcdHRoaXMucGFnZS5oaWRlX21lbnUoKTtcblx0XHR9IGVsc2UgaWYgKHRoaXMuZnJtLmRvYy5fX2lzbG9jYWwpIHtcblx0XHRcdHRoaXMucGFnZS5oaWRlX21lbnUoKTtcblx0XHRcdHRoaXMucHJpbnRfaWNvbiAmJiB0aGlzLnByaW50X2ljb24uYWRkQ2xhc3MoJ2hpZGUnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wYWdlLnNob3dfbWVudSgpO1xuXHRcdFx0dGhpcy5wcmludF9pY29uICYmIHRoaXMucHJpbnRfaWNvbi5yZW1vdmVDbGFzcygnaGlkZScpO1xuXHRcdH1cblx0fVxuXHRzZXRfdGl0bGUoKSB7XG5cdFx0aWYgKHRoaXMuZnJtLmlzX25ldygpKSB7XG5cdFx0XHR2YXIgdGl0bGUgPSBfXygnTmV3IHswfScsIFtfXyh0aGlzLmZybS5tZXRhLm5hbWUpXSk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmZybS5tZXRhLnRpdGxlX2ZpZWxkKSB7XG5cdFx0XHRsZXQgdGl0bGVfZmllbGQgPSAodGhpcy5mcm0uZG9jW3RoaXMuZnJtLm1ldGEudGl0bGVfZmllbGRdIHx8ICcnKS50b1N0cmluZygpLnRyaW0oKTtcblx0XHRcdHZhciB0aXRsZSA9IHN0cmlwX2h0bWwodGl0bGVfZmllbGQgfHwgdGhpcy5mcm0uZG9jbmFtZSk7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHRoaXMuZnJtLmRvYy5fX2lzbG9jYWwgfHxcblx0XHRcdFx0dGl0bGUgPT09IHRoaXMuZnJtLmRvY25hbWUgfHxcblx0XHRcdFx0dGhpcy5mcm0ubWV0YS5hdXRvbmFtZSA9PT0gJ2hhc2gnXG5cdFx0XHQpIHtcblx0XHRcdFx0dGhpcy5wYWdlLnNldF90aXRsZV9zdWIoJycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5wYWdlLnNldF90aXRsZV9zdWIodGhpcy5mcm0uZG9jbmFtZSk7XG5cdFx0XHRcdHRoaXMucGFnZS4kc3ViX3RpdGxlX2FyZWEuY3NzKCdjdXJzb3InLCAnY29weScpO1xuXHRcdFx0XHR0aGlzLnBhZ2UuJHN1Yl90aXRsZV9hcmVhLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcblx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRmcmFwcGUudXRpbHMuY29weV90b19jbGlwYm9hcmQodGhpcy5mcm0uZG9jbmFtZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgdGl0bGUgPSB0aGlzLmZybS5kb2NuYW1lO1xuXHRcdH1cblxuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0dGl0bGUgPSBfXyh0aXRsZSk7XG5cdFx0dGhpcy5wYWdlLnNldF90aXRsZSh0aXRsZSk7XG5cdFx0aWYgKHRoaXMuZnJtLm1ldGEudGl0bGVfZmllbGQpIHtcblx0XHRcdGZyYXBwZS51dGlscy5zZXRfdGl0bGUoYCR7dGl0bGV9IC0gJHt0aGlzLmZybS5kb2NuYW1lfWApO1xuXHRcdH1cblx0XHR0aGlzLnBhZ2UuJHRpdGxlX2FyZWEudG9nZ2xlQ2xhc3MoXG5cdFx0XHQnZWRpdGFibGUtdGl0bGUnLFxuXHRcdFx0Qm9vbGVhbih0aGlzLmlzX3RpdGxlX2VkaXRhYmxlKCkgfHwgdGhpcy5jYW5fcmVuYW1lKCkpLFxuXHRcdCk7XG5cblx0XHR0aGlzLnNldF9pbmRpY2F0b3IoKTtcblx0fVxuXHRpc190aXRsZV9lZGl0YWJsZSgpIHtcblx0XHRsZXQgeyB0aXRsZV9maWVsZCB9ID0gdGhpcy5mcm0ubWV0YTtcblx0XHRsZXQgZG9jX2ZpZWxkID0gdGhpcy5mcm0uZ2V0X2RvY2ZpZWxkKHRpdGxlX2ZpZWxkKTtcblxuXHRcdGlmIChcblx0XHRcdHRpdGxlX2ZpZWxkICYmXG5cdFx0XHR0aGlzLmZybS5wZXJtWzBdLndyaXRlICYmXG5cdFx0XHQhdGhpcy5mcm0uZG9jLl9faXNsb2NhbCAmJlxuXHRcdFx0ZG9jX2ZpZWxkLmZpZWxkdHlwZSA9PT0gJ0RhdGEnICYmXG5cdFx0XHQhZG9jX2ZpZWxkLnJlYWRfb25seVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cdGNhbl9yZW5hbWUoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHNob3dfdW5jaGFuZ2VkX2RvY3VtZW50X2FsZXJ0KCkge1xuXHRcdGZyYXBwZS5zaG93X2FsZXJ0KHtcblx0XHRcdGluZGljYXRvcjogJ2luZm8nLFxuXHRcdFx0bWVzc2FnZTogX18oJ1VuY2hhbmdlZCcpLFxuXHRcdH0pO1xuXHR9XG5cdHJlbmFtZV9kb2N1bWVudF90aXRsZShpbnB1dF9uYW1lLCBpbnB1dF90aXRsZSwgbWVyZ2UgPSBmYWxzZSkge1xuXHRcdGxldCBjb25maXJtX21lc3NhZ2UgPSBudWxsO1xuXHRcdGNvbnN0IGRvY25hbWUgPSB0aGlzLmZybS5kb2MubmFtZTtcblx0XHRjb25zdCB0aXRsZV9maWVsZCA9IHRoaXMuZnJtLm1ldGEudGl0bGVfZmllbGQgfHwgJyc7XG5cdFx0Y29uc3QgeyBkb2N0eXBlIH0gPSB0aGlzLmZybTtcblx0XHRsZXQgcXVldWU7XG5cdFx0aWYgKHRoaXMuZnJtLl9fcmVuYW1lX3F1ZXVlKSB7XG5cdFx0XHRxdWV1ZSA9IHRoaXMuZnJtLl9fcmVuYW1lX3F1ZXVlO1xuXHRcdH1cblxuXHRcdGlmIChpbnB1dF9uYW1lKSB7XG5cdFx0XHRjb25zdCB3YXJuaW5nID0gX18oJ1RoaXMgY2Fubm90IGJlIHVuZG9uZScpO1xuXHRcdFx0Y29uc3QgbWVzc2FnZSA9IF9fKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbWVyZ2UgezB9IHdpdGggezF9PycsIFtcblx0XHRcdFx0ZG9jbmFtZS5ib2xkKCksXG5cdFx0XHRcdGlucHV0X25hbWUuYm9sZCgpLFxuXHRcdFx0XSk7XG5cdFx0XHRjb25maXJtX21lc3NhZ2UgPSBgJHttZXNzYWdlfTxicj48Yj4ke3dhcm5pbmd9PGI+YDtcblx0XHR9XG5cblx0XHRsZXQgcmVuYW1lX2RvY3VtZW50ID0gKCkgPT4gZnJhcHBlXG5cdFx0XHQueGNhbGwoJ2ZyYXBwZS5tb2RlbC5yZW5hbWVfZG9jLnVwZGF0ZV9kb2N1bWVudF90aXRsZScsIHtcblx0XHRcdFx0ZG9jdHlwZSxcblx0XHRcdFx0ZG9jbmFtZSxcblx0XHRcdFx0bmFtZTogaW5wdXRfbmFtZSxcblx0XHRcdFx0dGl0bGU6IGlucHV0X3RpdGxlLFxuXHRcdFx0XHRlbnF1ZXVlOiB0cnVlLFxuXHRcdFx0XHRtZXJnZSxcblx0XHRcdFx0ZnJlZXplOiB0cnVlLFxuXHRcdFx0XHRmcmVlemVfbWVzc2FnZTogX18oJ1VwZGF0aW5nIHJlbGF0ZWQgZmllbGRzLi4uJyksXG5cdFx0XHRcdHF1ZXVlLFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKG5ld19kb2NuYW1lID0+IHtcblx0XHRcdFx0Y29uc3QgcmVsb2FkX2Zvcm0gPSBpbnB1dF9uYW1lID0+IHtcblx0XHRcdFx0XHQkKGRvY3VtZW50KS50cmlnZ2VyKCdyZW5hbWUnLCBbZG9jdHlwZSwgZG9jbmFtZSwgaW5wdXRfbmFtZV0pO1xuXHRcdFx0XHRcdGlmIChsb2NhbHNbZG9jdHlwZV0gJiYgbG9jYWxzW2RvY3R5cGVdW2RvY25hbWVdKSB7XG5cdFx0XHRcdFx0XHRkZWxldGUgbG9jYWxzW2RvY3R5cGVdW2RvY25hbWVdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLmZybS5yZWxvYWRfZG9jKCk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gaGFuZGxlIGRvY3VtZW50IHJlbmFtaW5nIHF1ZXVlZCBhY3Rpb25cblx0XHRcdFx0aWYgKGlucHV0X25hbWUgJiYgbmV3X2RvY25hbWUgPT0gZG9jbmFtZSkge1xuXHRcdFx0XHRcdGZyYXBwZS5zb2NrZXRpby5kb2Nfc3Vic2NyaWJlKGRvY3R5cGUsIGlucHV0X25hbWUpO1xuXHRcdFx0XHRcdGZyYXBwZS5yZWFsdGltZS5vbignZG9jX3VwZGF0ZScsIGRhdGEgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKGRhdGEuZG9jdHlwZSA9PSBkb2N0eXBlICYmIGRhdGEubmFtZSA9PSBpbnB1dF9uYW1lKSB7XG5cdFx0XHRcdFx0XHRcdHJlbG9hZF9mb3JtKGlucHV0X25hbWUpO1xuXHRcdFx0XHRcdFx0XHRmcmFwcGUuc2hvd19hbGVydCh7XG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogX18oJ0RvY3VtZW50IHJlbmFtZWQgZnJvbSB7MH0gdG8gezF9JywgW1xuXHRcdFx0XHRcdFx0XHRcdFx0ZG9jbmFtZS5ib2xkKCksXG5cdFx0XHRcdFx0XHRcdFx0XHRpbnB1dF9uYW1lLmJvbGQoKSxcblx0XHRcdFx0XHRcdFx0XHRdKSxcblx0XHRcdFx0XHRcdFx0XHRpbmRpY2F0b3I6ICdzdWNjZXNzJyxcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0ZnJhcHBlLnNob3dfYWxlcnQoXG5cdFx0XHRcdFx0XHRfXygnRG9jdW1lbnQgcmVuYW1pbmcgZnJvbSB7MH0gdG8gezF9IGhhcyBiZWVuIHF1ZXVlZCcsIFtcblx0XHRcdFx0XHRcdFx0ZG9jbmFtZS5ib2xkKCksXG5cdFx0XHRcdFx0XHRcdGlucHV0X25hbWUuYm9sZCgpLFxuXHRcdFx0XHRcdFx0XSksXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGhhbmRsZSBkb2N1bWVudCBzeW5jIHJlbmFtZSBhY3Rpb25cblx0XHRcdFx0aWYgKGlucHV0X25hbWUgJiYgKG5ld19kb2NuYW1lIHx8IGlucHV0X25hbWUpICE9IGRvY25hbWUpIHtcblx0XHRcdFx0XHRyZWxvYWRfZm9ybShuZXdfZG9jbmFtZSB8fCBpbnB1dF9uYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0aWYgKGlucHV0X3RpdGxlID09PSB0aGlzLmZybS5kb2NbdGl0bGVfZmllbGRdICYmIGlucHV0X25hbWUgPT09IGRvY25hbWUpIHtcblx0XHRcdFx0dGhpcy5zaG93X3VuY2hhbmdlZF9kb2N1bWVudF9hbGVydCgpO1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9IGVsc2UgaWYgKG1lcmdlKSB7XG5cdFx0XHRcdGZyYXBwZS5jb25maXJtKFxuXHRcdFx0XHRcdGNvbmZpcm1fbWVzc2FnZSxcblx0XHRcdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFx0XHRyZW5hbWVfZG9jdW1lbnQoKS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRyZWplY3QsXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZW5hbWVfZG9jdW1lbnQoKS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0c2V0dXBfZWRpdGFibGVfdGl0bGUoKSB7IH1cblx0Z2V0X2Ryb3Bkb3duX21lbnUobGFiZWwpIHtcblx0XHRyZXR1cm4gdGhpcy5wYWdlLmFkZF9kcm9wZG93bihsYWJlbCk7XG5cdH1cblx0c2V0X2luZGljYXRvcigpIHtcblx0XHRsZXQgaW5kaWNhdG9yID0gZnJhcHBlLmdldF9pbmRpY2F0b3IodGhpcy5mcm0uZG9jKTtcblx0XHRpZiAoXG5cdFx0XHR0aGlzLmZybS5zYXZlX2Rpc2FibGVkICYmXG5cdFx0XHRpbmRpY2F0b3IgJiZcblx0XHRcdFtfXygnU2F2ZWQnKSwgX18oJ05vdCBTYXZlZCcpXS5pbmNsdWRlcyhpbmRpY2F0b3JbMF0pXG5cdFx0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChpbmRpY2F0b3IpIHtcblx0XHRcdHRoaXMucGFnZS5zZXRfaW5kaWNhdG9yKGluZGljYXRvclswXSwgaW5kaWNhdG9yWzFdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wYWdlLmNsZWFyX2luZGljYXRvcigpO1xuXHRcdH1cblx0fVxuXHRtYWtlX21lbnUoKSB7XG5cdFx0dGhpcy5wYWdlLmNsZWFyX2ljb25zKCk7XG5cdFx0dGhpcy5wYWdlLmNsZWFyX21lbnUoKTtcblxuXHRcdGlmIChmcmFwcGUuYm9vdC5kZXNrX3NldHRpbmdzLmZvcm1fc2lkZWJhcikge1xuXHRcdFx0dGhpcy5tYWtlX25hdmlnYXRpb24oKTtcblx0XHRcdHRoaXMubWFrZV9tZW51X2l0ZW1zKCk7XG5cdFx0fVxuXHR9XG5cblx0bWFrZV92aWV3ZXJzKCkge1xuXHRcdGlmICh0aGlzLmZybS52aWV3ZXJzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuZnJtLnZpZXdlcnMgPSBuZXcgZnJhcHBlLnVpLmZvcm0uRm9ybVZpZXdlcnMoe1xuXHRcdFx0ZnJtOiB0aGlzLmZybSxcblx0XHRcdHBhcmVudDogJCgnPGRpdiBjbGFzcz1cImZvcm0tdmlld2VycyBkLWZsZXhcIj48L2Rpdj4nKS5wcmVwZW5kVG8oXG5cdFx0XHRcdHRoaXMuZnJtLnBhZ2UucGFnZV9hY3Rpb25zLFxuXHRcdFx0KSxcblx0XHR9KTtcblx0fVxuXG5cdG1ha2VfbmF2aWdhdGlvbigpIHtcblx0XHQvLyBOYXZpZ2F0ZVxuXHRcdC8vIGlmICghdGhpcy5mcm0uaXNfbmV3KCkgJiYgIXRoaXMuZnJtLm1ldGEuaXNzaW5nbGUpIHtcblx0XHQvLyBcdHRoaXMucGFnZS5hZGRfYWN0aW9uX2ljb24oXG5cdFx0Ly8gXHRcdCdsZWZ0Jyxcblx0XHQvLyBcdFx0KCkgPT4ge1xuXHRcdC8vIFx0XHRcdHRoaXMuZnJtLm5hdmlnYXRlX3JlY29yZHMoMSk7XG5cdFx0Ly8gXHRcdH0sXG5cdFx0Ly8gXHRcdCdwcmV2LWRvYycsXG5cdFx0Ly8gXHRcdF9fKCdQcmV2aW91cyBEb2N1bWVudCcpXG5cdFx0Ly8gXHQpO1xuXHRcdC8vIFx0dGhpcy5wYWdlLmFkZF9hY3Rpb25faWNvbihcblx0XHQvLyBcdFx0J3JpZ2h0Jyxcblx0XHQvLyBcdFx0KCkgPT4ge1xuXHRcdC8vIFx0XHRcdHRoaXMuZnJtLm5hdmlnYXRlX3JlY29yZHMoMCk7XG5cdFx0Ly8gXHRcdH0sXG5cdFx0Ly8gXHRcdCduZXh0LWRvYycsXG5cdFx0Ly8gXHRcdF9fKCdOZXh0IERvY3VtZW50Jylcblx0XHQvLyBcdCk7XG5cdFx0Ly8gfVxuXHR9XG5cblx0bWFrZV9tZW51X2l0ZW1zKCkge1xuXHRcdC8vIFByaW50XG5cdFx0Y29uc3QgbWUgPSB0aGlzO1xuXHRcdGNvbnN0IHAgPSB0aGlzLmZybS5wZXJtWzBdO1xuXHRcdGNvbnN0IGRvY3N0YXR1cyA9IGNpbnQodGhpcy5mcm0uZG9jLmRvY3N0YXR1cyk7XG5cdFx0Y29uc3QgaXNfc3VibWl0dGFibGUgPSBmcmFwcGUubW9kZWwuaXNfc3VibWl0dGFibGUodGhpcy5mcm0uZG9jLmRvY3R5cGUpO1xuXG5cdFx0Y29uc3QgcHJpbnRfc2V0dGluZ3MgPSBmcmFwcGUubW9kZWwuZ2V0X2RvYygnOlByaW50IFNldHRpbmdzJywgJ1ByaW50IFNldHRpbmdzJyk7XG5cdFx0Y29uc3QgYWxsb3dfcHJpbnRfZm9yX2RyYWZ0ID0gY2ludChwcmludF9zZXR0aW5ncy5hbGxvd19wcmludF9mb3JfZHJhZnQpO1xuXHRcdGNvbnN0IGFsbG93X3ByaW50X2Zvcl9jYW5jZWxsZWQgPSBjaW50KHByaW50X3NldHRpbmdzLmFsbG93X3ByaW50X2Zvcl9jYW5jZWxsZWQpO1xuXG5cdFx0aWYgKFxuXHRcdFx0IWlzX3N1Ym1pdHRhYmxlIHx8XG5cdFx0XHRkb2NzdGF0dXMgPT0gMSB8fFxuXHRcdFx0KGFsbG93X3ByaW50X2Zvcl9jYW5jZWxsZWQgJiYgZG9jc3RhdHVzID09IDIpIHx8XG5cdFx0XHQoYWxsb3dfcHJpbnRfZm9yX2RyYWZ0ICYmIGRvY3N0YXR1cyA9PSAwKVxuXHRcdCkge1xuXHRcdFx0aWYgKGZyYXBwZS5tb2RlbC5jYW5fcHJpbnQobnVsbCwgbWUuZnJtKSAmJiAhdGhpcy5mcm0ubWV0YS5pc3NpbmdsZSkge1xuXHRcdFx0XHR0aGlzLnBhZ2UuYWRkX21lbnVfaXRlbShcblx0XHRcdFx0XHRfXygnUHJpbnQnKSxcblx0XHRcdFx0XHRmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRtZS5mcm0ucHJpbnRfZG9jKCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0cnVlLFxuXHRcdFx0XHQpO1xuXHRcdFx0XHR0aGlzLnByaW50X2ljb24gPSB0aGlzLnBhZ2UuYWRkX2FjdGlvbl9pY29uKFxuXHRcdFx0XHRcdCdwcmludGVyJyxcblx0XHRcdFx0XHRmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRtZS5mcm0ucHJpbnRfZG9jKCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQnJyxcblx0XHRcdFx0XHRfXygnUHJpbnQnKSxcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBlbWFpbFxuXHRcdGlmIChmcmFwcGUubW9kZWwuY2FuX2VtYWlsKG51bGwsIG1lLmZybSkgJiYgbWUuZnJtLmRvYy5kb2NzdGF0dXMgPCAyKSB7XG5cdFx0XHR0aGlzLnBhZ2UuYWRkX21lbnVfaXRlbShcblx0XHRcdFx0X18oJ0VtYWlsJyksXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRtZS5mcm0uZW1haWxfZG9jKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRydWUsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzaG9ydGN1dDogJ0N0cmwrRScsXG5cdFx0XHRcdFx0Y29uZGl0aW9uOiAoKSA9PiAhdGhpcy5mcm0uaXNfbmV3KCksXG5cdFx0XHRcdH0sXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIGdvIHRvIGZpZWxkIG1vZGFsXG5cdFx0dGhpcy5wYWdlLmFkZF9tZW51X2l0ZW0oXG5cdFx0XHRfXygnSnVtcCB0byBmaWVsZCcpLFxuXHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRtZS5zaG93X2p1bXBfdG9fZmllbGRfZGlhbG9nKCk7XG5cdFx0XHR9LFxuXHRcdFx0dHJ1ZSxcblx0XHRcdCdDdHJsK0onLFxuXHRcdCk7XG5cblx0XHQvLyBMaW5rZWQgV2l0aFxuXHRcdGlmICghbWUuZnJtLm1ldGEuaXNzaW5nbGUpIHtcblx0XHRcdHRoaXMucGFnZS5hZGRfbWVudV9pdGVtKFxuXHRcdFx0XHRfXygnTGlua3MnKSxcblx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdG1lLnNob3dfbGlua2VkX3dpdGgoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dHJ1ZSxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gZHVwbGljYXRlXG5cdFx0aWYgKGluX2xpc3QoZnJhcHBlLmJvb3QudXNlci5jYW5fY3JlYXRlLCBtZS5mcm0uZG9jdHlwZSkgJiYgIW1lLmZybS5tZXRhLmFsbG93X2NvcHkpIHtcblx0XHRcdHRoaXMucGFnZS5hZGRfbWVudV9pdGVtKFxuXHRcdFx0XHRfXygnRHVwbGljYXRlJyksXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRtZS5mcm0uY29weV9kb2MoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dHJ1ZSxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gY29weSBkb2MgdG8gY2xpcGJvYXJkXG5cdFx0dGhpcy5wYWdlLmFkZF9tZW51X2l0ZW0oXG5cdFx0XHRfXygnQ29weSB0byBDbGlwYm9hcmQnKSxcblx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0ZnJhcHBlLnV0aWxzLmNvcHlfdG9fY2xpcGJvYXJkKEpTT04uc3RyaW5naWZ5KG1lLmZybS5kb2MpKTtcblx0XHRcdH0sXG5cdFx0XHR0cnVlLFxuXHRcdCk7XG5cblx0XHQvLyByZWxvYWRcblx0XHR0aGlzLnBhZ2UuYWRkX21lbnVfaXRlbShcblx0XHRcdF9fKCdSZWxvYWQnKSxcblx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0bWUuZnJtLnJlbG9hZF9kb2MoKTtcblx0XHRcdH0sXG5cdFx0XHR0cnVlLFxuXHRcdCk7XG5cblx0XHQvLyBkZWxldGVcblx0XHRpZiAoXG5cdFx0XHRjaW50KG1lLmZybS5kb2MuZG9jc3RhdHVzKSAhPSAxICYmXG5cdFx0XHQhbWUuZnJtLmRvYy5fX2lzbG9jYWwgJiZcblx0XHRcdGZyYXBwZS5tb2RlbC5jYW5fZGVsZXRlKG1lLmZybS5kb2N0eXBlKVxuXHRcdCkge1xuXHRcdFx0dGhpcy5wYWdlLmFkZF9tZW51X2l0ZW0oXG5cdFx0XHRcdF9fKCdEZWxldGUnKSxcblx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdG1lLmZybS5zYXZldHJhc2goKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dHJ1ZSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHNob3J0Y3V0OiAnU2hpZnQrQ3RybCtEJyxcblx0XHRcdFx0XHRjb25kaXRpb246ICgpID0+ICF0aGlzLmZybS5pc19uZXcoKSxcblx0XHRcdFx0fSxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5tYWtlX2N1c3RvbWl6ZV9idXR0b25zKCk7XG5cblx0XHQvLyBBdXRvIFJlcGVhdFxuXHRcdGlmICh0aGlzLmNhbl9yZXBlYXQoKSkge1xuXHRcdFx0dGhpcy5wYWdlLmFkZF9tZW51X2l0ZW0oXG5cdFx0XHRcdF9fKCdSZXBlYXQnKSxcblx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGZyYXBwZS51dGlscy5uZXdfYXV0b19yZXBlYXRfcHJvbXB0KG1lLmZybSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRydWUsXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIE5ld1xuXHRcdGlmIChwW0NSRUFURV0gJiYgIXRoaXMuZnJtLm1ldGEuaXNzaW5nbGUgJiYgIXRoaXMuZnJtLm1ldGEuaW5fY3JlYXRlKSB7XG5cdFx0XHR0aGlzLnBhZ2UuYWRkX21lbnVfaXRlbShcblx0XHRcdFx0X18oJ05ldyB7MH0nLCBbX18obWUuZnJtLmRvY3R5cGUpXSksXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRmcmFwcGUubmV3X2RvYyhtZS5mcm0uZG9jdHlwZSwgdHJ1ZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRydWUsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzaG9ydGN1dDogJ0N0cmwrQicsXG5cdFx0XHRcdFx0Y29uZGl0aW9uOiAoKSA9PiAhdGhpcy5mcm0uaXNfbmV3KCksXG5cdFx0XHRcdH0sXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdG1ha2VfY3VzdG9taXplX2J1dHRvbnMoKSB7XG5cdFx0bGV0IGlzX2RvY3R5cGVfZm9ybSA9IHRoaXMuZnJtLmRvY3R5cGUgPT09ICdEb2NUeXBlJztcblx0XHRpZiAoXG5cdFx0XHRmcmFwcGUubW9kZWwuY2FuX2NyZWF0ZSgnQ3VzdG9tIEZpZWxkJykgJiZcblx0XHRcdGZyYXBwZS5tb2RlbC5jYW5fY3JlYXRlKCdQcm9wZXJ0eSBTZXR0ZXInKVxuXHRcdCkge1xuXHRcdFx0bGV0IGRvY3R5cGUgPSBpc19kb2N0eXBlX2Zvcm0gPyB0aGlzLmZybS5kb2NuYW1lIDogdGhpcy5mcm0uZG9jdHlwZTtcblx0XHRcdGxldCBpc19kb2N0eXBlX2N1c3RvbSA9IGlzX2RvY3R5cGVfZm9ybSA/IHRoaXMuZnJtLmRvYy5jdXN0b20gOiBmYWxzZTtcblxuXHRcdFx0aWYgKGRvY3R5cGUgIT0gJ0RvY1R5cGUnICYmICFpc19kb2N0eXBlX2N1c3RvbSAmJiB0aGlzLmZybS5tZXRhLmlzc2luZ2xlID09PSAwKSB7XG5cdFx0XHRcdHRoaXMucGFnZS5hZGRfbWVudV9pdGVtKFxuXHRcdFx0XHRcdF9fKCdDdXN0b21pemUnKSxcblx0XHRcdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5mcm0ubWV0YSAmJiB0aGlzLmZybS5tZXRhLmN1c3RvbSkge1xuXHRcdFx0XHRcdFx0XHRmcmFwcGUuc2V0X3JvdXRlKCdGb3JtJywgJ0RvY1R5cGUnLCBkb2N0eXBlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGZyYXBwZS5zZXRfcm91dGUoJ0Zvcm0nLCAnQ3VzdG9taXplIEZvcm0nLCB7XG5cdFx0XHRcdFx0XHRcdFx0ZG9jX3R5cGU6IGRvY3R5cGUsXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0dHJ1ZSxcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZnJhcHBlLm1vZGVsLmNhbl9jcmVhdGUoJ0RvY1R5cGUnKSkge1xuXHRcdFx0aWYgKGZyYXBwZS5ib290LmRldmVsb3Blcl9tb2RlID09PSAxICYmICFpc19kb2N0eXBlX2Zvcm0pIHtcblx0XHRcdFx0Ly8gZWRpdCBkb2N0eXBlXG5cdFx0XHRcdHRoaXMucGFnZS5hZGRfbWVudV9pdGVtKFxuXHRcdFx0XHRcdF9fKCdFZGl0IERvY1R5cGUnKSxcblx0XHRcdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFx0XHRmcmFwcGUuc2V0X3JvdXRlKCdGb3JtJywgJ0RvY1R5cGUnLCB0aGlzLmZybS5kb2N0eXBlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHRydWUsXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Y2FuX3JlcGVhdCgpIHtcblx0XHRyZXR1cm4gdGhpcy5mcm0ubWV0YS5hbGxvd19hdXRvX3JlcGVhdCAmJiAhdGhpcy5mcm0uaXNfbmV3KCkgJiYgIXRoaXMuZnJtLmRvYy5hdXRvX3JlcGVhdDtcblx0fVxuXHRjYW5fc2F2ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRfZG9jc3RhdHVzKCkgPT09IDA7XG5cdH1cblx0Y2FuX3N1Ym1pdCgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0dGhpcy5nZXRfZG9jc3RhdHVzKCkgPT09IDAgJiZcblx0XHRcdCF0aGlzLmZybS5kb2MuX19pc2xvY2FsICYmXG5cdFx0XHQhdGhpcy5mcm0uZG9jLl9fdW5zYXZlZCAmJlxuXHRcdFx0dGhpcy5mcm0ucGVybVswXS5zdWJtaXQgJiZcblx0XHRcdCF0aGlzLmhhc193b3JrZmxvdygpXG5cdFx0KTtcblx0fVxuXHRjYW5fdXBkYXRlKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHR0aGlzLmdldF9kb2NzdGF0dXMoKSA9PT0gMSAmJlxuXHRcdFx0IXRoaXMuZnJtLmRvYy5fX2lzbG9jYWwgJiZcblx0XHRcdHRoaXMuZnJtLnBlcm1bMF0uc3VibWl0ICYmXG5cdFx0XHR0aGlzLmZybS5kb2MuX191bnNhdmVkXG5cdFx0KTtcblx0fVxuXHRjYW5fY2FuY2VsKCkge1xuXHRcdHJldHVybiB0aGlzLmdldF9kb2NzdGF0dXMoKSA9PT0gMSAmJiB0aGlzLmZybS5wZXJtWzBdLmNhbmNlbCAmJiAhdGhpcy5yZWFkX29ubHk7XG5cdH1cblx0Y2FuX2FtZW5kKCkge1xuXHRcdHJldHVybiB0aGlzLmdldF9kb2NzdGF0dXMoKSA9PT0gMiAmJiB0aGlzLmZybS5wZXJtWzBdLmFtZW5kICYmICF0aGlzLnJlYWRfb25seTtcblx0fVxuXHRoYXNfd29ya2Zsb3coKSB7XG5cdFx0aWYgKHRoaXMuX2hhc193b3JrZmxvdyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLl9oYXNfd29ya2Zsb3cgPSBmcmFwcGUuZ2V0X2xpc3QoJ1dvcmtmbG93Jywge1xuXHRcdFx0XHRkb2N1bWVudF90eXBlOiB0aGlzLmZybS5kb2N0eXBlLFxuXHRcdFx0fSkubGVuZ3RoO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5faGFzX3dvcmtmbG93O1xuXHR9XG5cdGdldF9kb2NzdGF0dXMoKSB7XG5cdFx0cmV0dXJuIGNpbnQodGhpcy5mcm0uZG9jLmRvY3N0YXR1cyk7XG5cdH1cblx0c2hvd19saW5rZWRfd2l0aCgpIHtcblx0XHRpZiAoIXRoaXMuZnJtLmxpbmtlZF93aXRoKSB7XG5cdFx0XHR0aGlzLmZybS5saW5rZWRfd2l0aCA9IG5ldyBmcmFwcGUudWkuZm9ybS5MaW5rZWRXaXRoKHtcblx0XHRcdFx0ZnJtOiB0aGlzLmZybSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHR0aGlzLmZybS5saW5rZWRfd2l0aC5zaG93KCk7XG5cdH1cblx0c2V0X3ByaW1hcnlfYWN0aW9uKGRpcnR5KSB7XG5cdFx0aWYgKCFkaXJ0eSkge1xuXHRcdFx0Ly8gZG9uJ3QgY2xlYXIgYWN0aW9ucyBtZW51IGlmIGRpcnR5XG5cdFx0XHR0aGlzLnBhZ2UuY2xlYXJfdXNlcl9hY3Rpb25zKCk7XG5cdFx0fVxuXG5cdFx0bGV0IHN0YXR1cyA9IHRoaXMuZ2V0X2FjdGlvbl9zdGF0dXMoKTtcblx0XHRpZiAoc3RhdHVzKSB7XG5cdFx0XHQvLyBXaGVuIG1vdmluZyBmcm9tIGEgcGFnZSB3aXRoIHN0YXR1cyBhbWVuZCB0byBhbm90aGVyIHBhZ2Ugd2l0aCBzdGF0dXMgYW1lbmRcblx0XHRcdC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgZG9jdW1lbnQgaXMgYWxyZWFkeSBhbWVuZCBzcGVjaWZpY2FsbHkgYW5kIGhpZGVcblx0XHRcdC8vIG9yIGNsZWFyIHRoZSBtZW51IGFjdGlvbnMgYWNjb3JkaW5nbHlcblxuXHRcdFx0aWYgKHN0YXR1cyAhPT0gdGhpcy5jdXJyZW50X3N0YXR1cyAmJiBzdGF0dXMgPT09ICdBbWVuZCcpIHtcblx0XHRcdFx0bGV0IHsgZG9jIH0gPSB0aGlzLmZybTtcblx0XHRcdFx0ZnJhcHBlXG5cdFx0XHRcdFx0LnhjYWxsKCdmcmFwcGUuY2xpZW50LmlzX2RvY3VtZW50X2FtZW5kZWQnLCB7XG5cdFx0XHRcdFx0XHRkb2N0eXBlOiBkb2MuZG9jdHlwZSxcblx0XHRcdFx0XHRcdGRvY25hbWU6IGRvYy5uYW1lLFxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LnRoZW4oaXNfYW1lbmRlZCA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoaXNfYW1lbmRlZCkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBhZ2UuY2xlYXJfYWN0aW9ucygpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLnNldF9wYWdlX2FjdGlvbnMoc3RhdHVzKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2V0X3BhZ2VfYWN0aW9ucyhzdGF0dXMpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBhZ2UuY2xlYXJfYWN0aW9ucygpO1xuXHRcdFx0dGhpcy5jdXJyZW50X3N0YXR1cyA9IG51bGw7XG5cdFx0fVxuXHR9XG5cdGdldF9hY3Rpb25fc3RhdHVzKCkge1xuXHRcdGxldCBzdGF0dXMgPSBudWxsO1xuXHRcdGlmICh0aGlzLmZybS5wYWdlLmN1cnJlbnRfdmlld19uYW1lID09PSAncHJpbnQnIHx8IHRoaXMuZnJtLmhpZGRlbikge1xuXHRcdFx0c3RhdHVzID0gJ0VkaXQnO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5jYW5fc3VibWl0KCkpIHtcblx0XHRcdHN0YXR1cyA9ICdTdWJtaXQnO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5jYW5fc2F2ZSgpKSB7XG5cdFx0XHRpZiAoIXRoaXMuZnJtLnNhdmVfZGlzYWJsZWQpIHtcblx0XHRcdFx0Ly9TaG93IHRoZSBzYXZlIGJ1dHRvbiBpZiB0aGVyZSBpcyBubyB3b3JrZmxvdyBvciBpZiB0aGVyZSBpcyBhIHdvcmtmbG93IGFuZCB0aGVyZSBhcmUgY2hhbmdlc1xuXHRcdFx0XHRpZiAodGhpcy5oYXNfd29ya2Zsb3coKSA/IHRoaXMuZnJtLmRvYy5fX3Vuc2F2ZWQgOiB0cnVlKSB7XG5cdFx0XHRcdFx0c3RhdHVzID0gJ1NhdmUnO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0aGlzLmNhbl91cGRhdGUoKSkge1xuXHRcdFx0c3RhdHVzID0gJ1VwZGF0ZSc7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmNhbl9jYW5jZWwoKSkge1xuXHRcdFx0c3RhdHVzID0gJ0NhbmNlbCc7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmNhbl9hbWVuZCgpKSB7XG5cdFx0XHRzdGF0dXMgPSAnQW1lbmQnO1xuXHRcdH1cblx0XHRyZXR1cm4gc3RhdHVzO1xuXHR9XG5cdHNldF9wYWdlX2FjdGlvbnMoc3RhdHVzKSB7XG5cdFx0bGV0IG1lID0gdGhpcztcblx0XHR0aGlzLnBhZ2UuY2xlYXJfYWN0aW9ucygpO1xuXG5cdFx0aWYgKHN0YXR1cyAhPT0gJ0VkaXQnKSB7XG5cdFx0XHRsZXQgcGVybV90b19jaGVjayA9IHRoaXMuZnJtLmFjdGlvbl9wZXJtX3R5cGVfbWFwW3N0YXR1c107XG5cdFx0XHRpZiAoIXRoaXMuZnJtLnBlcm1bMF1bcGVybV90b19jaGVja10pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChzdGF0dXMgPT09ICdFZGl0Jykge1xuXHRcdFx0dGhpcy5wYWdlLnNldF9wcmltYXJ5X2FjdGlvbihcblx0XHRcdFx0X18oJ0VkaXQnKSxcblx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdG1lLmZybS5wYWdlLnNldF92aWV3KCdtYWluJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdlZGl0Jyxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChzdGF0dXMgPT09ICdDYW5jZWwnKSB7XG5cdFx0XHRsZXQgYWRkX2NhbmNlbF9idXR0b24gPSAoKSA9PiB7XG5cdFx0XHRcdHRoaXMucGFnZS5zZXRfc2Vjb25kYXJ5X2FjdGlvbihfXyhzdGF0dXMpLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0bWUuZnJtLnNhdmVjYW5jZWwodGhpcyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblx0XHRcdGlmICh0aGlzLmhhc193b3JrZmxvdygpKSB7XG5cdFx0XHRcdGZyYXBwZVxuXHRcdFx0XHRcdC54Y2FsbCgnZnJhcHBlLm1vZGVsLndvcmtmbG93LmNhbl9jYW5jZWxfZG9jdW1lbnQnLCB7XG5cdFx0XHRcdFx0XHRkb2N0eXBlOiB0aGlzLmZybS5kb2MuZG9jdHlwZSxcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC50aGVuKGNhbl9jYW5jZWwgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKGNhbl9jYW5jZWwpIHtcblx0XHRcdFx0XHRcdFx0YWRkX2NhbmNlbF9idXR0b24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGFkZF9jYW5jZWxfYnV0dG9uKCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCBjbGljayA9IHtcblx0XHRcdFx0U2F2ZSgpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWUuZnJtLnNhdmUoJ1NhdmUnLCBudWxsLCB0aGlzKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0U3VibWl0KCkge1xuXHRcdFx0XHRcdHJldHVybiBtZS5mcm0uc2F2ZXN1Ym1pdCh0aGlzKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0VXBkYXRlKCkge1xuXHRcdFx0XHRcdHJldHVybiBtZS5mcm0uc2F2ZSgnVXBkYXRlJywgbnVsbCwgdGhpcyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdEFtZW5kKCkge1xuXHRcdFx0XHRcdHJldHVybiBtZS5mcm0uYW1lbmRfZG9jKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9W3N0YXR1c107XG5cblx0XHRcdGxldCBpY29uID0ge1xuXHRcdFx0XHRVcGRhdGU6ICdlZGl0Jyxcblx0XHRcdH1bc3RhdHVzXTtcblxuXHRcdFx0dGhpcy5wYWdlLnNldF9wcmltYXJ5X2FjdGlvbihfXyhzdGF0dXMpLCBjbGljaywgaWNvbik7XG5cdFx0fVxuXG5cdFx0dGhpcy5jdXJyZW50X3N0YXR1cyA9IHN0YXR1cztcblx0fVxuXHRhZGRfdXBkYXRlX2J1dHRvbl9vbl9kaXJ0eSgpIHtcblx0XHRsZXQgbWUgPSB0aGlzO1xuXHRcdCQodGhpcy5mcm0ud3JhcHBlcikub24oJ2RpcnR5JywgZnVuY3Rpb24gKCkge1xuXHRcdFx0bWUuc2hvd190aXRsZV9hc19kaXJ0eSgpO1xuXG5cdFx0XHQvLyBjbGVhciB3b3JrZmxvdyBhY3Rpb25zXG5cdFx0XHRtZS5mcm0ucGFnZS5jbGVhcl9hY3Rpb25zX21lbnUoKTtcblxuXHRcdFx0Ly8gZW5hYmxlIHNhdmUgYWN0aW9uXG5cdFx0XHRpZiAoIW1lLmZybS5zYXZlX2Rpc2FibGVkKSB7XG5cdFx0XHRcdG1lLnNldF9wcmltYXJ5X2FjdGlvbih0cnVlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRzaG93X3RpdGxlX2FzX2RpcnR5KCkge1xuXHRcdGlmICh0aGlzLmZybS5zYXZlX2Rpc2FibGVkICYmICF0aGlzLmZybS5zZXRfZGlydHkpIHsgcmV0dXJuOyB9XG5cblx0XHRpZiAodGhpcy5mcm0uaXNfZGlydHkoKSkge1xuXHRcdFx0dGhpcy5wYWdlLnNldF9pbmRpY2F0b3IoX18oJ05vdCBTYXZlZCcpLCAnb3JhbmdlJyk7XG5cdFx0fVxuXG5cdFx0JCh0aGlzLmZybS53cmFwcGVyKS5hdHRyKCdkYXRhLXN0YXRlJywgdGhpcy5mcm0uaXNfZGlydHkoKSA/ICdkaXJ0eScgOiAnY2xlYW4nKTtcblx0fVxuXG5cdHNob3dfanVtcF90b19maWVsZF9kaWFsb2coKSB7XG5cdFx0bGV0IHZpc2libGVfZmllbGRzX2ZpbHRlciA9IGYgPT5cblx0XHRcdCFbJ1NlY3Rpb24gQnJlYWsnLCAnQ29sdW1uIEJyZWFrJywgJ1RhYiBCcmVhayddLmluY2x1ZGVzKGYuZGYuZmllbGR0eXBlKSAmJlxuXHRcdFx0IWYuZGYuaGlkZGVuICYmXG5cdFx0XHRmLmRpc3Bfc3RhdHVzICE9PSAnTm9uZSc7XG5cblx0XHRsZXQgZmllbGRzID0gdGhpcy5mcm0uZmllbGRzXG5cdFx0XHQuZmlsdGVyKHZpc2libGVfZmllbGRzX2ZpbHRlcilcblx0XHRcdC5tYXAoZiA9PiAoeyBsYWJlbDogX18oZi5kZi5sYWJlbCksIHZhbHVlOiBmLmRmLmZpZWxkbmFtZSB9KSk7XG5cblx0XHRsZXQgZGlhbG9nID0gbmV3IGZyYXBwZS51aS5EaWFsb2coe1xuXHRcdFx0dGl0bGU6IF9fKCdKdW1wIHRvIGZpZWxkJyksXG5cdFx0XHRmaWVsZHM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGZpZWxkdHlwZTogJ0F1dG9jb21wbGV0ZScsXG5cdFx0XHRcdFx0ZmllbGRuYW1lOiAnZmllbGRuYW1lJyxcblx0XHRcdFx0XHRsYWJlbDogX18oJ1NlbGVjdCBGaWVsZCcpLFxuXHRcdFx0XHRcdG9wdGlvbnM6IGZpZWxkcyxcblx0XHRcdFx0XHRyZXFkOiAxLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdHByaW1hcnlfYWN0aW9uX2xhYmVsOiBfXygnR28nKSxcblx0XHRcdHByaW1hcnlfYWN0aW9uOiAoeyBmaWVsZG5hbWUgfSkgPT4ge1xuXHRcdFx0XHRkaWFsb2cuaGlkZSgpO1xuXHRcdFx0XHR0aGlzLmZybS5zY3JvbGxfdG9fZmllbGQoZmllbGRuYW1lKTtcblx0XHRcdH0sXG5cdFx0XHRhbmltYXRlOiBmYWxzZSxcblx0XHR9KTtcblxuXHRcdGRpYWxvZy5zaG93KCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9vbGJhcjtcbiIsICJleHBvcnQgZGVmYXVsdCBjbGFzcyBVbmRvTWFuYWdlciB7XG5cdGNvbnN0cnVjdG9yKHsgZnJtIH0pIHtcblx0XHR0aGlzLmZybSA9IGZybTtcblx0XHR0aGlzLnVuZG9fc3RhY2sgPSBbXTtcblx0XHR0aGlzLnJlZG9fc3RhY2sgPSBbXTtcblx0fVxuXHRyZWNvcmRfY2hhbmdlKHsgZmllbGRuYW1lLCBvbGRfdmFsdWUsIG5ld192YWx1ZSwgZG9jdHlwZSwgZG9jbmFtZSwgaXNfY2hpbGQgfSkge1xuXHRcdGlmIChvbGRfdmFsdWUgPT0gbmV3X3ZhbHVlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy51bmRvX3N0YWNrLnB1c2goe1xuXHRcdFx0ZmllbGRuYW1lLFxuXHRcdFx0b2xkX3ZhbHVlLFxuXHRcdFx0bmV3X3ZhbHVlLFxuXHRcdFx0ZG9jdHlwZSxcblx0XHRcdGRvY25hbWUsXG5cdFx0XHRpc19jaGlsZCxcblx0XHR9KTtcblx0fVxuXG5cdGVyYXNlX2hpc3RvcnkoKSB7XG5cdFx0dGhpcy51bmRvX3N0YWNrID0gW107XG5cdFx0dGhpcy5yZWRvX3N0YWNrID0gW107XG5cdH1cblxuXHR1bmRvKCkge1xuXHRcdGNvbnN0IGNoYW5nZSA9IHRoaXMudW5kb19zdGFjay5wb3AoKTtcblx0XHRpZiAoY2hhbmdlKSB7XG5cdFx0XHR0aGlzLl9hcHBseV9jaGFuZ2UoY2hhbmdlKTtcblx0XHRcdHRoaXMuX3B1c2hfcmV2ZXJzZV9lbnRyeShjaGFuZ2UsIHRoaXMucmVkb19zdGFjayk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3Nob3dfYWxlcnQoX18oJ05vdGhpbmcgbGVmdCB0byB1bmRvJykpO1xuXHRcdH1cblx0fVxuXG5cdHJlZG8oKSB7XG5cdFx0Y29uc3QgY2hhbmdlID0gdGhpcy5yZWRvX3N0YWNrLnBvcCgpO1xuXHRcdGlmIChjaGFuZ2UpIHtcblx0XHRcdHRoaXMuX2FwcGx5X2NoYW5nZShjaGFuZ2UpO1xuXHRcdFx0dGhpcy5fcHVzaF9yZXZlcnNlX2VudHJ5KGNoYW5nZSwgdGhpcy51bmRvX3N0YWNrKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fc2hvd19hbGVydChfXygnTm90aGluZyBsZWZ0IHRvIHJlZG8nKSk7XG5cdFx0fVxuXHR9XG5cblx0X3B1c2hfcmV2ZXJzZV9lbnRyeShjaGFuZ2UsIHN0YWNrKSB7XG5cdFx0c3RhY2sucHVzaCh7XG5cdFx0XHQuLi5jaGFuZ2UsXG5cdFx0XHRuZXdfdmFsdWU6IGNoYW5nZS5vbGRfdmFsdWUsXG5cdFx0XHRvbGRfdmFsdWU6IGNoYW5nZS5uZXdfdmFsdWUsXG5cdFx0fSk7XG5cdH1cblxuXHRfYXBwbHlfY2hhbmdlKGNoYW5nZSkge1xuXHRcdGlmIChjaGFuZ2UuaXNfY2hpbGQpIHtcblx0XHRcdGZyYXBwZS5tb2RlbC5zZXRfdmFsdWUoXG5cdFx0XHRcdGNoYW5nZS5kb2N0eXBlLFxuXHRcdFx0XHRjaGFuZ2UuZG9jbmFtZSxcblx0XHRcdFx0Y2hhbmdlLmZpZWxkbmFtZSxcblx0XHRcdFx0Y2hhbmdlLm9sZF92YWx1ZVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5mcm0uc2V0X3ZhbHVlKGNoYW5nZS5maWVsZG5hbWUsIGNoYW5nZS5vbGRfdmFsdWUpO1xuXHRcdFx0dGhpcy5mcm0uc2Nyb2xsX3RvX2ZpZWxkKGNoYW5nZS5maWVsZG5hbWUsIGZhbHNlKTtcblx0XHR9XG5cdH1cblxuXHRfc2hvd19hbGVydChtc2cpIHtcblx0XHQvLyByZWR1Y2UgZHVyYXRpb25cblx0XHQvLyBrZXlib2FyZCBpbnRlcmFjdGlvbnMgc2hvdWxkbid0IGhhdmUgbG9uZyBydW5uaW5nIGFubm95aW5nIHRvYXN0c1xuXHRcdGZyYXBwZS5zaG93X2FsZXJ0KG1zZywgMyk7XG5cdH1cbn1cbiIsICJpbXBvcnQgdHlwZSBMYXlvdXQgZnJvbSAnLic7XG5cbmltcG9ydCB0eXBlIENvbHVtbiBmcm9tICcuL0NvbHVtbic7XG5cbmNsYXNzIFNlY3Rpb24ge1xuXHRjb25zdHJ1Y3RvcihwYXJlbnQ6IEpRdWVyeTxIVE1MRWxlbWVudD4sIGRmOiBhbnksIGNhcmRfbGF5b3V0OiBib29sZWFuLCBsYXlvdXQ6IExheW91dCkge1xuXHRcdHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuXHRcdHRoaXMuY2FyZF9sYXlvdXQgPSBjYXJkX2xheW91dDtcblx0XHR0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0XHR0aGlzLmRmID0gZGYgfHwge307XG5cdFx0dGhpcy5jb2x1bW5zID0gW107XG5cdFx0dGhpcy5maWVsZHNfbGlzdCA9IFtdO1xuXHRcdHRoaXMuZmllbGRzX2RpY3QgPSB7fTtcblxuXHRcdHRoaXMubWFrZSgpO1xuXG5cdFx0aWYgKFxuXHRcdFx0dGhpcy5kZi5sYWJlbCAmJlxuXHRcdFx0dGhpcy5kZi5jb2xsYXBzaWJsZSAmJlxuXHRcdFx0bG9jYWxTdG9yYWdlLmdldEl0ZW0oYCR7ZGYuY3NzX2NsYXNzfS1jbG9zZWRgKVxuXHRcdCkge1xuXHRcdFx0dGhpcy5jb2xsYXBzZSgpO1xuXHRcdH1cblxuXHRcdHRoaXMucm93ID0ge1xuXHRcdFx0d3JhcHBlcjogdGhpcy53cmFwcGVyLFxuXHRcdH07XG5cblx0XHR0aGlzLnJlZnJlc2goKTtcblx0fVxuXG5cdG1ha2UoKSB7XG5cdFx0bGV0IG1ha2VfY2FyZCA9IHRoaXMuY2FyZF9sYXlvdXQ7XG5cdFx0dGhpcy53cmFwcGVyID0gJChgPGRpdiBjbGFzcz1cInJvd1xuXHRcdFx0XHQke3RoaXMuZGYuaXNfZGFzaGJvYXJkX3NlY3Rpb24gPyAnZm9ybS1kYXNoYm9hcmQtc2VjdGlvbicgOiAnZm9ybS1zZWN0aW9uJ31cblx0XHRcdFx0JHttYWtlX2NhcmQgPyAnY2FyZC1zZWN0aW9uJyA6ICcnfVwiIGRhdGEtZmllbGRuYW1lPVwiJHt0aGlzLmRmLmZpZWxkbmFtZX1cIj5cblx0XHRcdGApLmFwcGVuZFRvKHRoaXMucGFyZW50KTtcblxuXHRcdGlmICh0aGlzLmRmKSB7XG5cdFx0XHRpZiAodGhpcy5kZi5sYWJlbCkge1xuXHRcdFx0XHR0aGlzLm1ha2VfaGVhZCgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuZGYuZGVzY3JpcHRpb24pIHtcblx0XHRcdFx0dGhpcy5kZXNjcmlwdGlvbl93cmFwcGVyID0gJChcblx0XHRcdFx0XHRgPGRpdiBjbGFzcz1cImNvbC1zbS0xMiBmb3JtLXNlY3Rpb24tZGVzY3JpcHRpb25cIj5cblx0XHRcdFx0XHRcdCR7X18odGhpcy5kZi5kZXNjcmlwdGlvbil9XG5cdFx0XHRcdFx0PC9kaXY+YCxcblx0XHRcdFx0KTtcblxuXHRcdFx0XHR0aGlzLndyYXBwZXIuYXBwZW5kKHRoaXMuZGVzY3JpcHRpb25fd3JhcHBlcik7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5kZi5jc3NfY2xhc3MpIHtcblx0XHRcdFx0dGhpcy53cmFwcGVyLmFkZENsYXNzKHRoaXMuZGYuY3NzX2NsYXNzKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmRmLmhpZGVfYm9yZGVyKSB7XG5cdFx0XHRcdHRoaXMud3JhcHBlci50b2dnbGVDbGFzcygnaGlkZS1ib3JkZXInLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmJvZHkgPSAkKCc8ZGl2IGNsYXNzPVwic2VjdGlvbi1ib2R5XCI+JykuYXBwZW5kVG8odGhpcy53cmFwcGVyKTtcblxuXHRcdGlmICh0aGlzLmRmLmJvZHlfaHRtbCkge1xuXHRcdFx0dGhpcy5ib2R5LmFwcGVuZCh0aGlzLmRmLmJvZHlfaHRtbCk7XG5cdFx0fVxuXHR9XG5cblx0bWFrZV9oZWFkKCkge1xuXHRcdHRoaXMuaGVhZCA9ICQoYFxuXHRcdFx0PGRpdiBjbGFzcz1cInNlY3Rpb24taGVhZFwiPlxuXHRcdFx0XHQke19fKHRoaXMuZGYubGFiZWwpfVxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cIm1sLTIgY29sbGFwc2UtaW5kaWNhdG9yIG1iLTFcIj48L3NwYW4+XG5cdFx0XHQ8L2Rpdj5cblx0XHRgKTtcblxuXHRcdHRoaXMuaGVhZC5hcHBlbmRUbyh0aGlzLndyYXBwZXIpO1xuXHRcdHRoaXMuaW5kaWNhdG9yID0gdGhpcy5oZWFkLmZpbmQoJy5jb2xsYXBzZS1pbmRpY2F0b3InKTtcblx0XHR0aGlzLmluZGljYXRvci5oaWRlKCk7XG5cblx0XHRpZiAodGhpcy5kZi5jb2xsYXBzaWJsZSkge1xuXHRcdFx0Ly8gc2hvdyAvIGhpZGUgYmFzZWQgb24gc3RhdHVzXG5cdFx0XHR0aGlzLmNvbGxhcHNlX2xpbmsgPSB0aGlzLmhlYWQub24oJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlKCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuc2V0X2ljb24oKTtcblx0XHRcdHRoaXMuaW5kaWNhdG9yLnNob3coKTtcblx0XHR9XG5cdH1cblxuXHRhZGRfZmllbGQoZmllbGRvYmo6IGFueSkge1xuXHRcdHRoaXMuZmllbGRzX2xpc3QucHVzaChmaWVsZG9iaik7XG5cdFx0dGhpcy5maWVsZHNfZGljdFtmaWVsZG9iai5maWVsZG5hbWVdID0gZmllbGRvYmo7XG5cdFx0ZmllbGRvYmouc2VjdGlvbiA9IHRoaXM7XG5cdH1cblxuXHRyZXBsYWNlX2ZpZWxkKGZpZWxkbmFtZSwgZmllbGRvYmopIHtcblx0XHRpZiAodGhpcy5maWVsZHNfZGljdFtmaWVsZG5hbWVdPy5kZikge1xuXHRcdFx0Y29uc3Qgb2xmbGRvYmogPSB0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV07XG5cdFx0XHRjb25zdCBpZHggPSB0aGlzLmZpZWxkc19saXN0LmZpbmRJbmRleChlID0+IGUgPT0gb2xmbGRvYmopO1xuXHRcdFx0dGhpcy5maWVsZHNfbGlzdC5zcGxpY2UoaWR4LCAxLCBmaWVsZG9iaik7XG5cdFx0XHR0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV0gPSBmaWVsZG9iajtcblx0XHRcdGZpZWxkb2JqLnNlY3Rpb24gPSB0aGlzO1xuXHRcdH1cblx0fVxuXHRyZWZyZXNoKGhpZGU/OiBib29sZWFuKSB7XG5cdFx0aWYgKCF0aGlzLmRmKSB7IHJldHVybjsgfVxuXHRcdC8vIGhpZGUgaWYgZXhwbGljaXRseSBoaWRkZW5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRoaWRlID0gaGlkZSB8fCB0aGlzLmRmLmhpZGRlbiB8fCB0aGlzLmRmLmhpZGRlbl9kdWVfdG9fZGVwZW5kZW5jeTtcblx0XHR0aGlzLndyYXBwZXIudG9nZ2xlQ2xhc3MoJ2hpZGUtY29udHJvbCcsIEJvb2xlYW4oaGlkZSkpO1xuXHR9XG5cblx0Y29sbGFwc2UoaGlkZSkge1xuXHRcdC8vIHVua25vd24gZWRnZSBjYXNlXG5cdFx0aWYgKCEodGhpcy5oZWFkICYmIHRoaXMuYm9keSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoaGlkZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRoaWRlID0gIXRoaXMuYm9keS5oYXNDbGFzcygnaGlkZScpO1xuXHRcdH1cblxuXHRcdHRoaXMuYm9keS50b2dnbGVDbGFzcygnaGlkZScsIGhpZGUpO1xuXHRcdHRoaXMuaGVhZCAmJiB0aGlzLmhlYWQudG9nZ2xlQ2xhc3MoJ2NvbGxhcHNlZCcsIGhpZGUpO1xuXG5cdFx0dGhpcy5zZXRfaWNvbihoaWRlKTtcblxuXHRcdGZvciAoY29uc3QgZiBvZiB0aGlzLmZpZWxkc19saXN0KSB7IGYub25fc2VjdGlvbl9jb2xsYXBzZSAmJiBmLm9uX3NlY3Rpb25fY29sbGFwc2UoaGlkZSk7IH1cblxuXHRcdC8vIHNhdmUgc3RhdGUgZm9yIG5leHQgcmVsb2FkICgnJyBpcyBmYWxzeSlcblx0XHRpZiAodGhpcy5kZi5jc3NfY2xhc3MpXG5cdFx0eyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHt0aGlzLmRmLmNzc19jbGFzc30tY2xvc2VkYCwgaGlkZSA/ICcxJyA6ICcnKTsgfVxuXHR9XG5cblx0c2V0X2ljb24oaGlkZSkge1xuXHRcdGxldCBpbmRpY2F0b3JfaWNvbiA9IGhpZGUgPyAnZG93bicgOiAndXAtbGluZSc7XG5cdFx0dGhpcy5pbmRpY2F0b3IgJiYgdGhpcy5pbmRpY2F0b3IuaHRtbChmcmFwcGUudXRpbHMuaWNvbihpbmRpY2F0b3JfaWNvbiwgJ3NtJywgJ21iLTEnKSk7XG5cdH1cblxuXHRpc19jb2xsYXBzZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYm9keS5oYXNDbGFzcygnaGlkZScpO1xuXHR9XG5cblx0aGFzX21pc3NpbmdfbWFuZGF0b3J5KCkge1xuXHRcdGxldCBtaXNzaW5nX21hbmRhdG9yeSA9IGZhbHNlO1xuXHRcdGZvciAobGV0IGogPSAwLCBsID0gdGhpcy5maWVsZHNfbGlzdC5sZW5ndGg7IGogPCBsOyBqKyspIHtcblx0XHRcdGNvbnN0IHNlY3Rpb25fZGYgPSB0aGlzLmZpZWxkc19saXN0W2pdLmRmO1xuXHRcdFx0aWYgKHNlY3Rpb25fZGYucmVxZCAmJiB0aGlzLmxheW91dC5kb2Nbc2VjdGlvbl9kZi5maWVsZG5hbWVdID09IG51bGwpIHtcblx0XHRcdFx0bWlzc2luZ19tYW5kYXRvcnkgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1pc3NpbmdfbWFuZGF0b3J5O1xuXHR9XG5cblx0aGlkZSgpIHtcblx0XHR0aGlzLm9uX3NlY3Rpb25fdG9nZ2xlKGZhbHNlKTtcblx0fVxuXG5cdHNob3coKSB7XG5cdFx0dGhpcy5vbl9zZWN0aW9uX3RvZ2dsZSh0cnVlKTtcblx0fVxuXG5cdG9uX3NlY3Rpb25fdG9nZ2xlKHNob3cpIHtcblx0XHR0aGlzLndyYXBwZXIudG9nZ2xlQ2xhc3MoJ2hpZGUtY29udHJvbCcsICFzaG93KTtcblx0XHQvLyB0aGlzLm9uX3NlY3Rpb25fdG9nZ2xlICYmIHRoaXMub25fc2VjdGlvbl90b2dnbGUoc2hvdyk7XG5cdH1cbn1cbmludGVyZmFjZSBTZWN0aW9uIHtcblx0Y2FyZF9sYXlvdXQ6IGJvb2xlYW47XG5cdGZpZWxkc19kaWN0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuXHRmaWVsZHNfbGlzdDogYW55W107XG5cdGxheW91dDogTGF5b3V0O1xuXHRkZjogYW55O1xuXHRjb2x1bW5zOiBDb2x1bW5bXTtcblx0Ym9keTogSlF1ZXJ5O1xuXHR3cmFwcGVyOiBKUXVlcnk7XG59XG5leHBvcnQgZGVmYXVsdCBTZWN0aW9uO1xuIiwgImltcG9ydCB0eXBlIEZvcm0gZnJvbSAnLi4vRm9ybSc7XG5cbmltcG9ydCB0eXBlIExheW91dCBmcm9tICcuL2luZGV4JztcblxuaW50ZXJmYWNlIERGIHtcblx0bGFiZWw/OiBzdHJpbmc7XG5cdGZpZWxkbmFtZT86IHN0cmluZyxcblx0YWN0aXZlPzogYW55XG5cdGhpZGRlbj86IGFueVxuXHRoaWRkZW5fZHVlX3RvX2RlcGVuZGVuY3k/OiBhbnlcblx0cGVybWxldmVsPzogYW55XG5cdHNob3dfZGFzaGJvYXJkPzogYW55XG5cbn1cbmNsYXNzIFRhYiB7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdGxheW91dDogTGF5b3V0LFxuXHRcdGRmOiBERixcblx0XHRmcm06IEZvcm0sXG5cdFx0dGFiX2xpbmtfY29udGFpbmVyOiBKUXVlcnksXG5cdFx0dGFic19jb250ZW50OiBKUXVlcnksXG5cdCkge1xuXHRcdHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuXHRcdHRoaXMuZGYgPSBkZiB8fCB7fTtcblx0XHR0aGlzLmZybSA9IGZybTtcblx0XHR0aGlzLmRvY3R5cGUgPSB0aGlzLmZybS5kb2N0eXBlO1xuXHRcdHRoaXMubGFiZWwgPSB0aGlzLmRmICYmIHRoaXMuZGYubGFiZWw7XG5cdFx0dGhpcy50YWJfbGlua19jb250YWluZXIgPSB0YWJfbGlua19jb250YWluZXI7XG5cdFx0dGhpcy50YWJzX2NvbnRlbnQgPSB0YWJzX2NvbnRlbnQ7XG5cdFx0dGhpcy5maWVsZHNfbGlzdCA9IFtdO1xuXHRcdHRoaXMuZmllbGRzX2RpY3QgPSB7fTtcblx0XHR0aGlzLm1ha2UoKTtcblx0XHR0aGlzLnNldHVwX2xpc3RlbmVycygpO1xuXHRcdHRoaXMucmVmcmVzaCgpO1xuXHR9XG5cblx0bWFrZSgpIHtcblx0XHRjb25zdCBpZCA9IGBmb3JtLWRldGFpbC0ke2ZyYXBwZS5zY3J1Yih0aGlzLmRvY3R5cGUsICctJyl9LSR7dGhpcy5kZi5maWVsZG5hbWV9YDtcblx0XHR0aGlzLnRhYl9saW5rID0gJChgXG5cdFx0XHQ8bGkgY2xhc3M9XCJuYXYtaXRlbVwiPlxuXHRcdFx0XHQ8YSBjbGFzcz1cIm5hdi1saW5rICR7dGhpcy5kZi5hY3RpdmUgPyAnYWN0aXZlJyA6ICcnfVwiIGlkPVwiJHtpZH0tdGFiXCJcblx0XHRcdFx0XHRkYXRhLXRvZ2dsZT1cInRhYlwiXG5cdFx0XHRcdFx0ZGF0YS1maWVsZG5hbWU9XCIke3RoaXMuZGYuZmllbGRuYW1lfVwiXG5cdFx0XHRcdFx0aHJlZj1cIiMke2lkfVwiXG5cdFx0XHRcdFx0cm9sZT1cInRhYlwiXG5cdFx0XHRcdFx0YXJpYS1jb250cm9scz1cIiR7dGhpcy5sYWJlbH1cIj5cblx0XHRcdFx0XHRcdCR7X18odGhpcy5sYWJlbCl9XG5cdFx0XHRcdDwvYT5cblx0XHRcdDwvbGk+XG5cdFx0YCkuYXBwZW5kVG8odGhpcy50YWJfbGlua19jb250YWluZXIpO1xuXG5cdFx0dGhpcy53cmFwcGVyID0gJChgPGRpdiBjbGFzcz1cInRhYi1wYW5lIGZhZGUgc2hvdyAke3RoaXMuZGYuYWN0aXZlID8gJ2FjdGl2ZScgOiAnJ31cIlxuXHRcdFx0aWQ9XCIke2lkfVwiIHJvbGU9XCJ0YWJwYW5lbFwiIGFyaWEtbGFiZWxsZWRieT1cIiR7aWR9LXRhYlwiPmApLmFwcGVuZFRvKHRoaXMudGFic19jb250ZW50KTtcblx0fVxuXG5cdHJlZnJlc2goKSB7XG5cdFx0aWYgKCF0aGlzLmRmKSB7IHJldHVybjsgfVxuXG5cdFx0Ly8gaGlkZSBpZiBleHBsaWNpdGx5IGhpZGRlblxuXHRcdGxldCBoaWRlID0gdGhpcy5kZi5oaWRkZW4gfHwgdGhpcy5kZi5oaWRkZW5fZHVlX3RvX2RlcGVuZGVuY3k7XG5cblx0XHQvLyBoaWRlIGlmIGRhc2hib2FyZCBhbmQgbm90IHNhdmVkXG5cdFx0aWYgKCFoaWRlICYmIHRoaXMuZGYuc2hvd19kYXNoYm9hcmQgJiYgdGhpcy5mcm0uaXNfbmV3KCkpIHtcblx0XHRcdGhpZGUgPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIGhpZGUgaWYgbm8gcmVhZCBwZXJtaXNzaW9uXG5cdFx0aWYgKCFoaWRlICYmIHRoaXMuZnJtICYmICF0aGlzLmZybS5nZXRfcGVybSh0aGlzLmRmLnBlcm1sZXZlbCB8fCAwLCAncmVhZCcpKSB7XG5cdFx0XHRoaWRlID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIWhpZGUpIHtcblx0XHRcdC8vIHNob3cgb25seSBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgdmlzaWJlIHNlY3Rpb24gb3IgY29udHJvbFxuXHRcdFx0aGlkZSA9IHRydWU7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHRoaXMud3JhcHBlci5maW5kKFxuXHRcdFx0XHRcdCcuZm9ybS1zZWN0aW9uOm5vdCguaGlkZS1jb250cm9sLCAuZW1wdHktc2VjdGlvbiksIC5mb3JtLWRhc2hib2FyZC1zZWN0aW9uOm5vdCguaGlkZS1jb250cm9sLCAuZW1wdHktc2VjdGlvbiknLFxuXHRcdFx0XHQpLmxlbmd0aFxuXHRcdFx0KSB7XG5cdFx0XHRcdGhpZGUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy50b2dnbGUoIWhpZGUpO1xuXHR9XG5cblx0dG9nZ2xlKHNob3c6IGJvb2xlYW4pIHtcblx0XHR0aGlzLnRhYl9saW5rLnRvZ2dsZUNsYXNzKCdoaWRlJywgIXNob3cpO1xuXHRcdHRoaXMud3JhcHBlci50b2dnbGVDbGFzcygnaGlkZScsICFzaG93KTtcblx0XHR0aGlzLnRhYl9saW5rLnRvZ2dsZUNsYXNzKCdzaG93Jywgc2hvdyk7XG5cdFx0dGhpcy53cmFwcGVyLnRvZ2dsZUNsYXNzKCdzaG93Jywgc2hvdyk7XG5cdFx0dGhpcy5oaWRkZW4gPSAhc2hvdztcblx0fVxuXG5cdHNob3coKSB7XG5cdFx0dGhpcy50YWJfbGluay5zaG93KCk7XG5cdH1cblxuXHRoaWRlKCkge1xuXHRcdHRoaXMudGFiX2xpbmsuaGlkZSgpO1xuXHR9XG5cdHJlcGxhY2VfZmllbGQoZmllbGRvYmopIHtcblx0XHRmaWVsZG9iai50YWIgPSB0aGlzO1xuXHR9XG5cblx0YWRkX2ZpZWxkKGZpZWxkb2JqKSB7XG5cdFx0ZmllbGRvYmoudGFiID0gdGhpcztcblx0fVxuXG5cdHNldF9hY3RpdmUoKSB7XG5cdFx0dGhpcy50YWJfbGluay5maW5kKCcubmF2LWxpbmsnKS50YWIoJ3Nob3cnKTtcblx0XHR0aGlzLndyYXBwZXIuYWRkQ2xhc3MoJ3Nob3cnKTtcblx0XHR0aGlzLmZybS5hY3RpdmVfdGFiID0gdGhpcztcblx0fVxuXG5cdGlzX2FjdGl2ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy53cmFwcGVyLmhhc0NsYXNzKCdhY3RpdmUnKTtcblx0fVxuXG5cdGlzX2hpZGRlbigpIHtcblx0XHRyZXR1cm4gdGhpcy53cmFwcGVyLmhhc0NsYXNzKCdoaWRlJykgJiYgdGhpcy50YWJfbGluay5oYXNDbGFzcygnaGlkZScpO1xuXHR9XG5cblx0c2V0dXBfbGlzdGVuZXJzKCkge1xuXHRcdHRoaXMudGFiX2xpbmsuZmluZCgnLm5hdi1saW5rJykub24oJ3Nob3duLmJzLnRhYicsICgpID0+IHtcblx0XHRcdHRoaXM/LmZybS5zZXRfYWN0aXZlX3RhYj8uKHRoaXMpO1xuXHRcdH0pO1xuXHR9XG5cblx0c2V0dXBfc3dpdGNoX29uX2hvdmVyKCkge1xuXHRcdHRoaXMudGFiX2xpbmsub24oJ2RyYWdlbnRlcicsICgpID0+IHtcblx0XHRcdHRoaXMuYWN0aW9uID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2V0X2FjdGl2ZSgpO1xuXHRcdFx0fSwgMjAwMCk7XG5cdFx0fSk7XG5cdFx0dGhpcy50YWJfbGluay5vbignZHJhZ291dCcsICgpID0+IHtcblx0XHRcdGlmICh0aGlzLmFjdGlvbikge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5hY3Rpb24pO1xuXHRcdFx0XHR0aGlzLmFjdGlvbiA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuaW50ZXJmYWNlIFRhYiB7XG5cdGxheW91dDogTGF5b3V0O1xuXHRkZjogREY7XG5cdGZybTogRm9ybTtcblx0dGFiX2xpbmtfY29udGFpbmVyOiBKUXVlcnk7XG5cdHRhYnNfY29udGVudDogSlF1ZXJ5O1xuXHRkb2N0eXBlOiBzdHJpbmc7XG5cdGxhYmVsOiBhbnk7XG5cdGhpZGRlbj86IGJvb2xlYW5cblxuXHR0YWJfbGluazogSlF1ZXJ5O1xuXHR3cmFwcGVyOiBKUXVlcnk7XG5cdGFjdGlvbj86IG51bWJlciB8IG51bGw7XG5cbn1cbmV4cG9ydCBkZWZhdWx0IFRhYjtcbiIsICJpbXBvcnQgdHlwZSBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbic7XG5cbmNsYXNzIENvbHVtbiB7XG5cdGNvbnN0cnVjdG9yKHNlY3Rpb246IFNlY3Rpb24sIGRmPzogYW55KSB7XG5cblx0XHR0aGlzLmRmID0gZGYgfHwge307XG5cdFx0dGhpcy5zZWN0aW9uID0gc2VjdGlvbjtcblx0XHR0aGlzLnNlY3Rpb24uY29sdW1ucy5wdXNoKHRoaXMpO1xuXHRcdHRoaXMubWFrZSgpO1xuXHRcdHRoaXMucmVzaXplX2FsbF9jb2x1bW5zKCk7XG5cdH1cblxuXHRtYWtlKCkge1xuXHRcdHRoaXMud3JhcHBlciA9ICQoYFxuXHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tY29sdW1uXCIgZGF0YS1maWVsZG5hbWU9XCIke3RoaXMuZGYuZmllbGRuYW1lfVwiPlxuXHRcdFx0XHQ8Zm9ybT5cblx0XHRcdFx0PC9mb3JtPlxuXHRcdFx0PC9kaXY+XG5cdFx0YCkuYXBwZW5kVG8odGhpcy5zZWN0aW9uLmJvZHkpO1xuXG5cdFx0dGhpcy5mb3JtID0gdGhpcy53cmFwcGVyLmZpbmQoJ2Zvcm0nKS5vbignc3VibWl0JywgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0pO1xuXG5cdFx0aWYgKHRoaXMuZGYubGFiZWwpIHtcblx0XHRcdCQoYFxuXHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+XG5cdFx0XHRcdFx0JHtfXyh0aGlzLmRmLmxhYmVsKX1cblx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdGApLmFwcGVuZFRvKHRoaXMud3JhcHBlcik7XG5cdFx0fVxuXHR9XG5cblx0cmVzaXplX2FsbF9jb2x1bW5zKCkge1xuXHRcdC8vIGRpc3RyaWJ1dGUgYWxsIGNvbHVtbnMgZXF1YWxseVxuXHRcdGxldCBjb2x1bW5zID0gdGhpcy5zZWN0aW9uLndyYXBwZXIuZmluZCgnLmZvcm0tY29sdW1uJykubGVuZ3RoO1xuXHRcdC8vQHRzLWlnbm9yZVxuXHRcdGxldCBjb2xzcGFuID0gY2ludCgxMiAvIGNvbHVtbnMpO1xuXG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0aWYgKGNvbHVtbnMgPT0gNSkge1xuXHRcdFx0Y29sc3BhbiA9IDIwO1xuXHRcdH1cblxuXHRcdHRoaXMuc2VjdGlvbi53cmFwcGVyXG5cdFx0XHQuZmluZCgnLmZvcm0tY29sdW1uJylcblx0XHRcdC5yZW1vdmVDbGFzcygpXG5cdFx0XHQuYWRkQ2xhc3MoJ2Zvcm0tY29sdW1uJylcblx0XHRcdC5hZGRDbGFzcyhgY29sLXNtLSR7Y29sc3Bhbn1gKTtcblx0fVxuXG5cdGFkZF9maWVsZCgpIHsgfVxuXG5cdHJlZnJlc2goKSB7XG5cdFx0dGhpcy5zZWN0aW9uLnJlZnJlc2goKTtcblx0fVxufVxuaW50ZXJmYWNlIENvbHVtbiB7XG5cdHNlY3Rpb246IFNlY3Rpb247XG5cdGRmOiBhbnk7XG5cdHdyYXBwZXI6IEpRdWVyeTtcblx0Zm9ybTogSlF1ZXJ5O1xufVxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIG1heC1saW5lcyAqL1xuaW1wb3J0IHR5cGUgeyBXcml0YWJsZUNvbXB1dGVkUmVmIH0gZnJvbSAndnVlJztcblxuaW1wb3J0IHR5cGUgRm9ybSBmcm9tICcuLi9Gb3JtJztcblxuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCBUYWIgZnJvbSAnLi9UYWInO1xuaW1wb3J0IENvbHVtbiBmcm9tICcuL0NvbHVtbic7XG5jbGFzcyBMYXlvdXQge1xuXHR2aWV3cyA9IHt9O1xuXHRwYWdlcyA9IFtdO1xuXHR0YWJzOiBUYWJbXSA9IFtdO1xuXHRzZWN0aW9uczogU2VjdGlvbltdID0gW107XG5cdHBhZ2VfYnJlYWtzID0gW107XG5cdHNlY3Rpb25zX2RpY3Q6IFJlY29yZDxzdHJpbmcsIFNlY3Rpb24+ID0ge307XG5cdGZpZWxkc19saXN0OiAoU2VjdGlvbiB8IGZyYXBwZS51aS5mb3JtLkNvbnRyb2wgfCBDb2x1bW4pW10gPSBbXTtcblx0ZmllbGRzX2RpY3Q6IFJlY29yZDxzdHJpbmcsIFNlY3Rpb24gfCBmcmFwcGUudWkuZm9ybS5Db250cm9sIHwgQ29sdW1uPiA9IHt9O1xuXHRzZWN0aW9uX2NvdW50ID0gMDtcblx0Y29sdW1uX2NvdW50ID0gMDtcblx0d2l0aF9kYXNoYm9hcmQgPSB0cnVlO1xuXHRjYXJkX2xheW91dCA9IHRydWU7XG5cdGN1cnJlbnRUYWI6IFdyaXRhYmxlQ29tcHV0ZWRSZWY8YW55Pjtcblx0Y29uc3RydWN0b3IoXG5cdFx0cGFyZW50OiBIVE1MRWxlbWVudCxcblx0XHRkb2N0eXBlOiBzdHJpbmcsXG5cdFx0ZG9jdHlwZV9sYXlvdXQ6IHVua25vd24sXG5cdFx0ZnJtOiBGb3JtLFxuXHRcdGN1cnJlbnRUYWI6IFdyaXRhYmxlQ29tcHV0ZWRSZWY8YW55Pixcblx0KSB7XG5cdFx0dGhpcy5wYXJlbnQgPSAkKHBhcmVudCk7XG5cdFx0dGhpcy5kb2N0eXBlID0gZG9jdHlwZTtcblx0XHR0aGlzLmRvY3R5cGVfbGF5b3V0ID0gZG9jdHlwZV9sYXlvdXQ7XG5cdFx0dGhpcy5mcm0gPSBmcm07XG5cdFx0dGhpcy5jdXJyZW50VGFiID0gY3VycmVudFRhYjtcblx0XHRjb25zdCB3cmFwcGVyID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWxheW91dCcpIGFzIEhUTUxFbGVtZW50O1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSBwYXJlbnQucXVlcnlTZWxlY3RvcignLmZvcm0tbWVzc2FnZScpIGFzIEhUTUxFbGVtZW50O1xuXHRcdGNvbnN0IHBhZ2UgPSBwYXJlbnQucXVlcnlTZWxlY3RvcignLmZvcm0tcGFnZScpIGFzIEhUTUxFbGVtZW50O1xuXG5cblx0XHR0aGlzLndyYXBwZXIgPSAkKHdyYXBwZXIpO1xuXHRcdHRoaXMubWVzc2FnZSA9ICQobWVzc2FnZSk7XG5cdFx0dGhpcy5wYWdlID0gJChwYWdlKTtcblx0XHRtZXNzYWdlLmlubmVySFRNTCA9ICcnO1xuXHRcdHBhZ2UuaW5uZXJIVE1MID0gJyc7XG5cblx0XHRpZiAoIXRoaXMuZmllbGRzKSB7XG5cdFx0XHR0aGlzLmZpZWxkcyA9IHRoaXMuZ2V0X2RvY3R5cGVfZmllbGRzKCk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuaXNfdGFiYmVkX2xheW91dCgpKSB7XG5cdFx0XHR0aGlzLnNldHVwX3RhYmJlZF9sYXlvdXQoKTtcblx0XHR9XG5cblx0XHR0aGlzLnNldHVwX3RhYl9ldmVudHMoKTtcblx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdC8vIFx1OEZEOFx1NTM5Rlx1NUY1M1x1NTI0RFx1NjYzRVx1NzkzQVx1NzY4NCB0YWJcblx0XHRjb25zdCB0YWIgPSBjdXJyZW50VGFiLnZhbHVlO1xuXHRcdGNvbnN0IGN1cnJlbnQgPSB0YWIgJiYgdGhpcy50YWJfbGlua19jb250YWluZXI/LlswXT8ucXVlcnlTZWxlY3RvcihgLm5hdi1saW5rW2RhdGEtZmllbGRuYW1lPSR7dGFifV1gKTtcblx0XHRpZiAoY3VycmVudCkge1xuXHRcdFx0JChjdXJyZW50KS50YWIoJ3Nob3cnKTtcblx0XHR9XG5cdH1cblxuXHRmb3JtVGFic0xpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0dGFic0NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0c2V0dXBfdGFiYmVkX2xheW91dCgpIHtcblx0XHRjb25zdCB0YWJfbGlua19jb250YWluZXIgPSAkKCc8dWwgY2xhc3M9XCJuYXYgZm9ybS10YWJzXCIgaWQ9XCJmb3JtLXRhYnNcIiByb2xlPVwidGFibGlzdFwiPjwvdWw+Jyk7XG5cdFx0Y29uc3Qge2Zvcm1UYWJzTGlzdH0gPSB0aGlzO1xuXHRcdGZvcm1UYWJzTGlzdC5jbGFzc05hbWUgPSAnZm9ybS10YWJzLWxpc3QnO1xuXHRcdHRhYl9saW5rX2NvbnRhaW5lci5hcHBlbmRUbyhmb3JtVGFic0xpc3QpO1xuXHRcdCQoZm9ybVRhYnNMaXN0KS5hcHBlbmRUbyh0aGlzLnBhZ2UpO1xuXHRcdHRoaXMudGFiX2xpbmtfY29udGFpbmVyID0gdGFiX2xpbmtfY29udGFpbmVyO1xuXHRcdGNvbnN0IHt0YWJzQ29udGVudH0gPSB0aGlzO1xuXHRcdHRhYnNDb250ZW50LmNsYXNzTmFtZSA9ICdmb3JtLXRhYi1jb250ZW50IHRhYi1jb250ZW50Jztcblx0XHR0aGlzLnRhYnNfY29udGVudCA9ICQodGFic0NvbnRlbnQpLmFwcGVuZFRvKFxuXHRcdFx0dGhpcy5wYWdlLFxuXHRcdCk7XG5cdFx0dGhpcy5zZXR1cF9ldmVudHMoKTtcblx0fVxuXHRnZXRfZG9jdHlwZV9maWVsZHMoKSB7XG5cdFx0bGV0IGZpZWxkcyA9IFt0aGlzLmdldF9uZXdfbmFtZV9maWVsZCgpXTtcblx0XHRpZiAodGhpcy5kb2N0eXBlX2xheW91dCkge1xuXHRcdFx0ZmllbGRzID0gZmllbGRzLmNvbmNhdCh0aGlzLmdldF9maWVsZHNfZnJvbV9sYXlvdXQoKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZpZWxkcyA9IGZpZWxkcy5jb25jYXQoXG5cdFx0XHRcdGZyYXBwZS5tZXRhLnNvcnRfZG9jZmllbGRzKGZyYXBwZS5tZXRhLmRvY2ZpZWxkX21hcFt0aGlzLmRvY3R5cGVdKSxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpZWxkcztcblx0fVxuXG5cdGdldF9uZXdfbmFtZV9maWVsZCgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cGFyZW50OiB0aGlzLmZybS5kb2N0eXBlLFxuXHRcdFx0ZmllbGR0eXBlOiAnRGF0YScsXG5cdFx0XHRmaWVsZG5hbWU6ICdfX25ld25hbWUnLFxuXHRcdFx0cmVxZDogMSxcblx0XHRcdGhpZGRlbjogMSxcblx0XHRcdGxhYmVsOiBfXygnTmFtZScpLFxuXHRcdFx0Z2V0X3N0YXR1cyhmaWVsZCkge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0ZmllbGQuZnJtICYmXG5cdFx0XHRcdFx0ZmllbGQuZnJtLmlzX25ldygpICYmXG5cdFx0XHRcdFx0ZmllbGQuZnJtLm1ldGEuYXV0b25hbWUgJiZcblx0XHRcdFx0XHRbJ3Byb21wdCcsICduYW1lJ10uaW5jbHVkZXMoZmllbGQuZnJtLm1ldGEuYXV0b25hbWUudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuICdXcml0ZSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICdOb25lJztcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXG5cdGdldF9maWVsZHNfZnJvbV9sYXlvdXQoKSB7XG5cdFx0Y29uc3QgZmllbGRzID0gW107XG5cdFx0Zm9yIChsZXQgZiBvZiB0aGlzLmRvY3R5cGVfbGF5b3V0LmZpZWxkcykge1xuXHRcdFx0Y29uc3QgZG9jZmllbGQgPSBjb3B5X2RpY3QoZnJhcHBlLm1ldGEuZG9jZmllbGRfbWFwW3RoaXMuZG9jdHlwZV1bZi5maWVsZG5hbWVdKTtcblx0XHRcdGRvY2ZpZWxkLmxhYmVsID0gZi5sYWJlbDtcblx0XHRcdGZpZWxkcy5wdXNoKGRvY2ZpZWxkKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZpZWxkcztcblx0fVxuXG5cdHNob3dfbWVzc2FnZShodG1sLCBjb2xvcikge1xuXHRcdGlmICh0aGlzLm1lc3NhZ2VfY29sb3IpIHtcblx0XHRcdC8vIHJlbW92ZSBwcmV2aW91cyBjb2xvclxuXHRcdFx0dGhpcy5tZXNzYWdlLnJlbW92ZUNsYXNzKHRoaXMubWVzc2FnZV9jb2xvcik7XG5cdFx0fVxuXHRcdHRoaXMubWVzc2FnZV9jb2xvciA9XG5cdFx0XHRjb2xvciAmJiBbJ3llbGxvdycsICdibHVlJywgJ3JlZCcsICdncmVlbicsICdvcmFuZ2UnXS5pbmNsdWRlcyhjb2xvcikgPyBjb2xvciA6ICdibHVlJztcblx0XHRpZiAoaHRtbCkge1xuXHRcdFx0aWYgKGh0bWwuc3Vic3RyKDAsIDEpICE9PSAnPCcpIHtcblx0XHRcdFx0Ly8gd3JhcCBpbiBhIGJsb2NrXG5cdFx0XHRcdGh0bWwgPSBgPGRpdj4ke2h0bWx9PC9kaXY+YDtcblx0XHRcdH1cblx0XHRcdHRoaXMubWVzc2FnZS5yZW1vdmVDbGFzcygnaGlkZGVuJykuYWRkQ2xhc3ModGhpcy5tZXNzYWdlX2NvbG9yKTtcblx0XHRcdCQoaHRtbCkuYXBwZW5kVG8odGhpcy5tZXNzYWdlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5tZXNzYWdlLmVtcHR5KCkuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdH1cblx0fVxuXG5cdHJlbmRlcihuZXdfZmllbGRzPzogdHlwZW9mIHRoaXMuZmllbGRzKSB7XG5cdFx0bGV0IGZpZWxkcyA9IG5ld19maWVsZHMgfHwgdGhpcy5maWVsZHM7XG5cblx0XHR0aGlzLnNlY3Rpb24gPSBudWxsO1xuXHRcdHRoaXMuY29sdW1uID0gbnVsbDtcblxuXHRcdGlmICh0aGlzLm5vX29wZW5pbmdfc2VjdGlvbigpICYmICF0aGlzLmlzX3RhYmJlZF9sYXlvdXQoKSkge1xuXHRcdFx0dGhpcy5maWVsZHMudW5zaGlmdCh7IGZpZWxkdHlwZTogJ1NlY3Rpb24gQnJlYWsnIH0pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmlzX3RhYmJlZF9sYXlvdXQoKSkge1xuXHRcdFx0Ly8gYWRkIGEgdGFiIHdpdGhvdXQgYGZpZWxkbmFtZWAgdG8gYXZvaWQgY29uZmxpY3RzXG5cdFx0XHRsZXQgZGVmYXVsdF90YWIgPSB7XG5cdFx0XHRcdGxhYmVsOiBfXygnRGV0YWlscycpLFxuXHRcdFx0XHRmaWVsZHR5cGU6ICdUYWIgQnJlYWsnLFxuXHRcdFx0XHRmaWVsZG5hbWU6ICdfX2RldGFpbHMnLFxuXHRcdFx0fTtcblxuXHRcdFx0bGV0IGZpcnN0X2ZpZWxkX3Zpc2libGUgPSB0aGlzLmZpZWxkcy5maW5kKGVsZW1lbnQgPT4gZWxlbWVudC5oaWRkZW4gPT0gZmFsc2UpO1xuXHRcdFx0bGV0IGZpcnN0X3RhYiA9XG5cdFx0XHRcdGZpcnN0X2ZpZWxkX3Zpc2libGU/LmZpZWxkdHlwZSA9PT0gJ1RhYiBCcmVhaycgPyBmaXJzdF9maWVsZF92aXNpYmxlIDogbnVsbDtcblxuXHRcdFx0aWYgKGZpcnN0X3RhYikge1xuXHRcdFx0XHQvLyByZXNodWZmbGUgX19uZXduYW1lIGZpZWxkIHRvIGFjY29tb2RhdGUgdW5kZXIgMXN0IFRhYiBCcmVha1xuXHRcdFx0XHRsZXQgbmV3bmFtZV9maWVsZCA9IHRoaXMuZmllbGRzLmZpbmQoZGYgPT4gZGYuZmllbGRuYW1lID09PSAnX19uZXduYW1lJyk7XG5cdFx0XHRcdGlmIChuZXduYW1lX2ZpZWxkICYmIG5ld25hbWVfZmllbGQuZ2V0X3N0YXR1cyh0aGlzKSA9PT0gJ1dyaXRlJykge1xuXHRcdFx0XHRcdHRoaXMuZmllbGRzLnNwbGljZSgwLCAxKTtcblx0XHRcdFx0XHR0aGlzLmZpZWxkcy5zcGxpY2UoMSwgMCwgbmV3bmFtZV9maWVsZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZmllbGRzLnNwbGljZSgwLCAwLCBkZWZhdWx0X3RhYik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBkZiBvZiBmaWVsZHMpIHtcblx0XHRcdHN3aXRjaCAoZGYuZmllbGR0eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ0ZvbGQnOlxuXHRcdFx0XHRcdHRoaXMubWFrZV9wYWdlKGRmKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUGFnZSBCcmVhayc6XG5cdFx0XHRcdFx0dGhpcy5tYWtlX3BhZ2VfYnJlYWsoKTtcblx0XHRcdFx0XHR0aGlzLm1ha2Vfc2VjdGlvbihkZik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1NlY3Rpb24gQnJlYWsnOlxuXHRcdFx0XHRcdHRoaXMubWFrZV9zZWN0aW9uKGRmKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnQ29sdW1uIEJyZWFrJzpcblx0XHRcdFx0XHR0aGlzLm1ha2VfY29sdW1uKGRmKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnVGFiIEJyZWFrJzpcblx0XHRcdFx0XHR0aGlzLm1ha2VfdGFiKGRmKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aGlzLm1ha2VfZmllbGQoZGYpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdG5vX29wZW5pbmdfc2VjdGlvbigpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0KHRoaXMuZmllbGRzWzBdICYmIHRoaXMuZmllbGRzWzBdLmZpZWxkdHlwZSAhPSAnU2VjdGlvbiBCcmVhaycpIHx8ICF0aGlzLmZpZWxkcy5sZW5ndGhcblx0XHQpO1xuXHR9XG5cblx0bm9fb3BlbmluZ190YWIoKSB7XG5cdFx0cmV0dXJuICh0aGlzLmZpZWxkc1sxXSAmJiB0aGlzLmZpZWxkc1sxXS5maWVsZHR5cGUgIT0gJ1RhYiBCcmVhaycpIHx8ICF0aGlzLmZpZWxkcy5sZW5ndGg7XG5cdH1cblxuXHRpc190YWJiZWRfbGF5b3V0KCkge1xuXHRcdHJldHVybiB0aGlzLmZpZWxkcy5maW5kKGYgPT4gZi5maWVsZHR5cGUgPT09ICdUYWIgQnJlYWsnKTtcblx0fVxuXG5cdHJlcGxhY2VfZmllbGQoZmllbGRuYW1lLCBkZiwgcmVuZGVyKSB7XG5cdFx0ZGYuZmllbGRuYW1lID0gZmllbGRuYW1lOyAvLyBjaGFuZ2Ugb2YgZmllbGRuYW1lIGlzIGF2b2lkZWRcblx0XHRpZiAodGhpcy5maWVsZHNfZGljdFtmaWVsZG5hbWVdICYmIHRoaXMuZmllbGRzX2RpY3RbZmllbGRuYW1lXS5kZikge1xuXHRcdFx0Y29uc3QgcHJldl9maWVsZG9iaiA9IHRoaXMuZmllbGRzX2RpY3RbZmllbGRuYW1lXTtcblx0XHRcdGNvbnN0IGZpZWxkb2JqID0gdGhpcy5pbml0X2ZpZWxkKGRmLCBwcmV2X2ZpZWxkb2JqLnBhcmVudCwgcmVuZGVyKTtcblx0XHRcdHByZXZfZmllbGRvYmouJHdyYXBwZXIucmVwbGFjZVdpdGgoZmllbGRvYmouJHdyYXBwZXIpO1xuXHRcdFx0Y29uc3QgaWR4ID0gdGhpcy5maWVsZHNfbGlzdC5maW5kSW5kZXgoZSA9PiBlID09IHByZXZfZmllbGRvYmopO1xuXHRcdFx0dGhpcy5maWVsZHNfbGlzdC5zcGxpY2UoaWR4LCAxLCBmaWVsZG9iaik7XG5cdFx0XHR0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV0gPSBmaWVsZG9iajtcblx0XHRcdGZvciAoY29uc3Qgc2VjdGlvbiBvZiB0aGlzLnNlY3Rpb25zKSB7IHNlY3Rpb24ucmVwbGFjZV9maWVsZChmaWVsZG5hbWUsIGZpZWxkb2JqKTsgfVxuXHRcdFx0cHJldl9maWVsZG9iai50YWI/LnJlcGxhY2VfZmllbGQoZmllbGRvYmopO1xuXHRcdFx0dGhpcy5yZWZyZXNoX2ZpZWxkcyhbZGZdKTtcblx0XHR9XG5cdH1cblxuXHRtYWtlX2ZpZWxkKGRmOiBhbnksIGNvbHNwYW4/OiBudW1iZXIsIHJlbmRlcj86IGJvb2xlYW4pIHtcblx0XHQhdGhpcy5zZWN0aW9uICYmIHRoaXMubWFrZV9zZWN0aW9uKCk7XG5cdFx0IXRoaXMuY29sdW1uICYmIHRoaXMubWFrZV9jb2x1bW4oKTtcblxuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuY29sdW1uLndyYXBwZXIuZ2V0KDApO1xuXHRcdGNvbnN0IGZpZWxkb2JqID0gdGhpcy5pbml0X2ZpZWxkKGRmLCBwYXJlbnQsIHJlbmRlcik7XG5cdFx0dGhpcy5maWVsZHNfbGlzdC5wdXNoKGZpZWxkb2JqKTtcblx0XHR0aGlzLmZpZWxkc19kaWN0W2RmLmZpZWxkbmFtZV0gPSBmaWVsZG9iajtcblxuXHRcdHRoaXMuc2VjdGlvbiEuYWRkX2ZpZWxkKGZpZWxkb2JqKTtcblx0XHR0aGlzLmNvbHVtbiEuYWRkX2ZpZWxkKGZpZWxkb2JqKTtcblxuXHRcdGlmICh0aGlzLmN1cnJlbnRfdGFiKSB7XG5cdFx0XHR0aGlzLmN1cnJlbnRfdGFiLmFkZF9maWVsZChmaWVsZG9iaik7XG5cdFx0fVxuXHR9XG5cblx0aW5pdF9maWVsZChkZjogYW55LCBwYXJlbnQ6IEpRdWVyeTxIVE1MRWxlbWVudD4sIHJlbmRlciA9IGZhbHNlKTogZnJhcHBlLnVpLmZvcm0uQ29udHJvbCB7XG5cdFx0Y29uc3QgZmllbGRvYmogPSBmcmFwcGUudWkuZm9ybS5tYWtlX2NvbnRyb2woe1xuXHRcdFx0ZGYsXG5cdFx0XHRkb2N0eXBlOiB0aGlzLmRvY3R5cGUsXG5cdFx0XHRwYXJlbnQ6IHBhcmVudCxcblx0XHRcdGZybTogdGhpcy5mcm0sXG5cdFx0XHRyZW5kZXJfaW5wdXQ6IHJlbmRlcixcblx0XHRcdGRvYzogdGhpcy5kb2MsXG5cdFx0XHRsYXlvdXQ6IHRoaXMsXG5cdFx0fSk7XG5cblx0XHRmaWVsZG9iai5sYXlvdXQgPSB0aGlzO1xuXHRcdHJldHVybiBmaWVsZG9iajtcblx0fVxuXG5cdC8qKiBcdTZERkJcdTUyQTBcdTUyMDZcdTk4NzVcdTY4MDdcdTdCN0UgZGl2LmZvcm0tcGFnZS5wYWdlLWJyZWFrICovXG5cdG1ha2VfcGFnZV9icmVhaygpIHtcblx0XHR0aGlzLnBhZ2UgPSAkKCc8ZGl2IGNsYXNzPVwiZm9ybS1wYWdlIHBhZ2UtYnJlYWtcIj48L2Rpdj4nKS5hcHBlbmRUbyh0aGlzLndyYXBwZXIpO1xuXHR9XG5cblx0bWFrZV9wYWdlKGRmKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0bGV0IGhlYWQgPSAkKGBcblx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWNsaWNrYWJsZS1zZWN0aW9uIHRleHQtY2VudGVyXCI+XG5cdFx0XHRcdDxhIGNsYXNzPVwiYnRuLWZvbGQgaDYgdGV4dC1tdXRlZFwiPlxuXHRcdFx0XHRcdCR7X18oJ1Nob3cgbW9yZSBkZXRhaWxzJyl9XG5cdFx0XHRcdDwvYT5cblx0XHRcdDwvZGl2PlxuXHRcdGApLmFwcGVuZFRvKHRoaXMud3JhcHBlcik7XG5cblx0XHR0aGlzLnBhZ2UgPSAkKCc8ZGl2IGNsYXNzPVwiZm9ybS1wYWdlIHNlY29uZC1wYWdlIGhpZGVcIj48L2Rpdj4nKS5hcHBlbmRUbyh0aGlzLndyYXBwZXIpO1xuXG5cdFx0dGhpcy5mb2xkX2J0biA9IGhlYWQuZmluZCgnLmJ0bi1mb2xkJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0bGV0IHBhZ2UgPSAkKHRoaXMpLnBhcmVudCgpLm5leHQoKTtcblx0XHRcdGlmIChwYWdlLmhhc0NsYXNzKCdoaWRlJykpIHtcblx0XHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcygnYnRuLWZvbGQnKS5odG1sKF9fKCdIaWRlIGRldGFpbHMnKSk7XG5cdFx0XHRcdHBhZ2UucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcblx0XHRcdFx0ZnJhcHBlLnV0aWxzLnNjcm9sbF90bygkKHRoaXMpLCB0cnVlLCAzMCk7XG5cdFx0XHRcdG1lLmZvbGRlZCA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCh0aGlzKS5hZGRDbGFzcygnYnRuLWZvbGQnKS5odG1sKF9fKCdTaG93IG1vcmUgZGV0YWlscycpKTtcblx0XHRcdFx0cGFnZS5hZGRDbGFzcygnaGlkZScpO1xuXHRcdFx0XHRtZS5mb2xkZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5zZWN0aW9uID0gbnVsbDtcblx0XHR0aGlzLmZvbGRlZCA9IHRydWU7XG5cdH1cblxuXHR1bmZvbGQoKSB7XG5cdFx0dGhpcy5mb2xkX2J0bi50cmlnZ2VyKCdjbGljaycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFx1NTIxQlx1NUVGQVx1NjVCMFx1NzY4NFx1OTg3NVx1OTc2MiBzZWN0aW9uXG5cdCAqIHNlY3Rpb24gXHU1MjFCXHU1RUZBXHU1NDBFXHVGRjBDXHU0RjFBXHU3RjZFXHU3QTdBIGNvbHVtblxuXHQgKiBcdTUyMUJcdTVFRkFcdThGQzdcdTdBMEJcdTRFMkRcdUZGMENcdTU5ODJcdTY3OUNcdTVCNThcdTU3MjggdGFiIFx1RkYwQ1x1NTIxOVx1NEYxQVx1NTIxQlx1NUVGQVx1NTIzMCB0YWIgXHU0RTJEXHVGRjBDXHU1NDI2XHU1MjE5XHVGRjBDXHU0RjFBXHU1MjFCXHU1RUZBXHU1MjMwIHBhZ2UgXHU0RTJEXG5cdCAqL1xuXHRtYWtlX3NlY3Rpb24oZGY6IHtcblx0XHRmaWVsZG5hbWU/OiBzdHJpbmdcblx0XHRmaWVsZHR5cGU/OiBzdHJpbmdcblx0fSA9IHt9KSB7XG5cdFx0dGhpcy5zZWN0aW9uX2NvdW50Kys7XG5cdFx0aWYgKCFkZi5maWVsZG5hbWUpIHtcblx0XHRcdGRmLmZpZWxkbmFtZSA9IGBfX3NlY3Rpb25fJHt0aGlzLnNlY3Rpb25fY291bnR9YDtcblx0XHRcdGRmLmZpZWxkdHlwZSA9ICdTZWN0aW9uIEJyZWFrJztcblx0XHR9XG5cblx0XHR0aGlzLnNlY3Rpb24gPSBuZXcgU2VjdGlvbihcblx0XHRcdHRoaXMuY3VycmVudF90YWI/LndyYXBwZXIgfHwgdGhpcy5wYWdlLFxuXHRcdFx0ZGYsXG5cdFx0XHR0aGlzLmNhcmRfbGF5b3V0LFxuXHRcdFx0dGhpcyxcblx0XHQpO1xuXHRcdHRoaXMuc2VjdGlvbnMucHVzaCh0aGlzLnNlY3Rpb24pO1xuXHRcdHRoaXMuc2VjdGlvbnNfZGljdFtkZi5maWVsZG5hbWVdID0gdGhpcy5zZWN0aW9uO1xuXG5cdFx0Ly8gYXBwZW5kIHRvIGxheW91dCBmaWVsZHNcblx0XHRpZiAoZGYpIHtcblx0XHRcdHRoaXMuZmllbGRzX2RpY3RbZGYuZmllbGRuYW1lXSA9IHRoaXMuc2VjdGlvbjtcblx0XHRcdHRoaXMuZmllbGRzX2xpc3QucHVzaCh0aGlzLnNlY3Rpb24pO1xuXHRcdH1cblxuXHRcdHRoaXMuY29sdW1uID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBcdTUyMUJcdTVFRkFcdTUyMDZcdTUyMTdcblx0ICogXHU1MjE3XHU0RjFBXHU1MjFCXHU1RUZBXHU1MjMwIHNlY3Rpb24gXHU0RTJEXG5cdCAqL1xuXHRtYWtlX2NvbHVtbihkZjoge1xuXHRcdGZpZWxkbmFtZT86IHN0cmluZ1xuXHRcdGZpZWxkdHlwZT86IHN0cmluZ1xuXHR9ID0ge30pIHtcblx0XHR0aGlzLmNvbHVtbl9jb3VudCsrO1xuXHRcdGlmICghZGYuZmllbGRuYW1lKSB7XG5cdFx0XHRkZi5maWVsZG5hbWUgPSBgX19jb2x1bW5fJHt0aGlzLnNlY3Rpb25fY291bnR9YDtcblx0XHRcdGRmLmZpZWxkdHlwZSA9ICdDb2x1bW4gQnJlYWsnO1xuXHRcdH1cblxuXHRcdHRoaXMuY29sdW1uID0gbmV3IENvbHVtbih0aGlzLnNlY3Rpb24hLCBkZik7XG5cdFx0aWYgKGRmICYmIGRmLmZpZWxkbmFtZSkge1xuXHRcdFx0dGhpcy5maWVsZHNfbGlzdC5wdXNoKHRoaXMuY29sdW1uKTtcblx0XHR9XG5cdH1cblx0LyoqXG5cdCAqIFx1NTIxQlx1NUVGQVx1NjVCMFx1NzY4NCB0YWIgXHU5ODc1XHU5NzYyXG5cdCAqIHRhYiBcdTUyMUJcdTVFRkFcdTU0MEVcdUZGMENcdTRGMUFcdTgxRUFcdTUyQThcdTUyMUJcdTVFRkFcdTY1QjBcdTc2ODQgc2VjdGlvblxuXHQgKi9cblx0bWFrZV90YWIoZGYpIHtcblx0XHR0aGlzLnNlY3Rpb24gPSBudWxsO1xuXHRcdGxldCB0YWIgPSBuZXcgVGFiKHRoaXMsIGRmLCB0aGlzLmZybSwgdGhpcy50YWJfbGlua19jb250YWluZXIsIHRoaXMudGFic19jb250ZW50KTtcblx0XHR0aGlzLmN1cnJlbnRfdGFiID0gdGFiO1xuXHRcdHRoaXMubWFrZV9zZWN0aW9uKHsgZmllbGR0eXBlOiAnU2VjdGlvbiBCcmVhaycgfSk7XG5cdFx0dGhpcy50YWJzLnB1c2godGFiKTtcblx0XHRyZXR1cm4gdGFiO1xuXHR9XG5cblx0cmVmcmVzaChkb2MpIHtcblx0XHRpZiAoZG9jKSB7IHRoaXMuZG9jID0gZG9jOyB9XG5cblx0XHRpZiAodGhpcy5mcm0pIHtcblx0XHRcdHRoaXMud3JhcHBlci5maW5kKCcuZW1wdHktZm9ybS1hbGVydCcpLnJlbW92ZSgpO1xuXHRcdH1cblxuXHRcdC8vIE5PVEUgdGhpcyBtaWdodCBzZWVtIHJlZHVuZGFudCBhdCBmaXJzdCwgYnV0IGl0IG5lZWRzIHRvIGJlIGV4ZWN1dGVkIHdoZW4gZnJtLnJlZnJlc2hfZmllbGRzIGlzIGNhbGxlZFxuXHRcdHRoaXMuYXR0YWNoX2RvY19hbmRfZG9jZmllbGRzKHRydWUpO1xuXG5cdFx0aWYgKHRoaXMuZnJtICYmIHRoaXMuZnJtLndyYXBwZXIpIHtcblx0XHRcdCQodGhpcy5mcm0ud3JhcHBlcikudHJpZ2dlcigncmVmcmVzaC1maWVsZHMnKTtcblx0XHR9XG5cblx0XHQvLyBkZXBlbmRlbnQgZmllbGRzXG5cdFx0dGhpcy5yZWZyZXNoX2RlcGVuZGVuY3koKTtcblxuXHRcdC8vIHJlZnJlc2ggc2VjdGlvbnNcblx0XHR0aGlzLnJlZnJlc2hfc2VjdGlvbnMoKTtcblxuXHRcdGlmICh0aGlzLmZybSkge1xuXHRcdFx0Ly8gY29sbGFwc2Ugc2VjdGlvbnNcblx0XHRcdHRoaXMucmVmcmVzaF9zZWN0aW9uX2NvbGxhcHNlKCk7XG5cdFx0fVxuXG5cdFx0aWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcblx0XHRcdGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50LnRhZ05hbWUgPT0gJ0lOUFVUJyAmJiB0aGlzLmlzX251bWVyaWNfZmllbGRfYWN0aXZlKCkpIHtcblx0XHRcdFx0ZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5zZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpc19udW1lcmljX2ZpZWxkX2FjdGl2ZSgpIHtcblx0XHRjb25zdCBjb250cm9sID0gJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5jbG9zZXN0KCcuZnJhcHBlLWNvbnRyb2wnKTtcblx0XHRjb25zdCB7IGZpZWxkdHlwZSB9ID0gY29udHJvbC5kYXRhKCkgfHwge307XG5cdFx0cmV0dXJuIGZyYXBwZS5tb2RlbC5udW1lcmljX2ZpZWxkdHlwZXMuaW5jbHVkZXMoZmllbGR0eXBlKTtcblx0fVxuXG5cdHJlZnJlc2hfc2VjdGlvbnMoKSB7XG5cdFx0Ly8gaGlkZSBpbnZpc2libGUgc2VjdGlvbnNcblx0XHR0aGlzLndyYXBwZXIuZmluZCgnLmZvcm0tc2VjdGlvbjpub3QoLmhpZGUtY29udHJvbCknKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdGNvbnN0IHNlY3Rpb24gPSAkKHRoaXMpLnJlbW92ZUNsYXNzKCdlbXB0eS1zZWN0aW9uIHZpc2libGUtc2VjdGlvbicpO1xuXHRcdFx0aWYgKHNlY3Rpb24uZmluZCgnLmZyYXBwZS1jb250cm9sOm5vdCguaGlkZS1jb250cm9sKScpLmxlbmd0aCkge1xuXHRcdFx0XHRzZWN0aW9uLmFkZENsYXNzKCd2aXNpYmxlLXNlY3Rpb24nKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIG5vdGhpbmcgdmlzaWJsZSwgaGlkZSB0aGUgc2VjdGlvblxuXHRcdFx0XHRzZWN0aW9uLmFkZENsYXNzKCdlbXB0eS1zZWN0aW9uJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyByZWZyZXNoIHRhYnNcblx0XHR0aGlzLmlzX3RhYmJlZF9sYXlvdXQoKSAmJiB0aGlzLnJlZnJlc2hfdGFicygpO1xuXHR9XG5cblx0cmVmcmVzaF90YWJzKCkge1xuXHRcdGZvciAobGV0IHRhYiBvZiB0aGlzLnRhYnMpIHtcblx0XHRcdHRhYi5yZWZyZXNoKCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdmlzaWJsZV90YWJzID0gdGhpcy50YWJzLmZpbHRlcih0YWIgPT4gIXRhYi5oaWRkZW4pO1xuXHRcdGlmICh2aXNpYmxlX3RhYnMgJiYgdmlzaWJsZV90YWJzLmxlbmd0aCA9PSAxKSB7XG5cdFx0XHR2aXNpYmxlX3RhYnNbMF0udGFiX2xpbmsudG9nZ2xlQ2xhc3MoJ2hpZGUgc2hvdycpO1xuXHRcdH1cblx0XHR0aGlzLnNldF90YWJfYXNfYWN0aXZlKCk7XG5cdH1cblxuXHRzZXRfdGFiX2FzX2FjdGl2ZSgpIHtcblx0XHRsZXQgZnJtX2FjdGl2ZV90YWIgPSB0aGlzPy5mcm0uZ2V0X2FjdGl2ZV90YWI/LigpO1xuXHRcdGlmIChmcm1fYWN0aXZlX3RhYikge1xuXHRcdFx0ZnJtX2FjdGl2ZV90YWIuc2V0X2FjdGl2ZSgpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy50YWJzLmxlbmd0aCkge1xuXHRcdFx0Ly8gc2V0IGZpcnN0IHRhYiBhcyBhY3RpdmUgd2hlbiBvcGVuaW5nIGZvciBmaXJzdCB0aW1lLCBvciBuZXcgZG9jXG5cdFx0XHRsZXQgZmlyc3RfdmlzaWJsZV90YWIgPSB0aGlzLnRhYnMuZmluZCh0YWIgPT4gIXRhYi5pc19oaWRkZW4oKSk7XG5cdFx0XHRmaXJzdF92aXNpYmxlX3RhYiAmJiBmaXJzdF92aXNpYmxlX3RhYi5zZXRfYWN0aXZlKCk7XG5cdFx0fVxuXHR9XG5cblx0cmVmcmVzaF9maWVsZHMoZmllbGRzKSB7XG5cdFx0bGV0IGZpZWxkbmFtZXMgPSBmaWVsZHMubWFwKGZpZWxkID0+IHtcblx0XHRcdGlmIChmaWVsZC5maWVsZG5hbWUpIHsgcmV0dXJuIGZpZWxkLmZpZWxkbmFtZTsgfVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5maWVsZHNfbGlzdC5tYXAoZmllbGRvYmogPT4ge1xuXHRcdFx0aWYgKGZpZWxkbmFtZXMuaW5jbHVkZXMoZmllbGRvYmouZGYuZmllbGRuYW1lKSkge1xuXHRcdFx0XHRmaWVsZG9iai5yZWZyZXNoKCk7XG5cdFx0XHRcdGlmIChmaWVsZG9iai5kZi5kZWZhdWx0KSB7XG5cdFx0XHRcdFx0ZmllbGRvYmouc2V0X2lucHV0KGZpZWxkb2JqLmRmLmRlZmF1bHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRhZGRfZmllbGRzKGZpZWxkcykge1xuXHRcdHRoaXMucmVuZGVyKGZpZWxkcyk7XG5cdFx0dGhpcy5yZWZyZXNoX2ZpZWxkcyhmaWVsZHMpO1xuXHR9XG5cblx0cmVmcmVzaF9zZWN0aW9uX2NvbGxhcHNlKCkge1xuXHRcdGlmICghKHRoaXMuc2VjdGlvbnMgJiYgdGhpcy5zZWN0aW9ucy5sZW5ndGgpKSB7IHJldHVybjsgfVxuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgc2VjdGlvbiA9IHRoaXMuc2VjdGlvbnNbaV07XG5cdFx0XHRsZXQgeyBkZiB9ID0gc2VjdGlvbjtcblx0XHRcdGlmIChkZiAmJiBkZi5jb2xsYXBzaWJsZSkge1xuXHRcdFx0XHRsZXQgY29sbGFwc2UgPSB0cnVlO1xuXG5cdFx0XHRcdGlmIChkZi5jb2xsYXBzaWJsZV9kZXBlbmRzX29uKSB7XG5cdFx0XHRcdFx0Y29sbGFwc2UgPSAhdGhpcy5ldmFsdWF0ZV9kZXBlbmRzX29uX3ZhbHVlKGRmLmNvbGxhcHNpYmxlX2RlcGVuZHNfb24pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGNvbGxhcHNlICYmIHNlY3Rpb24uaGFzX21pc3NpbmdfbWFuZGF0b3J5KCkpIHtcblx0XHRcdFx0XHRjb2xsYXBzZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2VjdGlvbi5jb2xsYXBzZShjb2xsYXBzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YXR0YWNoX2RvY19hbmRfZG9jZmllbGRzKHJlZnJlc2gpIHtcblx0XHRsZXQgbWUgPSB0aGlzO1xuXHRcdGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5maWVsZHNfbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdGxldCBmaWVsZG9iaiA9IHRoaXMuZmllbGRzX2xpc3RbaV07XG5cdFx0XHRpZiAobWUuZG9jKSB7XG5cdFx0XHRcdGZpZWxkb2JqLmRvYyA9IG1lLmRvYztcblx0XHRcdFx0ZmllbGRvYmouZG9jdHlwZSA9IG1lLmRvYy5kb2N0eXBlO1xuXHRcdFx0XHRmaWVsZG9iai5kb2NuYW1lID0gbWUuZG9jLm5hbWU7XG5cdFx0XHRcdGZpZWxkb2JqLmRmID1cblx0XHRcdFx0XHRmcmFwcGUubWV0YS5nZXRfZG9jZmllbGQobWUuZG9jLmRvY3R5cGUsIGZpZWxkb2JqLmRmLmZpZWxkbmFtZSwgbWUuZG9jLm5hbWUpIHx8XG5cdFx0XHRcdFx0ZmllbGRvYmouZGY7XG5cdFx0XHR9XG5cdFx0XHRyZWZyZXNoICYmIGZpZWxkb2JqLmRmICYmIGZpZWxkb2JqLnJlZnJlc2ggJiYgZmllbGRvYmoucmVmcmVzaCgpO1xuXHRcdH1cblx0fVxuXG5cdHJlZnJlc2hfc2VjdGlvbl9jb3VudCgpIHtcblx0XHR0aGlzLndyYXBwZXIuZmluZCgnLnNlY3Rpb24tY291bnQtbGFiZWw6dmlzaWJsZScpLmVhY2goZnVuY3Rpb24gKGkpIHtcblx0XHRcdCQodGhpcykuaHRtbChpICsgMSk7XG5cdFx0fSk7XG5cdH1cblxuXHRzZXR1cF9ldmVudHMoKSB7XG5cblx0XHRsZXQgbGFzdF9zY3JvbGwgPSAwO1xuXHRcdGNvbnN0IHtmb3JtVGFic0xpc3R9ID0gdGhpcztcblx0XHRsZXQge3RhYnNDb250ZW50fSA9IHRoaXM7XG5cblx0XHRjb25zdCBldmVudExpc3RlbmVyID0gZnJhcHBlLnV0aWxzLnRocm90dGxlKCgpID0+IHtcblx0XHRcdGxldCBjdXJyZW50X3Njcm9sbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG5cdFx0XHRpZiAoY3VycmVudF9zY3JvbGwgPiAwICYmIGxhc3Rfc2Nyb2xsIDw9IGN1cnJlbnRfc2Nyb2xsKSB7XG5cdFx0XHRcdGZvcm1UYWJzTGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdmb3JtLXRhYnMtc3RpY2t5LWRvd24nKTtcblx0XHRcdFx0Zm9ybVRhYnNMaXN0LmNsYXNzTGlzdC5hZGQoJ2Zvcm0tdGFicy1zdGlja3ktdXAnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvcm1UYWJzTGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdmb3JtLXRhYnMtc3RpY2t5LXVwJyk7XG5cdFx0XHRcdGZvcm1UYWJzTGlzdC5jbGFzc0xpc3QuYWRkKCdmb3JtLXRhYnMtc3RpY2t5LWRvd24nKTtcblx0XHRcdH1cblx0XHRcdGxhc3Rfc2Nyb2xsID0gY3VycmVudF9zY3JvbGw7XG5cdFx0fSwgNTAwKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZXZlbnRMaXN0ZW5lcik7XG5cdFx0Ly8gVE9ETzogXHU1ODlFXHU1MkEwXHU3OUZCXHU5NjY0XHU5MDNCXHU4RjkxXG5cblxuXHRcdHRoaXMudGFiX2xpbmtfY29udGFpbmVyLm9mZignY2xpY2snKS5vbignY2xpY2snLCAnLm5hdi1saW5rJywgZSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0Y29uc3QgZWwgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQ7XG5cdFx0XHQkKGVsKS50YWIoJ3Nob3cnKTtcblx0XHRcdC8vIFx1OEJCMFx1NEY0Rlx1NUY1M1x1NTI0RFx1NjYzRVx1NzkzQVx1NzY4NCB0YWJcblx0XHRcdGNvbnN0IHsgZmllbGRuYW1lIH0gPSBlbC5kYXRhc2V0O1xuXHRcdFx0aWYgKGZpZWxkbmFtZSkge1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRUYWIudmFsdWUgPSBmaWVsZG5hbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGFic0NvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIDwgMTAwKSB7XG5cdFx0XHRcdHRhYnNDb250ZW50LnNjcm9sbEludG9WaWV3KCk7XG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdCQoJy5wYWdlLWhlYWQnKS5jc3MoJ3RvcCcsICctMTVweCcpO1xuXHRcdFx0XHRcdGZvcm1UYWJzTGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdmb3JtLXRhYnMtc3RpY2t5LWRvd24nKTtcblx0XHRcdFx0XHRmb3JtVGFic0xpc3QuY2xhc3NMaXN0LmFkZCgnZm9ybS10YWJzLXN0aWNreS11cCcpO1xuXHRcdFx0XHR9LCAzKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHNldHVwX3RhYl9ldmVudHMoKSB7XG5cdFx0dGhpcy53cmFwcGVyLm9uKCdrZXlkb3duJywgZXYgPT4ge1xuXHRcdFx0aWYgKGV2LndoaWNoID09IDkpIHtcblx0XHRcdFx0bGV0IGN1cnJlbnQgPSAkKGV2LnRhcmdldCk7XG5cdFx0XHRcdGxldCBkb2N0eXBlID0gY3VycmVudC5hdHRyKCdkYXRhLWRvY3R5cGUnKTtcblx0XHRcdFx0bGV0IGZpZWxkbmFtZSA9IGN1cnJlbnQuYXR0cignZGF0YS1maWVsZG5hbWUnKTtcblx0XHRcdFx0aWYgKGRvY3R5cGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5oYW5kbGVfdGFiKGRvY3R5cGUsIGZpZWxkbmFtZSwgZXYuc2hpZnRLZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRoYW5kbGVfdGFiKGRvY3R5cGU6IHN0cmluZywgZmllbGRuYW1lOiBzdHJpbmcsIHNoaWZ0OiBib29sZWFuKSB7XG5cdFx0bGV0IGdyaWRfcm93ID0gbnVsbCxcblx0XHRcdHByZXYgPSBudWxsLFxuXHRcdFx0ZmllbGRzID0gdGhpcy5maWVsZHNfbGlzdCxcblx0XHRcdGZvY3VzZWQgPSBmYWxzZTtcblxuXHRcdC8vIGluIGdyaWRcblx0XHRpZiAoZG9jdHlwZSAhPSB0aGlzLmRvY3R5cGUpIHtcblx0XHRcdGdyaWRfcm93ID0gdGhpcy5nZXRfb3Blbl9ncmlkX3JvdygpO1xuXHRcdFx0aWYgKCFncmlkX3JvdyB8fCAhZ3JpZF9yb3cubGF5b3V0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGZpZWxkcyA9IGdyaWRfcm93LmxheW91dC5maWVsZHNfbGlzdDtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBpID0gMCwgbGVuID0gZmllbGRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoZmllbGRzW2ldLmRmLmZpZWxkbmFtZSA9PSBmaWVsZG5hbWUpIHtcblx0XHRcdFx0aWYgKHNoaWZ0KSB7XG5cdFx0XHRcdFx0aWYgKHByZXYpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0X2ZvY3VzKHByZXYpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQkKHRoaXMucHJpbWFyeV9idXR0b24pLmZvY3VzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpIDwgbGVuIC0gMSkge1xuXHRcdFx0XHRcdGZvY3VzZWQgPSB0aGlzLmZvY3VzX29uX25leHRfZmllbGQoaSwgZmllbGRzKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmb2N1c2VkKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmlzX3Zpc2libGUoZmllbGRzW2ldKSkgeyBwcmV2ID0gZmllbGRzW2ldOyB9XG5cdFx0fVxuXG5cdFx0aWYgKCFmb2N1c2VkKSB7XG5cdFx0XHQvLyBsYXN0IGZpZWxkIGluIHRoaXMgZ3JvdXBcblx0XHRcdGlmIChncmlkX3Jvdykge1xuXHRcdFx0XHQvLyBpbiBncmlkXG5cdFx0XHRcdGlmIChncmlkX3Jvdy5kb2MuaWR4ID09IGdyaWRfcm93LmdyaWQuZ3JpZF9yb3dzLmxlbmd0aCkge1xuXHRcdFx0XHRcdC8vIGxhc3Qgcm93LCBjbG9zZSBpdCBhbmQgZmluZCBuZXh0IGZpZWxkXG5cdFx0XHRcdFx0Z3JpZF9yb3cudG9nZ2xlX3ZpZXcoZmFsc2UsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGdyaWRfcm93LmdyaWQuZnJtLmxheW91dC5oYW5kbGVfdGFiKFxuXHRcdFx0XHRcdFx0XHRncmlkX3Jvdy5ncmlkLmRmLnBhcmVudCxcblx0XHRcdFx0XHRcdFx0Z3JpZF9yb3cuZ3JpZC5kZi5maWVsZG5hbWUsXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIG5leHQgcm93XG5cdFx0XHRcdFx0Z3JpZF9yb3cuZ3JpZC5ncmlkX3Jvd3NbZ3JpZF9yb3cuZG9jLmlkeF0udG9nZ2xlX3ZpZXcodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoIXNoaWZ0KSB7XG5cdFx0XHRcdC8vIEVuZCBvZiB0YWIgbmF2aWdhdGlvblxuXHRcdFx0XHQkKHRoaXMucHJpbWFyeV9idXR0b24pLmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Zm9jdXNfb25fbmV4dF9maWVsZChzdGFydF9pZHgsIGZpZWxkcykge1xuXHRcdC8vIGxvb3AgdG8gZmluZCBuZXh0IGVsaWdpYmxlIGZpZWxkc1xuXHRcdGZvciAobGV0IGkgPSBzdGFydF9pZHggKyAxLCBsZW4gPSBmaWVsZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGxldCBmaWVsZCA9IGZpZWxkc1tpXTtcblx0XHRcdGlmICh0aGlzLmlzX3Zpc2libGUoZmllbGQpKSB7XG5cdFx0XHRcdGlmIChmaWVsZC5kZi5maWVsZHR5cGUgPT09ICdUYWJsZScpIHtcblx0XHRcdFx0XHQvLyBvcGVuIHRhYmxlIGdyaWRcblx0XHRcdFx0XHRpZiAoIShmaWVsZC5ncmlkLmdyaWRfcm93cyAmJiBmaWVsZC5ncmlkLmdyaWRfcm93cy5sZW5ndGgpKSB7XG5cdFx0XHRcdFx0XHQvLyBlbXB0eSBncmlkLCBhZGQgYSBuZXcgcm93XG5cdFx0XHRcdFx0XHRmaWVsZC5ncmlkLmFkZF9uZXdfcm93KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHNob3cgZ3JpZCByb3cgKGlmIGV4aXN0cylcblx0XHRcdFx0XHRmaWVsZC5ncmlkLmdyaWRfcm93c1swXS5zaG93X2Zvcm0oKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIGlmICghaW5fbGlzdChmcmFwcGUubW9kZWwubm9fdmFsdWVfdHlwZSwgZmllbGQuZGYuZmllbGR0eXBlKSkge1xuXHRcdFx0XHRcdHRoaXMuc2V0X2ZvY3VzKGZpZWxkKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlzX3Zpc2libGUoZmllbGQpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0ZmllbGQuZGlzcF9zdGF0dXMgPT09ICdXcml0ZScgJiYgZmllbGQuZGYgJiYgJ2hpZGRlbicgaW4gZmllbGQuZGYgJiYgIWZpZWxkLmRmLmhpZGRlblxuXHRcdCk7XG5cdH1cblxuXHRzZXRfZm9jdXMoZmllbGQpIHtcblx0XHRpZiAoZmllbGQudGFiKSB7XG5cdFx0XHRmaWVsZC50YWIuc2V0X2FjdGl2ZSgpO1xuXHRcdH1cblx0XHQvLyBuZXh0IGlzIHRhYmxlLCBzaG93IHRoZSB0YWJsZVxuXHRcdGlmIChmaWVsZC5kZi5maWVsZHR5cGUgPT0gJ1RhYmxlJykge1xuXHRcdFx0aWYgKGZpZWxkLmdyaWQuZ3JpZF9yb3dzLmxlbmd0aCkge1xuXHRcdFx0XHRmaWVsZC5ncmlkLmdyaWRfcm93c1swXS50b2dnbGVfdmlldyh0cnVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZpZWxkLmdyaWQuYWRkX25ld19yb3coMSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChmaWVsZC5lZGl0b3IpIHtcblx0XHRcdGZpZWxkLmVkaXRvci5zZXRfZm9jdXMoKTtcblx0XHR9IGVsc2UgaWYgKGZpZWxkLiRpbnB1dCkge1xuXHRcdFx0ZmllbGQuJGlucHV0LmZvY3VzKCk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0X29wZW5fZ3JpZF9yb3coKSB7XG5cdFx0cmV0dXJuICQoJy5ncmlkLXJvdy1vcGVuJykuZGF0YSgnZ3JpZF9yb3cnKTtcblx0fVxuXG5cdHJlZnJlc2hfZGVwZW5kZW5jeSgpIHtcblx0XHQvKipcblx0XHRcdFJlc29sdmUgXCJkZXBlbmRzX29uXCIgYW5kIHNob3cgLyBoaWRlIGFjY29yZGluZ2x5XG5cdFx0XHRidWlsZCBkZXBlbmRhbnRzJyBkaWN0aW9uYXJ5XG5cdFx0Ki9cblxuXHRcdGxldCBoYXNfZGVwID0gZmFsc2U7XG5cblx0XHRjb25zdCBmaWVsZHMgPSB0aGlzLmZpZWxkc19saXN0LmNvbmNhdCh0aGlzLnRhYnMpO1xuXG5cdFx0Zm9yIChsZXQgZmtleSBpbiBmaWVsZHMpIHtcblx0XHRcdGxldCBmID0gZmllbGRzW2ZrZXldO1xuXHRcdFx0aWYgKGYuZGYuZGVwZW5kc19vbiB8fCBmLmRmLm1hbmRhdG9yeV9kZXBlbmRzX29uIHx8IGYuZGYucmVhZF9vbmx5X2RlcGVuZHNfb24pIHtcblx0XHRcdFx0aGFzX2RlcCA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghaGFzX2RlcCkgeyByZXR1cm47IH1cblxuXHRcdC8vIHNob3cgLyBoaWRlIGJhc2VkIG9uIHZhbHVlc1xuXHRcdGZvciAobGV0IGkgPSBmaWVsZHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdGxldCBmID0gZmllbGRzW2ldO1xuXHRcdFx0Zi5ndWFyZGlhbl9oYXNfdmFsdWUgPSB0cnVlO1xuXHRcdFx0aWYgKGYuZGYuZGVwZW5kc19vbikge1xuXHRcdFx0XHQvLyBldmFsdWF0ZSBndWFyZGlhblxuXG5cdFx0XHRcdGYuZ3VhcmRpYW5faGFzX3ZhbHVlID0gdGhpcy5ldmFsdWF0ZV9kZXBlbmRzX29uX3ZhbHVlKGYuZGYuZGVwZW5kc19vbik7XG5cblx0XHRcdFx0Ly8gc2hvdyAvIGhpZGVcblx0XHRcdFx0aWYgKGYuZ3VhcmRpYW5faGFzX3ZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKGYuZGYuaGlkZGVuX2R1ZV90b19kZXBlbmRlbmN5KSB7XG5cdFx0XHRcdFx0XHRmLmRmLmhpZGRlbl9kdWVfdG9fZGVwZW5kZW5jeSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Zi5yZWZyZXNoKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKCFmLmRmLmhpZGRlbl9kdWVfdG9fZGVwZW5kZW5jeSkge1xuXHRcdFx0XHRcdGYuZGYuaGlkZGVuX2R1ZV90b19kZXBlbmRlbmN5ID0gdHJ1ZTtcblx0XHRcdFx0XHRmLnJlZnJlc2goKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZi5kZi5tYW5kYXRvcnlfZGVwZW5kc19vbikge1xuXHRcdFx0XHR0aGlzLnNldF9kZXBlbmRhbnRfcHJvcGVydHkoZi5kZi5tYW5kYXRvcnlfZGVwZW5kc19vbiwgZi5kZi5maWVsZG5hbWUsICdyZXFkJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmLmRmLnJlYWRfb25seV9kZXBlbmRzX29uKSB7XG5cdFx0XHRcdHRoaXMuc2V0X2RlcGVuZGFudF9wcm9wZXJ0eShcblx0XHRcdFx0XHRmLmRmLnJlYWRfb25seV9kZXBlbmRzX29uLFxuXHRcdFx0XHRcdGYuZGYuZmllbGRuYW1lLFxuXHRcdFx0XHRcdCdyZWFkX29ubHknLFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMucmVmcmVzaF9zZWN0aW9uX2NvdW50KCk7XG5cdH1cblxuXHRzZXRfZGVwZW5kYW50X3Byb3BlcnR5KGNvbmRpdGlvbiwgZmllbGRuYW1lLCBwcm9wZXJ0eSkge1xuXHRcdGxldCBzZXRfcHJvcGVydHkgPSB0aGlzLmV2YWx1YXRlX2RlcGVuZHNfb25fdmFsdWUoY29uZGl0aW9uKTtcblx0XHRsZXQgdmFsdWUgPSBzZXRfcHJvcGVydHkgPyAxIDogMDtcblx0XHRsZXQgZm9ybV9vYmo7XG5cblx0XHRpZiAodGhpcy5mcm0pIHtcblx0XHRcdGZvcm1fb2JqID0gdGhpcy5mcm07XG5cdFx0fSBlbHNlIGlmICh0aGlzLmlzX2RpYWxvZyB8fCB0aGlzLmRvY3R5cGUgPT09ICdXZWIgRm9ybScpIHtcblx0XHRcdGZvcm1fb2JqID0gdGhpcztcblx0XHR9XG5cdFx0aWYgKGZvcm1fb2JqKSB7XG5cdFx0XHRpZiAodGhpcy5kb2MgJiYgdGhpcy5kb2MucGFyZW50ICYmIHRoaXMuZG9jLnBhcmVudGZpZWxkKSB7XG5cdFx0XHRcdGZvcm1fb2JqLnNldHRpbmdfZGVwZW5kZW5jeSA9IHRydWU7XG5cdFx0XHRcdGZvcm1fb2JqLnNldF9kZl9wcm9wZXJ0eShcblx0XHRcdFx0XHR0aGlzLmRvYy5wYXJlbnRmaWVsZCxcblx0XHRcdFx0XHRwcm9wZXJ0eSxcblx0XHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0XHR0aGlzLmRvYy5wYXJlbnQsXG5cdFx0XHRcdFx0ZmllbGRuYW1lLFxuXHRcdFx0XHRcdHRoaXMuZG9jLm5hbWUsXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGZvcm1fb2JqLnNldHRpbmdfZGVwZW5kZW5jeSA9IGZhbHNlO1xuXHRcdFx0XHQvLyByZWZyZXNoIGNoaWxkIGZpZWxkc1xuXHRcdFx0XHR0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV0gJiYgdGhpcy5maWVsZHNfZGljdFtmaWVsZG5hbWVdLnJlZnJlc2goKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvcm1fb2JqLnNldF9kZl9wcm9wZXJ0eShmaWVsZG5hbWUsIHByb3BlcnR5LCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZXZhbHVhdGVfZGVwZW5kc19vbl92YWx1ZShleHByZXNzaW9uKSB7XG5cdFx0bGV0IG91dCA9IG51bGw7XG5cdFx0bGV0IHtkb2N9ID0gdGhpcztcblxuXHRcdGlmICghZG9jICYmIHRoaXMuZ2V0X3ZhbHVlcykge1xuXHRcdFx0ZG9jID0gdGhpcy5nZXRfdmFsdWVzKHRydWUpO1xuXHRcdH1cblxuXHRcdGlmICghZG9jKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bGV0IHBhcmVudCA9IHRoaXMuZnJtID8gdGhpcy5mcm0uZG9jIDogdGhpcy5kb2MgfHwgbnVsbDtcblxuXHRcdGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRvdXQgPSBleHByZXNzaW9uO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGV4cHJlc3Npb24gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdG91dCA9IGV4cHJlc3Npb24oZG9jKTtcblx0XHR9IGVsc2UgaWYgKGV4cHJlc3Npb24uc3Vic3RyKDAsIDUpID09ICdldmFsOicpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdG91dCA9IGZyYXBwZS51dGlscy5ldmFsKGV4cHJlc3Npb24uc3Vic3RyKDUpLCB7IGRvYywgcGFyZW50IH0pO1xuXHRcdFx0XHRpZiAocGFyZW50ICYmIHBhcmVudC5pc3RhYmxlICYmIGV4cHJlc3Npb24uaW5jbHVkZXMoJ2lzX3N1Ym1pdHRhYmxlJykpIHtcblx0XHRcdFx0XHRvdXQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGZyYXBwZS50aHJvdyhfXygnSW52YWxpZCBcImRlcGVuZHNfb25cIiBleHByZXNzaW9uJykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZXhwcmVzc2lvbi5zdWJzdHIoMCwgMykgPT0gJ2ZuOicgJiYgdGhpcy5mcm0pIHtcblx0XHRcdG91dCA9IHRoaXMuZnJtLnNjcmlwdF9tYW5hZ2VyLnRyaWdnZXIoXG5cdFx0XHRcdGV4cHJlc3Npb24uc3Vic3RyKDMpLFxuXHRcdFx0XHR0aGlzLmRvY3R5cGUsXG5cdFx0XHRcdHRoaXMuZG9jbmFtZSxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCB2YWx1ZSA9IGRvY1tleHByZXNzaW9uXTtcblx0XHRcdGlmICgkLmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdG91dCA9IEJvb2xlYW4odmFsdWUubGVuZ3RoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dCA9IEJvb2xlYW4odmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvdXQ7XG5cdH1cbn1cbmludGVyZmFjZSBMYXlvdXQge1xuXG5cdGRvYzogYW55O1xuXHRwYXJlbnQ6IEpRdWVyeTtcblx0ZG9jdHlwZTogc3RyaW5nO1xuXHRkb2N0eXBlX2xheW91dDogdW5rbm93bjtcblx0ZnJtOiBGb3JtO1xuXG5cdHdyYXBwZXI6IEpRdWVyeTtcblx0bWVzc2FnZTogSlF1ZXJ5O1xuXHRwYWdlOiBKUXVlcnk7XG5cdGZpZWxkczogYW55W107XG5cdHRhYl9saW5rX2NvbnRhaW5lcjogSlF1ZXJ5O1xuXHR0YWJzX2NvbnRlbnQ6IEpRdWVyeTtcblx0Y3VycmVudF90YWI/OiBUYWJcblx0c2VjdGlvbj86IFNlY3Rpb24gfCBudWxsXG5cdGNvbHVtbj86IENvbHVtbiB8IG51bGxcblx0YWN0aXZlX3RhYj86IFRhYjtcbn1cbmV4cG9ydCBkZWZhdWx0IExheW91dDtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGluZXMgKi9cbmltcG9ydCB7IFdyaXRhYmxlQ29tcHV0ZWRSZWYgfSBmcm9tICd2dWUnO1xuXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vRm9vdGVyJztcbmltcG9ydCBQYWdlIGZyb20gJy4vUGFnZSc7XG5pbXBvcnQgVG9vbGJhciBmcm9tICcuL1Rvb2xiYXInO1xuaW1wb3J0IFVuZG9NYW5hZ2VyIGZyb20gJy4vdW5kb19tYW5hZ2VyJztcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi9MYXlvdXQvaW5kZXgnO1xuaW1wb3J0IEZvcm1FZGl0b3IgZnJvbSAnLi9Gb3JtRWRpdG9yJztcbmltcG9ydCBsb2FkRG9jIGZyb20gJy4vbG9hZERvYyc7XG5mcmFwcGUucHJvdmlkZSgnZnJhcHBlLnVpLmZvcm0nKTtcbmZyYXBwZS5wcm92aWRlKCdmcmFwcGUubW9kZWwuZG9jaW5mbycpO1xuXG5cbmNsYXNzIEZvcm0ge1xuXHRkb2NuYW1lID0gJyc7XG5cdGRvY3R5cGU6IHN0cmluZztcblx0ZG9jdHlwZV9sYXlvdXRfbmFtZT87XG5cdGluX2Zvcm06IGJvb2xlYW47XG5cblxuXHRoaWRkZW4gPSBmYWxzZTtcblx0cmVmcmVzaF9pZl9zdGFsZV9mb3IgPSAxMjA7XG5cdG9wZW5kb2NzID0ge307XG5cdGN1c3RvbV9idXR0b25zID0ge307XG5cdHNlY3Rpb25zID0gW107XG5cdGdyaWRzID0gW107XG5cdGNzY3JpcHQgPSBuZXcgZnJhcHBlLnVpLmZvcm0uQ29udHJvbGxlcih7IGZybTogdGhpcyB9KTtcblx0ZXZlbnRzID0ge307XG5cdGZldGNoX2RpY3QgPSB7fTtcblx0cGFyZW50OiBIVE1MRWxlbWVudDtcblx0ZG9jdHlwZV9sYXlvdXQ6IHVua25vd247XG5cdHVuZG9fbWFuYWdlciA9IG5ldyBVbmRvTWFuYWdlcih7IGZybTogdGhpcyB9KTtcblx0YmVmb3JlVW5sb2FkTGlzdGVuZXIgPSBldmVudCA9PiB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHQvLyBBIFN0cmluZyBpcyByZXR1cm5lZCBmb3IgY29tcGF0YWJpbGl0eSB3aXRoIG9sZGVyIEJyb3dzZXJzLiBSZXR1cm4gVmFsdWUgaGFzIHRvIGJlIHRydXRoeSB0byB0cmlnZ2VyIFwiTGVhdmUgU2l0ZVwiIERpYWxvZ1xuXHRcdHJldHVybiAoZXZlbnQucmV0dXJuVmFsdWUgPVxuXHRcdFx0J1RoZXJlIGFyZSB1bnNhdmVkIGNoYW5nZXMsIGFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBleGl0PycpO1xuXHR9O1xuXG5cdG1ldGE6IGxvY2Fscy5Eb2NUeXBlO1xuXHRwZXJtOiB7XG5cdFx0cmVhZDogbnVtYmVyO1xuXHRcdHBlcm1sZXZlbDogbnVtYmVyO1xuXHR9W107XG5cdGFjdGlvbl9wZXJtX3R5cGVfbWFwID0ge1xuXHRcdENyZWF0ZTogJ2NyZWF0ZScsXG5cdFx0U2F2ZTogJ3dyaXRlJyxcblx0XHRTdWJtaXQ6ICdzdWJtaXQnLFxuXHRcdFVwZGF0ZTogJ3N1Ym1pdCcsXG5cdFx0Q2FuY2VsOiAnY2FuY2VsJyxcblx0XHRBbWVuZDogJ2FtZW5kJyxcblx0XHREZWxldGU6ICdkZWxldGUnLFxuXHR9O1xuXHRyZWFkb25seSBfX2RlbGV0ZWQ6ICgpID0+IHZvaWQ7XG5cdHJlYWRvbmx5IGN1cnJlbnRUYWI6IFdyaXRhYmxlQ29tcHV0ZWRSZWY8YW55Pjtcblx0Y29uc3RydWN0b3IoXG5cdFx0ZG9jdHlwZTogc3RyaW5nLFxuXHRcdG5hbWU6IHN0cmluZyxcblx0XHRwYXJlbnQ6IEhUTUxFbGVtZW50LFxuXHRcdGRlbGV0ZWQ6ICgpID0+IHZvaWQsXG5cdFx0Y3VycmVudFRhYjogV3JpdGFibGVDb21wdXRlZFJlZjxhbnk+LFxuXHRcdGluX2Zvcm06IGJvb2xlYW4gPSB0cnVlLFxuXHRcdGRvY3R5cGVfbGF5b3V0OiBhbnkgPSBmcmFwcGUucm91dGVyLmRvY3R5cGVfbGF5b3V0IHx8IGRvY3R5cGUsXG5cdFx0ZG9jdHlwZV9sYXlvdXRfbmFtZT86IHN0cmluZyxcblxuXHQpIHtcblx0XHR0aGlzLmN1cnJlbnRUYWIgPSBjdXJyZW50VGFiO1xuXHRcdHRoaXMuX19kZWxldGVkID0gZGVsZXRlZDtcblx0XHR0aGlzLmRvY3R5cGUgPSBkb2N0eXBlO1xuXHRcdHRoaXMuZG9jdHlwZV9sYXlvdXRfbmFtZSA9IGRvY3R5cGVfbGF5b3V0X25hbWU7XG5cdFx0dGhpcy5pbl9mb3JtID0gaW5fZm9ybSA/IHRydWUgOiBmYWxzZTtcblxuXHRcdHRoaXMucGFyZW50ID0gcGFyZW50O1xuXHRcdHRoaXMuZG9jdHlwZV9sYXlvdXQgPSBmcmFwcGUuZ2V0X2RvYygnRG9jVHlwZSBMYXlvdXQnLCBkb2N0eXBlX2xheW91dF9uYW1lKTtcblxuXHRcdHRoaXMubWV0YSA9IGZyYXBwZS5nZXRfZG9jKCdEb2NUeXBlJywgdGhpcy5kb2N0eXBlKSE7XG5cblx0XHRpZiAodGhpcy5tZXRhLmlzdGFibGUpIHtcblx0XHRcdHRoaXMubWV0YS5pbl9kaWFsb2cgPSAxO1xuXHRcdH1cblx0XHR0aGlzLnBlcm0gPSBmcmFwcGUucGVybS5nZXRfcGVybSh0aGlzLmRvY3R5cGUpOyAvLyBmb3IgY3JlYXRlXG5cdFx0dGhpcy5kZWJvdW5jZWRfcmVsb2FkX2RvYyA9IGZyYXBwZS51dGlscy5kZWJvdW5jZSh0aGlzLnJlbG9hZF9kb2MuYmluZCh0aGlzKSwgMTAwMCk7XG5cblx0fVxuXG5cblx0c2V0dXAoKSB7XG5cdFx0dGhpcy5zZXR1cF9kb25lID0gdHJ1ZTtcblx0XHR0aGlzLmZpZWxkcyA9IFtdO1xuXHRcdHRoaXMuZmllbGRzX2RpY3QgPSB7fTtcblx0XHR0aGlzLnN0YXRlX2ZpZWxkbmFtZSA9IGZyYXBwZS53b3JrZmxvdy5nZXRfc3RhdGVfZmllbGRuYW1lKHRoaXMuZG9jdHlwZSk7XG5cblx0XHQvLyB3cmFwcGVyXG5cdFx0dGhpcy53cmFwcGVyID0gdGhpcy5wYXJlbnQ7XG5cdFx0dGhpcy4kd3JhcHBlciA9ICQodGhpcy53cmFwcGVyKTtcblx0XHRjb25zdCBwYWdlID0gbmV3IFBhZ2UodGhpcy53cmFwcGVyLCB0aGlzLm1ldGEuaGlkZV90b29sYmFyKTtcblxuXHRcdC8vIHRoaXMud3JhcHBlci5wYWdlID0gcGFnZTtcblx0XHR0aGlzLnBhZ2UgPSBwYWdlO1xuXHRcdHRoaXMubGF5b3V0X21haW4gPSB0aGlzLnBhcmVudC5xdWVyeVNlbGVjdG9yKCcubGF5b3V0LW1haW4tc2VjdGlvbicpO1xuXG5cdFx0dGhpcy4kd3JhcHBlci5vbignaGlkZScsICgpID0+IHtcblx0XHRcdHRoaXMuc2NyaXB0X21hbmFnZXIudHJpZ2dlcignb25faGlkZScpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIodGhpcywgcGFnZSk7XG5cblx0XHQvLyBuYXZpZ2F0ZSByZWNvcmRzIGtleWJvYXJkIHNob3J0Y3V0c1xuXHRcdHRoaXMuYWRkX2Zvcm1fa2V5Ym9hcmRfc2hvcnRjdXRzKCk7XG5cblx0XHQvLyAyIGNvbHVtbiBsYXlvdXRcblx0XHR0aGlzLnNldHVwX3N0ZF9sYXlvdXQoKTtcblxuXHRcdC8vIGNsaWVudCBzY3JpcHQgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgXCJzZXR1cFwiIC0gdGhlcmUgYXJlIG5vIGZpZWxkc19kaWN0IGF0dGFjaGVkIHRvIHRoZSBmcm0gb3RoZXJ3aXNlXG5cdFx0dGhpcy5zY3JpcHRfbWFuYWdlciA9IG5ldyBmcmFwcGUudWkuZm9ybS5TY3JpcHRNYW5hZ2VyKHtcblx0XHRcdGZybTogdGhpcyxcblx0XHR9KTtcblx0XHR0aGlzLnNjcmlwdF9tYW5hZ2VyLnNldHVwKCk7XG5cdFx0dGhpcy53YXRjaF9tb2RlbF91cGRhdGVzKCk7XG5cblx0XHRjb25zdCBbbWFpblBhcmVudF0gPSBwYWdlLm1haW4ucGFyZW50KCk7XG5cdFx0aWYgKG1haW5QYXJlbnQpIHtcblx0XHRcdGNvbnN0IGZvb3RlciA9IFsuLi5tYWluUGFyZW50LmNoaWxkcmVuXS5maW5kKHYgPT4gdi5jbGFzc0xpc3QuY29udGFpbnMoJ2xheW91dC1mb290ZXInKSk7XG5cdFx0XHRpZiAoZm9vdGVyKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuXHRcdFx0XHRmb3IgKGxldCBuZXh0OyBuZXh0ID0gZm9vdGVyLm5leHRTaWJsaW5nOykgeyBuZXh0Py5yZW1vdmUoKTsgfVxuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIXRoaXMubWV0YS5oaWRlX3Rvb2xiYXIgJiYgZnJhcHBlLmJvb3QuZGVza19zZXR0aW5ncy50aW1lbGluZSkge1xuXHRcdFx0Ly8gdGhpcy5mb290ZXJfdGFiID0gbmV3IGZyYXBwZS51aS5mb3JtLlRhYih0aGlzLmxheW91dCwge1xuXHRcdFx0Ly8gXHRsYWJlbDogX18oXCJBY3Rpdml0eVwiKSxcblx0XHRcdC8vIFx0ZmllbGRuYW1lOiAndGltZWxpbmUnXG5cdFx0XHQvLyB9KTtcblxuXHRcdFx0Ly8gZm9vdGVyIFx1NEUyRFx1NTMwNVx1NjJFQ1x1OEJDNFx1OEJCQVx1OEY5M1x1NTE2NVx1Njg0Nlx1NTQ4Q1x1NjVGNlx1OTVGNFx1N0VCRlxuXHRcdFx0dGhpcy5mb290ZXIgPSBuZXcgRm9vdGVyKHtcblx0XHRcdFx0ZnJtOiB0aGlzLFxuXHRcdFx0XHRwYXJlbnQ6ICQoJzxkaXY+JykuYXBwZW5kVG8ocGFnZS5tYWluLnBhcmVudCgpKSxcblx0XHRcdH0pO1xuXHRcdFx0JCgnYm9keScpLmF0dHIoJ2RhdGEtc2lkZWJhcicsIDEpO1xuXHRcdH1cblx0XHR0aGlzLnNldHVwX2ZpbGVfZHJvcCgpO1xuXHRcdHRoaXMuc2V0dXBfZG9jdHlwZV9hY3Rpb25zKCk7XG5cdFx0dGhpcy5zZXR1cF9ub3RpZnlfb25fcmVuYW1lKCk7XG5cblx0XHR0aGlzLnNldHVwX2RvbmUgPSB0cnVlO1xuXHR9XG5cblx0YWRkX2Zvcm1fa2V5Ym9hcmRfc2hvcnRjdXRzKCkge1xuXHRcdC8vIE5hdmlnYXRlIHRvIG5leHQgcmVjb3JkXG5cdFx0ZnJhcHBlLnVpLmtleXMuYWRkX3Nob3J0Y3V0KHtcblx0XHRcdHNob3J0Y3V0OiAnc2hpZnQrY3RybCs+Jyxcblx0XHRcdGFjdGlvbjogKCkgPT4gdGhpcy5uYXZpZ2F0ZV9yZWNvcmRzKDApLFxuXHRcdFx0cGFnZTogdGhpcy5wYWdlLFxuXHRcdFx0ZGVzY3JpcHRpb246IF9fKCdHbyB0byBuZXh0IHJlY29yZCcpLFxuXHRcdFx0aWdub3JlX2lucHV0czogdHJ1ZSxcblx0XHRcdGNvbmRpdGlvbjogKCkgPT4gIXRoaXMuaXNfbmV3KCksXG5cdFx0fSk7XG5cblx0XHQvLyBOYXZpZ2F0ZSB0byBwcmV2aW91cyByZWNvcmRcblx0XHRmcmFwcGUudWkua2V5cy5hZGRfc2hvcnRjdXQoe1xuXHRcdFx0c2hvcnRjdXQ6ICdzaGlmdCtjdHJsKzwnLFxuXHRcdFx0YWN0aW9uOiAoKSA9PiB0aGlzLm5hdmlnYXRlX3JlY29yZHMoMSksXG5cdFx0XHRwYWdlOiB0aGlzLnBhZ2UsXG5cdFx0XHRkZXNjcmlwdGlvbjogX18oJ0dvIHRvIHByZXZpb3VzIHJlY29yZCcpLFxuXHRcdFx0aWdub3JlX2lucHV0czogdHJ1ZSxcblx0XHRcdGNvbmRpdGlvbjogKCkgPT4gIXRoaXMuaXNfbmV3KCksXG5cdFx0fSk7XG5cblx0XHQvLyBVbmRvIGFuZCByZWRvXG5cdFx0ZnJhcHBlLnVpLmtleXMuYWRkX3Nob3J0Y3V0KHtcblx0XHRcdHNob3J0Y3V0OiAnY3RybCt6Jyxcblx0XHRcdGFjdGlvbjogKCkgPT4gdGhpcy51bmRvX21hbmFnZXIudW5kbygpLFxuXHRcdFx0cGFnZTogdGhpcy5wYWdlLFxuXHRcdFx0ZGVzY3JpcHRpb246IF9fKCdVbmRvIGxhc3QgYWN0aW9uJyksXG5cdFx0fSk7XG5cdFx0ZnJhcHBlLnVpLmtleXMuYWRkX3Nob3J0Y3V0KHtcblx0XHRcdHNob3J0Y3V0OiAnc2hpZnQrY3RybCt6Jyxcblx0XHRcdGFjdGlvbjogKCkgPT4gdGhpcy51bmRvX21hbmFnZXIucmVkbygpLFxuXHRcdFx0cGFnZTogdGhpcy5wYWdlLFxuXHRcdFx0ZGVzY3JpcHRpb246IF9fKCdSZWRvIGxhc3QgYWN0aW9uJyksXG5cdFx0fSk7XG5cdFx0ZnJhcHBlLnVpLmtleXMuYWRkX3Nob3J0Y3V0KHtcblx0XHRcdHNob3J0Y3V0OiAnY3RybCt5Jyxcblx0XHRcdGFjdGlvbjogKCkgPT4gdGhpcy51bmRvX21hbmFnZXIucmVkbygpLFxuXHRcdFx0cGFnZTogdGhpcy5wYWdlLFxuXHRcdFx0ZGVzY3JpcHRpb246IF9fKCdSZWRvIGxhc3QgYWN0aW9uJyksXG5cdFx0fSk7XG5cblx0XHRsZXQgZ3JpZF9zaG9ydGN1dF9rZXlzID0gW1xuXHRcdFx0e1xuXHRcdFx0XHRzaG9ydGN1dDogJ1VwIEFycm93Jyxcblx0XHRcdFx0ZGVzY3JpcHRpb246IF9fKCdNb3ZlIGN1cnNvciB0byBhYm92ZSByb3cnKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHNob3J0Y3V0OiAnRG93biBBcnJvdycsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiBfXygnTW92ZSBjdXJzb3IgdG8gYmVsb3cgcm93JyksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzaG9ydGN1dDogJ3RhYicsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiBfXygnTW92ZSBjdXJzb3IgdG8gbmV4dCBjb2x1bW4nKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHNob3J0Y3V0OiAnc2hpZnQrdGFiJyxcblx0XHRcdFx0ZGVzY3JpcHRpb246IF9fKCdNb3ZlIGN1cnNvciB0byBwcmV2aW91cyBjb2x1bW4nKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHNob3J0Y3V0OiAnQ3RybCt1cCcsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiBfXygnQWRkIGEgcm93IGFib3ZlIHRoZSBjdXJyZW50IHJvdycpLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c2hvcnRjdXQ6ICdDdHJsK2Rvd24nLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogX18oJ0FkZCBhIHJvdyBiZWxvdyB0aGUgY3VycmVudCByb3cnKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHNob3J0Y3V0OiAnQ3RybCtzaGlmdCt1cCcsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiBfXygnQWRkIGEgcm93IGF0IHRoZSB0b3AnKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHNob3J0Y3V0OiAnQ3RybCtzaGlmdCtkb3duJyxcblx0XHRcdFx0ZGVzY3JpcHRpb246IF9fKCdBZGQgYSByb3cgYXQgdGhlIGJvdHRvbScpLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c2hvcnRjdXQ6ICdzaGlmdCthbHQrZG93bicsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiBfXygnRHVwbGljYXRlIGN1cnJlbnQgcm93JyksXG5cdFx0XHR9LFxuXHRcdF07XG5cblx0XHRmb3IgKGNvbnN0IHJvdyBvZiBncmlkX3Nob3J0Y3V0X2tleXMpIHtcblx0XHRcdGZyYXBwZS51aS5rZXlzLmFkZF9zaG9ydGN1dCh7XG5cdFx0XHRcdHNob3J0Y3V0OiByb3cuc2hvcnRjdXQsXG5cdFx0XHRcdHBhZ2U6IHRoaXMucGFnZSxcblx0XHRcdFx0ZGVzY3JpcHRpb246IF9fKHJvdy5kZXNjcmlwdGlvbiksXG5cdFx0XHRcdGlnbm9yZV9pbnB1dHM6IHRydWUsXG5cdFx0XHRcdGNvbmRpdGlvbjogKCkgPT4gIXRoaXMuaXNfbmV3KCksXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRzZXR1cF9zdGRfbGF5b3V0KCkge1xuXHRcdGNvbnN0IG1haW4gPSB0aGlzLnBhcmVudC5xdWVyeVNlbGVjdG9yKCcubGF5b3V0LW1haW4tc2VjdGlvbicpIGFzIEhUTUxFbGVtZW50O1xuXHRcdHRoaXMuZm9ybV93cmFwcGVyID0gJChtYWluLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpIGFzIEhUTUxFbGVtZW50KTtcblx0XHRjb25zdCBib2R5ID0gbWFpbi5xdWVyeVNlbGVjdG9yKCcuc3RkLWZvcm0tbGF5b3V0JykgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0dGhpcy5ib2R5ID0gJChib2R5KTtcblxuXHRcdC8vIG9ubHkgdHJheVxuXHRcdHRoaXMubWV0YS5zZWN0aW9uX3N0eWxlID0gJ1NpbXBsZSc7IC8vIGFsd2F5cyBzaW1wbGUhXG5cblx0XHQvLyBsYXlvdXRcblx0XHR0aGlzLmxheW91dCA9IG5ldyBMYXlvdXQoXG5cdFx0XHRib2R5LFxuXHRcdFx0dGhpcy5kb2N0eXBlLFxuXHRcdFx0dGhpcy5kb2N0eXBlX2xheW91dCxcblx0XHRcdHRoaXMsXG5cdFx0XHR0aGlzLmN1cnJlbnRUYWIsXG5cdFx0KTtcblxuXG5cdFx0dGhpcy5maWVsZHNfZGljdCA9IHRoaXMubGF5b3V0LmZpZWxkc19kaWN0O1xuXHRcdHRoaXMuZmllbGRzID0gdGhpcy5sYXlvdXQuZmllbGRzX2xpc3Q7XG5cblx0XHRsZXQgZGFzaGJvYXJkX3BhcmVudCA9ICQoJzxkaXYgY2xhc3M9XCJmb3JtLWRhc2hib2FyZFwiPicpO1xuXHRcdGxldCBkYXNoYm9hcmRfYWRkZWQgPSBmYWxzZTtcblxuXHRcdGlmICh0aGlzLmxheW91dC50YWJzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5sYXlvdXQudGFicy5ldmVyeSh0YWIgPT4ge1xuXHRcdFx0XHRpZiAodGFiLmRmLnNob3dfZGFzaGJvYXJkKSB7XG5cdFx0XHRcdFx0dGFiLndyYXBwZXIucHJlcGVuZChkYXNoYm9hcmRfcGFyZW50KTtcblx0XHRcdFx0XHRkYXNoYm9hcmRfYWRkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdFx0aWYgKCFkYXNoYm9hcmRfYWRkZWQpIHtcblx0XHRcdFx0dGhpcy5sYXlvdXQudGFic1swXS53cmFwcGVyLnByZXBlbmQoZGFzaGJvYXJkX3BhcmVudCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubGF5b3V0LndyYXBwZXIuZmluZCgnLmZvcm0tcGFnZScpLnByZXBlbmQoZGFzaGJvYXJkX3BhcmVudCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kYXNoYm9hcmQgPSBuZXcgZnJhcHBlLnVpLmZvcm0uRGFzaGJvYXJkKGRhc2hib2FyZF9wYXJlbnQsIHRoaXMpO1xuXG5cdFx0dGhpcy50b3VyID0gbmV3IGZyYXBwZS51aS5mb3JtLkZvcm1Ub3VyKHtcblx0XHRcdGZybTogdGhpcyxcblx0XHR9KTtcblxuXHRcdC8vIHdvcmtmbG93IHN0YXRlXG5cdFx0dGhpcy5zdGF0ZXMgPSBuZXcgZnJhcHBlLnVpLmZvcm0uU3RhdGVzKHtcblx0XHRcdGZybTogdGhpcyxcblx0XHR9KTtcblx0fVxuXG5cdHdhdGNoX21vZGVsX3VwZGF0ZXMoKSB7XG5cdFx0Ly8gd2F0Y2ggbW9kZWwgdXBkYXRlc1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cblx0XHQvLyBvbiBtYWluIGRvY1xuXHRcdGZyYXBwZS5tb2RlbC5vbihcblx0XHRcdG1lLmRvY3R5cGUsXG5cdFx0XHQnKicsXG5cdFx0XHRmdW5jdGlvbiAoZmllbGRuYW1lLCB2YWx1ZSwgZG9jLCBza2lwX2RpcnR5X3RyaWdnZXIgPSBmYWxzZSkge1xuXHRcdFx0XHQvLyBzZXQgaW5wdXRcblx0XHRcdFx0aWYgKGRvYy5uYW1lID09IG1lLmRvY25hbWUpIHtcblx0XHRcdFx0XHRpZiAoIXNraXBfZGlydHlfdHJpZ2dlcikge1xuXHRcdFx0XHRcdFx0bWUuZGlydHkoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsZXQgZmllbGQgPSBtZS5maWVsZHNfZGljdFtmaWVsZG5hbWVdO1xuXHRcdFx0XHRcdGZpZWxkICYmIGZpZWxkLnJlZnJlc2goZmllbGRuYW1lKTtcblxuXHRcdFx0XHRcdC8vIFZhbGlkYXRlIHZhbHVlIGZvciBsaW5rIGZpZWxkIGV4cGxpY2l0bHlcblx0XHRcdFx0XHRmaWVsZCAmJlxuXHRcdFx0XHRcdFx0WydMaW5rJywgJ0R5bmFtaWMgTGluayddLmluY2x1ZGVzKGZpZWxkLmRmLmZpZWxkdHlwZSkgJiZcblx0XHRcdFx0XHRcdGZpZWxkLnZhbGlkYXRlICYmXG5cdFx0XHRcdFx0XHRmaWVsZC52YWxpZGF0ZSh2YWx1ZSk7XG5cblx0XHRcdFx0XHRtZS5sYXlvdXQucmVmcmVzaF9kZXBlbmRlbmN5KCk7XG5cdFx0XHRcdFx0bWUubGF5b3V0LnJlZnJlc2hfc2VjdGlvbnMoKTtcblx0XHRcdFx0XHRyZXR1cm4gbWUuc2NyaXB0X21hbmFnZXIudHJpZ2dlcihmaWVsZG5hbWUsIGRvYy5kb2N0eXBlLCBkb2MubmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0KTtcblxuXHRcdC8vIG9uIHRhYmxlIGZpZWxkc1xuXHRcdGxldCB0YWJsZV9maWVsZHMgPSBmcmFwcGUuZ2V0X2NoaWxkcmVuKCdEb2NUeXBlJywgbWUuZG9jdHlwZSwgJ2ZpZWxkcycsIHtcblx0XHRcdGZpZWxkdHlwZTogWydpbicsIGZyYXBwZS5tb2RlbC50YWJsZV9maWVsZHNdLFxuXHRcdH0pO1xuXG5cdFx0Ly8gdXNpbmcgJC5lYWNoIHRvIHByZXNlcnZlIGRmIHZpYSBjbG9zdXJlXG5cdFx0JC5lYWNoKHRhYmxlX2ZpZWxkcywgZnVuY3Rpb24gKGksIGRmKSB7XG5cdFx0XHRmcmFwcGUubW9kZWwub24oZGYub3B0aW9ucywgJyonLCBmdW5jdGlvbiAoZmllbGRuYW1lLCB2YWx1ZSwgZG9jKSB7XG5cdFx0XHRcdGlmIChkb2MucGFyZW50ID09IG1lLmRvY25hbWUgJiYgZG9jLnBhcmVudGZpZWxkID09PSBkZi5maWVsZG5hbWUpIHtcblx0XHRcdFx0XHRtZS5kaXJ0eSgpO1xuXHRcdFx0XHRcdG1lLmZpZWxkc19kaWN0W2RmLmZpZWxkbmFtZV0uZ3JpZC5zZXRfdmFsdWUoZmllbGRuYW1lLCB2YWx1ZSwgZG9jKTtcblx0XHRcdFx0XHRyZXR1cm4gbWUuc2NyaXB0X21hbmFnZXIudHJpZ2dlcihmaWVsZG5hbWUsIGRvYy5kb2N0eXBlLCBkb2MubmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0c2V0dXBfbm90aWZ5X29uX3JlbmFtZSgpIHtcblx0XHQkKGRvY3VtZW50KS5vbigncmVuYW1lJywgKGV2LCBkdCwgb2xkX25hbWUsIG5ld19uYW1lKSA9PiB7XG5cdFx0XHRpZiAoZHQgPT0gdGhpcy5kb2N0eXBlKSB7IHRoaXMucmVuYW1lX25vdGlmeShkdCwgb2xkX25hbWUsIG5ld19uYW1lKTsgfVxuXHRcdH0pO1xuXHR9XG5cblx0c2V0dXBfZmlsZV9kcm9wKCkge1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0dGhpcy4kd3JhcHBlci5vbignZHJhZ2VudGVyIGRyYWdvdmVyJywgZmFsc2UpLm9uKCdkcm9wJywgZnVuY3Rpb24gKGUpIHtcblx0XHRcdGxldCB7IGRhdGFUcmFuc2ZlciB9ID0gZS5vcmlnaW5hbEV2ZW50O1xuXHRcdFx0aWYgKCEoZGF0YVRyYW5zZmVyICYmIGRhdGFUcmFuc2Zlci5maWxlcyAmJiBkYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoID4gMCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRpZiAobWUuZG9jLl9faXNsb2NhbCkge1xuXHRcdFx0XHRmcmFwcGUubXNncHJpbnQoX18oJ1BsZWFzZSBzYXZlIGJlZm9yZSBhdHRhY2hpbmcuJykpO1xuXHRcdFx0XHR0aHJvdyAnYXR0YWNoIGVycm9yJztcblx0XHRcdH1cblxuXHRcdFx0bmV3IGZyYXBwZS51aS5GaWxlVXBsb2FkZXIoe1xuXHRcdFx0XHRkb2N0eXBlOiBtZS5kb2N0eXBlLFxuXHRcdFx0XHRkb2NuYW1lOiBtZS5kb2NuYW1lLFxuXHRcdFx0XHRmcm06IG1lLFxuXHRcdFx0XHRmaWxlczogZGF0YVRyYW5zZmVyLmZpbGVzLFxuXHRcdFx0XHRmb2xkZXI6ICdIb21lL0F0dGFjaG1lbnRzJyxcblx0XHRcdFx0b25fc3VjY2VzcyhmaWxlX2RvYykge1xuXHRcdFx0XHRcdG1lLmF0dGFjaG1lbnRzLmF0dGFjaG1lbnRfdXBsb2FkZWQoZmlsZV9kb2MpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRzZXR1cF9pbWFnZV9hdXRvY29tcGxldGlvbnNfaW5fbWFya2Rvd24oKSB7XG5cdFx0dGhpcy5maWVsZHMubWFwKGZpZWxkID0+IHtcblx0XHRcdGlmIChmaWVsZC5kZi5maWVsZHR5cGUgPT09ICdNYXJrZG93biBFZGl0b3InKSB7XG5cdFx0XHRcdHRoaXMuc2V0X2RmX3Byb3BlcnR5KGZpZWxkLmRmLmZpZWxkbmFtZSwgJ2F1dG9jb21wbGV0aW9ucycsICgpID0+IHtcblx0XHRcdFx0XHRsZXQgYXR0YWNobWVudHMgPSB0aGlzLmF0dGFjaG1lbnRzLmdldF9hdHRhY2htZW50cygpO1xuXHRcdFx0XHRcdHJldHVybiBhdHRhY2htZW50c1xuXHRcdFx0XHRcdFx0LmZpbHRlcihmaWxlID0+IGZyYXBwZS51dGlscy5pc19pbWFnZV9maWxlKGZpbGUuZmlsZV91cmwpKVxuXHRcdFx0XHRcdFx0Lm1hcChmaWxlID0+ICh7XG5cdFx0XHRcdFx0XHRcdGNhcHRpb246IGBpbWFnZTogJHtmaWxlLmZpbGVfbmFtZX1gLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogYCFbXSgke2ZpbGUuZmlsZV91cmx9KWAsXG5cdFx0XHRcdFx0XHRcdG1ldGE6ICdpbWFnZScsXG5cdFx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly8gUkVGUkVTSFxuXHRyZWZyZXNoKGRvY25hbWU6IHN0cmluZykge1xuXHRcdGxldCBzd2l0Y2hlZCA9IGRvY25hbWUgPyB0cnVlIDogZmFsc2U7XG5cblx0XHRyZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLmJlZm9yZVVubG9hZExpc3RlbmVyLCB7IGNhcHR1cmU6IHRydWUgfSk7XG5cblx0XHRpZiAoZG9jbmFtZSkge1xuXHRcdFx0dGhpcy5zd2l0Y2hfZG9jKGRvY25hbWUpO1xuXHRcdH1cblxuXHRcdGN1cl9mcm0gPSB0aGlzO1xuXG5cdFx0dGhpcy51bmRvX21hbmFnZXIuZXJhc2VfaGlzdG9yeSgpO1xuXG5cdFx0aWYgKCF0aGlzLmRvY25hbWUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gZG9jdW1lbnQgdG8gc2hvd1xuXHRcdHRoaXMuc2F2ZV9kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdC8vIHNldCB0aGUgZG9jXG5cdFx0dGhpcy5kb2MgPSBmcmFwcGUuZ2V0X2RvYyh0aGlzLmRvY3R5cGUsIHRoaXMuZG9jbmFtZSkgYXMgYW55O1xuXG5cdFx0Ly8gY2hlY2sgcGVybWlzc2lvbnNcblx0XHR0aGlzLmZldGNoX3Blcm1pc3Npb25zKCk7XG5cdFx0aWYgKCF0aGlzLmhhc19yZWFkX3Blcm1pc3Npb24oKSkge1xuXHRcdFx0ZnJhcHBlLnNob3dfbm90X3Blcm1pdHRlZChgJHtfXyh0aGlzLmRvY3R5cGUpfSAke19fKGNzdHIodGhpcy5kb2NuYW1lKSl9YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGdyaWRzIHdpdGggbmV3IHBlcm1pc3Npb25zXG5cdFx0Zm9yIChjb25zdCB0YWJsZSBvZiB0aGlzLmdyaWRzKSB7XG5cdFx0XHR0YWJsZS5ncmlkLnJlZnJlc2goKTtcblx0XHR9XG5cblx0XHQvLyByZWFkIG9ubHkgKHdvcmtmbG93KVxuXHRcdHRoaXMucmVhZF9vbmx5ID0gZnJhcHBlLndvcmtmbG93LmlzX3JlYWRfb25seSh0aGlzLmRvY3R5cGUsIHRoaXMuZG9jbmFtZSk7XG5cdFx0aWYgKHRoaXMucmVhZF9vbmx5KSB7XG5cdFx0XHR0aGlzLnNldF9yZWFkX29ubHkodHJ1ZSk7XG5cdFx0XHRmcmFwcGUuc2hvd19hbGVydChfXygnVGhpcyBmb3JtIGlzIG5vdCBlZGl0YWJsZSBkdWUgdG8gYSBXb3JrZmxvdy4nKSk7XG5cdFx0fVxuXG5cdFx0Ly8gY2hlY2sgaWYgZG9jdHlwZSBpcyBhbHJlYWR5IG9wZW5cblx0XHRpZiAoIXRoaXMub3BlbmRvY3NbdGhpcy5kb2NuYW1lXSkge1xuXHRcdFx0dGhpcy5jaGVja19kb2N0eXBlX2NvbmZsaWN0KHRoaXMuZG9jbmFtZSk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmNoZWNrX3JlbG9hZCgpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIGRvIHNldHVwXG5cdFx0aWYgKCF0aGlzLnNldHVwX2RvbmUpIHtcblx0XHRcdHRoaXMuc2V0dXAoKTtcblx0XHR9XG5cblx0XHQvLyBsb2FkIHRoZSByZWNvcmQgZm9yIHRoZSBmaXJzdCB0aW1lLCBpZiBub3QgbG9hZGVkIChjYWxsICdvbmxvYWQnKVxuXHRcdHRoaXMudHJpZ2dlcl9vbmxvYWQoc3dpdGNoZWQpO1xuXG5cdFx0Ly8gaWYgcHJpbnQgZm9ybWF0IGlzIHNob3duLCByZWZyZXNoIHRoZSBmb3JtYXRcblx0XHQvLyBpZih0aGlzLnByaW50X3ByZXZpZXcud3JhcHBlci5pcyhcIjp2aXNpYmxlXCIpKSB7XG5cdFx0Ly8gXHR0aGlzLnByaW50X3ByZXZpZXcucHJldmlldygpO1xuXHRcdC8vIH1cblxuXHRcdGlmIChzd2l0Y2hlZCkge1xuXHRcdFx0aWYgKHRoaXMuc2hvd19wcmludF9maXJzdCAmJiB0aGlzLmRvYy5kb2NzdGF0dXMgPT09IDEpIHtcblx0XHRcdFx0Ly8gc2hvdyBwcmludCB2aWV3XG5cdFx0XHRcdHRoaXMucHJpbnRfZG9jKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gc2V0IHN0YXR1cyBjbGFzc2VzXG5cdFx0dGhpcy4kd3JhcHBlclxuXHRcdFx0LnJlbW92ZUNsYXNzKCd2YWxpZGF0ZWQtZm9ybScpXG5cdFx0XHQudG9nZ2xlQ2xhc3MoJ2VkaXRhYmxlLWZvcm0nLCB0aGlzLmRvYy5kb2NzdGF0dXMgPT09IDApXG5cdFx0XHQudG9nZ2xlQ2xhc3MoJ3N1Ym1pdHRlZC1mb3JtJywgdGhpcy5kb2MuZG9jc3RhdHVzID09PSAxKVxuXHRcdFx0LnRvZ2dsZUNsYXNzKCdjYW5jZWxsZWQtZm9ybScsIHRoaXMuZG9jLmRvY3N0YXR1cyA9PT0gMik7XG5cblx0XHR0aGlzLnNob3dfY29uZmxpY3RfbWVzc2FnZSgpO1xuXG5cdFx0aWYgKGZyYXBwZS5ib290LnJlYWRfb25seSkge1xuXHRcdFx0dGhpcy5kaXNhYmxlX2Zvcm0oKTtcblx0XHR9XG5cdH1cblxuXG5cdC8vIHNldHMgdXAgdGhlIHJlZnJlc2ggZXZlbnQgZm9yIGN1c3RvbSBidXR0b25zXG5cdC8vIGFkZGVkIHZpYSBjb25maWd1cmF0aW9uXG5cdHNldHVwX2RvY3R5cGVfYWN0aW9ucygpIHtcblx0XHRpZiAodGhpcy5tZXRhLmFjdGlvbnMpIHtcblx0XHRcdGZvciAobGV0IGFjdGlvbiBvZiB0aGlzLm1ldGEuYWN0aW9ucykge1xuXHRcdFx0XHRmcmFwcGUudWkuZm9ybS5vbih0aGlzLmRvY3R5cGUsICdyZWZyZXNoJywgKCkgPT4ge1xuXHRcdFx0XHRcdGlmICghdGhpcy5pc19uZXcoKSkge1xuXHRcdFx0XHRcdFx0aWYgKCFhY3Rpb24uaGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuYWRkX2N1c3RvbV9idXR0b24oXG5cdFx0XHRcdFx0XHRcdFx0YWN0aW9uLmxhYmVsLFxuXHRcdFx0XHRcdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuZXhlY3V0ZV9hY3Rpb24oYWN0aW9uKTtcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdGFjdGlvbi5ncm91cCxcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGV4ZWN1dGVfYWN0aW9uKGFjdGlvbikge1xuXHRcdGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuXHRcdFx0Ly8gY2FsbGVkIGJ5IGxhYmVsIC0gbWF5YmUgdmlhIGN1c3RvbSBzY3JpcHRcblx0XHRcdC8vIGZybS5leGVjdXRlX2FjdGlvbignQWN0aW9uJylcblx0XHRcdGZvciAobGV0IF9hY3Rpb24gb2YgdGhpcy5tZXRhLmFjdGlvbnMpIHtcblx0XHRcdFx0aWYgKF9hY3Rpb24ubGFiZWwgPT09IGFjdGlvbikge1xuXHRcdFx0XHRcdGFjdGlvbiA9IF9hY3Rpb247XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGZyYXBwZS50aHJvdyhgQWN0aW9uICR7YWN0aW9ufSBub3QgZm91bmRgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGFjdGlvbi5hY3Rpb25fdHlwZSA9PT0gJ1NlcnZlciBBY3Rpb24nKSB7XG5cdFx0XHRyZXR1cm4gZnJhcHBlLnhjYWxsKGFjdGlvbi5hY3Rpb24sIHsgZG9jOiB0aGlzLmRvYyB9KS50aGVuKGRvYyA9PiB7XG5cdFx0XHRcdGlmIChkb2MuZG9jdHlwZSkge1xuXHRcdFx0XHRcdC8vIGRvY3VtZW50IGlzIHJldHVybmVkIGJ5IHRoZSBtZXRob2QsXG5cdFx0XHRcdFx0Ly8gYXBwbHkgdGhlIGNoYW5nZXMgbG9jYWxseSBhbmQgcmVmcmVzaFxuXHRcdFx0XHRcdGZyYXBwZS5tb2RlbC5zeW5jKGRvYyk7XG5cdFx0XHRcdFx0dGhpcy5yZWZyZXNoKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBmZWVkYmFja1xuXHRcdFx0XHRmcmFwcGUubXNncHJpbnQoe1xuXHRcdFx0XHRcdG1lc3NhZ2U6IF9fKCd7fSBDb21wbGV0ZScsIFthY3Rpb24ubGFiZWxdKSxcblx0XHRcdFx0XHRhbGVydDogdHJ1ZSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKGFjdGlvbi5hY3Rpb25fdHlwZSA9PT0gJ1JvdXRlJykge1xuXHRcdFx0cmV0dXJuIGZyYXBwZS5zZXRfcm91dGUoYWN0aW9uLmFjdGlvbik7XG5cdFx0fVxuXHR9XG5cblx0c3dpdGNoX2RvYyhkb2NuYW1lOiBzdHJpbmcpIHtcblx0XHQvLyByZXNldCB2aXNpYmxlIGNvbHVtbnMsIHNpbmNlIGNvbHVtbiBoZWFkaW5ncyBjYW4gY2hhbmdlIGluIGRpZmZlcmVudCBkb2NzXG5cdFx0Zm9yIChjb25zdCBncmlkX29iaiBvZiB0aGlzLmdyaWRzKSB7XG5cdFx0XHRncmlkX29iai5ncmlkLnZpc2libGVfY29sdW1ucyA9IG51bGw7XG5cdFx0XHQvLyByZXNldCBwYWdlIG51bWJlciB0byAxXG5cdFx0XHRncmlkX29iai5ncmlkLmdyaWRfcGFnaW5hdGlvbi5nb190b19wYWdlKDEsIHRydWUpO1xuXHRcdH1cblx0XHRmcmFwcGUudWkuZm9ybS5jbG9zZV9ncmlkX2Zvcm0oKTtcblx0XHR0aGlzLnZpZXdlcnMgJiYgdGhpcy52aWV3ZXJzLnBhcmVudC5lbXB0eSgpO1xuXHRcdHRoaXMuZG9jbmFtZSA9IGRvY25hbWU7XG5cdFx0dGhpcy5zZXR1cF9kb2NpbmZvX2NoYW5nZV9saXN0ZW5lcigpO1xuXHR9XG5cblx0Y2hlY2tfcmVsb2FkKCkge1xuXHRcdGlmIChcblx0XHRcdHRoaXMuZG9jICYmXG5cdFx0XHQhdGhpcy5kb2MuX191bnNhdmVkICYmXG5cdFx0XHR0aGlzLmRvYy5fX2xhc3Rfc3luY19vbiAmJlxuXHRcdFx0bmV3IERhdGUoKSAtIHRoaXMuZG9jLl9fbGFzdF9zeW5jX29uID4gdGhpcy5yZWZyZXNoX2lmX3N0YWxlX2ZvciAqIDEwMDBcblx0XHQpIHtcblx0XHRcdHRoaXMuZGVib3VuY2VkX3JlbG9hZF9kb2MoKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdHRyaWdnZXJfb25sb2FkKHN3aXRjaGVkOiBib29sZWFuKSB7XG5cdFx0dGhpcy5jc2NyaXB0LmlzX29ubG9hZCA9IGZhbHNlO1xuXHRcdGlmICh0aGlzLm9wZW5kb2NzW3RoaXMuZG9jbmFtZV0pIHtcblx0XHRcdHRoaXMucmVuZGVyX2Zvcm0oc3dpdGNoZWQpO1xuXHRcdFx0aWYgKHRoaXMuZG9jLmxvY2FsbmFtZSkge1xuXHRcdFx0XHQvLyB0cmlnZ2VyIGZvcm0tcmVuYW1lIGFuZCByZW1vdmUgLmxvY2FsbmFtZVxuXHRcdFx0XHRkZWxldGUgdGhpcy5kb2MubG9jYWxuYW1lO1xuXHRcdFx0XHQkKGRvY3VtZW50KS50cmlnZ2VyKCdmb3JtLXJlbmFtZScsIFt0aGlzXSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0XHR0aGlzLmNzY3JpcHQuaXNfb25sb2FkID0gdHJ1ZTtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZV9uZXdfZG9jKCk7XG5cdFx0XHQkKGRvY3VtZW50KS50cmlnZ2VyKCdmb3JtLWxvYWQnLCBbdGhpc10pO1xuXHRcdFx0JCh0aGlzLnBhZ2Uud3JhcHBlcikub24oJ2hpZGUnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCQoZG9jdW1lbnQpLnRyaWdnZXIoJ2Zvcm0tdW5sb2FkJywgW21lXSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplX25ld19kb2MoKSB7XG5cdFx0bGV0IG1lID0gdGhpcztcblxuXHRcdC8vIGhpZGUgYW55IG9wZW4gZ3JpZFxuXHRcdHRoaXMuc2NyaXB0X21hbmFnZXIudHJpZ2dlcignYmVmb3JlX2xvYWQnLCB0aGlzLmRvY3R5cGUsIHRoaXMuZG9jbmFtZSkudGhlbigoKSA9PiB7XG5cdFx0XHRtZS5zY3JpcHRfbWFuYWdlci50cmlnZ2VyKCdvbmxvYWQnKTtcblx0XHRcdG1lLm9wZW5kb2NzW21lLmRvY25hbWVdID0gdHJ1ZTtcblx0XHRcdG1lLnJlbmRlcl9mb3JtKCk7XG5cblx0XHRcdGZyYXBwZS5hZnRlcl9hamF4KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0bWUudHJpZ2dlcl9saW5rX2ZpZWxkcygpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGZyYXBwZS5icmVhZGNydW1icy5hZGQobWUubWV0YS5tb2R1bGUsIG1lLmRvY3R5cGUpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gdXBkYXRlIHNlZW5cblx0XHRpZiAodGhpcy5tZXRhLnRyYWNrX3NlZW4pIHtcblx0XHRcdCQoYC5saXN0LWlkW2RhdGEtbmFtZT1cIiR7bWUuZG9jbmFtZX1cIl1gKS5hZGRDbGFzcygnc2VlbicpO1xuXHRcdH1cblx0fVxuXG5cdHJlbmRlcl9mb3JtKHN3aXRjaGVkPzogYm9vbGVhbikge1xuXHRcdGlmICh0aGlzLm1ldGEuaXN0YWJsZSkge1xuXHRcdFx0dGhpcy5yZWZyZXNoX2hlYWRlcihzd2l0Y2hlZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubGF5b3V0LmRvYyA9IHRoaXMuZG9jO1xuXHRcdFx0dGhpcy5sYXlvdXQuYXR0YWNoX2RvY19hbmRfZG9jZmllbGRzKCk7XG5cblx0XHRcdGlmIChmcmFwcGUuYm9vdC5kZXNrX3NldHRpbmdzLmZvcm1fc2lkZWJhcikge1xuXHRcdFx0XHR0aGlzLnNpZGViYXIgPSBuZXcgZnJhcHBlLnVpLmZvcm0uU2lkZWJhcih7XG5cdFx0XHRcdFx0ZnJtOiB0aGlzLFxuXHRcdFx0XHRcdHBhZ2U6IHRoaXMucGFnZSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHRoaXMuc2lkZWJhci5tYWtlKCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNsZWFyIGxheW91dCBtZXNzYWdlXG5cdFx0XHR0aGlzLmxheW91dC5zaG93X21lc3NhZ2UoKTtcblxuXHRcdFx0ZnJhcHBlLnJ1bl9zZXJpYWxseShbXG5cdFx0XHRcdC8vIGhlYWRlciBtdXN0IGJlIHJlZnJlc2hlZCBiZWZvcmUgY2xpZW50IG1ldGhvZHNcblx0XHRcdFx0Ly8gYmVjYXVzZSBhZGRfY3VzdG9tX2J1dHRvblxuXHRcdFx0XHQoKSA9PiB0aGlzLnJlZnJlc2hfaGVhZGVyKHN3aXRjaGVkKSxcblx0XHRcdFx0Ly8gdHJpZ2dlciBnbG9iYWwgdHJpZ2dlclxuXHRcdFx0XHQvLyB0byB1c2UgdGhpc1xuXHRcdFx0XHQoKSA9PiAkKGRvY3VtZW50KS50cmlnZ2VyKCdmb3JtLXJlZnJlc2gnLCBbdGhpc10pLFxuXHRcdFx0XHQvLyBmaWVsZHNcblx0XHRcdFx0KCkgPT4gdGhpcy5yZWZyZXNoX2ZpZWxkcygpLFxuXHRcdFx0XHQvLyBjYWxsIHRyaWdnZXJcblx0XHRcdFx0KCkgPT4gdGhpcy5zY3JpcHRfbWFuYWdlci50cmlnZ2VyKCdyZWZyZXNoJyksXG5cdFx0XHRcdC8vIGNhbGwgb25sb2FkIHBvc3QgcmVuZGVyIGZvciBjYWxsYmFja3MgdG8gYmUgZmlyZWRcblx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdGlmICh0aGlzLmNzY3JpcHQuaXNfb25sb2FkKSB7XG5cdFx0XHRcdFx0XHR0aGlzLm9ubG9hZF9wb3N0X3JlbmRlcigpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2NyaXB0X21hbmFnZXIudHJpZ2dlcignb25sb2FkX3Bvc3RfcmVuZGVyJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHQoKSA9PiB0aGlzLmNzY3JpcHQuaXNfb25sb2FkICYmIHRoaXMuaXNfbmV3KCkgJiYgdGhpcy5mb2N1c19vbl9maXJzdF9pbnB1dCgpLFxuXHRcdFx0XHQoKSA9PiB0aGlzLnJ1bl9hZnRlcl9sb2FkX2hvb2soKSxcblx0XHRcdFx0KCkgPT4gdGhpcy5kYXNoYm9hcmQuYWZ0ZXJfcmVmcmVzaCgpLFxuXHRcdFx0XSk7XG5cdFx0fVxuXG5cdFx0dGhpcy4kd3JhcHBlci50cmlnZ2VyKCdyZW5kZXJfY29tcGxldGUnKTtcblxuXHRcdGZyYXBwZS5hZnRlcl9hamF4KCgpID0+IHtcblx0XHRcdCQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcblx0XHRcdFx0dGhpcy5zY3JvbGxfdG9fZWxlbWVudCgpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRvbmxvYWRfcG9zdF9yZW5kZXIoKSB7XG5cdFx0dGhpcy5zZXR1cF9pbWFnZV9hdXRvY29tcGxldGlvbnNfaW5fbWFya2Rvd24oKTtcblx0fVxuXG5cdGZvY3VzX29uX2ZpcnN0X2lucHV0KCkge1xuXHRcdGxldCBmaXJzdCA9IHRoaXMuZm9ybV93cmFwcGVyLmZpbmQoJy5mb3JtLWxheW91dCA6aW5wdXQ6dmlzaWJsZTpmaXJzdCcpO1xuXHRcdGlmICghaW5fbGlzdChbJ0RhdGUnLCAnRGF0ZXRpbWUnXSwgZmlyc3QuYXR0cignZGF0YS1maWVsZHR5cGUnKSkpIHtcblx0XHRcdGZpcnN0LmZvY3VzKCk7XG5cdFx0fVxuXHR9XG5cblx0cnVuX2FmdGVyX2xvYWRfaG9vaygpIHtcblx0XHRpZiAoZnJhcHBlLnJvdXRlX2hvb2tzLmFmdGVyX2xvYWQpIHtcblx0XHRcdGxldCByb3V0ZV9jYWxsYmFjayA9IGZyYXBwZS5yb3V0ZV9ob29rcy5hZnRlcl9sb2FkO1xuXHRcdFx0ZGVsZXRlIGZyYXBwZS5yb3V0ZV9ob29rcy5hZnRlcl9sb2FkO1xuXG5cdFx0XHRyb3V0ZV9jYWxsYmFjayh0aGlzKTtcblx0XHR9XG5cdH1cblxuXHRyZWZyZXNoX2ZpZWxkcygpIHtcblx0XHR0aGlzLmxheW91dC5yZWZyZXNoKHRoaXMuZG9jKTtcblx0XHR0aGlzLmxheW91dC5wcmltYXJ5X2J1dHRvbiA9IHRoaXMuJHdyYXBwZXIuZmluZCgnLmJ0bi1wcmltYXJ5Jyk7XG5cblx0XHQvLyBjbGVhbnVwIGFjdGl2aXRpZXMgYWZ0ZXIgcmVmcmVzaFxuXHRcdC8vIHRoaXMuY2xlYW51cF9yZWZyZXNoKHRoaXMpO1xuXHR9XG5cblx0Y2xlYW51cF9yZWZyZXNoKCkge1xuXHRcdGlmICh0aGlzLmZpZWxkc19kaWN0LmFtZW5kZWRfZnJvbSkge1xuXHRcdFx0aWYgKHRoaXMuZG9jLmFtZW5kZWRfZnJvbSkge1xuXHRcdFx0XHR1bmhpZGVfZmllbGQoJ2FtZW5kZWRfZnJvbScpO1xuXHRcdFx0XHRpZiAodGhpcy5maWVsZHNfZGljdC5hbWVuZG1lbnRfZGF0ZSkgeyB1bmhpZGVfZmllbGQoJ2FtZW5kbWVudF9kYXRlJyk7IH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhpZGVfZmllbGQoJ2FtZW5kZWRfZnJvbScpO1xuXHRcdFx0XHRpZiAodGhpcy5maWVsZHNfZGljdC5hbWVuZG1lbnRfZGF0ZSkgeyBoaWRlX2ZpZWxkKCdhbWVuZG1lbnRfZGF0ZScpOyB9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuZmllbGRzX2RpY3QudHJhc2hfcmVhc29uKSB7XG5cdFx0XHRpZiAodGhpcy5kb2MudHJhc2hfcmVhc29uICYmIHRoaXMuZG9jLmRvY3N0YXR1cyA9PSAyKSB7XG5cdFx0XHRcdHVuaGlkZV9maWVsZCgndHJhc2hfcmVhc29uJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoaWRlX2ZpZWxkKCd0cmFzaF9yZWFzb24nKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHR0aGlzLm1ldGEuYXV0b25hbWUgJiZcblx0XHRcdHRoaXMubWV0YS5hdXRvbmFtZS5zdWJzdHIoMCwgNikgPT0gJ2ZpZWxkOicgJiZcblx0XHRcdCF0aGlzLmRvYy5fX2lzbG9jYWxcblx0XHQpIHtcblx0XHRcdGxldCBmbiA9IHRoaXMubWV0YS5hdXRvbmFtZS5zdWJzdHIoNik7XG5cblx0XHRcdGlmICh0aGlzLmRvY1tmbl0pIHtcblx0XHRcdFx0dGhpcy50b2dnbGVfZGlzcGxheShmbiwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLm1ldGEuYXV0b25hbWUgPT0gJ25hbWluZ19zZXJpZXM6JyAmJiAhdGhpcy5kb2MuX19pc2xvY2FsKSB7XG5cdFx0XHR0aGlzLnRvZ2dsZV9kaXNwbGF5KCduYW1pbmdfc2VyaWVzJywgZmFsc2UpO1xuXHRcdH1cblx0fVxuXG5cdHJlZnJlc2hfaGVhZGVyKHN3aXRjaGVkKSB7XG5cdFx0Ly8gc2V0IHRpdGxlXG5cdFx0Ly8gbWFpbiB0aXRsZVxuXHRcdC8vIGlmICghdGhpcy5tZXRhLmluX2RpYWxvZyB8fCB0aGlzLmluX2Zvcm0pIHtcblx0XHQvLyBcdGZyYXBwZS51dGlscy5zZXRfdGl0bGUodGhpcy5tZXRhLmlzc2luZ2xlID8gdGhpcy5kb2N0eXBlIDogdGhpcy5kb2NuYW1lKTtcblx0XHQvLyB9XG5cblx0XHQvLyBzaG93IC8gaGlkZSBidXR0b25zXG5cdFx0aWYgKHRoaXMudG9vbGJhcikge1xuXHRcdFx0aWYgKHN3aXRjaGVkKSB7XG5cdFx0XHRcdHRoaXMudG9vbGJhci5jdXJyZW50X3N0YXR1cyA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdHRoaXMudG9vbGJhci5yZWZyZXNoKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kYXNoYm9hcmQucmVmcmVzaCgpO1xuXHRcdGZyYXBwZS5icmVhZGNydW1icy51cGRhdGUoKTtcblxuXHRcdHRoaXMuc2hvd19zdWJtaXRfbWVzc2FnZSgpO1xuXHRcdHRoaXMuY2xlYXJfY3VzdG9tX2J1dHRvbnMoKTtcblx0XHR0aGlzLnNob3dfd2ViX2xpbmsoKTtcblx0fVxuXG5cdC8vIFNBVkVcblxuXHRzYXZlX29yX3VwZGF0ZSgpIHtcblx0XHRpZiAodGhpcy5zYXZlX2Rpc2FibGVkKSB7IHJldHVybjsgfVxuXG5cdFx0aWYgKHRoaXMuZG9jLmRvY3N0YXR1cyA9PT0gMCkge1xuXHRcdFx0dGhpcy5zYXZlKCk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmRvYy5kb2NzdGF0dXMgPT09IDEgJiYgdGhpcy5kb2MuX191bnNhdmVkKSB7XG5cdFx0XHR0aGlzLnNhdmUoJ1VwZGF0ZScpO1xuXHRcdH1cblx0fVxuXG5cdHNhdmUoc2F2ZV9hY3Rpb24sIGNhbGxiYWNrLCBidG4sIG9uX2Vycm9yKSB7XG5cdFx0bGV0IG1lID0gdGhpcztcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0YnRuICYmICQoYnRuKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuXHRcdFx0ZnJhcHBlLnVpLmZvcm0uY2xvc2VfZ3JpZF9mb3JtKCk7XG5cdFx0XHRtZS52YWxpZGF0ZV9hbmRfc2F2ZShzYXZlX2FjdGlvbiwgY2FsbGJhY2ssIGJ0biwgb25fZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG5cdFx0fSlcblx0XHRcdC50aGVuKCgpID0+IHtcblx0XHRcdFx0bWUuc2hvd19zdWNjZXNzX2FjdGlvbigpO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChlID0+IHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHRcdFx0fSk7XG5cdH1cblxuXHR2YWxpZGF0ZV9hbmRfc2F2ZShzYXZlX2FjdGlvbiwgY2FsbGJhY2ssIGJ0biwgb25fZXJyb3IsIHJlc29sdmUsIHJlamVjdCkge1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0aWYgKCFzYXZlX2FjdGlvbikgeyBzYXZlX2FjdGlvbiA9ICdTYXZlJzsgfVxuXHRcdHRoaXMudmFsaWRhdGVfZm9ybV9hY3Rpb24oc2F2ZV9hY3Rpb24sIHJlc29sdmUpO1xuXG5cdFx0bGV0IGFmdGVyX3NhdmUgPSBmdW5jdGlvbiAocikge1xuXHRcdFx0Ly8gdG8gcmVtb3ZlIGhhc2ggZnJvbSBVUkwgdG8gYXZvaWQgc2Nyb2xsIGFmdGVyIHNhdmVcblx0XHRcdGhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsICcgJyk7XG5cdFx0XHRpZiAoIXIuZXhjKSB7XG5cdFx0XHRcdGlmIChbJ1NhdmUnLCAnVXBkYXRlJywgJ0FtZW5kJ10uaW5kZXhPZihzYXZlX2FjdGlvbikgIT09IC0xKSB7XG5cdFx0XHRcdFx0ZnJhcHBlLnV0aWxzLnBsYXlfc291bmQoJ2NsaWNrJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtZS5zY3JpcHRfbWFuYWdlci50cmlnZ2VyKCdhZnRlcl9zYXZlJyk7XG5cblx0XHRcdFx0aWYgKGZyYXBwZS5yb3V0ZV9ob29rcy5hZnRlcl9zYXZlKSB7XG5cdFx0XHRcdFx0bGV0IHJvdXRlX2NhbGxiYWNrID0gZnJhcHBlLnJvdXRlX2hvb2tzLmFmdGVyX3NhdmU7XG5cdFx0XHRcdFx0ZGVsZXRlIGZyYXBwZS5yb3V0ZV9ob29rcy5hZnRlcl9zYXZlO1xuXG5cdFx0XHRcdFx0cm91dGVfY2FsbGJhY2sobWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHN1Ym1pdCBjb21tZW50IGlmIGVudGVyZWRcblx0XHRcdFx0aWYgKG1lLmNvbW1lbnRfYm94KSB7XG5cdFx0XHRcdFx0bWUuY29tbWVudF9ib3guc3VibWl0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWUucmVmcmVzaCgpO1xuXHRcdFx0fSBlbHNlIGlmIChvbl9lcnJvcikge1xuXHRcdFx0XHRvbl9lcnJvcigpO1xuXHRcdFx0XHRyZWplY3QoKTtcblx0XHRcdH1cblx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrKHIpO1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH07XG5cblx0XHRsZXQgZmFpbCA9IGUgPT4ge1xuXHRcdFx0aWYgKGUpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihlKTtcblx0XHRcdH1cblx0XHRcdGJ0biAmJiAkKGJ0bikucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG5cdFx0XHRpZiAob25fZXJyb3IpIHtcblx0XHRcdFx0b25fZXJyb3IoKTtcblx0XHRcdFx0cmVqZWN0KCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmIChzYXZlX2FjdGlvbiA9PSAnVXBkYXRlJykge1xuXHRcdFx0ZnJhcHBlLnVpLmZvcm0uc2F2ZShtZSwgc2F2ZV9hY3Rpb24sIGFmdGVyX3NhdmUsIGJ0bik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHZhbGlkYXRlXG5cdFx0XHRmcmFwcGUudmFsaWRhdGVkID0gdHJ1ZTtcblx0XHRcdGZyYXBwZVxuXHRcdFx0XHQucnVuX3NlcmlhbGx5KFtcblx0XHRcdFx0XHQoKSA9PiB0aGlzLnNjcmlwdF9tYW5hZ2VyLnRyaWdnZXIoJ3ZhbGlkYXRlJyksXG5cdFx0XHRcdFx0KCkgPT4gdGhpcy5zY3JpcHRfbWFuYWdlci50cmlnZ2VyKCdiZWZvcmVfc2F2ZScpLFxuXHRcdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRcdGlmICghZnJhcHBlLnZhbGlkYXRlZCkge1xuXHRcdFx0XHRcdFx0XHRmYWlsKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZnJhcHBlLnVpLmZvcm0uc2F2ZShtZSwgc2F2ZV9hY3Rpb24sIGFmdGVyX3NhdmUsIGJ0bik7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSlcblx0XHRcdFx0LmNhdGNoKGZhaWwpO1xuXHRcdH1cblx0fVxuXG5cdHNhdmVzdWJtaXQoYnRuLCBjYWxsYmFjaywgb25fZXJyb3IpIHtcblx0XHRsZXQgbWUgPSB0aGlzO1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblx0XHRcdHRoaXMudmFsaWRhdGVfZm9ybV9hY3Rpb24oJ1N1Ym1pdCcpO1xuXHRcdFx0ZnJhcHBlLmNvbmZpcm0oXG5cdFx0XHRcdF9fKCdQZXJtYW5lbnRseSBTdWJtaXQgezB9PycsIFt0aGlzLmRvY25hbWVdKSxcblx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGZyYXBwZS52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdG1lLnNjcmlwdF9tYW5hZ2VyLnRyaWdnZXIoJ2JlZm9yZV9zdWJtaXQnKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmICghZnJhcHBlLnZhbGlkYXRlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbWUuaGFuZGxlX3NhdmVfZmFpbChidG4sIG9uX2Vycm9yKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWUuc2F2ZShcblx0XHRcdFx0XHRcdFx0J1N1Ym1pdCcsXG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uIChyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHIuZXhjKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRtZS5oYW5kbGVfc2F2ZV9mYWlsKGJ0biwgb25fZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmcmFwcGUudXRpbHMucGxheV9zb3VuZCgnc3VibWl0Jyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0bWUuc2NyaXB0X21hbmFnZXJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnRyaWdnZXIoJ29uX3N1Ym1pdCcpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC50aGVuKCgpID0+IHJlc29sdmUobWUpKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGZyYXBwZS5yb3V0ZV9ob29rcy5hZnRlcl9zdWJtaXQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxldCByb3V0ZV9jYWxsYmFjayA9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZyYXBwZS5yb3V0ZV9ob29rcy5hZnRlcl9zdWJtaXQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWxldGUgZnJhcHBlLnJvdXRlX2hvb2tzLmFmdGVyX3N1Ym1pdDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJvdXRlX2NhbGxiYWNrKG1lKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0YnRuLFxuXHRcdFx0XHRcdFx0XHQoKSA9PiBtZS5oYW5kbGVfc2F2ZV9mYWlsKGJ0biwgb25fZXJyb3IpLFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlLFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSxcblx0XHRcdFx0KCkgPT4gbWUuaGFuZGxlX3NhdmVfZmFpbChidG4sIG9uX2Vycm9yKSxcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH1cblxuXHRzYXZlY2FuY2VsKGJ0biwgY2FsbGJhY2ssIG9uX2Vycm9yKSB7XG5cdFx0Y29uc3QgbWUgPSB0aGlzO1xuXHRcdHRoaXMudmFsaWRhdGVfZm9ybV9hY3Rpb24oJ0NhbmNlbCcpO1xuXHRcdG1lLmlnbm9yZV9kb2N0eXBlc19vbl9jYW5jZWxfYWxsID0gbWUuaWdub3JlX2RvY3R5cGVzX29uX2NhbmNlbF9hbGwgfHwgW107XG5cdFx0ZnJhcHBlXG5cdFx0XHQuY2FsbCh7XG5cdFx0XHRcdG1ldGhvZDogJ2ZyYXBwZS5kZXNrLmZvcm0ubGlua2VkX3dpdGguZ2V0X3N1Ym1pdHRlZF9saW5rZWRfZG9jcycsXG5cdFx0XHRcdGFyZ3M6IHtcblx0XHRcdFx0XHRkb2N0eXBlOiBtZS5kb2MuZG9jdHlwZSxcblx0XHRcdFx0XHRuYW1lOiBtZS5kb2MubmFtZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0ZnJlZXplOiB0cnVlLFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKHIgPT4ge1xuXHRcdFx0XHRpZiAoIXIuZXhjKSB7XG5cdFx0XHRcdFx0bGV0IGRvY3R5cGVzX3RvX2NhbmNlbCA9IChyLm1lc3NhZ2UuZG9jcyB8fCBbXSlcblx0XHRcdFx0XHRcdC5tYXAodmFsdWUgPT4gdmFsdWUuZG9jdHlwZSlcblx0XHRcdFx0XHRcdC5maWx0ZXIodmFsdWUgPT4gIW1lLmlnbm9yZV9kb2N0eXBlc19vbl9jYW5jZWxfYWxsLmluY2x1ZGVzKHZhbHVlKSk7XG5cblx0XHRcdFx0XHRpZiAoZG9jdHlwZXNfdG9fY2FuY2VsLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG1lLl9jYW5jZWxfYWxsKHIsIGJ0biwgY2FsbGJhY2ssIG9uX2Vycm9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1lLl9jYW5jZWwoYnRuLCBjYWxsYmFjaywgb25fZXJyb3IsIGZhbHNlKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0X2NhbmNlbF9hbGwociwgYnRuLCBjYWxsYmFjaywgb25fZXJyb3IpIHtcblx0XHRjb25zdCBtZSA9IHRoaXM7XG5cblx0XHQvLyBhZGQgY29uZmlybWF0aW9uIG1lc3NhZ2UgZm9yIGNhbmNlbGxpbmcgYWxsIGxpbmtlZCBkb2NzXG5cdFx0bGV0IGxpbmtzX3RleHQgPSAnJztcblx0XHRsZXQgbGlua3MgPSByLm1lc3NhZ2UuZG9jcztcblx0XHRjb25zdCBkb2N0eXBlcyA9IEFycmF5LmZyb20obmV3IFNldChsaW5rcy5tYXAobGluayA9PiBsaW5rLmRvY3R5cGUpKSk7XG5cblx0XHRtZS5pZ25vcmVfZG9jdHlwZXNfb25fY2FuY2VsX2FsbCA9IG1lLmlnbm9yZV9kb2N0eXBlc19vbl9jYW5jZWxfYWxsIHx8IFtdO1xuXG5cdFx0Zm9yIChsZXQgZG9jdHlwZSBvZiBkb2N0eXBlcykge1xuXHRcdFx0aWYgKCFtZS5pZ25vcmVfZG9jdHlwZXNfb25fY2FuY2VsX2FsbC5pbmNsdWRlcyhkb2N0eXBlKSkge1xuXHRcdFx0XHRsZXQgZG9jbmFtZXMgPSBsaW5rc1xuXHRcdFx0XHRcdC5maWx0ZXIobGluayA9PiBsaW5rLmRvY3R5cGUgPT0gZG9jdHlwZSlcblx0XHRcdFx0XHQubWFwKGxpbmsgPT4gZnJhcHBlLnV0aWxzLmdldF9mb3JtX2xpbmsobGluay5kb2N0eXBlLCBsaW5rLm5hbWUsIHRydWUpKVxuXHRcdFx0XHRcdC5qb2luKCcsICcpO1xuXHRcdFx0XHRsaW5rc190ZXh0ICs9IGA8bGk+PHN0cm9uZz4ke19fKGRvY3R5cGUpfTwvc3Ryb25nPjogJHtkb2NuYW1lc308L2xpPmA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGxpbmtzX3RleHQgPSBgPHVsPiR7bGlua3NfdGV4dH08L3VsPmA7XG5cblx0XHRsZXQgY29uZmlybV9tZXNzYWdlID0gX18oJ3swfSB7MX0gaXMgbGlua2VkIHdpdGggdGhlIGZvbGxvd2luZyBzdWJtaXR0ZWQgZG9jdW1lbnRzOiB7Mn0nLCBbXG5cdFx0XHRfXyhtZS5kb2MuZG9jdHlwZSkuYm9sZCgpLFxuXHRcdFx0bWUuZG9jLm5hbWUsXG5cdFx0XHRsaW5rc190ZXh0LFxuXHRcdF0pO1xuXG5cdFx0bGV0IGNhbl9jYW5jZWwgPSBsaW5rcy5ldmVyeShsaW5rID0+IGZyYXBwZS5tb2RlbC5jYW5fY2FuY2VsKGxpbmsuZG9jdHlwZSkpO1xuXHRcdGlmIChjYW5fY2FuY2VsKSB7XG5cdFx0XHRjb25maXJtX21lc3NhZ2UgKz0gX18oJ0RvIHlvdSB3YW50IHRvIGNhbmNlbCBhbGwgbGlua2VkIGRvY3VtZW50cz8nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uZmlybV9tZXNzYWdlICs9IF9fKCdZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbnMgdG8gY2FuY2VsIGFsbCBsaW5rZWQgZG9jdW1lbnRzLicpO1xuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGRpYWxvZyBib3ggdG8gY2FuY2VsIGFsbCBsaW5rZWQgZG9jc1xuXHRcdGxldCBkID0gbmV3IGZyYXBwZS51aS5EaWFsb2coXG5cdFx0XHR7XG5cdFx0XHRcdHRpdGxlOiBfXygnQ2FuY2VsIEFsbCBEb2N1bWVudHMnKSxcblx0XHRcdFx0ZmllbGRzOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0ZmllbGR0eXBlOiAnSFRNTCcsXG5cdFx0XHRcdFx0XHRvcHRpb25zOiBgPHAgY2xhc3M9XCJmcmFwcGUtY29uZmlybS1tZXNzYWdlXCI+JHtjb25maXJtX21lc3NhZ2V9PC9wPmAsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0sXG5cdFx0XHQoKSA9PiBtZS5oYW5kbGVfc2F2ZV9mYWlsKGJ0biwgb25fZXJyb3IpLFxuXHRcdCk7XG5cblx0XHQvLyBpZiB1c2VyIGNhbiBjYW5jZWwgYWxsIGxpbmtlZCBkb2NzLCBhZGQgYWN0aW9uIHRvIHRoZSBkaWFsb2dcblx0XHRpZiAoY2FuX2NhbmNlbCkge1xuXHRcdFx0ZC5zZXRfcHJpbWFyeV9hY3Rpb24oX18oJ0NhbmNlbCBBbGwnKSwgKCkgPT4ge1xuXHRcdFx0XHRkLmhpZGUoKTtcblx0XHRcdFx0ZnJhcHBlLmNhbGwoe1xuXHRcdFx0XHRcdG1ldGhvZDogJ2ZyYXBwZS5kZXNrLmZvcm0ubGlua2VkX3dpdGguY2FuY2VsX2FsbF9saW5rZWRfZG9jcycsXG5cdFx0XHRcdFx0YXJnczoge1xuXHRcdFx0XHRcdFx0ZG9jczogbGlua3MsXG5cdFx0XHRcdFx0XHRpZ25vcmVfZG9jdHlwZXNfb25fY2FuY2VsX2FsbDogbWUuaWdub3JlX2RvY3R5cGVzX29uX2NhbmNlbF9hbGwgfHwgW10sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRmcmVlemU6IHRydWUsXG5cdFx0XHRcdFx0Y2FsbGJhY2s6IHJlc3AgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKCFyZXNwLmV4Yykge1xuXHRcdFx0XHRcdFx0XHRtZS5yZWxvYWRfZG9jKCk7XG5cdFx0XHRcdFx0XHRcdG1lLl9jYW5jZWwoYnRuLCBjYWxsYmFjaywgb25fZXJyb3IsIHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZC5zaG93KCk7XG5cdH1cblxuXHRfY2FuY2VsKGJ0biwgY2FsbGJhY2ssIG9uX2Vycm9yLCBza2lwX2NvbmZpcm0pIHtcblx0XHRjb25zdCBtZSA9IHRoaXM7XG5cdFx0Y29uc3QgY2FuY2VsX2RvYyA9ICgpID0+IHtcblx0XHRcdGZyYXBwZS52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0bWUuc2NyaXB0X21hbmFnZXIudHJpZ2dlcignYmVmb3JlX2NhbmNlbCcpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRpZiAoIWZyYXBwZS52YWxpZGF0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWUuaGFuZGxlX3NhdmVfZmFpbChidG4sIG9uX2Vycm9yKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBhZnRlcl9jYW5jZWwgPSBmdW5jdGlvbiAocikge1xuXHRcdFx0XHRcdGlmIChyLmV4Yykge1xuXHRcdFx0XHRcdFx0bWUuaGFuZGxlX3NhdmVfZmFpbChidG4sIG9uX2Vycm9yKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZnJhcHBlLnV0aWxzLnBsYXlfc291bmQoJ2NhbmNlbCcpO1xuXHRcdFx0XHRcdFx0bWUucmVmcmVzaCgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdG1lLnNjcmlwdF9tYW5hZ2VyLnRyaWdnZXIoJ2FmdGVyX2NhbmNlbCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdFx0ZnJhcHBlLnVpLmZvcm0uc2F2ZShtZSwgJ2NhbmNlbCcsIGFmdGVyX2NhbmNlbCwgYnRuKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHRpZiAoc2tpcF9jb25maXJtKSB7XG5cdFx0XHRjYW5jZWxfZG9jKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZyYXBwZS5jb25maXJtKFxuXHRcdFx0XHRfXygnUGVybWFuZW50bHkgQ2FuY2VsIHswfT8nLCBbdGhpcy5kb2NuYW1lXSksXG5cdFx0XHRcdGNhbmNlbF9kb2MsXG5cdFx0XHRcdG1lLmhhbmRsZV9zYXZlX2ZhaWwoYnRuLCBvbl9lcnJvciksXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHNhdmV0cmFzaCgpIHtcblx0XHR0aGlzLnZhbGlkYXRlX2Zvcm1fYWN0aW9uKCdEZWxldGUnKTtcblx0XHRmcmFwcGUubW9kZWwuZGVsZXRlX2RvYyh0aGlzLmRvY3R5cGUsIHRoaXMuZG9jbmFtZSwgKCkgPT4ge1xuXHRcdFx0dGhpcy5fX2RlbGV0ZWQoKTtcblx0XHR9KTtcblx0fVxuXG5cdGFtZW5kX2RvYygpIHtcblx0XHRpZiAoIXRoaXMuZmllbGRzX2RpY3QuYW1lbmRlZF9mcm9tKSB7XG5cdFx0XHRmcmFwcGUubXNncHJpbnQoX18oJ1wiYW1lbmRlZF9mcm9tXCIgZmllbGQgbXVzdCBiZSBwcmVzZW50IHRvIGRvIGFuIGFtZW5kbWVudC4nKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZnJhcHBlXG5cdFx0XHQueGNhbGwoJ2ZyYXBwZS5jbGllbnQuaXNfZG9jdW1lbnRfYW1lbmRlZCcsIHtcblx0XHRcdFx0ZG9jdHlwZTogdGhpcy5kb2MuZG9jdHlwZSxcblx0XHRcdFx0ZG9jbmFtZTogdGhpcy5kb2MubmFtZSxcblx0XHRcdH0pXG5cdFx0XHQudGhlbihpc19hbWVuZGVkID0+IHtcblx0XHRcdFx0aWYgKGlzX2FtZW5kZWQpIHtcblx0XHRcdFx0XHRmcmFwcGUudGhyb3coXG5cdFx0XHRcdFx0XHRfXygnVGhpcyBkb2N1bWVudCBpcyBhbHJlYWR5IGFtZW5kZWQsIHlvdSBjYW5ub3QgYW1tZW5kIGl0IGFnYWluJyksXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnZhbGlkYXRlX2Zvcm1fYWN0aW9uKCdBbWVuZCcpO1xuXHRcdFx0XHRsZXQgbWUgPSB0aGlzO1xuXHRcdFx0XHRsZXQgZm4gPSBmdW5jdGlvbiAobmV3ZG9jKSB7XG5cdFx0XHRcdFx0bmV3ZG9jLmFtZW5kZWRfZnJvbSA9IG1lLmRvY25hbWU7XG5cdFx0XHRcdFx0aWYgKG1lLmZpZWxkc19kaWN0ICYmIG1lLmZpZWxkc19kaWN0LmFtZW5kbWVudF9kYXRlKSB7XG5cdFx0XHRcdFx0XHRuZXdkb2MuYW1lbmRtZW50X2RhdGUgPSBmcmFwcGUuZGF0ZXRpbWUub2JqX3RvX3N0cihuZXcgRGF0ZSgpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMuY29weV9kb2MoZm4sIDEpO1xuXHRcdFx0XHRmcmFwcGUudXRpbHMucGxheV9zb3VuZCgnY2xpY2snKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0dmFsaWRhdGVfZm9ybV9hY3Rpb24oXG5cdFx0YWN0aW9uOiBrZXlvZiB0eXBlb2YgdGhpcy5hY3Rpb25fcGVybV90eXBlX21hcCxcblx0XHRyZXNvbHZlPzogKCkgPT4gdm9pZCxcblx0KSB7XG5cdFx0bGV0IHBlcm1fdG9fY2hlY2sgPSB0aGlzLmFjdGlvbl9wZXJtX3R5cGVfbWFwW2FjdGlvbl07XG5cdFx0bGV0IGFsbG93ZWRfZm9yX3dvcmtmbG93ID0gZmFsc2U7XG5cdFx0bGV0IHBlcm1zID0gZnJhcHBlLnBlcm0uZ2V0X3Blcm0odGhpcy5kb2MuZG9jdHlwZSlbMF07XG5cblx0XHQvLyBBbGxvdyBzdWJtaXQsIHdyaXRlLCBjYW5jZWwgYW5kIGNyZWF0ZSBwZXJtaXNzaW9ucyBmb3IgcmVhZCBvbmx5IGRvY3VtZW50cyB0aGF0IGFyZSBhc3NpZ25lZCBieVxuXHRcdC8vIHdvcmtmbG93cyBpZiB0aGUgdXNlciBhbHJlYWR5IGhhdmUgdGhvc2UgcGVybWlzc2lvbnMuIFRoaXMgaXMgdG8gYWxsb3cgZm9yIHVzZXJzIHRvXG5cdFx0Ly8gY29udGludWUgdGhyb3VnaCB0aGUgd29ya2Zsb3cgc3RhdGVzIGFuZCB0byBhbGxvdyBleGVjdXRpb24gb2YgZnVuY3Rpb25zIGxpa2UgRHVwbGljYXRlLlxuXHRcdGlmIChcblx0XHRcdChmcmFwcGUud29ya2Zsb3cuaXNfcmVhZF9vbmx5KHRoaXMuZG9jdHlwZSwgdGhpcy5kb2NuYW1lKSAmJlxuXHRcdFx0XHQocGVybXMud3JpdGUgfHwgcGVybXMuY3JlYXRlIHx8IHBlcm1zLnN1Ym1pdCB8fCBwZXJtcy5jYW5jZWwpKSB8fFxuXHRcdFx0IWZyYXBwZS53b3JrZmxvdy5pc19yZWFkX29ubHkodGhpcy5kb2N0eXBlLCB0aGlzLmRvY25hbWUpXG5cdFx0KSB7XG5cdFx0XHRhbGxvd2VkX2Zvcl93b3JrZmxvdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLnBlcm1bMF1bcGVybV90b19jaGVja10gJiYgIWFsbG93ZWRfZm9yX3dvcmtmbG93KSB7XG5cdFx0XHRpZiAocmVzb2x2ZSkge1xuXHRcdFx0XHQvLyByZS1lbmFibGUgYnV0dG9uc1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9XG5cblx0XHRcdGZyYXBwZS50aHJvdyhcblx0XHRcdFx0X18oXG5cdFx0XHRcdFx0XCJObyBwZXJtaXNzaW9uIHRvICd7MH0nIHsxfVwiLFxuXHRcdFx0XHRcdFtfXyhhY3Rpb24pLCBfXyh0aGlzLmRvYy5kb2N0eXBlKV0sXG5cdFx0XHRcdFx0J3swfSA9IHZlcmIsIHsxfSA9IG9iamVjdCcsXG5cdFx0XHRcdCksXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdC8vIEhFTFBFUlNcblxuXHRlbmFibGVfc2F2ZSgpIHtcblx0XHR0aGlzLnNhdmVfZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR0aGlzLnRvb2xiYXIuc2V0X3ByaW1hcnlfYWN0aW9uKCk7XG5cdH1cblxuXHRkaXNhYmxlX3NhdmUoc2V0X2RpcnR5ID0gZmFsc2UpIHtcblx0XHQvLyBJTVBPUlRBTlQ6IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBpbiByZWZyZXNoIGV2ZW50XG5cdFx0dGhpcy5zYXZlX2Rpc2FibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnRvb2xiYXIuY3VycmVudF9zdGF0dXMgPSBudWxsO1xuXHRcdC8vIGZpZWxkIGNoYW5nZXMgc2hvdWxkIG1ha2UgZm9ybSBkaXJ0eVxuXHRcdHRoaXMuc2V0X2RpcnR5ID0gc2V0X2RpcnR5O1xuXHRcdHRoaXMucGFnZS5jbGVhcl9wcmltYXJ5X2FjdGlvbigpO1xuXHR9XG5cblx0ZGlzYWJsZV9mb3JtKCkge1xuXHRcdHRoaXMuc2V0X3JlYWRfb25seSgpO1xuXHRcdGZvciAoY29uc3QgZmllbGQgb2YgdGhpcy5maWVsZHMpIHtcblx0XHRcdHRoaXMuc2V0X2RmX3Byb3BlcnR5KGZpZWxkLmRmLmZpZWxkbmFtZSwgJ3JlYWRfb25seScsICcxJyk7XG5cdFx0fVxuXHRcdHRoaXMuZGlzYWJsZV9zYXZlKCk7XG5cdH1cblxuXHRoYW5kbGVfc2F2ZV9mYWlsKGJ0biwgb25fZXJyb3IpIHtcblx0XHQkKGJ0bikucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG5cdFx0aWYgKG9uX2Vycm9yKSB7XG5cdFx0XHRvbl9lcnJvcigpO1xuXHRcdH1cblx0fVxuXG5cdHRyaWdnZXJfbGlua19maWVsZHMoKSB7XG5cdFx0Ly8gdHJpZ2dlciBsaW5rIGZpZWxkcyB3aGljaCBoYXZlIGRlZmF1bHQgdmFsdWVzIHNldFxuXHRcdGlmICh0aGlzLmlzX25ldygpICYmIHRoaXMuZG9jLl9fcnVuX2xpbmtfdHJpZ2dlcnMpIHtcblx0XHRcdCQuZWFjaCh0aGlzLmZpZWxkc19kaWN0LCBmdW5jdGlvbiAoZmllbGRuYW1lLCBmaWVsZCkge1xuXHRcdFx0XHRpZiAoZmllbGQuZGYuZmllbGR0eXBlID09ICdMaW5rJyAmJiB0aGlzLmRvY1tmaWVsZG5hbWVdKSB7XG5cdFx0XHRcdFx0Ly8gdHJpZ2dlcnMgYWRkIGZldGNoLCBzZXRzIHZhbHVlIGluIG1vZGVsIGFuZCBydW5zIHRyaWdnZXJzXG5cdFx0XHRcdFx0ZmllbGQuc2V0X3ZhbHVlKHRoaXMuZG9jW2ZpZWxkbmFtZV0sIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0ZGVsZXRlIHRoaXMuZG9jLl9fcnVuX2xpbmtfdHJpZ2dlcnM7XG5cdFx0fVxuXHR9XG5cblx0c2hvd19jb25mbGljdF9tZXNzYWdlKCkge1xuXHRcdGlmICh0aGlzLmRvYy5fX25lZWRzX3JlZnJlc2gpIHtcblx0XHRcdGlmICh0aGlzLmRvYy5fX3Vuc2F2ZWQpIHtcblx0XHRcdFx0dGhpcy5kYXNoYm9hcmQuY2xlYXJfaGVhZGxpbmUoKTtcblx0XHRcdFx0dGhpcy5kYXNoYm9hcmQuc2V0X2hlYWRsaW5lX2FsZXJ0KFxuXHRcdFx0XHRcdGAke19fKCdUaGlzIGZvcm0gaGFzIGJlZW4gbW9kaWZpZWQgYWZ0ZXIgeW91IGhhdmUgbG9hZGVkIGl0Jylcblx0XHRcdFx0XHR9PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4teHMgYnRuLXByaW1hcnkgcHVsbC1yaWdodFwiIG9uY2xpY2s9XCJjdXJfZnJtLnJlbG9hZF9kb2MoKVwiPiR7XG5cdFx0XHRcdFx0XHRfXygnUmVmcmVzaCcpXG5cdFx0XHRcdFx0fTwvYnV0dG9uPmAsXG5cdFx0XHRcdFx0J2FsZXJ0LXdhcm5pbmcnLFxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5kZWJvdW5jZWRfcmVsb2FkX2RvYygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHNob3dfc3VibWl0X21lc3NhZ2UoKSB7XG5cdFx0aWYgKFxuXHRcdFx0dGhpcy5tZXRhLmlzX3N1Ym1pdHRhYmxlICYmXG5cdFx0XHR0aGlzLnBlcm1bMF0gJiZcblx0XHRcdHRoaXMucGVybVswXS5zdWJtaXQgJiZcblx0XHRcdCF0aGlzLmlzX2RpcnR5KCkgJiZcblx0XHRcdCF0aGlzLmlzX25ldygpICYmXG5cdFx0XHQhZnJhcHBlLm1vZGVsLmhhc193b3JrZmxvdyh0aGlzLmRvY3R5cGUpICYmIC8vIHNob3cgb25seSBpZiBubyB3b3JrZmxvd1xuXHRcdFx0dGhpcy5kb2MuZG9jc3RhdHVzID09PSAwXG5cdFx0KSB7XG5cdFx0XHR0aGlzLmRhc2hib2FyZC5hZGRfY29tbWVudChfXygnU3VibWl0IHRoaXMgZG9jdW1lbnQgdG8gY29uZmlybScpLCAnYmx1ZScsIHRydWUpO1xuXHRcdH1cblx0fVxuXG5cdHNob3dfd2ViX2xpbmsoKSB7XG5cdFx0aWYgKCF0aGlzLmRvYy5fX2lzbG9jYWwgJiYgdGhpcy5kb2MuX19vbmxvYWQgJiYgdGhpcy5kb2MuX19vbmxvYWQuaXNfd2Vic2l0ZV9nZW5lcmF0b3IpIHtcblx0XHRcdHRoaXMud2ViX2xpbmsgJiYgdGhpcy53ZWJfbGluay5yZW1vdmUoKTtcblx0XHRcdGlmICh0aGlzLmRvYy5fX29ubG9hZC5wdWJsaXNoZWQpIHtcblx0XHRcdFx0dGhpcy5hZGRfd2ViX2xpbmsoYC8ke3RoaXMuZG9jLnJvdXRlfWApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGFkZF93ZWJfbGluayhwYXRoLCBsYWJlbCkge1xuXHRcdGxhYmVsID0gX18obGFiZWwpIHx8IF9fKCdTZWUgb24gV2Vic2l0ZScpO1xuXHRcdHRoaXMud2ViX2xpbmsgPSB0aGlzLnNpZGViYXJcblx0XHRcdC5hZGRfdXNlcl9hY3Rpb24oX18obGFiZWwpLCBmdW5jdGlvbiAoKSB7IH0pXG5cdFx0XHQuYXR0cignaHJlZicsIHBhdGggfHwgdGhpcy5kb2Mucm91dGUpXG5cdFx0XHQuYXR0cigndGFyZ2V0JywgJ19ibGFuaycpO1xuXHR9XG5cblx0ZmV0Y2hfcGVybWlzc2lvbnMoKSB7XG5cdFx0bGV0IGR0ID0gdGhpcy5wYXJlbnRfZG9jdHlwZSA/IHRoaXMucGFyZW50X2RvY3R5cGUgOiB0aGlzLmRvY3R5cGU7XG5cdFx0dGhpcy5wZXJtID0gZnJhcHBlLnBlcm0uZ2V0X3Blcm0oZHQsIHRoaXMuZG9jKTtcblx0fVxuXG5cdGhhc19yZWFkX3Blcm1pc3Npb24oKSB7XG5cdFx0aWYgKCF0aGlzLnBlcm1bMF0ucmVhZCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0Y2hlY2tfZG9jdHlwZV9jb25mbGljdChkb2NuYW1lKSB7XG5cdFx0aWYgKHRoaXMuZG9jdHlwZSA9PSAnRG9jVHlwZScgJiYgZG9jbmFtZSA9PSAnRG9jVHlwZScpIHtcblx0XHRcdGZyYXBwZS5tc2dwcmludChfXygnQWxsb3dpbmcgRG9jVHlwZSwgRG9jVHlwZS4gQmUgY2FyZWZ1bCEnKSk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmRvY3R5cGUgPT0gJ0RvY1R5cGUnKSB7XG5cdFx0XHRpZiAoZnJhcHBlLnZpZXdzLmZvcm12aWV3W2RvY25hbWVdIHx8IGZyYXBwZS5wYWdlc1tgTGlzdC8ke2RvY25hbWV9YF0pIHtcblx0XHRcdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHRcdFx0XHQvL1x0ZnJhcHBlLm1zZ3ByaW50KF9fKFwiQ2Fubm90IG9wZW4gezB9IHdoZW4gaXRzIGluc3RhbmNlIGlzIG9wZW5cIiwgWydEb2NUeXBlJ10pKVxuXHRcdFx0XHQvLyB0aHJvdyAnZG9jdHlwZSBvcGVuIGNvbmZsaWN0J1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRmcmFwcGUudmlld3MuZm9ybXZpZXcuRG9jVHlwZSAmJlxuXHRcdFx0ZnJhcHBlLnZpZXdzLmZvcm12aWV3LkRvY1R5cGUuZnJtLm9wZW5kb2NzW3RoaXMuZG9jdHlwZV1cblx0XHQpIHtcblx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdC8vXHRmcmFwcGUubXNncHJpbnQoX18oXCJDYW5ub3Qgb3BlbiBpbnN0YW5jZSB3aGVuIGl0cyB7MH0gaXMgb3BlblwiLCBbJ0RvY1R5cGUnXSkpXG5cdFx0XHQvLyB0aHJvdyAnZG9jdHlwZSBvcGVuIGNvbmZsaWN0J1xuXHRcdH1cblx0fVxuXG5cdC8vIHJlbmFtZSB0aGUgZm9ybVxuXHQvLyBub3RpZnkgdGhpcyBmb3JtIG9mIHJlbmFtZWQgcmVjb3Jkc1xuXHRyZW5hbWVfbm90aWZ5KGR0LCBvbGQsIG5hbWUpIHtcblx0XHQvLyBmcm9tIGZvcm1cblx0XHRpZiAodGhpcy5tZXRhLmlzdGFibGUpIHsgcmV0dXJuOyB9XG5cblx0XHRpZiAodGhpcy5kb2NuYW1lID09IG9sZCkgeyB0aGlzLmRvY25hbWUgPSBuYW1lOyB9XG5cdFx0ZWxzZSB7IHJldHVybjsgfVxuXG5cdFx0Ly8gY2xlYW51cFxuXHRcdGlmICh0aGlzICYmIHRoaXMub3BlbmRvY3Nbb2xkXSAmJiBmcmFwcGUubWV0YS5kb2NmaWVsZF9jb3B5W2R0XSkge1xuXHRcdFx0Ly8gZGVsZXRlIGRvY2ZpZWxkIGNvcHlcblx0XHRcdGZyYXBwZS5tZXRhLmRvY2ZpZWxkX2NvcHlbZHRdW25hbWVdID0gZnJhcHBlLm1ldGEuZG9jZmllbGRfY29weVtkdF1bb2xkXTtcblx0XHRcdGRlbGV0ZSBmcmFwcGUubWV0YS5kb2NmaWVsZF9jb3B5W2R0XVtvbGRdO1xuXHRcdH1cblxuXHRcdGRlbGV0ZSB0aGlzLm9wZW5kb2NzW29sZF07XG5cdFx0dGhpcy5vcGVuZG9jc1tuYW1lXSA9IHRydWU7XG5cblx0fVxuXG5cdC8vIEFDVElPTlNcblxuXHRwcmludF9kb2MoKSB7XG5cdFx0ZnJhcHBlLnJvdXRlX29wdGlvbnMgPSB7XG5cdFx0XHRmcm06IHRoaXMsXG5cdFx0fTtcblx0XHRmcmFwcGUuc2V0X3JvdXRlKCdwcmludCcsIHRoaXMuZG9jdHlwZSwgdGhpcy5kb2MubmFtZSk7XG5cdH1cblxuXHRuYXZpZ2F0ZV9yZWNvcmRzKHByZXYpIHtcblx0XHRsZXQgZmlsdGVycywgc29ydF9maWVsZCwgc29ydF9vcmRlcjtcblx0XHRsZXQgbGlzdF92aWV3ID0gZnJhcHBlLmdldF9saXN0X3ZpZXcodGhpcy5kb2N0eXBlKTtcblx0XHRpZiAobGlzdF92aWV3KSB7XG5cdFx0XHRmaWx0ZXJzID0gbGlzdF92aWV3LmdldF9maWx0ZXJzX2Zvcl9hcmdzKCk7XG5cdFx0XHRzb3J0X2ZpZWxkID0gbGlzdF92aWV3LnNvcnRfYnk7XG5cdFx0XHRzb3J0X29yZGVyID0gbGlzdF92aWV3LnNvcnRfb3JkZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCBsaXN0X3NldHRpbmdzID0gZnJhcHBlLmdldF91c2VyX3NldHRpbmdzKHRoaXMuZG9jdHlwZSkuTGlzdDtcblx0XHRcdGlmIChsaXN0X3NldHRpbmdzKSB7XG5cdFx0XHRcdGZpbHRlcnMgPSBsaXN0X3NldHRpbmdzLmZpbHRlcnM7XG5cdFx0XHRcdHNvcnRfZmllbGQgPSBsaXN0X3NldHRpbmdzLnNvcnRfYnk7XG5cdFx0XHRcdHNvcnRfb3JkZXIgPSBsaXN0X3NldHRpbmdzLnNvcnRfb3JkZXI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IGFyZ3MgPSB7XG5cdFx0XHRkb2N0eXBlOiB0aGlzLmRvY3R5cGUsXG5cdFx0XHR2YWx1ZTogdGhpcy5kb2NuYW1lLFxuXHRcdFx0ZmlsdGVycyxcblx0XHRcdHNvcnRfb3JkZXIsXG5cdFx0XHRzb3J0X2ZpZWxkLFxuXHRcdFx0cHJldixcblx0XHR9O1xuXG5cdFx0ZnJhcHBlLmNhbGwoJ2ZyYXBwZS5kZXNrLmZvcm0udXRpbHMuZ2V0X25leHQnLCBhcmdzKS50aGVuKHIgPT4ge1xuXHRcdFx0aWYgKHIubWVzc2FnZSkge1xuXHRcdFx0XHRmcmFwcGUuc2V0X3JvdXRlKCdGb3JtJywgdGhpcy5kb2N0eXBlLCByLm1lc3NhZ2UpO1xuXHRcdFx0XHR0aGlzLmZvY3VzX29uX2ZpcnN0X2lucHV0KCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRyZW5hbWVfZG9jKCkge1xuXHRcdGZyYXBwZS5tb2RlbC5yZW5hbWVfZG9jKHRoaXMuZG9jdHlwZSwgdGhpcy5kb2NuYW1lLCAoKSA9PiB0aGlzLnJlZnJlc2hfaGVhZGVyKCkpO1xuXHR9XG5cblx0c2hhcmVfZG9jKCkge1xuXHRcdHRoaXMuc2hhcmVkLnNob3coKTtcblx0fVxuXG5cdGVtYWlsX2RvYyhtZXNzYWdlKSB7XG5cdFx0bmV3IGZyYXBwZS52aWV3cy5Db21tdW5pY2F0aW9uQ29tcG9zZXIoe1xuXHRcdFx0ZG9jOiB0aGlzLmRvYyxcblx0XHRcdGZybTogdGhpcyxcblx0XHRcdHN1YmplY3Q6IGAke19fKHRoaXMubWV0YS5uYW1lKX06ICR7dGhpcy5kb2NuYW1lfWAsXG5cdFx0XHRyZWNpcGllbnRzOiB0aGlzLmRvYy5lbWFpbCB8fCB0aGlzLmRvYy5lbWFpbF9pZCB8fCB0aGlzLmRvYy5jb250YWN0X2VtYWlsLFxuXHRcdFx0YXR0YWNoX2RvY3VtZW50X3ByaW50OiB0cnVlLFxuXHRcdFx0bWVzc2FnZSxcblx0XHR9KTtcblx0fVxuXG5cdGNvcHlfZG9jKG9ubG9hZCwgZnJvbV9hbWVuZCkge1xuXHRcdHRoaXMudmFsaWRhdGVfZm9ybV9hY3Rpb24oJ0NyZWF0ZScpO1xuXHRcdGxldCBuZXdkb2MgPSBmcmFwcGUubW9kZWwuY29weV9kb2ModGhpcy5kb2MsIGZyb21fYW1lbmQpO1xuXG5cdFx0bmV3ZG9jLmlkeCA9IG51bGw7XG5cdFx0bmV3ZG9jLl9fcnVuX2xpbmtfdHJpZ2dlcnMgPSBmYWxzZTtcblx0XHRpZiAob25sb2FkKSB7XG5cdFx0XHRvbmxvYWQobmV3ZG9jKTtcblx0XHR9XG5cdFx0ZnJhcHBlLnNldF9yb3V0ZSgnRm9ybScsIG5ld2RvYy5kb2N0eXBlLCBuZXdkb2MubmFtZSk7XG5cdH1cblxuXHRyZWxvYWRfZG9jKCkge1xuXHRcdHRoaXMuY2hlY2tfZG9jdHlwZV9jb25mbGljdCh0aGlzLmRvY25hbWUpO1xuXG5cdFx0aWYgKCF0aGlzLmRvYy5fX2lzbG9jYWwpIHtcblx0XHRcdGZyYXBwZS5tb2RlbC5yZW1vdmVfZnJvbV9sb2NhbHModGhpcy5kb2N0eXBlLCB0aGlzLmRvY25hbWUpO1xuXHRcdFx0cmV0dXJuIGZyYXBwZS5tb2RlbC53aXRoX2RvYyh0aGlzLmRvY3R5cGUsIHRoaXMuZG9jbmFtZSwgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnJlZnJlc2goKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHJlZnJlc2hfZmllbGQoZm5hbWUpIHtcblx0XHRpZiAodGhpcy5maWVsZHNfZGljdFtmbmFtZV0gJiYgdGhpcy5maWVsZHNfZGljdFtmbmFtZV0ucmVmcmVzaCkge1xuXHRcdFx0dGhpcy5maWVsZHNfZGljdFtmbmFtZV0ucmVmcmVzaCgpO1xuXHRcdFx0dGhpcy5sYXlvdXQucmVmcmVzaF9kZXBlbmRlbmN5KCk7XG5cdFx0XHR0aGlzLmxheW91dC5yZWZyZXNoX3NlY3Rpb25zKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gVVRJTElUSUVTXG5cdGFkZF9mZXRjaChsaW5rX2ZpZWxkLCBzb3VyY2VfZmllbGQsIHRhcmdldF9maWVsZCwgdGFyZ2V0X2RvY3R5cGUpIHtcblx0XHQvKlxuXHRcdEV4YW1wbGUgZmV0Y2ggZGljdCB0byBnZXQgc2VuZGVyX2VtYWlsIGZyb20gZW1haWxfaWQgZmllbGQgaW4gc2VuZGVyOlxuXHRcdFx0e1xuXHRcdFx0XHRcIk5vdGlmaWNhdGlvblwiOiB7XG5cdFx0XHRcdFx0XCJzZW5kZXJcIjoge1xuXHRcdFx0XHRcdFx0XCJzZW5kZXJfZW1haWxcIjogXCJlbWFpbF9pZFwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0Ki9cblxuXHRcdGlmICghdGFyZ2V0X2RvY3R5cGUpIHsgdGFyZ2V0X2RvY3R5cGUgPSAnKic7IH1cblxuXHRcdC8vIFRhcmdldCBmaWVsZCBrZXB0IGFzIGtleSBiZWNhdXNlIHNvdXJjZSBmaWVsZCBjb3VsZCBiZSBub24tdW5pcXVlXG5cdFx0dGhpcy5mZXRjaF9kaWN0LnNldERlZmF1bHQodGFyZ2V0X2RvY3R5cGUsIHt9KS5zZXREZWZhdWx0KGxpbmtfZmllbGQsIHt9KVt0YXJnZXRfZmllbGRdID1cblx0XHRcdHNvdXJjZV9maWVsZDtcblx0fVxuXG5cdGhhc19wZXJtKHB0eXBlKSB7XG5cdFx0cmV0dXJuIGZyYXBwZS5wZXJtLmhhc19wZXJtKHRoaXMuZG9jdHlwZSwgMCwgcHR5cGUsIHRoaXMuZG9jKTtcblx0fVxuXG5cdGRpcnR5KCkge1xuXHRcdHRoaXMuZG9jLl9fdW5zYXZlZCA9IDE7XG5cdFx0dGhpcy4kd3JhcHBlci50cmlnZ2VyKCdkaXJ0eScpO1xuXHRcdGlmICghZnJhcHBlLmJvb3QuZGV2ZWxvcGVyX21vZGUpIHtcblx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuYmVmb3JlVW5sb2FkTGlzdGVuZXIsIHsgY2FwdHVyZTogdHJ1ZSB9KTtcblx0XHR9XG5cdH1cblxuXHRnZXRfZG9jaW5mbygpIHtcblx0XHRyZXR1cm4gZnJhcHBlLm1vZGVsLmRvY2luZm9bdGhpcy5kb2N0eXBlXVt0aGlzLmRvY25hbWVdO1xuXHR9XG5cblx0aXNfZGlydHkoKSB7XG5cdFx0cmV0dXJuIEJvb2xlYW4odGhpcy5kb2MuX191bnNhdmVkKTtcblx0fVxuXG5cdGlzX25ldygpIHtcblx0XHRyZXR1cm4gdGhpcy5kb2MuX19pc2xvY2FsO1xuXHR9XG5cblx0Z2V0X3Blcm0ocGVybWxldmVsLCBhY2Nlc3NfdHlwZSkge1xuXHRcdHJldHVybiB0aGlzLnBlcm1bcGVybWxldmVsXSA/IHRoaXMucGVybVtwZXJtbGV2ZWxdW2FjY2Vzc190eXBlXSA6IG51bGw7XG5cdH1cblxuXHRzZXRfaW50cm8odHh0LCBjb2xvcikge1xuXHRcdHRoaXMuZGFzaGJvYXJkLnNldF9oZWFkbGluZV9hbGVydCh0eHQsIGNvbG9yKTtcblx0fVxuXG5cdHNldF9mb290bm90ZSh0eHQpIHtcblx0XHR0aGlzLmZvb3Rub3RlX2FyZWEgPSBmcmFwcGUudXRpbHMuc2V0X2Zvb3Rub3RlKHRoaXMuZm9vdG5vdGVfYXJlYSwgdGhpcy5ib2R5LCB0eHQpO1xuXHR9XG5cblx0YWRkX2N1c3RvbV9idXR0b24obGFiZWwsIGZuLCBncm91cCkge1xuXHRcdC8vIHRlbXAhIG9sZCBwYXJhbWV0ZXIgdXNlZCB0byBiZSBpY29uXG5cdFx0aWYgKGdyb3VwICYmIGdyb3VwLmluZGV4T2YoJ2ZhIGZhLScpICE9PSAtMSkgeyBncm91cCA9IG51bGw7IH1cblxuXHRcdGxldCBidG4gPSB0aGlzLnBhZ2UuYWRkX2lubmVyX2J1dHRvbihsYWJlbCwgZm4sIGdyb3VwKTtcblxuXHRcdGlmIChidG4pIHtcblx0XHRcdC8vIEFkZCBhY3Rpb25zIGFzIG1lbnUgaXRlbSBpbiBNb2JpbGUgVmlld1xuXHRcdFx0bGV0IG1lbnVfaXRlbV9sYWJlbCA9IGdyb3VwID8gYCR7Z3JvdXB9ID4gJHtsYWJlbH1gIDogbGFiZWw7XG5cdFx0XHRsZXQgbWVudV9pdGVtID0gdGhpcy5wYWdlLmFkZF9tZW51X2l0ZW0obWVudV9pdGVtX2xhYmVsLCBmbiwgZmFsc2UpO1xuXHRcdFx0bWVudV9pdGVtLnBhcmVudCgpLmFkZENsYXNzKCdoaWRkZW4teGwnKTtcblxuXHRcdFx0dGhpcy5jdXN0b21fYnV0dG9uc1tsYWJlbF0gPSBidG47XG5cdFx0fVxuXHRcdHJldHVybiBidG47XG5cdH1cblxuXHRjaGFuZ2VfY3VzdG9tX2J1dHRvbl90eXBlKGxhYmVsLCBncm91cCwgdHlwZSkge1xuXHRcdHRoaXMucGFnZS5jaGFuZ2VfaW5uZXJfYnV0dG9uX3R5cGUobGFiZWwsIGdyb3VwLCB0eXBlKTtcblx0fVxuXG5cdGNsZWFyX2N1c3RvbV9idXR0b25zKCkge1xuXHRcdHRoaXMucGFnZS5jbGVhcl9pbm5lcl90b29sYmFyKCk7XG5cdFx0dGhpcy5wYWdlLmNsZWFyX3VzZXJfYWN0aW9ucygpO1xuXHRcdHRoaXMuY3VzdG9tX2J1dHRvbnMgPSB7fTtcblx0fVxuXG5cdC8vUmVtb3ZlIHNwZWNpZmljIGN1c3RvbSBidXR0b24gYnkgYnV0dG9uIExhYmVsXG5cdHJlbW92ZV9jdXN0b21fYnV0dG9uKGxhYmVsLCBncm91cCkge1xuXHRcdHRoaXMucGFnZS5yZW1vdmVfaW5uZXJfYnV0dG9uKGxhYmVsLCBncm91cCk7XG5cdH1cblxuXHRzY3JvbGxfdG9fZWxlbWVudCgpIHtcblx0XHRpZiAoZnJhcHBlLnJvdXRlX29wdGlvbnMgJiYgZnJhcHBlLnJvdXRlX29wdGlvbnMuc2Nyb2xsX3RvKSB7XG5cdFx0XHRsZXQgeyBzY3JvbGxfdG8gfSA9IGZyYXBwZS5yb3V0ZV9vcHRpb25zO1xuXHRcdFx0ZGVsZXRlIGZyYXBwZS5yb3V0ZV9vcHRpb25zLnNjcm9sbF90bztcblxuXHRcdFx0bGV0IHNlbGVjdG9yID0gW107XG5cdFx0XHRmb3IgKGxldCBrZXkgaW4gc2Nyb2xsX3RvKSB7XG5cdFx0XHRcdGxldCB2YWx1ZSA9IHNjcm9sbF90b1trZXldO1xuXHRcdFx0XHRzZWxlY3Rvci5wdXNoKHJlcGwoJ1tkYXRhLSUoa2V5KXM9XCIlKHZhbHVlKXNcIl0nLCB7IGtleSwgdmFsdWUgfSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9ICQoc2VsZWN0b3Iuam9pbignICcpKTtcblx0XHRcdGlmIChzZWxlY3Rvci5sZW5ndGgpIHtcblx0XHRcdFx0ZnJhcHBlLnV0aWxzLnNjcm9sbF90byhzZWxlY3Rvcik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuXHRcdFx0aWYgKCQod2luZG93LmxvY2F0aW9uLmhhc2gpLmxlbmd0aCkge1xuXHRcdFx0XHRmcmFwcGUudXRpbHMuc2Nyb2xsX3RvKHdpbmRvdy5sb2NhdGlvbi5oYXNoLCB0cnVlLCAyMDAsIG51bGwsIG51bGwsIHRydWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zY3JvbGxfdG9fZmllbGQod2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKSkgJiZcblx0XHRcdFx0XHRoaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCAnICcpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHNob3dfc3VjY2Vzc19hY3Rpb24oKSB7XG5cdFx0Y29uc3Qgcm91dGUgPSBmcmFwcGUuZ2V0X3JvdXRlKCk7XG5cdFx0aWYgKHJvdXRlWzBdICE9PSAnRm9ybScpIHsgcmV0dXJuOyB9XG5cdFx0aWYgKHRoaXMubWV0YS5pc19zdWJtaXR0YWJsZSAmJiB0aGlzLmRvYy5kb2NzdGF0dXMgIT09IDEpIHsgcmV0dXJuOyB9XG5cblx0XHRjb25zdCBzdWNjZXNzX2FjdGlvbiA9IG5ldyBmcmFwcGUudWkuZm9ybS5TdWNjZXNzQWN0aW9uKHRoaXMpO1xuXHRcdHN1Y2Nlc3NfYWN0aW9uLnNob3coKTtcblx0fVxuXG5cdGdldF9kb2MoKSB7XG5cdFx0cmV0dXJuIGxvY2Fsc1t0aGlzLmRvY3R5cGVdW3RoaXMuZG9jbmFtZV07XG5cdH1cblxuXHRzZXRfY3VycmVuY3lfbGFiZWxzKGZpZWxkc19saXN0LCBjdXJyZW5jeSwgcGFyZW50ZmllbGQpIHtcblx0XHQvLyBUbyBzZXQgdGhlIGN1cnJlbmN5IGluIHRoZSBsYWJlbFxuXHRcdC8vIEZvciBleGFtcGxlIFRvdGFsIENvc3QoSU5SKSwgVG90YWwgQ29zdChVU0QpXG5cdFx0aWYgKCFjdXJyZW5jeSkgeyByZXR1cm47IH1cblx0XHRsZXQgbWUgPSB0aGlzO1xuXHRcdGxldCBkb2N0eXBlID0gcGFyZW50ZmllbGQgPyB0aGlzLmZpZWxkc19kaWN0W3BhcmVudGZpZWxkXS5ncmlkLmRvY3R5cGUgOiB0aGlzLmRvYy5kb2N0eXBlO1xuXHRcdGxldCBmaWVsZF9sYWJlbF9tYXAgPSB7fTtcblx0XHRsZXQgZ3JpZF9maWVsZF9sYWJlbF9tYXAgPSB7fTtcblxuXHRcdCQuZWFjaChmaWVsZHNfbGlzdCwgZnVuY3Rpb24gKGksIGZuYW1lKSB7XG5cdFx0XHRsZXQgZG9jZmllbGQgPSBmcmFwcGUubWV0YS5kb2NmaWVsZF9tYXBbZG9jdHlwZV1bZm5hbWVdO1xuXHRcdFx0aWYgKGRvY2ZpZWxkKSB7XG5cdFx0XHRcdHZhciBsYWJlbCA9IF9fKGRvY2ZpZWxkLmxhYmVsIHx8IFwiXCIpLnJlcGxhY2UoL1xcKFteXFwpXSpcXCkvZywgXCJcIik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0XHRcdFx0aWYgKHBhcmVudGZpZWxkKSB7XG5cdFx0XHRcdFx0Z3JpZF9maWVsZF9sYWJlbF9tYXBbYCR7ZG9jdHlwZX0tJHtmbmFtZX1gXSA9XG5cdFx0XHRcdFx0XHRgJHtsYWJlbC50cmltKCl9ICgke19fKGN1cnJlbmN5KX0pYDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmaWVsZF9sYWJlbF9tYXBbZm5hbWVdID0gYCR7bGFiZWwudHJpbSgpfSAoJHtjdXJyZW5jeX0pYDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0JC5lYWNoKGZpZWxkX2xhYmVsX21hcCwgZnVuY3Rpb24gKGZuYW1lLCBsYWJlbCkge1xuXHRcdFx0bWUuZmllbGRzX2RpY3RbZm5hbWVdLnNldF9sYWJlbChsYWJlbCk7XG5cdFx0fSk7XG5cblx0XHQkLmVhY2goZ3JpZF9maWVsZF9sYWJlbF9tYXAsIGZ1bmN0aW9uIChmbmFtZSwgbGFiZWwpIHtcblx0XHRcdGZuYW1lID0gZm5hbWUuc3BsaXQoJy0nKTtcblx0XHRcdG1lLmZpZWxkc19kaWN0W3BhcmVudGZpZWxkXS5ncmlkLnVwZGF0ZV9kb2NmaWVsZF9wcm9wZXJ0eShmbmFtZVsxXSwgJ2xhYmVsJywgbGFiZWwpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZmllbGRfbWFwKGZuYW1lcywgZm4pIHtcblx0XHRpZiAodHlwZW9mIGZuYW1lcyA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGlmIChmbmFtZXMgPT0gJyonKSB7XG5cdFx0XHRcdGZuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuZmllbGRzX2RpY3QpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm5hbWVzID0gW2ZuYW1lc107XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAobGV0IGkgPSAwLCBsID0gZm5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0bGV0IGZpZWxkbmFtZSA9IGZuYW1lc1tpXTtcblx0XHRcdGxldCBmaWVsZCA9IGZyYXBwZS5tZXRhLmdldF9kb2NmaWVsZCh0aGlzLmRvY3R5cGUsIGZpZWxkbmFtZSwgdGhpcy5kb2NuYW1lKTtcblx0XHRcdGlmIChmaWVsZCkge1xuXHRcdFx0XHRmbihmaWVsZCk7XG5cdFx0XHRcdHRoaXMucmVmcmVzaF9maWVsZChmaWVsZG5hbWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldF9kb2NmaWVsZChmaWVsZG5hbWUxLCBmaWVsZG5hbWUyKSB7XG5cdFx0aWYgKGZpZWxkbmFtZTIpIHtcblx0XHRcdC8vIGZvciBjaGlsZFxuXHRcdFx0bGV0IGRvY3R5cGUgPSB0aGlzLmdldF9kb2NmaWVsZChmaWVsZG5hbWUxKS5vcHRpb25zO1xuXHRcdFx0cmV0dXJuIGZyYXBwZS5tZXRhLmdldF9kb2NmaWVsZChkb2N0eXBlLCBmaWVsZG5hbWUyLCB0aGlzLmRvY25hbWUpO1xuXHRcdH1cblx0XHQvLyBmb3IgcGFyZW50XG5cdFx0cmV0dXJuIGZyYXBwZS5tZXRhLmdldF9kb2NmaWVsZCh0aGlzLmRvY3R5cGUsIGZpZWxkbmFtZTEsIHRoaXMuZG9jbmFtZSk7XG5cblx0fVxuXG5cdHNldF9kZl9wcm9wZXJ0eShmaWVsZG5hbWUsIHByb3BlcnR5LCB2YWx1ZSwgZG9jbmFtZSwgdGFibGVfZmllbGQsIHRhYmxlX3Jvd19uYW1lID0gbnVsbCkge1xuXHRcdGxldCBkZjtcblxuXHRcdGlmICghZG9jbmFtZSB8fCAhdGFibGVfZmllbGQpIHtcblx0XHRcdGRmID0gdGhpcy5nZXRfZG9jZmllbGQoZmllbGRuYW1lKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgeyBncmlkIH0gPSB0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV07XG5cdFx0XHRjb25zdCBmaWx0ZXJlZF9maWVsZHMgPSBmcmFwcGUudXRpbHMuZmlsdGVyX2RpY3QoZ3JpZC5kb2NmaWVsZHMsIHtcblx0XHRcdFx0ZmllbGRuYW1lOiB0YWJsZV9maWVsZCxcblx0XHRcdH0pO1xuXHRcdFx0aWYgKGZpbHRlcmVkX2ZpZWxkcy5sZW5ndGgpIHtcblx0XHRcdFx0ZGYgPSBmcmFwcGUubWV0YS5nZXRfZG9jZmllbGQoXG5cdFx0XHRcdFx0ZmlsdGVyZWRfZmllbGRzWzBdLnBhcmVudCxcblx0XHRcdFx0XHR0YWJsZV9maWVsZCxcblx0XHRcdFx0XHR0YWJsZV9yb3dfbmFtZSxcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZGYgJiYgZGZbcHJvcGVydHldICE9IHZhbHVlKSB7XG5cdFx0XHRkZltwcm9wZXJ0eV0gPSB2YWx1ZTtcblxuXHRcdFx0aWYgKHRhYmxlX2ZpZWxkICYmIHRhYmxlX3Jvd19uYW1lKSB7XG5cdFx0XHRcdGlmICh0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV0uZ3JpZC5ncmlkX3Jvd3NfYnlfZG9jbmFtZVt0YWJsZV9yb3dfbmFtZV0pIHtcblx0XHRcdFx0XHR0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV0uZ3JpZC5ncmlkX3Jvd3NfYnlfZG9jbmFtZVtcblx0XHRcdFx0XHRcdHRhYmxlX3Jvd19uYW1lXG5cdFx0XHRcdFx0XS5yZWZyZXNoX2ZpZWxkKGZpZWxkbmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVmcmVzaF9maWVsZChmaWVsZG5hbWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRvZ2dsZV9lbmFibGUoZm5hbWVzLCBlbmFibGUpIHtcblx0XHR0aGlzLmZpZWxkX21hcChmbmFtZXMsIGZ1bmN0aW9uIChmaWVsZCkge1xuXHRcdFx0ZmllbGQucmVhZF9vbmx5ID0gZW5hYmxlID8gMCA6IDE7XG5cdFx0fSk7XG5cdH1cblxuXHR0b2dnbGVfcmVxZChmbmFtZXMsIG1hbmRhdG9yeSkge1xuXHRcdHRoaXMuZmllbGRfbWFwKGZuYW1lcywgZnVuY3Rpb24gKGZpZWxkKSB7XG5cdFx0XHRmaWVsZC5yZXFkID0gbWFuZGF0b3J5ID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdH0pO1xuXHR9XG5cblx0dG9nZ2xlX2Rpc3BsYXkoZm5hbWVzLCBzaG93KSB7XG5cdFx0dGhpcy5maWVsZF9tYXAoZm5hbWVzLCBmdW5jdGlvbiAoZmllbGQpIHtcblx0XHRcdGZpZWxkLmhpZGRlbiA9IHNob3cgPyAwIDogMTtcblx0XHR9KTtcblx0fVxuXG5cdGdldF9maWxlcygpIHtcblx0XHRyZXR1cm4gdGhpcy5hdHRhY2htZW50c1xuXHRcdFx0PyBmcmFwcGUudXRpbHMuc29ydCh0aGlzLmF0dGFjaG1lbnRzLmdldF9hdHRhY2htZW50cygpLCAnZmlsZV9uYW1lJywgJ3N0cmluZycpXG5cdFx0XHQ6IFtdO1xuXHR9XG5cblx0c2V0X3F1ZXJ5KGZpZWxkbmFtZSwgb3B0MSwgb3B0Mikge1xuXHRcdGlmIChvcHQyKSB7XG5cdFx0XHQvLyBvbiBjaGlsZCB0YWJsZVxuXHRcdFx0Ly8gc2V0X3F1ZXJ5KGZpZWxkbmFtZSwgcGFyZW50IGZpZWxkbmFtZSwgcXVlcnkpXG5cdFx0XHR0aGlzLmZpZWxkc19kaWN0W29wdDFdLmdyaWQuZ2V0X2ZpZWxkKGZpZWxkbmFtZSkuZ2V0X3F1ZXJ5ID0gb3B0Mjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gb24gcGFyZW50IHRhYmxlXG5cdFx0XHQvLyBzZXRfcXVlcnkoZmllbGRuYW1lLCBxdWVyeSlcblx0XHRcdGlmICh0aGlzLmZpZWxkc19kaWN0W2ZpZWxkbmFtZV0pIHtcblx0XHRcdFx0dGhpcy5maWVsZHNfZGljdFtmaWVsZG5hbWVdLmdldF9xdWVyeSA9IG9wdDE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Y2xlYXJfdGFibGUoZmllbGRuYW1lKSB7XG5cdFx0ZnJhcHBlLm1vZGVsLmNsZWFyX3RhYmxlKHRoaXMuZG9jLCBmaWVsZG5hbWUpO1xuXHR9XG5cblx0YWRkX2NoaWxkKGZpZWxkbmFtZSwgdmFsdWVzKSB7XG5cdFx0bGV0IGRvYyA9IGZyYXBwZS5tb2RlbC5hZGRfY2hpbGQoXG5cdFx0XHR0aGlzLmRvYyxcblx0XHRcdGZyYXBwZS5tZXRhLmdldF9kb2NmaWVsZCh0aGlzLmRvY3R5cGUsIGZpZWxkbmFtZSkub3B0aW9ucyxcblx0XHRcdGZpZWxkbmFtZSxcblx0XHQpO1xuXHRcdGlmICh2YWx1ZXMpIHtcblx0XHRcdC8vIFZhbHVlcyBvZiB1bmlxdWUga2V5cyBzaG91bGQgbm90IGJlIG92ZXJyaWRkZW5cblx0XHRcdGxldCBkID0ge307XG5cdFx0XHRsZXQgdW5pcXVlX2tleXMgPSBbJ2lkeCcsICduYW1lJ107XG5cblx0XHRcdE9iamVjdC5rZXlzKHZhbHVlcykubWFwKGtleSA9PiB7XG5cdFx0XHRcdGlmICghdW5pcXVlX2tleXMuaW5jbHVkZXMoa2V5KSkge1xuXHRcdFx0XHRcdGRba2V5XSA9IHZhbHVlc1trZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0JC5leHRlbmQoZG9jLCBkKTtcblx0XHR9XG5cdFx0cmV0dXJuIGRvYztcblx0fVxuXG5cdHNldF92YWx1ZShmaWVsZCwgdmFsdWUsIGlmX21pc3NpbmcsIHNraXBfZGlydHlfdHJpZ2dlciA9IGZhbHNlKSB7XG5cdFx0bGV0IG1lID0gdGhpcztcblx0XHRsZXQgX3NldCA9IGZ1bmN0aW9uIChmLCB2KSB7XG5cdFx0XHRsZXQgZmllbGRvYmogPSBtZS5maWVsZHNfZGljdFtmXTtcblx0XHRcdGlmIChmaWVsZG9iaikge1xuXHRcdFx0XHRpZiAoIWlmX21pc3NpbmcgfHwgIWZyYXBwZS5tb2RlbC5oYXNfdmFsdWUobWUuZG9jdHlwZSwgbWUuZG9jLm5hbWUsIGYpKSB7XG5cdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0ZnJhcHBlLm1vZGVsLnRhYmxlX2ZpZWxkcy5pbmNsdWRlcyhmaWVsZG9iai5kZi5maWVsZHR5cGUpICYmXG5cdFx0XHRcdFx0XHQkLmlzQXJyYXkodilcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdC8vIHNldCBlbnRpcmUgY2hpbGQgdGFibGUgZnJvbSBzcGVjaWZpZWQgYXJyYXkgYXMgdmFsdWVcblx0XHRcdFx0XHRcdGZyYXBwZS5tb2RlbC5jbGVhcl90YWJsZShtZS5kb2MsIGZpZWxkb2JqLmRmLmZpZWxkbmFtZSk7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHN0YW5kYXJkX2ZpZWxkcyA9IFtcblx0XHRcdFx0XHRcdFx0Li4uZnJhcHBlLm1vZGVsLnN0ZF9maWVsZHNfbGlzdCxcblx0XHRcdFx0XHRcdFx0Li4uZnJhcHBlLm1vZGVsLmNoaWxkX3RhYmxlX2ZpZWxkX2xpc3QsXG5cdFx0XHRcdFx0XHRdO1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBbaWR4LCBkXSBvZiB2LmVudHJpZXMoKSkge1xuXHRcdFx0XHRcdFx0XHRsZXQgY2hpbGQgPSBmcmFwcGUubW9kZWwuYWRkX2NoaWxkKFxuXHRcdFx0XHRcdFx0XHRcdG1lLmRvYyxcblx0XHRcdFx0XHRcdFx0XHRmaWVsZG9iai5kZi5vcHRpb25zLFxuXHRcdFx0XHRcdFx0XHRcdGZpZWxkb2JqLmRmLmZpZWxkbmFtZSxcblx0XHRcdFx0XHRcdFx0XHRpZHggKyAxLFxuXHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHNldCBzdGFuZGFyZCBmaWVsZCwgYXZvaWQgbXV0YXRpbmcgaW5wdXQgdG9vLlxuXHRcdFx0XHRcdFx0XHRsZXQgZG9jX2NvcHkgPSB7IC4uLmQgfTtcblx0XHRcdFx0XHRcdFx0Zm9yIChjb25zdCBmaWVsZCBvZiBzdGFuZGFyZF9maWVsZHMpIHtcblx0XHRcdFx0XHRcdFx0XHRkZWxldGUgZG9jX2NvcHlbZmllbGRdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdCQuZXh0ZW5kKGNoaWxkLCBkb2NfY29weSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG1lLnJlZnJlc2hfZmllbGQoZik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBmcmFwcGUubW9kZWwuc2V0X3ZhbHVlKFxuXHRcdFx0XHRcdFx0bWUuZG9jdHlwZSxcblx0XHRcdFx0XHRcdG1lLmRvYy5uYW1lLFxuXHRcdFx0XHRcdFx0Zixcblx0XHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0XHRtZS5maWVsZHR5cGUsXG5cdFx0XHRcdFx0XHRza2lwX2RpcnR5X3RyaWdnZXIsXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmcmFwcGUubXNncHJpbnQoX18oJ0ZpZWxkIHswfSBub3QgZm91bmQuJywgW2ZdKSk7XG5cdFx0XHRcdHRocm93ICdmcm0uc2V0X3ZhbHVlJztcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0aWYgKHR5cGVvZiBmaWVsZCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHJldHVybiBfc2V0KGZpZWxkLCB2YWx1ZSk7XG5cdFx0fSBlbHNlIGlmICgkLmlzUGxhaW5PYmplY3QoZmllbGQpKSB7XG5cdFx0XHRsZXQgdGFza3MgPSBbXTtcblx0XHRcdGZvciAobGV0IGYgaW4gZmllbGQpIHtcblx0XHRcdFx0bGV0IHYgPSBmaWVsZFtmXTtcblx0XHRcdFx0aWYgKG1lLmdldF9maWVsZChmKSkge1xuXHRcdFx0XHRcdHRhc2tzLnB1c2goKCkgPT4gX3NldChmLCB2KSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmcmFwcGUucnVuX3NlcmlhbGx5KHRhc2tzKTtcblx0XHR9XG5cdH1cblxuXHRjYWxsKG9wdHMsIGFyZ3MsIGNhbGxiYWNrKSB7XG5cdFx0bGV0IG1lID0gdGhpcztcblx0XHRpZiAodHlwZW9mIG9wdHMgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHQvLyBjYWxsZWQgYXMgZnJtLmNhbGwoJ2RvX3RoaXMnLCB7d2l0aF9hcmc6ICdhcmcnfSk7XG5cdFx0XHRvcHRzID0ge1xuXHRcdFx0XHRtZXRob2Q6IG9wdHMsXG5cdFx0XHRcdGRvYzogdGhpcy5kb2MsXG5cdFx0XHRcdGFyZ3MsXG5cdFx0XHRcdGNhbGxiYWNrLFxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aWYgKG9wdHMuZG9jKSB7XG5cdFx0XHRvcHRzLm9yaWdpbmFsX2NhbGxiYWNrID0gb3B0cy5jYWxsYmFjaztcblx0XHRcdG9wdHMuY2FsbGJhY2sgPSBmdW5jdGlvbiAocikge1xuXHRcdFx0XHRpZiAoIXIuZXhjKSB7IG1lLnJlZnJlc2hfZmllbGRzKCk7IH1cblxuXHRcdFx0XHRvcHRzLm9yaWdpbmFsX2NhbGxiYWNrICYmIG9wdHMub3JpZ2luYWxfY2FsbGJhY2socik7XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAob3B0cy5tZXRob2QuaW5kZXhPZignLicpID09PSAtMSkge1xuXHRcdFx0XHRvcHRzLm1ldGhvZCA9IGAke2ZyYXBwZS5tb2RlbC5nZXRfc2VydmVyX21vZHVsZV9uYW1lKG1lLmRvY3R5cGUpfS4ke29wdHMubWV0aG9kfWA7XG5cdFx0XHR9XG5cdFx0XHRvcHRzLm9yaWdpbmFsX2NhbGxiYWNrID0gb3B0cy5jYWxsYmFjaztcblx0XHRcdG9wdHMuY2FsbGJhY2sgPSBmdW5jdGlvbiAocikge1xuXHRcdFx0XHRpZiAoJC5pc1BsYWluT2JqZWN0KHIubWVzc2FnZSkpIHtcblx0XHRcdFx0XHRpZiAob3B0cy5jaGlsZCkge1xuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIGNoaWxkIGRvY1xuXHRcdFx0XHRcdFx0b3B0cy5jaGlsZCA9IGxvY2Fsc1tvcHRzLmNoaWxkLmRvY3R5cGVdW29wdHMuY2hpbGQubmFtZV07XG5cblx0XHRcdFx0XHRcdGxldCBzdGRfZmllbGRfbGlzdCA9IFsnZG9jdHlwZSddXG5cdFx0XHRcdFx0XHRcdC5jb25jYXQoZnJhcHBlLm1vZGVsLnN0ZF9maWVsZHNfbGlzdClcblx0XHRcdFx0XHRcdFx0LmNvbmNhdChmcmFwcGUubW9kZWwuY2hpbGRfdGFibGVfZmllbGRfbGlzdCk7XG5cdFx0XHRcdFx0XHRmb3IgKGxldCBrZXkgaW4gci5tZXNzYWdlKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChzdGRfZmllbGRfbGlzdC5pbmRleE9mKGtleSkgPT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0cy5jaGlsZFtrZXldID0gci5tZXNzYWdlW2tleV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWUuZmllbGRzX2RpY3Rbb3B0cy5jaGlsZC5wYXJlbnRmaWVsZF0ucmVmcmVzaCgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvLyB1cGRhdGUgcGFyZW50IGRvY1xuXHRcdFx0XHRcdFx0bWUuc2V0X3ZhbHVlKHIubWVzc2FnZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdG9wdHMub3JpZ2luYWxfY2FsbGJhY2sgJiYgb3B0cy5vcmlnaW5hbF9jYWxsYmFjayhyKTtcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiBmcmFwcGUuY2FsbChvcHRzKTtcblx0fVxuXG5cdGdldF9maWVsZChmaWVsZCkge1xuXHRcdHJldHVybiB0aGlzLmZpZWxkc19kaWN0W2ZpZWxkXTtcblx0fVxuXG5cdHNldF9yZWFkX29ubHkoKSB7XG5cdFx0Y29uc3QgZG9jcGVybXMgPSBmcmFwcGUucGVybS5nZXRfcGVybSh0aGlzLmRvYy5kb2N0eXBlKTtcblx0XHR0aGlzLnBlcm0gPSBkb2NwZXJtcy5tYXAocCA9PiAoe1xuXHRcdFx0cmVhZDogcC5yZWFkLFxuXHRcdFx0Y2FuY2VsOiBwLmNhbmNlbCxcblx0XHRcdHNoYXJlOiBwLnNoYXJlLFxuXHRcdFx0cHJpbnQ6IHAucHJpbnQsXG5cdFx0XHRlbWFpbDogcC5lbWFpbCxcblx0XHR9KSk7XG5cdH1cblxuXHR0cmlnZ2VyKGV2ZW50LCBkb2N0eXBlLCBkb2NuYW1lKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2NyaXB0X21hbmFnZXIudHJpZ2dlcihldmVudCwgZG9jdHlwZSwgZG9jbmFtZSk7XG5cdH1cblxuXHRnZXRfZm9ybWF0dGVkKGZpZWxkbmFtZSkge1xuXHRcdHJldHVybiBmcmFwcGUuZm9ybWF0KFxuXHRcdFx0dGhpcy5kb2NbZmllbGRuYW1lXSxcblx0XHRcdGZyYXBwZS5tZXRhLmdldF9kb2NmaWVsZCh0aGlzLmRvY3R5cGUsIGZpZWxkbmFtZSwgdGhpcy5kb2NuYW1lKSxcblx0XHRcdHsgbm9faWNvbjogdHJ1ZSB9LFxuXHRcdFx0dGhpcy5kb2MsXG5cdFx0KTtcblx0fVxuXG5cdG9wZW5fZ3JpZF9yb3coKSB7XG5cdFx0cmV0dXJuIGZyYXBwZS51aS5mb3JtLmdldF9vcGVuX2dyaWRfZm9ybSgpO1xuXHR9XG5cblx0Z2V0X3RpdGxlKCkge1xuXHRcdGlmICh0aGlzLm1ldGEudGl0bGVfZmllbGQpIHtcblx0XHRcdHJldHVybiB0aGlzLmRvY1t0aGlzLm1ldGEudGl0bGVfZmllbGRdO1xuXHRcdH1cblx0XHRyZXR1cm4gU3RyaW5nKHRoaXMuZG9jLm5hbWUpO1xuXG5cdH1cblxuXHRnZXRfc2VsZWN0ZWQoKSB7XG5cdFx0Ly8gcmV0dXJucyBsaXN0IG9mIGNoaWxkcmVuIHRoYXQgYXJlIHNlbGVjdGVkLiByZXR1cm5zIFtwYXJlbnRmaWVsZCwgbmFtZV0gZm9yIGVhY2hcblx0XHRsZXQgc2VsZWN0ZWQgPSB7fSxcblx0XHRcdG1lID0gdGhpcztcblx0XHRmb3IgKGNvbnN0IGRmIG9mIGZyYXBwZS5tZXRhLmdldF90YWJsZV9maWVsZHModGhpcy5kb2N0eXBlKSkge1xuXHRcdFx0Ly8gaGFuZGxlIFRhYmxlTXVsdGlzZWxlY3QgY2hpbGQgZmllbGRzXG5cdFx0XHRsZXQgX3NlbGVjdGVkID0gW107XG5cblx0XHRcdGlmIChtZS5maWVsZHNfZGljdFtkZi5maWVsZG5hbWVdLmdyaWQpIHtcblx0XHRcdFx0X3NlbGVjdGVkID0gbWUuZmllbGRzX2RpY3RbZGYuZmllbGRuYW1lXS5ncmlkLmdldF9zZWxlY3RlZCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX3NlbGVjdGVkLmxlbmd0aCkge1xuXHRcdFx0XHRzZWxlY3RlZFtkZi5maWVsZG5hbWVdID0gX3NlbGVjdGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRzZXRfaW5kaWNhdG9yX2Zvcm1hdHRlcihmaWVsZG5hbWUsIGdldF9jb2xvciwgZ2V0X3RleHQpIHtcblx0XHQvLyBnZXQgZG9jdHlwZSBmcm9tIHBhcmVudFxuXHRcdGxldCBkb2N0eXBlO1xuXHRcdGlmIChmcmFwcGUubWV0YS5kb2NmaWVsZF9tYXBbdGhpcy5kb2N0eXBlXVtmaWVsZG5hbWVdKSB7XG5cdFx0XHRkb2N0eXBlID0gdGhpcy5kb2N0eXBlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmcmFwcGUubWV0YS5nZXRfdGFibGVfZmllbGRzKHRoaXMuZG9jdHlwZSkuZXZlcnkoZnVuY3Rpb24gKGRmKSB7XG5cdFx0XHRcdGlmIChmcmFwcGUubWV0YS5kb2NmaWVsZF9tYXBbZGYub3B0aW9uc11bZmllbGRuYW1lXSkge1xuXHRcdFx0XHRcdGRvY3R5cGUgPSBkZi5vcHRpb25zO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZnJhcHBlLm1ldGEuZG9jZmllbGRfbWFwW2RvY3R5cGVdW2ZpZWxkbmFtZV0uZm9ybWF0dGVyID0gZnVuY3Rpb24gKFxuXHRcdFx0dmFsdWUsXG5cdFx0XHRkZixcblx0XHRcdG9wdGlvbnMsXG5cdFx0XHRkb2MsXG5cdFx0KSB7XG5cdFx0XHRpZiAodmFsdWUpIHtcblx0XHRcdFx0bGV0IGxhYmVsO1xuXHRcdFx0XHRpZiAoZ2V0X3RleHQpIHtcblx0XHRcdFx0XHRsYWJlbCA9IGdldF90ZXh0KGRvYyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZnJhcHBlLmZvcm0ubGlua19mb3JtYXR0ZXJzW2RmLm9wdGlvbnNdKSB7XG5cdFx0XHRcdFx0bGFiZWwgPSBmcmFwcGUuZm9ybS5saW5rX2Zvcm1hdHRlcnNbZGYub3B0aW9uc10odmFsdWUsIGRvYyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGFiZWwgPSB2YWx1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGVzY2FwZWRfbmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cblx0XHRcdFx0cmV0dXJuIGBcblx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiaW5kaWNhdG9yICR7Z2V0X2NvbG9yKGRvYyB8fCB7fSl9XCJcblx0XHRcdFx0XHRcdFx0aHJlZj1cIi9hcHAvJHtmcmFwcGUucm91dGVyLnNsdWcoZGYub3B0aW9ucyl9LyR7ZXNjYXBlZF9uYW1lfVwiXG5cdFx0XHRcdFx0XHRcdGRhdGEtZG9jdHlwZT1cIiR7ZGYub3B0aW9uc31cIlxuXHRcdFx0XHRcdFx0XHRkYXRhLW5hbWU9XCIke3ZhbHVlfVwiPlxuXHRcdFx0XHRcdFx0XHQke2xhYmVsfVxuXHRcdFx0XHRcdFx0PC9hPlxuXHRcdFx0XHRcdGA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJyc7XG5cblx0XHR9O1xuXHR9XG5cblx0Y2FuX2NyZWF0ZShkb2N0eXBlKSB7XG5cdFx0Ly8gcmV0dXJuIHRydWUgb3IgZmFsc2UgaWYgdGhlIHVzZXIgY2FuIG1ha2UgYSBwYXJ0aWNsYXIgZG9jdHlwZVxuXHRcdC8vIHdpbGwgY2hlY2sgcGVybWlzc2lvbiwgYGNhbl9tYWtlX21ldGhvZHNgIGlmIGV4aXN0cywgb3Igd2lsbCBkZWNpZGVkIG9uXG5cdFx0Ly8gYmFzaXMgb2Ygd2hldGhlciB0aGUgZG9jdW1lbnQgaXMgc3VibWl0dGFibGVcblx0XHRpZiAoIWZyYXBwZS5tb2RlbC5jYW5fY3JlYXRlKGRvY3R5cGUpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY3VzdG9tX21ha2VfYnV0dG9ucyAmJiB0aGlzLmN1c3RvbV9tYWtlX2J1dHRvbnNbZG9jdHlwZV0pIHtcblx0XHRcdC8vIGN1c3RvbSBidXR0b25zIGFyZSB0cmFuc2xhdGVkIGFuZCBzbyBhcmUgdGhlIGtleXNcblx0XHRcdGNvbnN0IGtleSA9IF9fKHRoaXMuY3VzdG9tX21ha2VfYnV0dG9uc1tkb2N0eXBlXSk7XG5cdFx0XHQvLyBpZiB0aGUgYnV0dG9uIGlzIHByZXNlbnQsIHRoZW4gc2hvdyBtYWtlXG5cdFx0XHRyZXR1cm4gQm9vbGVhbih0aGlzLmN1c3RvbV9idXR0b25zW2tleV0pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNhbl9tYWtlX21ldGhvZHMgJiYgdGhpcy5jYW5fbWFrZV9tZXRob2RzW2RvY3R5cGVdKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jYW5fbWFrZV9tZXRob2RzW2RvY3R5cGVdKHRoaXMpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5tZXRhLmlzX3N1Ym1pdHRhYmxlICYmICF0aGlzLmRvYy5kb2NzdGF0dXMgPT0gMSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXG5cdH1cblxuXHRtYWtlX25ldyhkb2N0eXBlKSB7XG5cdFx0Ly8gbWFrZSBuZXcgZG9jdHlwZSBmcm9tIHRoZSBjdXJyZW50IGZvcm1cblx0XHQvLyB3aWxsIGhhbmRvdmVyIHRvIGBtYWtlX21ldGhvZHNgIGlmIGRlZmluZWRcblx0XHQvLyBvciB3aWxsIGNyZWF0ZSBhbmQgbWF0Y2ggbGluayBmaWVsZHNcblx0XHRsZXQgbWUgPSB0aGlzO1xuXHRcdGlmICh0aGlzLm1ha2VfbWV0aG9kcyAmJiB0aGlzLm1ha2VfbWV0aG9kc1tkb2N0eXBlXSkge1xuXHRcdFx0cmV0dXJuIHRoaXMubWFrZV9tZXRob2RzW2RvY3R5cGVdKHRoaXMpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5jdXN0b21fbWFrZV9idXR0b25zICYmIHRoaXMuY3VzdG9tX21ha2VfYnV0dG9uc1tkb2N0eXBlXSkge1xuXHRcdFx0dGhpcy5jdXN0b21fYnV0dG9uc1tfXyh0aGlzLmN1c3RvbV9tYWtlX2J1dHRvbnNbZG9jdHlwZV0pXS50cmlnZ2VyKCdjbGljaycpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmcmFwcGUubW9kZWwud2l0aF9kb2N0eXBlKGRvY3R5cGUsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0bGV0IG5ld19kb2MgPSBmcmFwcGUubW9kZWwuZ2V0X25ld19kb2MoZG9jdHlwZSwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG5cblx0XHRcdFx0Ly8gc2V0IGxpbmsgZmllbGRzIChpZiBmb3VuZClcblx0XHRcdFx0bWUuc2V0X2xpbmtfZmllbGQoZG9jdHlwZSwgbmV3X2RvYyk7XG5cblx0XHRcdFx0ZnJhcHBlLnVpLmZvcm0ubWFrZV9xdWlja19lbnRyeShkb2N0eXBlLCBudWxsLCBudWxsLCBuZXdfZG9jKTtcblx0XHRcdFx0Ly8gZnJhcHBlLnNldF9yb3V0ZSgnRm9ybScsIGRvY3R5cGUsIG5ld19kb2MubmFtZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRzZXRfbGlua19maWVsZChkb2N0eXBlLCBuZXdfZG9jKSB7XG5cdFx0bGV0IG1lID0gdGhpcztcblx0XHRmb3IgKGNvbnN0IGRmIG9mIGZyYXBwZS5nZXRfbWV0YShkb2N0eXBlKS5maWVsZHMpIHtcblx0XHRcdGlmIChkZi5maWVsZHR5cGUgPT09ICdMaW5rJyAmJiBkZi5vcHRpb25zID09PSBtZS5kb2N0eXBlKSB7XG5cdFx0XHRcdG5ld19kb2NbZGYuZmllbGRuYW1lXSA9IG1lLmRvYy5uYW1lO1xuXHRcdFx0fSBlbHNlIGlmIChbJ0xpbmsnLCAnRHluYW1pYyBMaW5rJ10uaW5jbHVkZXMoZGYuZmllbGR0eXBlKSAmJiBtZS5kb2NbZGYuZmllbGRuYW1lXSkge1xuXHRcdFx0XHRuZXdfZG9jW2RmLmZpZWxkbmFtZV0gPSBtZS5kb2NbZGYuZmllbGRuYW1lXTtcblx0XHRcdH0gZWxzZSBpZiAoZGYuZmllbGR0eXBlID09PSAnVGFibGUnICYmIGRmLm9wdGlvbnMgJiYgZGYucmVxZCkge1xuXHRcdFx0XHRsZXQgcm93ID0gbmV3X2RvY1tkZi5maWVsZG5hbWVdWzBdO1xuXHRcdFx0XHRtZS5zZXRfbGlua19maWVsZChkZi5vcHRpb25zLCByb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZV9pbl9hbGxfcm93cyh0YWJsZV9maWVsZG5hbWUsIGZpZWxkbmFtZSwgdmFsdWUpIHtcblx0XHQvLyBVcGRhdGUgdGhlIGB2YWx1ZWAgb2YgdGhlIGZpZWxkIG5hbWVkIGBmaWVsZG5hbWVgIGluIGFsbCByb3dzIG9mIHRoZVxuXHRcdC8vIGNoaWxkIHRhYmxlIG5hbWVkIGB0YWJsZV9maWVsZG5hbWVgLlxuXHRcdC8vIERvIG5vdCBvdmVyd3JpdGUgZXhpc3RpbmcgdmFsdWVzLlxuXHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuXG5cdFx0Zm9yIChjb25zdCBjaGlsZCBvZiBmcmFwcGUubW9kZWxcblx0XHRcdC5nZXRfY2hpbGRyZW4odGhpcy5kb2MsIHRhYmxlX2ZpZWxkbmFtZSlcblx0XHRcdC5maWx0ZXIoY2hpbGQgPT4gIWZyYXBwZS5tb2RlbC5oYXNfdmFsdWUoY2hpbGQuZG9jdHlwZSwgY2hpbGQubmFtZSwgZmllbGRuYW1lKSkpIHsgZnJhcHBlLm1vZGVsLnNldF92YWx1ZShjaGlsZC5kb2N0eXBlLCBjaGlsZC5uYW1lLCBmaWVsZG5hbWUsIHZhbHVlKTtcblx0XHR9XG5cdH1cblxuXHRnZXRfc3VtKHRhYmxlX2ZpZWxkbmFtZSwgZmllbGRuYW1lKSB7XG5cdFx0bGV0IHN1bSA9IDA7XG5cdFx0Zm9yIChsZXQgZCBvZiB0aGlzLmRvY1t0YWJsZV9maWVsZG5hbWVdIHx8IFtdKSB7XG5cdFx0XHRzdW0gKz0gZFtmaWVsZG5hbWVdO1xuXHRcdH1cblx0XHRyZXR1cm4gc3VtO1xuXHR9XG5cblx0c2Nyb2xsX3RvX2ZpZWxkKGZpZWxkbmFtZSwgZm9jdXMgPSB0cnVlKSB7XG5cdFx0bGV0IGZpZWxkID0gdGhpcy5nZXRfZmllbGQoZmllbGRuYW1lKTtcblx0XHRpZiAoIWZpZWxkKSB7IHJldHVybjsgfVxuXG5cdFx0bGV0ICRlbCA9IGZpZWxkLiR3cmFwcGVyO1xuXG5cdFx0Ly8gc2V0IHRhYiBhcyBhY3RpdmVcblx0XHRpZiAoZmllbGQudGFiICYmICFmaWVsZC50YWIuaXNfYWN0aXZlKCkpIHtcblx0XHRcdGZpZWxkLnRhYi5zZXRfYWN0aXZlKCk7XG5cdFx0fVxuXG5cdFx0Ly8gdW5jb2xsYXBzZSBzZWN0aW9uXG5cdFx0aWYgKGZpZWxkLnNlY3Rpb24/LmlzX2NvbGxhcHNlZCgpKSB7XG5cdFx0XHRmaWVsZC5zZWN0aW9uLmNvbGxhcHNlKGZhbHNlKTtcblx0XHR9XG5cblx0XHQvLyBzY3JvbGwgdG8gaW5wdXRcblx0XHRmcmFwcGUudXRpbHMuc2Nyb2xsX3RvKCRlbCwgdHJ1ZSwgMTUpO1xuXG5cdFx0Ly8gZm9jdXMgaWYgdGV4dCBmaWVsZFxuXHRcdGlmIChmb2N1cykge1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdCRlbC5maW5kKCdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYScpLmZvY3VzKCk7XG5cdFx0XHR9LCA1MDApO1xuXHRcdH1cblxuXHRcdC8vIGhpZ2hsaWdodCBjb250cm9sIGluc2lkZSBmaWVsZFxuXHRcdGxldCBjb250cm9sX2VsZW1lbnQgPSAkZWwuY2xvc2VzdCgnLmZyYXBwZS1jb250cm9sJyk7XG5cdFx0Y29udHJvbF9lbGVtZW50LmFkZENsYXNzKCdoaWdobGlnaHQnKTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGNvbnRyb2xfZWxlbWVudC5yZW1vdmVDbGFzcygnaGlnaGxpZ2h0Jyk7XG5cdFx0fSwgMjAwMCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRzZXR1cF9kb2NpbmZvX2NoYW5nZV9saXN0ZW5lcigpIHtcblx0XHRsZXQgeyBkb2N0eXBlIH0gPSB0aGlzO1xuXHRcdGxldCB7IGRvY25hbWUgfSA9IHRoaXM7XG5cblx0XHRpZiAodGhpcy5kb2MgJiYgIXRoaXMuaXNfbmV3KCkpIHtcblx0XHRcdGZyYXBwZS5zb2NrZXRpby5kb2Nfc3Vic2NyaWJlKGRvY3R5cGUsIGRvY25hbWUpO1xuXHRcdH1cblx0XHRmcmFwcGUucmVhbHRpbWUub2ZmKCdkb2NpbmZvX3VwZGF0ZScpO1xuXHRcdGZyYXBwZS5yZWFsdGltZS5vbignZG9jaW5mb191cGRhdGUnLCAoeyBkb2MsIGtleSwgYWN0aW9uID0gJ3VwZGF0ZScgfSkgPT4ge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhZG9jLnJlZmVyZW5jZV9kb2N0eXBlIHx8XG5cdFx0XHRcdFx0IWRvYy5yZWZlcmVuY2VfbmFtZSB8fFxuXHRcdFx0XHRcdGRvYy5yZWZlcmVuY2VfZG9jdHlwZSAhPT0gZG9jdHlwZSB8fFxuXHRcdFx0XHRcdGRvYy5yZWZlcmVuY2VfbmFtZSAhPT0gZG9jbmFtZVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGxldCBkb2NfbGlzdCA9IGZyYXBwZS5tb2RlbC5kb2NpbmZvW2RvY3R5cGVdW2RvY25hbWVdW2tleV0gfHwgW107XG5cdFx0XHRsZXQgZG9jaW5kZXggPSBkb2NfbGlzdC5maW5kSW5kZXgob2xkX2RvYyA9PiBvbGRfZG9jLm5hbWUgPT09IGRvYy5uYW1lKTtcblxuXHRcdFx0aWYgKGFjdGlvbiA9PT0gJ2FkZCcpIHtcblx0XHRcdFx0ZnJhcHBlLm1vZGVsLmRvY2luZm9bZG9jdHlwZV1bZG9jbmFtZV1ba2V5XS5wdXNoKGRvYyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9jaW5kZXggPiAtMSkge1xuXHRcdFx0XHRpZiAoYWN0aW9uID09PSAndXBkYXRlJykge1xuXHRcdFx0XHRcdGZyYXBwZS5tb2RlbC5kb2NpbmZvW2RvY3R5cGVdW2RvY25hbWVdW2tleV0uc3BsaWNlKGRvY2luZGV4LCAxLCBkb2MpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhY3Rpb24gPT09ICdkZWxldGUnKSB7XG5cdFx0XHRcdFx0ZnJhcHBlLm1vZGVsLmRvY2luZm9bZG9jdHlwZV1bZG9jbmFtZV1ba2V5XS5zcGxpY2UoZG9jaW5kZXgsIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBubyBuZWVkIHRvIHVwZGF0ZSB0aW1lbGluZSBvZiBvd25lciBvZiBjb21tZW50XG5cdFx0XHQvLyBnZXRzIGhhbmRsZWQgdmlhIGNvbW1lbnQgc3VibWl0IGNvZGVcblx0XHRcdGlmIChcblx0XHRcdFx0IShcblx0XHRcdFx0XHRbJ2FkZCcsICd1cGRhdGUnXS5pbmNsdWRlcyhhY3Rpb24pICYmXG5cdFx0XHRcdFx0ZG9jLmRvY3R5cGUgPT09ICdDb21tZW50JyAmJlxuXHRcdFx0XHRcdGRvYy5vd25lciA9PT0gZnJhcHBlLnNlc3Npb24udXNlclxuXHRcdFx0XHQpXG5cdFx0XHQpIHtcblx0XHRcdFx0dGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLnJlZnJlc2goKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vIEZpbHRlcnMgZmllbGRzIGZyb20gdGhlIHJlZmVyZW5jZSBkb2N0eXBlIGFuZCBzZXRzIHRoZW0gYXMgb3B0aW9ucyBmb3IgYSBTZWxlY3QgZmllbGRcblx0c2V0X2ZpZWxkc19hc19vcHRpb25zKFxuXHRcdGZpZWxkbmFtZSxcblx0XHRyZWZlcmVuY2VfZG9jdHlwZSxcblx0XHRmaWx0ZXJfZnVuY3Rpb24sXG5cdFx0ZGVmYXVsdF9vcHRpb25zID0gW10sXG5cdFx0dGFibGVfZmllbGRuYW1lLFxuXHQpIHtcblx0XHRpZiAoIXJlZmVyZW5jZV9kb2N0eXBlKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsgfVxuXHRcdGxldCBvcHRpb25zID0gZGVmYXVsdF9vcHRpb25zIHx8IFtdO1xuXHRcdGlmICghZmlsdGVyX2Z1bmN0aW9uKSB7IGZpbHRlcl9mdW5jdGlvbiA9IGYgPT4gZjsgfVxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblx0XHRcdGZyYXBwZS5tb2RlbC53aXRoX2RvY3R5cGUocmVmZXJlbmNlX2RvY3R5cGUsICgpID0+IHtcblx0XHRcdFx0ZnJhcHBlLmdldF9tZXRhKHJlZmVyZW5jZV9kb2N0eXBlKS5maWVsZHMubWFwKGRmID0+IHtcblx0XHRcdFx0XHRmaWx0ZXJfZnVuY3Rpb24oZGYpICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnB1c2goeyBsYWJlbDogZGYubGFiZWwgfHwgZGYuZmllbGRuYW1lLCB2YWx1ZTogZGYuZmllbGRuYW1lIH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0b3B0aW9ucyAmJlxuXHRcdFx0XHRcdHRoaXMuc2V0X2RmX3Byb3BlcnR5KFxuXHRcdFx0XHRcdFx0ZmllbGRuYW1lLFxuXHRcdFx0XHRcdFx0J29wdGlvbnMnLFxuXHRcdFx0XHRcdFx0b3B0aW9ucyxcblx0XHRcdFx0XHRcdHRoaXMuZG9jLm5hbWUsXG5cdFx0XHRcdFx0XHR0YWJsZV9maWVsZG5hbWUsXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0cmVzb2x2ZShvcHRpb25zKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cdHNldF9hY3RpdmVfdGFiKHRhYikge1xuXHRcdGlmICghdGhpcy5hY3RpdmVfdGFiX21hcCkge1xuXHRcdFx0dGhpcy5hY3RpdmVfdGFiX21hcCA9IHt9O1xuXHRcdH1cblx0XHR0aGlzLmFjdGl2ZV90YWJfbWFwW3RoaXMuZG9jbmFtZV0gPSB0YWI7XG5cdH1cblx0Z2V0X2FjdGl2ZV90YWIoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlX3RhYl9tYXAgJiYgdGhpcy5hY3RpdmVfdGFiX21hcFt0aGlzLmRvY25hbWVdO1xuXHR9XG5cblx0Z2V0X2ludm9sdmVkX3VzZXJzKCkge1xuXHRcdGxldCB1c2VyX2ZpZWxkcyA9IHRoaXMubWV0YS5maWVsZHNcblx0XHRcdC5maWx0ZXIoZCA9PiBkLmZpZWxkdHlwZSA9PT0gJ0xpbmsnICYmIGQub3B0aW9ucyA9PT0gJ1VzZXInKVxuXHRcdFx0Lm1hcChkID0+IGQuZmllbGRuYW1lKTtcblxuXHRcdHVzZXJfZmllbGRzID0gWy4uLnVzZXJfZmllbGRzLCAnb3duZXInLCAnbW9kaWZpZWRfYnknXTtcblx0XHRsZXQgaW52b2x2ZWRfdXNlcnMgPSB1c2VyX2ZpZWxkcy5tYXAoZmllbGQgPT4gdGhpcy5kb2NbZmllbGRdKTtcblxuXHRcdGNvbnN0IGRvY2luZm8gPSB0aGlzLmdldF9kb2NpbmZvKCk7XG5cblx0XHRpbnZvbHZlZF91c2VycyA9IGludm9sdmVkX3VzZXJzLmNvbmNhdChcblx0XHRcdGRvY2luZm8uY29tbXVuaWNhdGlvbnMubWFwKGQgPT4gZC5zZW5kZXIgJiYgZC5kZWxpdmVyeV9zdGF0dXMgPT09ICdzZW50JyksXG5cdFx0XHRkb2NpbmZvLmNvbW1lbnRzLm1hcChkID0+IGQub3duZXIpLFxuXHRcdFx0ZG9jaW5mby52ZXJzaW9ucy5tYXAoZCA9PiBkLm93bmVyKSxcblx0XHRcdGRvY2luZm8uYXNzaWdubWVudHMubWFwKGQgPT4gZC5vd25lciksXG5cdFx0KTtcblxuXHRcdHJldHVybiBpbnZvbHZlZF91c2Vyc1xuXHRcdFx0LnVuaXFCeSh1ID0+IHUpXG5cdFx0XHQuZmlsdGVyKHVzZXIgPT4gIVsnQWRtaW5pc3RyYXRvcicsIGZyYXBwZS5zZXNzaW9uLnVzZXJdLmluY2x1ZGVzKHVzZXIpKVxuXHRcdFx0LmZpbHRlcihCb29sZWFuKTtcblx0fVxufVxuaW50ZXJmYWNlIEZvcm0ge1xuXHRzYXZlX2Rpc2FibGVkPzogYm9vbGVhbjtcblx0ZG9jOiBsb2NhbHMuRG9jdHlwZTtcblx0dmlld2Vyc1xuXHRzZXR1cF9kb25lPzogYm9vbGVhbjtcblx0dG9vbGJhcjogVG9vbGJhclxuXG5cdGZpZWxkc1xuXHRmaWVsZHNfZGljdFxuXHRzdGF0ZV9maWVsZG5hbWVcblx0d3JhcHBlcjogSFRNTEVsZW1lbnRcblx0JHdyYXBwZXI6IEpRdWVyeVxuXHRwYWdlOiBQYWdlXG5cdGZvb3Rlcj86IEZvb3RlclxuXG5cblx0Zm9ybV93cmFwcGVyOiBqUXVlcnlcblx0Ym9keTogalF1ZXJ5XG5cdGxheW91dDogTGF5b3V0XG59XG5leHBvcnQgZGVmYXVsdCBGb3JtO1xuIiwgImV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGxvYWREb2MoXG5cdGRvY3R5cGU6IHN0cmluZyxcblx0bmFtZTogc3RyaW5nLFxuKSB7XG5cblx0Y29uc3QgZG9jID0gZnJhcHBlLmdldF9kb2MoZG9jdHlwZSwgbmFtZSk7XG5cdGlmIChcblx0XHRkb2MgJiZcblx0XHRmcmFwcGUubW9kZWwuZ2V0X2RvY2luZm8oZG9jdHlwZSwgbmFtZSkgJiZcblx0XHQoZG9jLl9faXNsb2NhbCB8fCBmcmFwcGUubW9kZWwuaXNfZnJlc2goZG9jKSlcblx0KSB7IHJldHVybiB0cnVlOyB9XG5cdHJldHVybiBuZXcgUHJvbWlzZTxib29sZWFuPihyZXNvbHZlID0+IHtcblx0XHRmcmFwcGUubW9kZWwud2l0aF9kb2MoZG9jdHlwZSwgbmFtZSwgKG5hbWUsIHIpID0+IHtcblx0XHRcdGlmIChyICYmIHJbJzQwMyddKSB7IHJldHVybiByZXNvbHZlKGZhbHNlKTsgfVxuXG5cdFx0XHRpZiAoIShsb2NhbHNbZG9jdHlwZV0gJiYgbG9jYWxzW2RvY3R5cGVdW25hbWVdKSkge1xuXHRcdFx0XHRyZXR1cm4gcmVzb2x2ZShmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXNvbHZlKHRydWUpO1xuXHRcdH0pO1xuXHR9KTtcbn1cbiIsICJpbXBvcnQgeyBzaGFsbG93UmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZmluZVN0b3JlIH0gZnJvbSAncGluaWEnO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVTdG9yZSgnR3VpZ3U6R2xvYmFsVmlldzpGb3JtRGV0YWlsJywgKCkgPT4ge1xuXHRjb25zdCBjdXJyZW50VGFiID0gc2hhbGxvd1JlZignJyk7XG5cdHJldHVybiB7IGN1cnJlbnRUYWIgfTtcbn0pO1xuIiwgImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZVN0YXRpY1ZOb2RlIGFzIF9jcmVhdGVTdGF0aWNWTm9kZSB9IGZyb20gXCJ2dWVcIlxuXG5jb25zdCBfaG9pc3RlZF8xID0geyByZWY6IFwicm9vdFwiIH1cbmNvbnN0IF9ob2lzdGVkXzIgPSB7IGNsYXNzOiBcImNvbnRhaW5lciBwYWdlLWJvZHlcIiB9XG5jb25zdCBfaG9pc3RlZF8zID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgeyBjbGFzczogXCJwYWdlLXRvb2xiYXIgaGlkZVwiIH0sIFtcbiAgLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgeyBjbGFzczogXCJjb250YWluZXJcIiB9KVxuXSwgLTEgLyogSE9JU1RFRCAqLylcbmNvbnN0IF9ob2lzdGVkXzQgPSB7IGNsYXNzOiBcInBhZ2Utd3JhcHBlclwiIH1cbmNvbnN0IF9ob2lzdGVkXzUgPSB7IGNsYXNzOiBcInBhZ2UtY29udGVudFwiIH1cbmNvbnN0IF9ob2lzdGVkXzYgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7IGNsYXNzOiBcIndvcmtmbG93LWJ1dHRvbi1hcmVhIGJ0bi1ncm91cCBwdWxsLXJpZ2h0IGhpZGVcIiB9LCBudWxsLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfNyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHsgY2xhc3M6IFwiY2xlYXJmaXhcIiB9LCBudWxsLCAtMSAvKiBIT0lTVEVEICovKVxuY29uc3QgX2hvaXN0ZWRfOCA9IHsgY2xhc3M6IFwicm93IGxheW91dC1tYWluXCIgfVxuY29uc3QgX2hvaXN0ZWRfOSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlU3RhdGljVk5vZGUoXCI8ZGl2IGNsYXNzPVxcXCJjb2wgbGF5b3V0LW1haW4tc2VjdGlvbi13cmFwcGVyXFxcIj48ZGl2IGNsYXNzPVxcXCJsYXlvdXQtbWFpbi1zZWN0aW9uXFxcIj48ZGl2PjxkaXYgY2xhc3M9XFxcInN0ZC1mb3JtLWxheW91dFxcXCI+PGRpdiBjbGFzcz1cXFwiZm9ybS1sYXlvdXRcXFwiPjxkaXYgY2xhc3M9XFxcImZvcm0tbWVzc2FnZSBoaWRkZW5cXFwiPjwvZGl2PjxkaXYgY2xhc3M9XFxcImZvcm0tcGFnZVxcXCI+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwibGF5b3V0LWZvb3RlciBoaWRlXFxcIj48L2Rpdj48L2Rpdj5cIiwgMSlcbmNvbnN0IF9ob2lzdGVkXzEwID0gW1wiaGlkZGVuXCJdXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIF9ob2lzdGVkXzEsIFtcbiAgICBfY3JlYXRlVk5vZGUoJHNldHVwW1wiSGVhZGVyXCJdLCB7XG4gICAgICBvcGVuOiAkc2V0dXAub3BlbixcbiAgICAgIFwib25VcGRhdGU6b3BlblwiOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICRldmVudCA9PiAoKCRzZXR1cC5vcGVuKSA9ICRldmVudCkpLFxuICAgICAgaGFzU2lkZXI6ICEkc2V0dXAuc2luZ2xlX2NvbHVtbixcbiAgICAgIGlzSGlkZUNsb3NlOiAkcHJvcHMuaXNIaWRlQ2xvc2UsXG4gICAgICBvbkhpZGU6ICRzZXR1cC5oaWRlXG4gICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wib3BlblwiLCBcImhhc1NpZGVyXCIsIFwiaXNIaWRlQ2xvc2VcIl0pLFxuICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfMiwgW1xuICAgICAgX2hvaXN0ZWRfMyxcbiAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfNCwgW1xuICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzUsIFtcbiAgICAgICAgICBfaG9pc3RlZF82LFxuICAgICAgICAgIF9ob2lzdGVkXzcsXG4gICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF84LCBbXG4gICAgICAgICAgICBfaG9pc3RlZF85LFxuICAgICAgICAgICAgKCEkc2V0dXAuc2luZ2xlX2NvbHVtbilcbiAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgIGhpZGRlbjogISRzZXR1cC5vcGVuLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiY29sLWxnLTIgbGF5b3V0LXNpZGUtc2VjdGlvblwiXG4gICAgICAgICAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgX2hvaXN0ZWRfMTApKVxuICAgICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pXG4gICAgXSlcbiAgXSwgNTEyIC8qIE5FRURfUEFUQ0ggKi8pKVxufSIsICJpbXBvcnQgc2NyaXB0IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy9ndWlndS9ndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9NYWluLnZ1ZT90eXBlPXNjcmlwdFwiO2ltcG9ydCB7cmVuZGVyIH0gZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL2d1aWd1L2d1aWd1L3B1YmxpYy9qcy9Gb3JtRGV0YWlsL01haW4udnVlP3R5cGU9dGVtcGxhdGVcIjsgc2NyaXB0LnJlbmRlciA9IHJlbmRlcjtzY3JpcHQuX19maWxlID0gXCJndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9NYWluLnZ1ZVwiO2V4cG9ydCBkZWZhdWx0IHNjcmlwdDsiLCAiaW1wb3J0IHsgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUgfSBmcm9tIFwidnVlXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgcmV0dXJuICgkcHJvcHMudmFsdWUgJiYgJHNldHVwLmRvY01ldGEgJiYgJHNldHVwLm5hbWUpXG4gICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soJHNldHVwW1wiTWFpblwiXSwge1xuICAgICAgICBrZXk6IGAkeyRzZXR1cC5kb2NNZXRhLm5hbWV9OiR7JHByb3BzLnZhbHVlLm5hbWV9YCxcbiAgICAgICAgbWV0YTogJHNldHVwLmRvY01ldGEsXG4gICAgICAgIG9wdGlvbnM6ICRwcm9wcy5vcHRpb25zLFxuICAgICAgICBsb2FkaW5nOiAkcHJvcHMubG9hZGluZyxcbiAgICAgICAgbmFtZTogJHNldHVwLm5hbWUsXG4gICAgICAgIGlzSGlkZUNsb3NlOiAkcHJvcHMuaXNIaWRlQ2xvc2UsXG4gICAgICAgIHZhbHVlOiAkc2V0dXAuZG9jLFxuICAgICAgICBcIm9uVXBkYXRlOnZhbHVlXCI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gJGV2ZW50ID0+ICgoJHNldHVwLmRvYykgPSAkZXZlbnQpKSxcbiAgICAgICAgb25SZWZyZXNoOiAkc2V0dXAucmVmcmVzaFxuICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibWV0YVwiLCBcIm9wdGlvbnNcIiwgXCJsb2FkaW5nXCIsIFwibmFtZVwiLCBcImlzSGlkZUNsb3NlXCIsIFwidmFsdWVcIl0pKVxuICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbn0iLCAiaW1wb3J0IHNjcmlwdCBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvaW5kZXgudnVlP3R5cGU9c2NyaXB0XCI7aW1wb3J0IHtyZW5kZXIgfSBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL0Zvcm1EZXRhaWwvaW5kZXgudnVlP3R5cGU9dGVtcGxhdGVcIjsgc2NyaXB0LnJlbmRlciA9IHJlbmRlcjtzY3JpcHQuX19maWxlID0gXCJndWlndS9wdWJsaWMvanMvRm9ybURldGFpbC9pbmRleC52dWVcIjtleHBvcnQgZGVmYXVsdCBzY3JpcHQ7IiwgImltcG9ydCBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9EZXRhaWwudnVlP3R5cGU9c3R5bGUtY3NzJmluZGV4PTBcIjtleHBvcnQgZGVmYXVsdCAoKSA9Pnt9IiwgImltcG9ydCB7IG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSBcInZ1ZVwiXG5cbmNvbnN0IF93aXRoU2NvcGVJZCA9IG4gPT4gKF9wdXNoU2NvcGVJZChcImRhdGEtdi1jNTRlMTI1OFwiKSxuPW4oKSxfcG9wU2NvcGVJZCgpLG4pXG5jb25zdCBfaG9pc3RlZF8xID0geyBjbGFzczogXCJmb3JtLWNvbnRhaW5lclwiIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwgX2hvaXN0ZWRfMSwgW1xuICAgICgkc2V0dXAubWV0YSYmJHNldHVwLmRldGFpbClcbiAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCRzZXR1cFtcIkZvcm1EZXRhaWxcIl0sIHtcbiAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgbG9hZGluZzogJHNldHVwLmxvYWRpbmcsXG4gICAgICAgICAgbWV0YTogJHNldHVwLm1ldGEsXG4gICAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgICAgdmFsdWU6ICRzZXR1cC5kZXRhaWwsXG4gICAgICAgICAgaXNIaWRlQ2xvc2U6IFwiXCJcbiAgICAgICAgfSwgbnVsbCwgOCAvKiBQUk9QUyAqLywgW1wibG9hZGluZ1wiLCBcIm1ldGFcIiwgXCJ2YWx1ZVwiXSkpXG4gICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gIF0pKVxufSIsICJpbXBvcnQgc2NyaXB0IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvRGV0YWlsLnZ1ZT90eXBlPXNjcmlwdFwiO2ltcG9ydCBzdHlsZTAgZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9EZXRhaWwudnVlP3R5cGU9c3R5bGUmaW5kZXg9MFwiO3N0eWxlMChzY3JpcHQpO2ltcG9ydCB7cmVuZGVyIH0gZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9EZXRhaWwudnVlP3R5cGU9dGVtcGxhdGVcIjsgc2NyaXB0LnJlbmRlciA9IHJlbmRlcjtzY3JpcHQuX19maWxlID0gXCIuLi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvRGV0YWlsLnZ1ZVwiO3NjcmlwdC5fX3Njb3BlSWQgPSBcImRhdGEtdi1jNTRlMTI1OFwiO2V4cG9ydCBkZWZhdWx0IHNjcmlwdDsiLCAiPHRlbXBsYXRlPlxuXHQ8ZGl2XG5cdFx0cmVmPVwid3JhcHBlclJlZlwiXG5cdFx0Y2xhc3M9XCJjb250ZW50IHBhZ2UtY29udGFpbmVyXCJcblx0XHRpZD1cInBhZ2UtV29ya3NwYWNlc1wiXG5cdFx0ZGF0YS1wYWdlLXJvdXRlPVwiV29ya3NwYWNlc1wiXG5cdD5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwIGxhbmc9J3RzJz5cbmltcG9ydCB7IHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuXG5pbXBvcnQgV29ya3NwYWNlIGZyb20gJy4vd29ya3NwYWNlLmpzJztcblxuaW50ZXJmYWNlIFByb3Bze1xuXHRvcmdhbml6YXRpb246c3RyaW5nXG59XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzPFByb3BzPigpO1xuY29uc3Qgd3JhcHBlclJlZiA9IHJlZjxIVE1MRWxlbWVudD4oKTtcblxud2F0Y2goW3dyYXBwZXJSZWYsICgpPT5wcm9wcy5vcmdhbml6YXRpb25dLCAoXywgb3JnKT0+e1xuXHRpZiAoIXdyYXBwZXJSZWYudmFsdWV8fCFwcm9wcy5vcmdhbml6YXRpb24peyByZXR1cm47IH1cblx0d3JhcHBlclJlZi52YWx1ZS5pbm5lckhUTUwgPSAnJztcblx0ZnJhcHBlLnVpLm1ha2VfYXBwX3BhZ2Uoe1xuXHRcdHBhcmVudDogd3JhcHBlclJlZi52YWx1ZSxcblx0XHRuYW1lOiAnV29ya3NwYWNlcycsXG5cdFx0dGl0bGU6IF9fKCdXb3Jrc3BhY2UnKSxcblx0fSk7XG5cdGNvbnN0IHdvcmtzcGFjZSA9IG5ldyBXb3Jrc3BhY2Uod3JhcHBlclJlZi52YWx1ZSwgcHJvcHMub3JnYW5pemF0aW9uKTtcblx0d29ya3NwYWNlLnNob3coKTtcbn0sIHtpbW1lZGlhdGU6IHRydWV9KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz0nbGVzcycgc2NvcGVkPlxuLmNvbnRlbnR7XG5cdGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdDpkZWVwKC5wYWdlLWJvZHkpe1xuXHRcdG92ZXJmbG93OiBhdXRvO1xuXHR9XG5cdDpkZWVwKC5wYWdlLWhlYWQpe1xuXHRcdHBvc2l0aW9uOiBzdGF0aWM7XG5cdH1cbn1cbjwvc3R5bGU+XG4iLCAidmFyIEx0ID0gdHlwZW9mIGdsb2JhbFRoaXMgPCBcInVcIiA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93IDwgXCJ1XCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsIDwgXCJ1XCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiA8IFwidVwiID8gc2VsZiA6IHt9O1xuZnVuY3Rpb24geGUocykge1xuICByZXR1cm4gcyAmJiBzLl9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIFwiZGVmYXVsdFwiKSA/IHMuZGVmYXVsdCA6IHM7XG59XG5mdW5jdGlvbiBCZSgpIHtcbn1cbk9iamVjdC5hc3NpZ24oQmUsIHtcbiAgZGVmYXVsdDogQmUsXG4gIHJlZ2lzdGVyOiBCZSxcbiAgcmV2ZXJ0OiBmdW5jdGlvbigpIHtcbiAgfSxcbiAgX19lc01vZHVsZTogITBcbn0pO1xuRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fCAoRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24ocykge1xuICBjb25zdCBlID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpO1xuICBsZXQgdCA9IGUubGVuZ3RoO1xuICBmb3IgKDsgLS10ID49IDAgJiYgZS5pdGVtKHQpICE9PSB0aGlzOyApXG4gICAgO1xuICByZXR1cm4gdCA+IC0xO1xufSk7XG5FbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0IHx8IChFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24ocykge1xuICBsZXQgZSA9IHRoaXM7XG4gIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGUpKVxuICAgIHJldHVybiBudWxsO1xuICBkbyB7XG4gICAgaWYgKGUubWF0Y2hlcyhzKSlcbiAgICAgIHJldHVybiBlO1xuICAgIGUgPSBlLnBhcmVudEVsZW1lbnQgfHwgZS5wYXJlbnROb2RlO1xuICB9IHdoaWxlIChlICE9PSBudWxsKTtcbiAgcmV0dXJuIG51bGw7XG59KTtcbkVsZW1lbnQucHJvdG90eXBlLnByZXBlbmQgfHwgKEVsZW1lbnQucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbihlKSB7XG4gIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIEFycmF5LmlzQXJyYXkoZSkgfHwgKGUgPSBbZV0pLCBlLmZvckVhY2goKG8pID0+IHtcbiAgICBjb25zdCBpID0gbyBpbnN0YW5jZW9mIE5vZGU7XG4gICAgdC5hcHBlbmRDaGlsZChpID8gbyA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pKTtcbiAgfSksIHRoaXMuaW5zZXJ0QmVmb3JlKHQsIHRoaXMuZmlyc3RDaGlsZCk7XG59KTtcbkVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3SWZOZWVkZWQgfHwgKEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3SWZOZWVkZWQgPSBmdW5jdGlvbihzKSB7XG4gIHMgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwID8gITAgOiAhIXM7XG4gIGNvbnN0IGUgPSB0aGlzLnBhcmVudE5vZGUsIHQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlLCBudWxsKSwgbyA9IHBhcnNlSW50KHQuZ2V0UHJvcGVydHlWYWx1ZShcImJvcmRlci10b3Atd2lkdGhcIikpLCBpID0gcGFyc2VJbnQodC5nZXRQcm9wZXJ0eVZhbHVlKFwiYm9yZGVyLWxlZnQtd2lkdGhcIikpLCBuID0gdGhpcy5vZmZzZXRUb3AgLSBlLm9mZnNldFRvcCA8IGUuc2Nyb2xsVG9wLCByID0gdGhpcy5vZmZzZXRUb3AgLSBlLm9mZnNldFRvcCArIHRoaXMuY2xpZW50SGVpZ2h0IC0gbyA+IGUuc2Nyb2xsVG9wICsgZS5jbGllbnRIZWlnaHQsIGEgPSB0aGlzLm9mZnNldExlZnQgLSBlLm9mZnNldExlZnQgPCBlLnNjcm9sbExlZnQsIGwgPSB0aGlzLm9mZnNldExlZnQgLSBlLm9mZnNldExlZnQgKyB0aGlzLmNsaWVudFdpZHRoIC0gaSA+IGUuc2Nyb2xsTGVmdCArIGUuY2xpZW50V2lkdGgsIGMgPSBuICYmICFyO1xuICAobiB8fCByKSAmJiBzICYmIChlLnNjcm9sbFRvcCA9IHRoaXMub2Zmc2V0VG9wIC0gZS5vZmZzZXRUb3AgLSBlLmNsaWVudEhlaWdodCAvIDIgLSBvICsgdGhpcy5jbGllbnRIZWlnaHQgLyAyKSwgKGEgfHwgbCkgJiYgcyAmJiAoZS5zY3JvbGxMZWZ0ID0gdGhpcy5vZmZzZXRMZWZ0IC0gZS5vZmZzZXRMZWZ0IC0gZS5jbGllbnRXaWR0aCAvIDIgLSBpICsgdGhpcy5jbGllbnRXaWR0aCAvIDIpLCAobiB8fCByIHx8IGEgfHwgbCkgJiYgIXMgJiYgdGhpcy5zY3JvbGxJbnRvVmlldyhjKTtcbn0pO1xubGV0IE90ID0gKHMgPSAyMSkgPT4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzKSkucmVkdWNlKChlLCB0KSA9PiAodCAmPSA2MywgdCA8IDM2ID8gZSArPSB0LnRvU3RyaW5nKDM2KSA6IHQgPCA2MiA/IGUgKz0gKHQgLSAyNikudG9TdHJpbmcoMzYpLnRvVXBwZXJDYXNlKCkgOiB0ID4gNjIgPyBlICs9IFwiLVwiIDogZSArPSBcIl9cIiwgZSksIFwiXCIpO1xudmFyIGV0ID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHMuVkVSQk9TRSA9IFwiVkVSQk9TRVwiLCBzLklORk8gPSBcIklORk9cIiwgcy5XQVJOID0gXCJXQVJOXCIsIHMuRVJST1IgPSBcIkVSUk9SXCIsIHMpKShldCB8fCB7fSk7XG5jb25zdCBCID0ge1xuICBCQUNLU1BBQ0U6IDgsXG4gIFRBQjogOSxcbiAgRU5URVI6IDEzLFxuICBTSElGVDogMTYsXG4gIENUUkw6IDE3LFxuICBBTFQ6IDE4LFxuICBFU0M6IDI3LFxuICBTUEFDRTogMzIsXG4gIExFRlQ6IDM3LFxuICBVUDogMzgsXG4gIERPV046IDQwLFxuICBSSUdIVDogMzksXG4gIERFTEVURTogNDYsXG4gIE1FVEE6IDkxXG59LCBfdCA9IHtcbiAgTEVGVDogMCxcbiAgV0hFRUw6IDEsXG4gIFJJR0hUOiAyLFxuICBCQUNLV0FSRDogMyxcbiAgRk9SV0FSRDogNFxufTtcbmZ1bmN0aW9uIGdlKHMsIGUsIHQgPSBcImxvZ1wiLCBvLCBpID0gXCJjb2xvcjogaW5oZXJpdFwiKSB7XG4gIGlmICghKFwiY29uc29sZVwiIGluIHdpbmRvdykgfHwgIXdpbmRvdy5jb25zb2xlW3RdKVxuICAgIHJldHVybjtcbiAgY29uc3QgbiA9IFtcImluZm9cIiwgXCJsb2dcIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIl0uaW5jbHVkZXModCksIHIgPSBbXTtcbiAgc3dpdGNoIChnZS5sb2dMZXZlbCkge1xuICAgIGNhc2UgXCJFUlJPUlwiOlxuICAgICAgaWYgKHQgIT09IFwiZXJyb3JcIilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIldBUk5cIjpcbiAgICAgIGlmICghW1wiZXJyb3JcIiwgXCJ3YXJuXCJdLmluY2x1ZGVzKHQpKVxuICAgICAgICByZXR1cm47XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiSU5GT1wiOlxuICAgICAgaWYgKCFuIHx8IHMpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGJyZWFrO1xuICB9XG4gIG8gJiYgci5wdXNoKG8pO1xuICBjb25zdCBhID0gXCJFZGl0b3IuanMgMi4yNy4wXCIsIGwgPSBgbGluZS1oZWlnaHQ6IDFlbTtcbiAgICAgICAgICAgIGNvbG9yOiAjMDA2RkVBO1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxMXB4O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDFlbTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICAgICAgICBwYWRkaW5nOiA0cHggOXB4O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMzBweDtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoNTYsIDEzOCwgMjI5LCAwLjE2KTtcbiAgICAgICAgICAgIG1hcmdpbjogNHB4IDVweCA0cHggMDtgO1xuICBzICYmIChuID8gKHIudW5zaGlmdChsLCBpKSwgZSA9IGAlYyR7YX0lYyAke2V9YCkgOiBlID0gYCggJHthfSApJHtlfWApO1xuICB0cnkge1xuICAgIG4gPyBvID8gY29uc29sZVt0XShgJHtlfSAlb2AsIC4uLnIpIDogY29uc29sZVt0XShlLCAuLi5yKSA6IGNvbnNvbGVbdF0oZSk7XG4gIH0gY2F0Y2gge1xuICB9XG59XG5nZS5sb2dMZXZlbCA9IFwiVkVSQk9TRVwiO1xuZnVuY3Rpb24gQXQocykge1xuICBnZS5sb2dMZXZlbCA9IHM7XG59XG5jb25zdCBUID0gZ2UuYmluZCh3aW5kb3csICExKSwgSyA9IGdlLmJpbmQod2luZG93LCAhMCk7XG5mdW5jdGlvbiB0ZShzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocykubWF0Y2goL1xccyhbYS16QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIEQocykge1xuICByZXR1cm4gdGUocykgPT09IFwiZnVuY3Rpb25cIiB8fCB0ZShzKSA9PT0gXCJhc3luY2Z1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBqKHMpIHtcbiAgcmV0dXJuIHRlKHMpID09PSBcIm9iamVjdFwiO1xufVxuZnVuY3Rpb24gSihzKSB7XG4gIHJldHVybiB0ZShzKSA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIE50KHMpIHtcbiAgcmV0dXJuIHRlKHMpID09PSBcImJvb2xlYW5cIjtcbn1cbmZ1bmN0aW9uIFZlKHMpIHtcbiAgcmV0dXJuIHRlKHMpID09PSBcIm51bWJlclwiO1xufVxuZnVuY3Rpb24gWmUocykge1xuICByZXR1cm4gdGUocykgPT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBWKHMpIHtcbiAgcmV0dXJuIHMgPyBPYmplY3Qua2V5cyhzKS5sZW5ndGggPT09IDAgJiYgcy5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0IDogITA7XG59XG5mdW5jdGlvbiB0dChzKSB7XG4gIHJldHVybiBzID4gNDcgJiYgcyA8IDU4IHx8IC8vIG51bWJlciBrZXlzXG4gIHMgPT09IDMyIHx8IHMgPT09IDEzIHx8IC8vIFNwYWNlIGJhciAmIHJldHVybiBrZXkocylcbiAgcyA9PT0gMjI5IHx8IC8vIHByb2Nlc3Npbmcga2V5IGlucHV0IGZvciBjZXJ0YWluIGxhbmd1YWdlcyBcdTIwMTQgQ2hpbmVzZSwgSmFwYW5lc2UsIGV0Yy5cbiAgcyA+IDY0ICYmIHMgPCA5MSB8fCAvLyBsZXR0ZXIga2V5c1xuICBzID4gOTUgJiYgcyA8IDExMiB8fCAvLyBOdW1wYWQga2V5c1xuICBzID4gMTg1ICYmIHMgPCAxOTMgfHwgLy8gOz0sLS4vYCAoaW4gb3JkZXIpXG4gIHMgPiAyMTggJiYgcyA8IDIyMztcbn1cbmFzeW5jIGZ1bmN0aW9uIG90KHMsIGUgPSAoKSA9PiB7XG59LCB0ID0gKCkgPT4ge1xufSkge1xuICBhc3luYyBmdW5jdGlvbiBvKGksIG4sIHIpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgaS5mdW5jdGlvbihpLmRhdGEpLCBhd2FpdCBuKFplKGkuZGF0YSkgPyB7fSA6IGkuZGF0YSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByKFplKGkuZGF0YSkgPyB7fSA6IGkuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzLnJlZHVjZShhc3luYyAoaSwgbikgPT4gKGF3YWl0IGksIG8obiwgZSwgdCkpLCBQcm9taXNlLnJlc29sdmUoKSk7XG59XG5mdW5jdGlvbiBpdChzKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzKTtcbn1cbmZ1bmN0aW9uIG9lKHMsIGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHQgPSB0aGlzLCBvID0gYXJndW1lbnRzO1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHMuYXBwbHkodCwgbyksIGUpO1xuICB9O1xufVxuZnVuY3Rpb24gUnQocykge1xuICByZXR1cm4gcy5uYW1lLnNwbGl0KFwiLlwiKS5wb3AoKTtcbn1cbmZ1bmN0aW9uIER0KHMpIHtcbiAgcmV0dXJuIC9eWy1cXHddK1xcLyhbLStcXHddK3xcXCopJC8udGVzdChzKTtcbn1cbmZ1bmN0aW9uIFB0KHMsIGUsIHQpIHtcbiAgbGV0IG87XG4gIHJldHVybiAoLi4uaSkgPT4ge1xuICAgIGNvbnN0IG4gPSB0aGlzLCByID0gKCkgPT4ge1xuICAgICAgbyA9IG51bGwsIHQgfHwgcy5hcHBseShuLCBpKTtcbiAgICB9LCBhID0gdCAmJiAhbztcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KG8pLCBvID0gd2luZG93LnNldFRpbWVvdXQociwgZSksIGEgJiYgcy5hcHBseShuLCBpKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIFRlKHMsIGUsIHQgPSB2b2lkIDApIHtcbiAgbGV0IG8sIGksIG4sIHIgPSBudWxsLCBhID0gMDtcbiAgdCB8fCAodCA9IHt9KTtcbiAgY29uc3QgbCA9IGZ1bmN0aW9uKCkge1xuICAgIGEgPSB0LmxlYWRpbmcgPT09ICExID8gMCA6IERhdGUubm93KCksIHIgPSBudWxsLCBuID0gcy5hcHBseShvLCBpKSwgciB8fCAobyA9IGkgPSBudWxsKTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGMgPSBEYXRlLm5vdygpO1xuICAgICFhICYmIHQubGVhZGluZyA9PT0gITEgJiYgKGEgPSBjKTtcbiAgICBjb25zdCB1ID0gZSAtIChjIC0gYSk7XG4gICAgcmV0dXJuIG8gPSB0aGlzLCBpID0gYXJndW1lbnRzLCB1IDw9IDAgfHwgdSA+IGUgPyAociAmJiAoY2xlYXJUaW1lb3V0KHIpLCByID0gbnVsbCksIGEgPSBjLCBuID0gcy5hcHBseShvLCBpKSwgciB8fCAobyA9IGkgPSBudWxsKSkgOiAhciAmJiB0LnRyYWlsaW5nICE9PSAhMSAmJiAociA9IHNldFRpbWVvdXQobCwgdSkpLCBuO1xuICB9O1xufVxuZnVuY3Rpb24gRnQoKSB7XG4gIGNvbnN0IHMgPSB7XG4gICAgd2luOiAhMSxcbiAgICBtYWM6ICExLFxuICAgIHgxMTogITEsXG4gICAgbGludXg6ICExXG4gIH0sIGUgPSBPYmplY3Qua2V5cyhzKS5maW5kKCh0KSA9PiB3aW5kb3cubmF2aWdhdG9yLmFwcFZlcnNpb24udG9Mb3dlckNhc2UoKS5pbmRleE9mKHQpICE9PSAtMSk7XG4gIHJldHVybiBlICYmIChzW2VdID0gITApLCBzO1xufVxuZnVuY3Rpb24ga2Uocykge1xuICByZXR1cm4gc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcbn1cbmZ1bmN0aW9uIFNlKHMsIC4uLmUpIHtcbiAgaWYgKCFlLmxlbmd0aClcbiAgICByZXR1cm4gcztcbiAgY29uc3QgdCA9IGUuc2hpZnQoKTtcbiAgaWYgKGoocykgJiYgaih0KSlcbiAgICBmb3IgKGNvbnN0IG8gaW4gdClcbiAgICAgIGoodFtvXSkgPyAoc1tvXSB8fCBPYmplY3QuYXNzaWduKHMsIHsgW29dOiB7fSB9KSwgU2Uoc1tvXSwgdFtvXSkpIDogT2JqZWN0LmFzc2lnbihzLCB7IFtvXTogdFtvXSB9KTtcbiAgcmV0dXJuIFNlKHMsIC4uLmUpO1xufVxuZnVuY3Rpb24gbnQocykge1xuICBjb25zdCBlID0gRnQoKTtcbiAgcmV0dXJuIHMgPSBzLnJlcGxhY2UoL3NoaWZ0L2dpLCBcIlx1MjFFN1wiKS5yZXBsYWNlKC9iYWNrc3BhY2UvZ2ksIFwiXHUyMzJCXCIpLnJlcGxhY2UoL2VudGVyL2dpLCBcIlx1MjNDRVwiKS5yZXBsYWNlKC91cC9naSwgXCJcdTIxOTFcIikucmVwbGFjZSgvbGVmdC9naSwgXCJcdTIxOTJcIikucmVwbGFjZSgvZG93bi9naSwgXCJcdTIxOTNcIikucmVwbGFjZSgvcmlnaHQvZ2ksIFwiXHUyMTkwXCIpLnJlcGxhY2UoL2VzY2FwZS9naSwgXCJcdTIzOEJcIikucmVwbGFjZSgvaW5zZXJ0L2dpLCBcIkluc1wiKS5yZXBsYWNlKC9kZWxldGUvZ2ksIFwiXHUyNDIxXCIpLnJlcGxhY2UoL1xcKy9naSwgXCIgKyBcIiksIGUubWFjID8gcyA9IHMucmVwbGFjZSgvY3RybHxjbWQvZ2ksIFwiXHUyMzE4XCIpLnJlcGxhY2UoL2FsdC9naSwgXCJcdTIzMjVcIikgOiBzID0gcy5yZXBsYWNlKC9jbWQvZ2ksIFwiQ3RybFwiKS5yZXBsYWNlKC93aW5kb3dzL2dpLCBcIldJTlwiKSwgcztcbn1cbmZ1bmN0aW9uIEh0KHMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTChzKS5ocmVmO1xuICB9IGNhdGNoIHtcbiAgfVxuICByZXR1cm4gcy5zdWJzdHJpbmcoMCwgMikgPT09IFwiLy9cIiA/IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArIHMgOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgcztcbn1cbmZ1bmN0aW9uIHp0KCkge1xuICByZXR1cm4gT3QoMTApO1xufVxuZnVuY3Rpb24ganQocykge1xuICB3aW5kb3cub3BlbihzLCBcIl9ibGFua1wiKTtcbn1cbmZ1bmN0aW9uIFV0KHMgPSBcIlwiKSB7XG4gIHJldHVybiBgJHtzfSR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMWU4KS50b1N0cmluZygxNil9YDtcbn1cbmZ1bmN0aW9uIEllKHMsIGUsIHQpIHtcbiAgY29uc3QgbyA9IGBcdTAwQUIke2V9XHUwMEJCIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBQbGVhc2UgdXNlIHRoZSBcdTAwQUIke3R9XHUwMEJCIGluc3RlYWQuYDtcbiAgcyAmJiBLKG8sIFwid2FyblwiKTtcbn1cbmZ1bmN0aW9uIGFlKHMsIGUsIHQpIHtcbiAgY29uc3QgbyA9IHQudmFsdWUgPyBcInZhbHVlXCIgOiBcImdldFwiLCBpID0gdFtvXSwgbiA9IGAjJHtlfUNhY2hlYDtcbiAgaWYgKHRbb10gPSBmdW5jdGlvbiguLi5yKSB7XG4gICAgcmV0dXJuIHRoaXNbbl0gPT09IHZvaWQgMCAmJiAodGhpc1tuXSA9IGkuYXBwbHkodGhpcywgLi4ucikpLCB0aGlzW25dO1xuICB9LCBvID09PSBcImdldFwiICYmIHQuc2V0KSB7XG4gICAgY29uc3QgciA9IHQuc2V0O1xuICAgIHQuc2V0ID0gZnVuY3Rpb24oYSkge1xuICAgICAgZGVsZXRlIHNbbl0sIHIuYXBwbHkodGhpcywgYSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmNvbnN0IHN0ID0gNjUwO1xuZnVuY3Rpb24gZWUoKSB7XG4gIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYShgKG1heC13aWR0aDogJHtzdH1weClgKS5tYXRjaGVzO1xufVxuY29uc3QgR2UgPSB0eXBlb2Ygd2luZG93IDwgXCJ1XCIgJiYgd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtICYmICgvaVAoYWR8aG9uZXxvZCkvLnRlc3Qod2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSkgfHwgd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gXCJNYWNJbnRlbFwiICYmIHdpbmRvdy5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxKTtcbmZ1bmN0aW9uICR0KHMsIGUpIHtcbiAgY29uc3QgdCA9IEFycmF5LmlzQXJyYXkocykgfHwgaihzKSwgbyA9IEFycmF5LmlzQXJyYXkoZSkgfHwgaihlKTtcbiAgcmV0dXJuIHQgfHwgbyA/IEpTT04uc3RyaW5naWZ5KHMpID09PSBKU09OLnN0cmluZ2lmeShlKSA6IHMgPT09IGU7XG59XG5jbGFzcyBkIHtcbiAgLyoqXG4gICAqIENoZWNrIGlmIHBhc3NlZCB0YWcgaGFzIG5vIGNsb3NlZCB0YWdcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFnIC0gZWxlbWVudCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc1NpbmdsZVRhZyhlKSB7XG4gICAgcmV0dXJuIGUudGFnTmFtZSAmJiBbXG4gICAgICBcIkFSRUFcIixcbiAgICAgIFwiQkFTRVwiLFxuICAgICAgXCJCUlwiLFxuICAgICAgXCJDT0xcIixcbiAgICAgIFwiQ09NTUFORFwiLFxuICAgICAgXCJFTUJFRFwiLFxuICAgICAgXCJIUlwiLFxuICAgICAgXCJJTUdcIixcbiAgICAgIFwiSU5QVVRcIixcbiAgICAgIFwiS0VZR0VOXCIsXG4gICAgICBcIkxJTktcIixcbiAgICAgIFwiTUVUQVwiLFxuICAgICAgXCJQQVJBTVwiLFxuICAgICAgXCJTT1VSQ0VcIixcbiAgICAgIFwiVFJBQ0tcIixcbiAgICAgIFwiV0JSXCJcbiAgICBdLmluY2x1ZGVzKGUudGFnTmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGVsZW1lbnQgaXMgQlIgb3IgV0JSXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBlbGVtZW50IHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzTGluZUJyZWFrVGFnKGUpIHtcbiAgICByZXR1cm4gZSAmJiBlLnRhZ05hbWUgJiYgW1xuICAgICAgXCJCUlwiLFxuICAgICAgXCJXQlJcIlxuICAgIF0uaW5jbHVkZXMoZS50YWdOYW1lKTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGZvciBtYWtpbmcgRWxlbWVudHMgd2l0aCBjbGFzcyBuYW1lIGFuZCBhdHRyaWJ1dGVzXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdGFnTmFtZSAtIG5ldyBFbGVtZW50IHRhZyBuYW1lXG4gICAqIEBwYXJhbSAge3N0cmluZ1tdfHN0cmluZ30gW2NsYXNzTmFtZXNdIC0gbGlzdCBvciBuYW1lIG9mIENTUyBjbGFzcyBuYW1lKHMpXG4gICAqIEBwYXJhbSAge29iamVjdH0gW2F0dHJpYnV0ZXNdIC0gYW55IGF0dHJpYnV0ZXNcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgc3RhdGljIG1ha2UoZSwgdCA9IG51bGwsIG8gPSB7fSkge1xuICAgIGNvbnN0IGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO1xuICAgIEFycmF5LmlzQXJyYXkodCkgPyBpLmNsYXNzTGlzdC5hZGQoLi4udCkgOiB0ICYmIGkuY2xhc3NMaXN0LmFkZCh0KTtcbiAgICBmb3IgKGNvbnN0IG4gaW4gbylcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBuKSAmJiAoaVtuXSA9IG9bbl0pO1xuICAgIHJldHVybiBpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIFRleHQgTm9kZSB3aXRoIHRoZSBwYXNzZWQgY29udGVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCAtIHRleHQgY29udGVudFxuICAgKiBAcmV0dXJucyB7VGV4dH1cbiAgICovXG4gIHN0YXRpYyB0ZXh0KGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGVuZCBvbmUgb3Igc2V2ZXJhbCBlbGVtZW50cyB0byB0aGUgcGFyZW50XG4gICAqXG4gICAqIEBwYXJhbSAge0VsZW1lbnR8RG9jdW1lbnRGcmFnbWVudH0gcGFyZW50IC0gd2hlcmUgdG8gYXBwZW5kXG4gICAqIEBwYXJhbSAge0VsZW1lbnR8RWxlbWVudFtdfERvY3VtZW50RnJhZ21lbnR8VGV4dHxUZXh0W119IGVsZW1lbnRzIC0gZWxlbWVudCBvciBlbGVtZW50cyBsaXN0XG4gICAqL1xuICBzdGF0aWMgYXBwZW5kKGUsIHQpIHtcbiAgICBBcnJheS5pc0FycmF5KHQpID8gdC5mb3JFYWNoKChvKSA9PiBlLmFwcGVuZENoaWxkKG8pKSA6IGUuYXBwZW5kQ2hpbGQodCk7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGVuZCBlbGVtZW50IG9yIGEgY291cGxlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhcmVudCBlbGVtZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudCAtIHdoZXJlIHRvIGFwcGVuZFxuICAgKiBAcGFyYW0ge0VsZW1lbnR8RWxlbWVudFtdfSBlbGVtZW50cyAtIGVsZW1lbnQgb3IgZWxlbWVudHMgbGlzdFxuICAgKi9cbiAgc3RhdGljIHByZXBlbmQoZSwgdCkge1xuICAgIEFycmF5LmlzQXJyYXkodCkgPyAodCA9IHQucmV2ZXJzZSgpLCB0LmZvckVhY2goKG8pID0+IGUucHJlcGVuZChvKSkpIDogZS5wcmVwZW5kKHQpO1xuICB9XG4gIC8qKlxuICAgKiBTd2FwIHR3byBlbGVtZW50cyBpbiBwYXJlbnRcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwxIC0gZnJvbVxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbDIgLSB0b1xuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgc3RhdGljIHN3YXAoZSwgdCkge1xuICAgIGNvbnN0IG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCBpID0gZS5wYXJlbnROb2RlO1xuICAgIGkuaW5zZXJ0QmVmb3JlKG8sIGUpLCBpLmluc2VydEJlZm9yZShlLCB0KSwgaS5pbnNlcnRCZWZvcmUodCwgbyksIGkucmVtb3ZlQ2hpbGQobyk7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdG9yIERlY29yYXRvclxuICAgKlxuICAgKiBSZXR1cm5zIGZpcnN0IG1hdGNoXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWwgLSBlbGVtZW50IHdlIHNlYXJjaGluZyBpbnNpZGUuIERlZmF1bHQgLSBET00gRG9jdW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIC0gc2VhcmNoaW5nIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7RWxlbWVudH1cbiAgICovXG4gIHN0YXRpYyBmaW5kKGUgPSBkb2N1bWVudCwgdCkge1xuICAgIHJldHVybiBlLnF1ZXJ5U2VsZWN0b3IodCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBFbGVtZW50IGJ5IElkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGlkIHRvIGZpbmRcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXQoZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKTtcbiAgfVxuICAvKipcbiAgICogU2VsZWN0b3IgRGVjb3JhdG9yLlxuICAgKlxuICAgKiBSZXR1cm5zIGFsbCBtYXRjaGVzXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudH0gZWwgLSBlbGVtZW50IHdlIHNlYXJjaGluZyBpbnNpZGUuIERlZmF1bHQgLSBET00gRG9jdW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIC0gc2VhcmNoaW5nIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7Tm9kZUxpc3R9XG4gICAqL1xuICBzdGF0aWMgZmluZEFsbChlID0gZG9jdW1lbnQsIHQpIHtcbiAgICByZXR1cm4gZS5xdWVyeVNlbGVjdG9yQWxsKHQpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIENTUyBzZWxlY3RvciBmb3IgYWxsIHRleHQgaW5wdXRzXG4gICAqL1xuICBzdGF0aWMgZ2V0IGFsbElucHV0c1NlbGVjdG9yKCkge1xuICAgIHJldHVybiBcIltjb250ZW50ZWRpdGFibGU9dHJ1ZV0sIHRleHRhcmVhLCBpbnB1dDpub3QoW3R5cGVdKSwgXCIgKyBbXCJ0ZXh0XCIsIFwicGFzc3dvcmRcIiwgXCJlbWFpbFwiLCBcIm51bWJlclwiLCBcInNlYXJjaFwiLCBcInRlbFwiLCBcInVybFwiXS5tYXAoKHQpID0+IGBpbnB1dFt0eXBlPVwiJHt0fVwiXWApLmpvaW4oXCIsIFwiKTtcbiAgfVxuICAvKipcbiAgICogRmluZCBhbGwgY29udGVudGVkaXRhYmxlLCB0ZXh0YXJlYSBhbmQgZWRpdGFibGUgaW5wdXQgZWxlbWVudHMgcGFzc2VkIGhvbGRlciBjb250YWluc1xuICAgKlxuICAgKiBAcGFyYW0gaG9sZGVyIC0gZWxlbWVudCB3aGVyZSB0byBmaW5kIGlucHV0c1xuICAgKi9cbiAgc3RhdGljIGZpbmRBbGxJbnB1dHMoZSkge1xuICAgIHJldHVybiBpdChlLnF1ZXJ5U2VsZWN0b3JBbGwoZC5hbGxJbnB1dHNTZWxlY3RvcikpLnJlZHVjZSgodCwgbykgPT4gZC5pc05hdGl2ZUlucHV0KG8pIHx8IGQuY29udGFpbnNPbmx5SW5saW5lRWxlbWVudHMobykgPyBbLi4udCwgb10gOiBbLi4udCwgLi4uZC5nZXREZWVwZXN0QmxvY2tFbGVtZW50cyhvKV0sIFtdKTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIGZvciBkZWVwZXN0IG5vZGUgd2hpY2ggaXMgTGVhZi5cbiAgICogTGVhZiBpcyB0aGUgdmVydGV4IHRoYXQgZG9lc24ndCBoYXZlIGFueSBjaGlsZCBub2Rlc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHJlY3Vyc2l2ZWx5IGdvZXMgdGhyb3cgdGhlIGFsbCBOb2RlIHVudGlsIGl0IGZpbmRzIHRoZSBMZWFmXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIHJvb3QgTm9kZS4gRnJvbSB0aGlzIHZlcnRleCB3ZSBzdGFydCBEZWVwLWZpcnN0IHNlYXJjaFxuICAgKiAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVwdGgtZmlyc3Rfc2VhcmNofVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFthdExhc3RdIC0gZmluZCBsYXN0IHRleHQgbm9kZVxuICAgKiBAcmV0dXJucyB7Tm9kZX0gLSBpdCBjYW4gYmUgdGV4dCBOb2RlIG9yIEVsZW1lbnQgTm9kZSwgc28gdGhhdCBjYXJldCB3aWxsIGFibGUgdG8gd29yayB3aXRoIGl0XG4gICAqL1xuICBzdGF0aWMgZ2V0RGVlcGVzdE5vZGUoZSwgdCA9ICExKSB7XG4gICAgY29uc3QgbyA9IHQgPyBcImxhc3RDaGlsZFwiIDogXCJmaXJzdENoaWxkXCIsIGkgPSB0ID8gXCJwcmV2aW91c1NpYmxpbmdcIiA6IFwibmV4dFNpYmxpbmdcIjtcbiAgICBpZiAoZSAmJiBlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBlW29dKSB7XG4gICAgICBsZXQgbiA9IGVbb107XG4gICAgICBpZiAoZC5pc1NpbmdsZVRhZyhuKSAmJiAhZC5pc05hdGl2ZUlucHV0KG4pICYmICFkLmlzTGluZUJyZWFrVGFnKG4pKVxuICAgICAgICBpZiAobltpXSlcbiAgICAgICAgICBuID0gbltpXTtcbiAgICAgICAgZWxzZSBpZiAobi5wYXJlbnROb2RlW2ldKVxuICAgICAgICAgIG4gPSBuLnBhcmVudE5vZGVbaV07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gbi5wYXJlbnROb2RlO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVlcGVzdE5vZGUobiwgdCk7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBvYmplY3QgaXMgRE9NIG5vZGVcbiAgICpcbiAgICogQHBhcmFtIHsqfSBub2RlIC0gb2JqZWN0IHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgc3RhdGljIGlzRWxlbWVudChlKSB7XG4gICAgcmV0dXJuIFZlKGUpID8gITEgOiBlICYmIGUubm9kZVR5cGUgJiYgZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREU7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIG9iamVjdCBpcyBEb2N1bWVudEZyYWdtZW50IG5vZGVcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5vZGUgLSBvYmplY3QgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBzdGF0aWMgaXNGcmFnbWVudChlKSB7XG4gICAgcmV0dXJuIFZlKGUpID8gITEgOiBlICYmIGUubm9kZVR5cGUgJiYgZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYXNzZWQgZWxlbWVudCBpcyBjb250ZW50ZWRpdGFibGVcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIGh0bWwgZWxlbWVudCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0NvbnRlbnRFZGl0YWJsZShlKSB7XG4gICAgcmV0dXJuIGUuY29udGVudEVkaXRhYmxlID09PSBcInRydWVcIjtcbiAgfVxuICAvKipcbiAgICogQ2hlY2tzIHRhcmdldCBpZiBpdCBpcyBuYXRpdmUgaW5wdXRcbiAgICpcbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgLSBIVE1MIGVsZW1lbnQgb3Igc3RyaW5nXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgc3RhdGljIGlzTmF0aXZlSW5wdXQoZSkge1xuICAgIGNvbnN0IHQgPSBbXG4gICAgICBcIklOUFVUXCIsXG4gICAgICBcIlRFWFRBUkVBXCJcbiAgICBdO1xuICAgIHJldHVybiBlICYmIGUudGFnTmFtZSA/IHQuaW5jbHVkZXMoZS50YWdOYW1lKSA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgd2UgY2FuIHNldCBjYXJldFxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLSB0YXJnZXQgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgY2FuU2V0Q2FyZXQoZSkge1xuICAgIGxldCB0ID0gITA7XG4gICAgaWYgKGQuaXNOYXRpdmVJbnB1dChlKSlcbiAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJmaWxlXCI6XG4gICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICBjYXNlIFwicmFkaW9cIjpcbiAgICAgICAgY2FzZSBcImhpZGRlblwiOlxuICAgICAgICBjYXNlIFwic3VibWl0XCI6XG4gICAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgICAgY2FzZSBcImltYWdlXCI6XG4gICAgICAgIGNhc2UgXCJyZXNldFwiOlxuICAgICAgICAgIHQgPSAhMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICB0ID0gZC5pc0NvbnRlbnRFZGl0YWJsZShlKTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2tzIG5vZGUgaWYgaXQgaXMgZW1wdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBjaGVja3Mgc2ltcGxlIE5vZGUgd2l0aG91dCBhbnkgY2hpbGRzIGZvciBlbXB0aW5lc3NcbiAgICogSWYgeW91IGhhdmUgTm9kZSB3aXRoIDIgb3IgbW9yZSBjaGlsZHJlbiBpZCBkZXB0aCwgeW91IGJldHRlciB1c2Uge0BsaW5rIERvbSNpc0VtcHR5fSBtZXRob2RcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gbm9kZSB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBpdCBpcyBlbXB0eVxuICAgKi9cbiAgc3RhdGljIGlzTm9kZUVtcHR5KGUpIHtcbiAgICBsZXQgdDtcbiAgICByZXR1cm4gdGhpcy5pc1NpbmdsZVRhZyhlKSAmJiAhdGhpcy5pc0xpbmVCcmVha1RhZyhlKSA/ICExIDogKHRoaXMuaXNFbGVtZW50KGUpICYmIHRoaXMuaXNOYXRpdmVJbnB1dChlKSA/IHQgPSBlLnZhbHVlIDogdCA9IGUudGV4dENvbnRlbnQucmVwbGFjZShcIlx1MjAwQlwiLCBcIlwiKSwgdC50cmltKCkubGVuZ3RoID09PSAwKTtcbiAgfVxuICAvKipcbiAgICogY2hlY2tzIG5vZGUgaWYgaXQgaXMgZG9lc24ndCBoYXZlIGFueSBjaGlsZCBub2Rlc1xuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBub2RlIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzTGVhZihlKSB7XG4gICAgcmV0dXJuIGUgPyBlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIDogITE7XG4gIH1cbiAgLyoqXG4gICAqIGJyZWFkdGgtZmlyc3Qgc2VhcmNoIChCRlMpXG4gICAqIHtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CcmVhZHRoLWZpcnN0X3NlYXJjaH1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uIFB1c2hlcyB0byBzdGFjayBhbGwgRE9NIGxlYWZzIGFuZCBjaGVja3MgZm9yIGVtcHRpbmVzc1xuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBub2RlIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRW1wdHkoZSkge1xuICAgIGUubm9ybWFsaXplKCk7XG4gICAgY29uc3QgdCA9IFtlXTtcbiAgICBmb3IgKDsgdC5sZW5ndGggPiAwOyApXG4gICAgICBpZiAoZSA9IHQuc2hpZnQoKSwgISFlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzTGVhZihlKSAmJiAhdGhpcy5pc05vZGVFbXB0eShlKSlcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIGUuY2hpbGROb2RlcyAmJiB0LnB1c2goLi4uQXJyYXkuZnJvbShlLmNoaWxkTm9kZXMpKTtcbiAgICAgIH1cbiAgICByZXR1cm4gITA7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHN0cmluZyBjb250YWlucyBodG1sIGVsZW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBzdHJpbmcgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNIVE1MU3RyaW5nKGUpIHtcbiAgICBjb25zdCB0ID0gZC5tYWtlKFwiZGl2XCIpO1xuICAgIHJldHVybiB0LmlubmVySFRNTCA9IGUsIHQuY2hpbGRFbGVtZW50Q291bnQgPiAwO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gbGVuZ3RoIG9mIG5vZGVgcyB0ZXh0IGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gbm9kZSB3aXRoIGNvbnRlbnRcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHN0YXRpYyBnZXRDb250ZW50TGVuZ3RoKGUpIHtcbiAgICByZXR1cm4gZC5pc05hdGl2ZUlucHV0KGUpID8gZS52YWx1ZS5sZW5ndGggOiBlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSA/IGUubGVuZ3RoIDogZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhcnJheSBvZiBuYW1lcyBvZiBibG9jayBodG1sIGVsZW1lbnRzXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIHN0YXRpYyBnZXQgYmxvY2tFbGVtZW50cygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJhZGRyZXNzXCIsXG4gICAgICBcImFydGljbGVcIixcbiAgICAgIFwiYXNpZGVcIixcbiAgICAgIFwiYmxvY2txdW90ZVwiLFxuICAgICAgXCJjYW52YXNcIixcbiAgICAgIFwiZGl2XCIsXG4gICAgICBcImRsXCIsXG4gICAgICBcImR0XCIsXG4gICAgICBcImZpZWxkc2V0XCIsXG4gICAgICBcImZpZ2NhcHRpb25cIixcbiAgICAgIFwiZmlndXJlXCIsXG4gICAgICBcImZvb3RlclwiLFxuICAgICAgXCJmb3JtXCIsXG4gICAgICBcImgxXCIsXG4gICAgICBcImgyXCIsXG4gICAgICBcImgzXCIsXG4gICAgICBcImg0XCIsXG4gICAgICBcImg1XCIsXG4gICAgICBcImg2XCIsXG4gICAgICBcImhlYWRlclwiLFxuICAgICAgXCJoZ3JvdXBcIixcbiAgICAgIFwiaHJcIixcbiAgICAgIFwibGlcIixcbiAgICAgIFwibWFpblwiLFxuICAgICAgXCJuYXZcIixcbiAgICAgIFwibm9zY3JpcHRcIixcbiAgICAgIFwib2xcIixcbiAgICAgIFwib3V0cHV0XCIsXG4gICAgICBcInBcIixcbiAgICAgIFwicHJlXCIsXG4gICAgICBcInJ1YnlcIixcbiAgICAgIFwic2VjdGlvblwiLFxuICAgICAgXCJ0YWJsZVwiLFxuICAgICAgXCJ0Ym9keVwiLFxuICAgICAgXCJ0aGVhZFwiLFxuICAgICAgXCJ0clwiLFxuICAgICAgXCJ0Zm9vdFwiLFxuICAgICAgXCJ1bFwiLFxuICAgICAgXCJ2aWRlb1wiXG4gICAgXTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgcGFzc2VkIGNvbnRlbnQgaW5jbHVkZXMgb25seSBpbmxpbmUgZWxlbWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8SFRNTEVsZW1lbnR9IGRhdGEgLSBlbGVtZW50IG9yIGh0bWwgc3RyaW5nXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGNvbnRhaW5zT25seUlubGluZUVsZW1lbnRzKGUpIHtcbiAgICBsZXQgdDtcbiAgICBKKGUpID8gKHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCB0LmlubmVySFRNTCA9IGUpIDogdCA9IGU7XG4gICAgY29uc3QgbyA9IChpKSA9PiAhZC5ibG9ja0VsZW1lbnRzLmluY2x1ZGVzKGkudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAmJiBBcnJheS5mcm9tKGkuY2hpbGRyZW4pLmV2ZXJ5KG8pO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHQuY2hpbGRyZW4pLmV2ZXJ5KG8pO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kIGFuZCByZXR1cm4gYWxsIGJsb2NrIGVsZW1lbnRzIGluIHRoZSBwYXNzZWQgcGFyZW50IChpbmNsdWRpbmcgc3VidHJlZSlcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IC0gcm9vdCBlbGVtZW50XG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudFtdfVxuICAgKi9cbiAgc3RhdGljIGdldERlZXBlc3RCbG9ja0VsZW1lbnRzKGUpIHtcbiAgICByZXR1cm4gZC5jb250YWluc09ubHlJbmxpbmVFbGVtZW50cyhlKSA/IFtlXSA6IEFycmF5LmZyb20oZS5jaGlsZHJlbikucmVkdWNlKCh0LCBvKSA9PiBbLi4udCwgLi4uZC5nZXREZWVwZXN0QmxvY2tFbGVtZW50cyhvKV0sIFtdKTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGZvciBnZXQgaG9sZGVyIGZyb20ge3N0cmluZ30gb3IgcmV0dXJuIEhUTUxFbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgSFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBob2xkZXIncyBpZCBvciBob2xkZXIncyBIVE1MIEVsZW1lbnRcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgc3RhdGljIGdldEhvbGRlcihlKSB7XG4gICAgcmV0dXJuIEooZSkgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKSA6IGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBlbGVtZW50IGlzIGFuY2hvciAoaXMgQSB0YWcpXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNBbmNob3IoZSkge1xuICAgIHJldHVybiBlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJhXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBlbGVtZW50J3Mgb2Zmc2V0IHJlbGF0ZWQgdG8gdGhlIGRvY3VtZW50XG4gICAqXG4gICAqIEB0b2RvIGhhbmRsZSBjYXNlIHdoZW4gZWRpdG9yIGluaXRpYWxpemVkIGluIHNjcm9sbGFibGUgcG9wdXBcbiAgICogQHBhcmFtIGVsIC0gZWxlbWVudCB0byBjb21wdXRlIG9mZnNldFxuICAgKi9cbiAgc3RhdGljIG9mZnNldChlKSB7XG4gICAgY29uc3QgdCA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIG8gPSB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsIGkgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCwgbiA9IHQudG9wICsgaSwgciA9IHQubGVmdCArIG87XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogbixcbiAgICAgIGxlZnQ6IHIsXG4gICAgICBib3R0b206IG4gKyB0LmhlaWdodCxcbiAgICAgIHJpZ2h0OiByICsgdC53aWR0aFxuICAgIH07XG4gIH1cbn1cbmNvbnN0IFd0ID0ge1xuICBibG9ja1R1bmVzOiB7XG4gICAgdG9nZ2xlcjoge1xuICAgICAgXCJDbGljayB0byB0dW5lXCI6IFwiXCIsXG4gICAgICBcIm9yIGRyYWcgdG8gbW92ZVwiOiBcIlwiXG4gICAgfVxuICB9LFxuICBpbmxpbmVUb29sYmFyOiB7XG4gICAgY29udmVydGVyOiB7XG4gICAgICBcIkNvbnZlcnQgdG9cIjogXCJcIlxuICAgIH1cbiAgfSxcbiAgdG9vbGJhcjoge1xuICAgIHRvb2xib3g6IHtcbiAgICAgIEFkZDogXCJcIlxuICAgIH1cbiAgfSxcbiAgcG9wb3Zlcjoge1xuICAgIEZpbHRlcjogXCJcIixcbiAgICBcIk5vdGhpbmcgZm91bmRcIjogXCJcIlxuICB9XG59LCBZdCA9IHtcbiAgVGV4dDogXCJcIixcbiAgTGluazogXCJcIixcbiAgQm9sZDogXCJcIixcbiAgSXRhbGljOiBcIlwiXG59LCBLdCA9IHtcbiAgbGluazoge1xuICAgIFwiQWRkIGEgbGlua1wiOiBcIlwiXG4gIH0sXG4gIHN0dWI6IHtcbiAgICBcIlRoZSBibG9jayBjYW4gbm90IGJlIGRpc3BsYXllZCBjb3JyZWN0bHkuXCI6IFwiXCJcbiAgfVxufSwgWHQgPSB7XG4gIGRlbGV0ZToge1xuICAgIERlbGV0ZTogXCJcIixcbiAgICBcIkNsaWNrIHRvIGRlbGV0ZVwiOiBcIlwiXG4gIH0sXG4gIG1vdmVVcDoge1xuICAgIFwiTW92ZSB1cFwiOiBcIlwiXG4gIH0sXG4gIG1vdmVEb3duOiB7XG4gICAgXCJNb3ZlIGRvd25cIjogXCJcIlxuICB9XG59LCBydCA9IHtcbiAgdWk6IFd0LFxuICB0b29sTmFtZXM6IFl0LFxuICB0b29sczogS3QsXG4gIGJsb2NrVHVuZXM6IFh0XG59LCBpZSA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIFR5cGUtc2FmZSB0cmFuc2xhdGlvbiBmb3IgaW50ZXJuYWwgVUkgdGV4dHM6XG4gICAqIFBlcmZvcm0gdHJhbnNsYXRpb24gb2YgdGhlIHN0cmluZyBieSBuYW1lc3BhY2UgYW5kIGEga2V5XG4gICAqXG4gICAqIEBleGFtcGxlIEkxOG4udWkoSTE4bkludGVybmFsTlMudWkuYmxvY2tUdW5lcy50b2dnbGVyLCAnQ2xpY2sgdG8gdHVuZScpXG4gICAqIEBwYXJhbSBpbnRlcm5hbE5hbWVzcGFjZSAtIHBhdGggdG8gdHJhbnNsYXRlZCBzdHJpbmcgaW4gZGljdGlvbmFyeVxuICAgKiBAcGFyYW0gZGljdEtleSAtIGRpY3Rpb25hcnkga2V5LiBCZXR0ZXIgdG8gdXNlIGRlZmF1bHQgbG9jYWxlIG9yaWdpbmFsIHRleHRcbiAgICovXG4gIHN0YXRpYyB1aShzLCBlKSB7XG4gICAgcmV0dXJuIGllLl90KHMsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgZm9yIGV4dGVybmFsIHN0cmluZ3MgdGhhdCBpcyBub3QgcHJlc2VudGVkIGluIGRlZmF1bHQgZGljdGlvbmFyeS5cbiAgICogRm9yIGV4YW1wbGUsIGZvciB1c2VyLXNwZWNpZmllZCB0b29sIG5hbWVzXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lc3BhY2UgLSBwYXRoIHRvIHRyYW5zbGF0ZWQgc3RyaW5nIGluIGRpY3Rpb25hcnlcbiAgICogQHBhcmFtIGRpY3RLZXkgLSBkaWN0aW9uYXJ5IGtleS4gQmV0dGVyIHRvIHVzZSBkZWZhdWx0IGxvY2FsZSBvcmlnaW5hbCB0ZXh0XG4gICAqL1xuICBzdGF0aWMgdChzLCBlKSB7XG4gICAgcmV0dXJuIGllLl90KHMsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBBZGp1c3QgbW9kdWxlIGZvciB1c2luZyBleHRlcm5hbCBkaWN0aW9uYXJ5XG4gICAqXG4gICAqIEBwYXJhbSBkaWN0aW9uYXJ5IC0gbmV3IG1lc3NhZ2VzIGxpc3QgdG8gb3ZlcnJpZGUgZGVmYXVsdFxuICAgKi9cbiAgc3RhdGljIHNldERpY3Rpb25hcnkocykge1xuICAgIGllLmN1cnJlbnREaWN0aW9uYXJ5ID0gcztcbiAgfVxuICAvKipcbiAgICogUGVyZm9ybSB0cmFuc2xhdGlvbiBib3RoIGZvciBpbnRlcm5hbCBhbmQgZXh0ZXJuYWwgbmFtZXNwYWNlc1xuICAgKiBJZiB0aGVyZSBpcyBubyB0cmFuc2xhdGlvbiBmb3VuZCwgcmV0dXJucyBwYXNzZWQga2V5IGFzIGEgdHJhbnNsYXRlZCBtZXNzYWdlXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lc3BhY2UgLSBwYXRoIHRvIHRyYW5zbGF0ZWQgc3RyaW5nIGluIGRpY3Rpb25hcnlcbiAgICogQHBhcmFtIGRpY3RLZXkgLSBkaWN0aW9uYXJ5IGtleS4gQmV0dGVyIHRvIHVzZSBkZWZhdWx0IGxvY2FsZSBvcmlnaW5hbCB0ZXh0XG4gICAqL1xuICBzdGF0aWMgX3QocywgZSkge1xuICAgIGNvbnN0IHQgPSBpZS5nZXROYW1lc3BhY2Uocyk7XG4gICAgcmV0dXJuICF0IHx8ICF0W2VdID8gZSA6IHRbZV07XG4gIH1cbiAgLyoqXG4gICAqIEZpbmQgbWVzc2FnZXMgc2VjdGlvbiBieSBuYW1lc3BhY2UgcGF0aFxuICAgKlxuICAgKiBAcGFyYW0gbmFtZXNwYWNlIC0gcGF0aCB0byBzZWN0aW9uXG4gICAqL1xuICBzdGF0aWMgZ2V0TmFtZXNwYWNlKHMpIHtcbiAgICByZXR1cm4gcy5zcGxpdChcIi5cIikucmVkdWNlKCh0LCBvKSA9PiAhdCB8fCAhT2JqZWN0LmtleXModCkubGVuZ3RoID8ge30gOiB0W29dLCBpZS5jdXJyZW50RGljdGlvbmFyeSk7XG4gIH1cbn07XG5sZXQgJCA9IGllO1xuJC5jdXJyZW50RGljdGlvbmFyeSA9IHJ0O1xuY2xhc3MgYXQgZXh0ZW5kcyBFcnJvciB7XG59XG5jbGFzcyB3ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSB7fTtcbiAgfVxuICAvKipcbiAgICogU3Vic2NyaWJlIGFueSBldmVudCBvbiBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBzdWJzY3JpYmVyXG4gICAqL1xuICBvbihlLCB0KSB7XG4gICAgZSBpbiB0aGlzLnN1YnNjcmliZXJzIHx8ICh0aGlzLnN1YnNjcmliZXJzW2VdID0gW10pLCB0aGlzLnN1YnNjcmliZXJzW2VdLnB1c2godCk7XG4gIH1cbiAgLyoqXG4gICAqIFN1YnNjcmliZSBhbnkgZXZlbnQgb24gY2FsbGJhY2suIENhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIG9uY2UgYW5kIGJlIHJlbW92ZWQgZnJvbSBzdWJzY3JpYmVycyBhcnJheSBhZnRlciBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBzdWJzY3JpYmVyXG4gICAqL1xuICBvbmNlKGUsIHQpIHtcbiAgICBlIGluIHRoaXMuc3Vic2NyaWJlcnMgfHwgKHRoaXMuc3Vic2NyaWJlcnNbZV0gPSBbXSk7XG4gICAgY29uc3QgbyA9IChpKSA9PiB7XG4gICAgICBjb25zdCBuID0gdChpKSwgciA9IHRoaXMuc3Vic2NyaWJlcnNbZV0uaW5kZXhPZihvKTtcbiAgICAgIHJldHVybiByICE9PSAtMSAmJiB0aGlzLnN1YnNjcmliZXJzW2VdLnNwbGljZShyLCAxKSwgbjtcbiAgICB9O1xuICAgIHRoaXMuc3Vic2NyaWJlcnNbZV0ucHVzaChvKTtcbiAgfVxuICAvKipcbiAgICogRW1pdCBjYWxsYmFja3Mgd2l0aCBwYXNzZWQgZGF0YVxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0gZGF0YSAtIHN1YnNjcmliZXJzIGdldCB0aGlzIGRhdGEgd2hlbiB0aGV5IHdlcmUgZmlyZWRcbiAgICovXG4gIGVtaXQoZSwgdCkge1xuICAgIFYodGhpcy5zdWJzY3JpYmVycykgfHwgIXRoaXMuc3Vic2NyaWJlcnNbZV0gfHwgdGhpcy5zdWJzY3JpYmVyc1tlXS5yZWR1Y2UoKG8sIGkpID0+IHtcbiAgICAgIGNvbnN0IG4gPSBpKG8pO1xuICAgICAgcmV0dXJuIG4gIT09IHZvaWQgMCA/IG4gOiBvO1xuICAgIH0sIHQpO1xuICB9XG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBjYWxsYmFjayBmcm9tIGV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSBldmVudE5hbWUgLSBldmVudCBuYW1lXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGV2ZW50IGhhbmRsZXJcbiAgICovXG4gIG9mZihlLCB0KSB7XG4gICAgZm9yIChsZXQgbyA9IDA7IG8gPCB0aGlzLnN1YnNjcmliZXJzW2VdLmxlbmd0aDsgbysrKVxuICAgICAgaWYgKHRoaXMuc3Vic2NyaWJlcnNbZV1bb10gPT09IHQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuc3Vic2NyaWJlcnNbZV1bb107XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95ZXJcbiAgICogY2xlYXJzIHN1YnNjcmliZXJzIGxpc3RcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGhlKHMpIHtcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIHtcbiAgICAvKipcbiAgICAgKiBCbG9jayBpZFxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQgaWQoKSB7XG4gICAgICByZXR1cm4gcy5pZDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRvb2wgbmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgIHJldHVybiBzLm5hbWU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUb29sIGNvbmZpZyBwYXNzZWQgb24gRWRpdG9yJ3MgaW5pdGlhbGl6YXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUb29sQ29uZmlnfVxuICAgICAqL1xuICAgIGdldCBjb25maWcoKSB7XG4gICAgICByZXR1cm4gcy5jb25maWc7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiAuY2UtYmxvY2sgZWxlbWVudCwgdGhhdCB3cmFwcyBwbHVnaW4gY29udGVudHNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXQgaG9sZGVyKCkge1xuICAgICAgcmV0dXJuIHMuaG9sZGVyO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiBCbG9jayBjb250ZW50IGlzIGVtcHR5XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBzLmlzRW1wdHk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIEJsb2NrIGlzIHNlbGVjdGVkIHdpdGggQ3Jvc3MtQmxvY2sgc2VsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgICByZXR1cm4gcy5zZWxlY3RlZDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNldCBCbG9jaydzIHN0cmV0Y2ggc3RhdGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgXHUyMDE0IHN0YXRlIHRvIHNldFxuICAgICAqL1xuICAgIHNldCBzdHJldGNoZWQodCkge1xuICAgICAgcy5zdHJldGNoZWQgPSB0O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiBCbG9jayBpcyBzdHJldGNoZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGdldCBzdHJldGNoZWQoKSB7XG4gICAgICByZXR1cm4gcy5zdHJldGNoZWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDYWxsIFRvb2wgbWV0aG9kIHdpdGggZXJyb3JzIGhhbmRsZXIgdW5kZXItdGhlLWhvb2RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIC0gbWV0aG9kIHRvIGNhbGxcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW0gLSBvYmplY3Qgd2l0aCBwYXJhbWV0ZXJzXG4gICAgICogQHJldHVybnMge3Vua25vd259XG4gICAgICovXG4gICAgY2FsbCh0LCBvKSB7XG4gICAgICByZXR1cm4gcy5jYWxsKHQsIG8pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2F2ZSBCbG9jayBjb250ZW50XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkfFNhdmVkRGF0YT59XG4gICAgICovXG4gICAgc2F2ZSgpIHtcbiAgICAgIHJldHVybiBzLnNhdmUoKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIEJsb2NrIGRhdGFcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QmxvY2tUb29sRGF0YX0gZGF0YSAtIGRhdGEgdG8gdmFsaWRhdGVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICAgKi9cbiAgICB2YWxpZGF0ZSh0KSB7XG4gICAgICByZXR1cm4gcy52YWxpZGF0ZSh0KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBzYXkgRWRpdG9yIHRoYXQgQmxvY2sgd2FzIGNoYW5nZWQuIFVzZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBFZGl0b3IncyAnb25DaGFuZ2UnIGNhbGxiYWNrXG4gICAgICogQ2FuIGJlIHVzZWZ1bCBmb3IgYmxvY2sgY2hhbmdlcyBpbnZpc2libGUgZm9yIGVkaXRvciBjb3JlLlxuICAgICAqL1xuICAgIGRpc3BhdGNoQ2hhbmdlKCkge1xuICAgICAgcy5kaXNwYXRjaENoYW5nZSgpO1xuICAgIH1cbiAgfSk7XG59XG5jbGFzcyBSZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYWxsTGlzdGVuZXJzID0gW107XG4gIH1cbiAgLyoqXG4gICAqIEFzc2lnbnMgZXZlbnQgbGlzdGVuZXIgb24gZWxlbWVudCBhbmQgcmV0dXJucyB1bmlxdWUgaWRlbnRpZmllclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gRE9NIGVsZW1lbnQgdGhhdCBuZWVkcyB0byBiZSBsaXN0ZW5lZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gbWV0aG9kIHRoYXQgd2lsbCBiZSBmaXJlZCBvbiBldmVudFxuICAgKiBAcGFyYW0ge2Jvb2xlYW58QWRkRXZlbnRMaXN0ZW5lck9wdGlvbnN9IG9wdGlvbnMgLSB1c2VDYXB0dXJlIG9yIHtjYXB0dXJlLCBwYXNzaXZlLCBvbmNlfVxuICAgKi9cbiAgb24oZSwgdCwgbywgaSA9ICExKSB7XG4gICAgY29uc3QgbiA9IFV0KFwibFwiKSwgciA9IHtcbiAgICAgIGlkOiBuLFxuICAgICAgZWxlbWVudDogZSxcbiAgICAgIGV2ZW50VHlwZTogdCxcbiAgICAgIGhhbmRsZXI6IG8sXG4gICAgICBvcHRpb25zOiBpXG4gICAgfTtcbiAgICBpZiAoIXRoaXMuZmluZE9uZShlLCB0LCBvKSlcbiAgICAgIHJldHVybiB0aGlzLmFsbExpc3RlbmVycy5wdXNoKHIpLCBlLmFkZEV2ZW50TGlzdGVuZXIodCwgbywgaSksIG47XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXIgZnJvbSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsZW1lbnQgLSBET00gZWxlbWVudCB0aGF0IHdlIHJlbW92aW5nIGxpc3RlbmVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBldmVudCB0eXBlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSByZW1vdmUgaGFuZGxlciwgaWYgZWxlbWVudCBsaXN0ZW5zIHNldmVyYWwgaGFuZGxlcnMgb24gdGhlIHNhbWUgZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW58QWRkRXZlbnRMaXN0ZW5lck9wdGlvbnN9IG9wdGlvbnMgLSB1c2VDYXB0dXJlIG9yIHtjYXB0dXJlLCBwYXNzaXZlLCBvbmNlfVxuICAgKi9cbiAgb2ZmKGUsIHQsIG8sIGkpIHtcbiAgICBjb25zdCBuID0gdGhpcy5maW5kQWxsKGUsIHQsIG8pO1xuICAgIG4uZm9yRWFjaCgociwgYSkgPT4ge1xuICAgICAgY29uc3QgbCA9IHRoaXMuYWxsTGlzdGVuZXJzLmluZGV4T2YoblthXSk7XG4gICAgICBsID4gLTEgJiYgKHRoaXMuYWxsTGlzdGVuZXJzLnNwbGljZShsLCAxKSwgci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoci5ldmVudFR5cGUsIHIuaGFuZGxlciwgci5vcHRpb25zKSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgbGlzdGVuZXIgYnkgaWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gbGlzdGVuZXIgaWRlbnRpZmllclxuICAgKi9cbiAgb2ZmQnlJZChlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuZmluZEJ5SWQoZSk7XG4gICAgdCAmJiB0LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LmV2ZW50VHlwZSwgdC5oYW5kbGVyLCB0Lm9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kcyBhbmQgcmV0dXJucyBmaXJzdCBsaXN0ZW5lciBieSBwYXNzZWQgcGFyYW1zXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsZW1lbnQgLSBldmVudCB0YXJnZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtldmVudFR5cGVdIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaGFuZGxlcl0gLSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGF8bnVsbH1cbiAgICovXG4gIGZpbmRPbmUoZSwgdCwgbykge1xuICAgIGNvbnN0IGkgPSB0aGlzLmZpbmRBbGwoZSwgdCwgbyk7XG4gICAgcmV0dXJuIGkubGVuZ3RoID4gMCA/IGlbMF0gOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYWxsIHN0b3JlZCBsaXN0ZW5lcnMgYnkgcGFzc2VkIHBhcmFtc1xuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gZXZlbnQgdGFyZ2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBldmVudCB0eXBlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGFbXX1cbiAgICovXG4gIGZpbmRBbGwoZSwgdCwgbykge1xuICAgIGxldCBpO1xuICAgIGNvbnN0IG4gPSBlID8gdGhpcy5maW5kQnlFdmVudFRhcmdldChlKSA6IFtdO1xuICAgIHJldHVybiBlICYmIHQgJiYgbyA/IGkgPSBuLmZpbHRlcigocikgPT4gci5ldmVudFR5cGUgPT09IHQgJiYgci5oYW5kbGVyID09PSBvKSA6IGUgJiYgdCA/IGkgPSBuLmZpbHRlcigocikgPT4gci5ldmVudFR5cGUgPT09IHQpIDogaSA9IG4sIGk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVyc1xuICAgKi9cbiAgcmVtb3ZlQWxsKCkge1xuICAgIHRoaXMuYWxsTGlzdGVuZXJzLm1hcCgoZSkgPT4ge1xuICAgICAgZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZS5ldmVudFR5cGUsIGUuaGFuZGxlciwgZS5vcHRpb25zKTtcbiAgICB9KSwgdGhpcy5hbGxMaXN0ZW5lcnMgPSBbXTtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIGNsZWFudXAgb24gZGVzdHJ1Y3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZW1vdmVBbGwoKTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIG1ldGhvZDogbG9va3MgZm9yIGxpc3RlbmVyIGJ5IHBhc3NlZCBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsZW1lbnQgLSBzZWFyY2hpbmcgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGxpc3RlbmVycyB0aGF0IGZvdW5kIG9uIGVsZW1lbnRcbiAgICovXG4gIGZpbmRCeUV2ZW50VGFyZ2V0KGUpIHtcbiAgICByZXR1cm4gdGhpcy5hbGxMaXN0ZW5lcnMuZmlsdGVyKCh0KSA9PiB7XG4gICAgICBpZiAodC5lbGVtZW50ID09PSBlKVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIG1ldGhvZDogbG9va3MgZm9yIGxpc3RlbmVyIGJ5IHBhc3NlZCBldmVudCB0eXBlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBldmVudCB0eXBlXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGFbXX0gbGlzdGVuZXJzIHRoYXQgZm91bmQgb24gZWxlbWVudFxuICAgKi9cbiAgZmluZEJ5VHlwZShlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbHRlcigodCkgPT4ge1xuICAgICAgaWYgKHQuZXZlbnRUeXBlID09PSBlKVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIG1ldGhvZDogbG9va3MgZm9yIGxpc3RlbmVyIGJ5IHBhc3NlZCBoYW5kbGVyXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGFbXX0gbGlzdGVuZXJzIHRoYXQgZm91bmQgb24gZWxlbWVudFxuICAgKi9cbiAgZmluZEJ5SGFuZGxlcihlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbHRlcigodCkgPT4ge1xuICAgICAgaWYgKHQuaGFuZGxlciA9PT0gZSlcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgbGlzdGVuZXIgZGF0YSBmb3VuZCBieSBpZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBsaXN0ZW5lciBpZGVudGlmaWVyXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGF9XG4gICAqL1xuICBmaW5kQnlJZChlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbmQoKHQpID0+IHQuaWQgPT09IGUpO1xuICB9XG59XG5jbGFzcyBTIHtcbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE1vZHVsZSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmNvbmZpZyAtIE1vZHVsZSBjb25maWdcbiAgICogQHBhcmFtIG9wdGlvbnMuZXZlbnRzRGlzcGF0Y2hlciAtIENvbW1vbiBldmVudCBidXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBpZiAodGhpcy5ub2RlcyA9IHt9LCB0aGlzLmxpc3RlbmVycyA9IG5ldyBSZSgpLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQXNzaWducyBldmVudCBsaXN0ZW5lciBvbiBET00gZWxlbWVudCBhbmQgcHVzaGVzIGludG8gc3BlY2lhbCBhcnJheSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWRcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gRE9NIEVsZW1lbnRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBFdmVudCBuYW1lXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gRXZlbnQgaGFuZGxlclxuICAgICAgICogQHBhcmFtIHtib29sZWFufEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zfSBvcHRpb25zIC0gTGlzdGVuaW5nIG9wdGlvbnNcbiAgICAgICAqL1xuICAgICAgb246IChvLCBpLCBuLCByID0gITEpID0+IHtcbiAgICAgICAgdGhpcy5tdXRhYmxlTGlzdGVuZXJJZHMucHVzaChcbiAgICAgICAgICB0aGlzLmxpc3RlbmVycy5vbihvLCBpLCBuLCByKVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQ2xlYXJzIGFsbCBtdXRhYmxlIGxpc3RlbmVyc1xuICAgICAgICovXG4gICAgICBjbGVhckFsbDogKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IG8gb2YgdGhpcy5tdXRhYmxlTGlzdGVuZXJJZHMpXG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnMub2ZmQnlJZChvKTtcbiAgICAgICAgdGhpcy5tdXRhYmxlTGlzdGVuZXJJZHMgPSBbXTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLm11dGFibGVMaXN0ZW5lcklkcyA9IFtdLCBuZXcudGFyZ2V0ID09PSBTKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvbnN0cnVjdG9ycyBmb3IgYWJzdHJhY3QgY2xhc3MgTW9kdWxlIGFyZSBub3QgYWxsb3dlZC5cIik7XG4gICAgdGhpcy5jb25maWcgPSBlLCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIgPSB0O1xuICB9XG4gIC8qKlxuICAgKiBFZGl0b3IgbW9kdWxlcyBzZXR0ZXJcbiAgICpcbiAgICogQHBhcmFtIHtFZGl0b3JNb2R1bGVzfSBFZGl0b3IgLSBFZGl0b3IncyBNb2R1bGVzXG4gICAqL1xuICBzZXQgc3RhdGUoZSkge1xuICAgIHRoaXMuRWRpdG9yID0gZTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIG1lbW9yaXplZCBub2Rlc1xuICAgKi9cbiAgcmVtb3ZlQWxsTm9kZXMoKSB7XG4gICAgZm9yIChjb25zdCBlIGluIHRoaXMubm9kZXMpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLm5vZGVzW2VdO1xuICAgICAgdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIHQucmVtb3ZlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgY3VycmVudCBkaXJlY3Rpb24gaXMgUlRMIChSaWdodC1Uby1MZWZ0KVxuICAgKi9cbiAgZ2V0IGlzUnRsKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5pMThuLmRpcmVjdGlvbiA9PT0gXCJydGxcIjtcbiAgfVxufVxuY2xhc3MgbSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBudWxsLCB0aGlzLnNlbGVjdGlvbiA9IG51bGwsIHRoaXMuc2F2ZWRTZWxlY3Rpb25SYW5nZSA9IG51bGwsIHRoaXMuaXNGYWtlQmFja2dyb3VuZEVuYWJsZWQgPSAhMSwgdGhpcy5jb21tYW5kQmFja2dyb3VuZCA9IFwiYmFja0NvbG9yXCIsIHRoaXMuY29tbWFuZFJlbW92ZUZvcm1hdCA9IFwicmVtb3ZlRm9ybWF0XCI7XG4gIH1cbiAgLyoqXG4gICAqIEVkaXRvciBzdHlsZXNcbiAgICpcbiAgICogQHJldHVybnMge3tlZGl0b3JXcmFwcGVyOiBzdHJpbmcsIGVkaXRvclpvbmU6IHN0cmluZ319XG4gICAqL1xuICBzdGF0aWMgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZWRpdG9yV3JhcHBlcjogXCJjb2RleC1lZGl0b3JcIixcbiAgICAgIGVkaXRvclpvbmU6IFwiY29kZXgtZWRpdG9yX19yZWRhY3RvclwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBzZWxlY3RlZCBhbmNob3JcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3J1L2RvY3MvV2ViL0FQSS9TZWxlY3Rpb24vYW5jaG9yTm9kZX1cbiAgICpcbiAgICogQHJldHVybnMge05vZGV8bnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXQgYW5jaG9yTm9kZSgpIHtcbiAgICBjb25zdCBlID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiBlID8gZS5hbmNob3JOb2RlIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBzZWxlY3RlZCBhbmNob3IgZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxuICAgKi9cbiAgc3RhdGljIGdldCBhbmNob3JFbGVtZW50KCkge1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCFlKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgdCA9IGUuYW5jaG9yTm9kZTtcbiAgICByZXR1cm4gdCA/IGQuaXNFbGVtZW50KHQpID8gdCA6IHQucGFyZW50RWxlbWVudCA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc2VsZWN0aW9uIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIGFuY2hvciBub2RlXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9BUEkvU2VsZWN0aW9uL2FuY2hvck9mZnNldH1cbiAgICpcbiAgICogQHJldHVybnMge251bWJlcnxudWxsfVxuICAgKi9cbiAgc3RhdGljIGdldCBhbmNob3JPZmZzZXQoKSB7XG4gICAgY29uc3QgZSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4gZSA/IGUuYW5jaG9yT2Zmc2V0IDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogSXMgY3VycmVudCBzZWxlY3Rpb24gcmFuZ2UgY29sbGFwc2VkXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufG51bGx9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzQ29sbGFwc2VkKCkge1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIGUgPyBlLmlzQ29sbGFwc2VkIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgY3VycmVudCBzZWxlY3Rpb24gaWYgaXQgaXMgYXQgRWRpdG9yJ3Mgem9uZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgaXNBdEVkaXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1NlbGVjdGlvbkF0RWRpdG9yKG0uZ2V0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYXNzZWQgc2VsZWN0aW9uIGlzIGF0IEVkaXRvcidzIHpvbmVcbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdGlvbiAtIFNlbGVjdGlvbiBvYmplY3QgdG8gY2hlY2tcbiAgICovXG4gIHN0YXRpYyBpc1NlbGVjdGlvbkF0RWRpdG9yKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICByZXR1cm4gITE7XG4gICAgbGV0IHQgPSBlLmFuY2hvck5vZGUgfHwgZS5mb2N1c05vZGU7XG4gICAgdCAmJiB0Lm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiAodCA9IHQucGFyZW50Tm9kZSk7XG4gICAgbGV0IG8gPSBudWxsO1xuICAgIHJldHVybiB0ICYmIHQgaW5zdGFuY2VvZiBFbGVtZW50ICYmIChvID0gdC5jbG9zZXN0KGAuJHttLkNTUy5lZGl0b3Jab25lfWApKSwgbyA/IG8ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFIDogITE7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHBhc3NlZCByYW5nZSBhdCBFZGl0b3Igem9uZVxuICAgKlxuICAgKiBAcGFyYW0gcmFuZ2UgLSByYW5nZSB0byBjaGVja1xuICAgKi9cbiAgc3RhdGljIGlzUmFuZ2VBdEVkaXRvcihlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgcmV0dXJuO1xuICAgIGxldCB0ID0gZS5zdGFydENvbnRhaW5lcjtcbiAgICB0ICYmIHQubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFICYmICh0ID0gdC5wYXJlbnROb2RlKTtcbiAgICBsZXQgbyA9IG51bGw7XG4gICAgcmV0dXJuIHQgJiYgdCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgKG8gPSB0LmNsb3Nlc3QoYC4ke20uQ1NTLmVkaXRvclpvbmV9YCkpLCBvID8gby5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgOiAhMTtcbiAgfVxuICAvKipcbiAgICogTWV0aG9kcyByZXR1cm4gYm9vbGVhbiB0aGF0IHRydWUgaWYgc2VsZWN0aW9uIGV4aXN0cyBvbiB0aGUgcGFnZVxuICAgKi9cbiAgc3RhdGljIGdldCBpc1NlbGVjdGlvbkV4aXN0cygpIHtcbiAgICByZXR1cm4gISFtLmdldCgpLmFuY2hvck5vZGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBmaXJzdCByYW5nZVxuICAgKlxuICAgKiBAcmV0dXJucyB7UmFuZ2V8bnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXQgcmFuZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmFuZ2VGcm9tU2VsZWN0aW9uKHRoaXMuZ2V0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHJhbmdlIGZyb20gcGFzc2VkIFNlbGVjdGlvbiBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdGlvbiAtIFNlbGVjdGlvbiBvYmplY3QgdG8gZ2V0IFJhbmdlIGZyb21cbiAgICovXG4gIHN0YXRpYyBnZXRSYW5nZUZyb21TZWxlY3Rpb24oZSkge1xuICAgIHJldHVybiBlICYmIGUucmFuZ2VDb3VudCA/IGUuZ2V0UmFuZ2VBdCgwKSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgcG9zaXRpb24gYW5kIHNpemUgb2Ygc2VsZWN0ZWQgdGV4dFxuICAgKlxuICAgKiBAcmV0dXJucyB7RE9NUmVjdCB8IENsaWVudFJlY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHJlY3QoKSB7XG4gICAgbGV0IGUgPSBkb2N1bWVudC5zZWxlY3Rpb24sIHQsIG8gPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICBpZiAoZSAmJiBlLnR5cGUgIT09IFwiQ29udHJvbFwiKVxuICAgICAgcmV0dXJuIGUgPSBlLCB0ID0gZS5jcmVhdGVSYW5nZSgpLCBvLnggPSB0LmJvdW5kaW5nTGVmdCwgby55ID0gdC5ib3VuZGluZ1RvcCwgby53aWR0aCA9IHQuYm91bmRpbmdXaWR0aCwgby5oZWlnaHQgPSB0LmJvdW5kaW5nSGVpZ2h0LCBvO1xuICAgIGlmICghd2luZG93LmdldFNlbGVjdGlvbilcbiAgICAgIHJldHVybiBUKFwiTWV0aG9kIHdpbmRvdy5nZXRTZWxlY3Rpb24gaXMgbm90IHN1cHBvcnRlZFwiLCBcIndhcm5cIiksIG87XG4gICAgaWYgKGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCksIGUucmFuZ2VDb3VudCA9PT0gbnVsbCB8fCBpc05hTihlLnJhbmdlQ291bnQpKVxuICAgICAgcmV0dXJuIFQoXCJNZXRob2QgU2VsZWN0aW9uVXRpbHMucmFuZ2VDb3VudCBpcyBub3Qgc3VwcG9ydGVkXCIsIFwid2FyblwiKSwgbztcbiAgICBpZiAoZS5yYW5nZUNvdW50ID09PSAwKVxuICAgICAgcmV0dXJuIG87XG4gICAgaWYgKHQgPSBlLmdldFJhbmdlQXQoMCkuY2xvbmVSYW5nZSgpLCB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiAobyA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLCBvLnggPT09IDAgJiYgby55ID09PSAwKSB7XG4gICAgICBjb25zdCBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBpZiAoaS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlx1MjAwQlwiKSksIHQuaW5zZXJ0Tm9kZShpKSwgbyA9IGkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IG4gPSBpLnBhcmVudE5vZGU7XG4gICAgICAgIG4ucmVtb3ZlQ2hpbGQoaSksIG4ubm9ybWFsaXplKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHNlbGVjdGVkIHRleHQgYXMgU3RyaW5nXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRTZWxlY3Rpb24gPyB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKSA6IFwiXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2luZG93IFNlbGVjdGlvblV0aWxzXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9BUEkvV2luZG93L2dldFNlbGVjdGlvbn1cbiAgICpcbiAgICogQHJldHVybnMge1NlbGVjdGlvbn1cbiAgICovXG4gIHN0YXRpYyBnZXQoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgfVxuICAvKipcbiAgICogU2V0IGZvY3VzIHRvIGNvbnRlbnRlZGl0YWJsZSBvciBuYXRpdmUgaW5wdXQgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0gZWxlbWVudCAtIGVsZW1lbnQgd2hlcmUgdG8gc2V0IGZvY3VzXG4gICAqIEBwYXJhbSBvZmZzZXQgLSBvZmZzZXQgb2YgY3Vyc29yXG4gICAqL1xuICBzdGF0aWMgc2V0Q3Vyc29yKGUsIHQgPSAwKSB7XG4gICAgY29uc3QgbyA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCksIGkgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIGQuaXNOYXRpdmVJbnB1dChlKSA/IGQuY2FuU2V0Q2FyZXQoZSkgPyAoZS5mb2N1cygpLCBlLnNlbGVjdGlvblN0YXJ0ID0gZS5zZWxlY3Rpb25FbmQgPSB0LCBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSA6IHZvaWQgMCA6IChvLnNldFN0YXJ0KGUsIHQpLCBvLnNldEVuZChlLCB0KSwgaS5yZW1vdmVBbGxSYW5nZXMoKSwgaS5hZGRSYW5nZShvKSwgby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGN1cnJlbnQgcmFuZ2UgZXhpc3RzIGFuZCBiZWxvbmdzIHRvIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0gY29udGFpbmVyIC0gd2hlcmUgcmFuZ2Ugc2hvdWxkIGJlXG4gICAqL1xuICBzdGF0aWMgaXNSYW5nZUluc2lkZUNvbnRhaW5lcihlKSB7XG4gICAgY29uc3QgdCA9IG0ucmFuZ2U7XG4gICAgcmV0dXJuIHQgPT09IG51bGwgPyAhMSA6IGUuY29udGFpbnModC5zdGFydENvbnRhaW5lcik7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgZmFrZSBjdXJzb3IgdG8gdGhlIGN1cnJlbnQgcmFuZ2VcbiAgICovXG4gIHN0YXRpYyBhZGRGYWtlQ3Vyc29yKCkge1xuICAgIGNvbnN0IGUgPSBtLnJhbmdlO1xuICAgIGlmIChlID09PSBudWxsKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBkLm1ha2UoXCJzcGFuXCIsIFwiY29kZXgtZWRpdG9yX19mYWtlLWN1cnNvclwiKTtcbiAgICB0LmRhdGFzZXQubXV0YXRpb25GcmVlID0gXCJ0cnVlXCIsIGUuY29sbGFwc2UoKSwgZS5pbnNlcnROb2RlKHQpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYXNzZWQgZWxlbWVudCBjb250YWlucyBhIGZha2UgY3Vyc29yXG4gICAqXG4gICAqIEBwYXJhbSBlbCAtIHdoZXJlIHRvIGNoZWNrXG4gICAqL1xuICBzdGF0aWMgaXNGYWtlQ3Vyc29ySW5zaWRlQ29udGFpbmVyKGUpIHtcbiAgICByZXR1cm4gZC5maW5kKGUsIFwiLmNvZGV4LWVkaXRvcl9fZmFrZS1jdXJzb3JcIikgIT09IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgZmFrZSBjdXJzb3IgZnJvbSBhIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0gY29udGFpbmVyIC0gY29udGFpbmVyIHRvIGxvb2sgZm9yXG4gICAqL1xuICBzdGF0aWMgcmVtb3ZlRmFrZUN1cnNvcihlID0gZG9jdW1lbnQuYm9keSkge1xuICAgIGNvbnN0IHQgPSBkLmZpbmQoZSwgXCIuY29kZXgtZWRpdG9yX19mYWtlLWN1cnNvclwiKTtcbiAgICB0ICYmIHQucmVtb3ZlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgZmFrZSBiYWNrZ3JvdW5kXG4gICAqL1xuICByZW1vdmVGYWtlQmFja2dyb3VuZCgpIHtcbiAgICB0aGlzLmlzRmFrZUJhY2tncm91bmRFbmFibGVkICYmICh0aGlzLmlzRmFrZUJhY2tncm91bmRFbmFibGVkID0gITEsIGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuY29tbWFuZFJlbW92ZUZvcm1hdCkpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGZha2UgYmFja2dyb3VuZFxuICAgKi9cbiAgc2V0RmFrZUJhY2tncm91bmQoKSB7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5jb21tYW5kQmFja2dyb3VuZCwgITEsIFwiI2E4ZDZmZlwiKSwgdGhpcy5pc0Zha2VCYWNrZ3JvdW5kRW5hYmxlZCA9ICEwO1xuICB9XG4gIC8qKlxuICAgKiBTYXZlIFNlbGVjdGlvblV0aWxzJ3MgcmFuZ2VcbiAgICovXG4gIHNhdmUoKSB7XG4gICAgdGhpcy5zYXZlZFNlbGVjdGlvblJhbmdlID0gbS5yYW5nZTtcbiAgfVxuICAvKipcbiAgICogUmVzdG9yZSBzYXZlZCBTZWxlY3Rpb25VdGlscydzIHJhbmdlXG4gICAqL1xuICByZXN0b3JlKCkge1xuICAgIGlmICghdGhpcy5zYXZlZFNlbGVjdGlvblJhbmdlKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgZS5yZW1vdmVBbGxSYW5nZXMoKSwgZS5hZGRSYW5nZSh0aGlzLnNhdmVkU2VsZWN0aW9uUmFuZ2UpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgc2F2ZWQgc2VsZWN0aW9uXG4gICAqL1xuICBjbGVhclNhdmVkKCkge1xuICAgIHRoaXMuc2F2ZWRTZWxlY3Rpb25SYW5nZSA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENvbGxhcHNlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAqL1xuICBjb2xsYXBzZVRvRW5kKCkge1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCksIHQgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHQuc2VsZWN0Tm9kZUNvbnRlbnRzKGUuZm9jdXNOb2RlKSwgdC5jb2xsYXBzZSghMSksIGUucmVtb3ZlQWxsUmFuZ2VzKCksIGUuYWRkUmFuZ2UodCk7XG4gIH1cbiAgLyoqXG4gICAqIExvb2tzIGFoZWFkIHRvIGZpbmQgcGFzc2VkIHRhZyBmcm9tIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdGFnTmFtZSAgICAgICAtIHRhZyB0byBmb3VuZFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtjbGFzc05hbWVdICAgLSB0YWcncyBjbGFzcyBuYW1lXG4gICAqIEBwYXJhbSAge251bWJlcn0gW3NlYXJjaERlcHRoXSAtIGNvdW50IG9mIHRhZ3MgdGhhdCBjYW4gYmUgaW5jbHVkZWQuIEZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHxudWxsfVxuICAgKi9cbiAgZmluZFBhcmVudFRhZyhlLCB0LCBvID0gMTApIHtcbiAgICBjb25zdCBpID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIGxldCBuID0gbnVsbDtcbiAgICByZXR1cm4gIWkgfHwgIWkuYW5jaG9yTm9kZSB8fCAhaS5mb2N1c05vZGUgPyBudWxsIDogKFtcbiAgICAgIC8qKiB0aGUgTm9kZSBpbiB3aGljaCB0aGUgc2VsZWN0aW9uIGJlZ2lucyAqL1xuICAgICAgaS5hbmNob3JOb2RlLFxuICAgICAgLyoqIHRoZSBOb2RlIGluIHdoaWNoIHRoZSBzZWxlY3Rpb24gZW5kcyAqL1xuICAgICAgaS5mb2N1c05vZGVcbiAgICBdLmZvckVhY2goKGEpID0+IHtcbiAgICAgIGxldCBsID0gbztcbiAgICAgIGZvciAoOyBsID4gMCAmJiBhLnBhcmVudE5vZGUgJiYgIShhLnRhZ05hbWUgPT09IGUgJiYgKG4gPSBhLCB0ICYmIGEuY2xhc3NMaXN0ICYmICFhLmNsYXNzTGlzdC5jb250YWlucyh0KSAmJiAobiA9IG51bGwpLCBuKSk7IClcbiAgICAgICAgYSA9IGEucGFyZW50Tm9kZSwgbC0tO1xuICAgIH0pLCBuKTtcbiAgfVxuICAvKipcbiAgICogRXhwYW5kcyBzZWxlY3Rpb24gcmFuZ2UgdG8gdGhlIHBhc3NlZCBwYXJlbnQgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gZWxlbWVudCB3aGljaCBjb250ZW50cyBzaG91bGQgYmUgc2VsZWN0ZWRcbiAgICovXG4gIGV4cGFuZFRvVGFnKGUpIHtcbiAgICBjb25zdCB0ID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHQucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgY29uc3QgbyA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgby5zZWxlY3ROb2RlQ29udGVudHMoZSksIHQuYWRkUmFuZ2Uobyk7XG4gIH1cbn1cbmZ1bmN0aW9uIFZ0KHMsIGUpIHtcbiAgY29uc3QgeyB0eXBlOiB0LCB0YXJnZXQ6IG8sIGFkZGVkTm9kZXM6IGksIHJlbW92ZWROb2RlczogbiB9ID0gcztcbiAgaWYgKFtcImNoYXJhY3RlckRhdGFcIiwgXCJhdHRyaWJ1dGVzXCJdLmluY2x1ZGVzKHQpKSB7XG4gICAgY29uc3QgbCA9IG8ubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFID8gby5wYXJlbnROb2RlIDogbztcbiAgICByZXR1cm4gZS5jb250YWlucyhsKTtcbiAgfVxuICBjb25zdCByID0gQXJyYXkuZnJvbShpKS5zb21lKChsKSA9PiBlLmNvbnRhaW5zKGwpKSwgYSA9IEFycmF5LmZyb20obikuc29tZSgobCkgPT4gZS5jb250YWlucyhsKSk7XG4gIHJldHVybiByIHx8IGE7XG59XG5jb25zdCBNZSA9IFwicmVkYWN0b3IgZG9tIGNoYW5nZWRcIiwgbHQgPSBcImJsb2NrIGNoYW5nZWRcIiwgY3QgPSBcImZha2UgY3Vyc29yIGlzIGFib3V0IHRvIGJlIHRvZ2dsZWRcIiwgZHQgPSBcImZha2UgY3Vyc29yIGhhdmUgYmVlbiBzZXRcIjtcbnZhciBxID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHMuQVBQRU5EX0NBTExCQUNLID0gXCJhcHBlbmRDYWxsYmFja1wiLCBzLlJFTkRFUkVEID0gXCJyZW5kZXJlZFwiLCBzLk1PVkVEID0gXCJtb3ZlZFwiLCBzLlVQREFURUQgPSBcInVwZGF0ZWRcIiwgcy5SRU1PVkVEID0gXCJyZW1vdmVkXCIsIHMuT05fUEFTVEUgPSBcIm9uUGFzdGVcIiwgcykpKHEgfHwge30pO1xuY2xhc3MgRiBleHRlbmRzIHdlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gYmxvY2sgY29uc3RydWN0b3Igb3B0aW9uc1xuICAgKiBAcGFyYW0gW29wdGlvbnMuaWRdIC0gYmxvY2sncyBpZC4gV2lsbCBiZSBnZW5lcmF0ZWQgaWYgb21pdHRlZC5cbiAgICogQHBhcmFtIG9wdGlvbnMuZGF0YSAtIFRvb2wncyBpbml0aWFsIGRhdGFcbiAgICogQHBhcmFtIG9wdGlvbnMudG9vbCBcdTIwMTQgYmxvY2sncyB0b29sXG4gICAqIEBwYXJhbSBvcHRpb25zLmFwaSAtIEVkaXRvciBBUEkgbW9kdWxlIGZvciBwYXNzIGl0IHRvIHRoZSBCbG9jayBUdW5lc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5yZWFkT25seSAtIFJlYWQtT25seSBmbGFnXG4gICAqIEBwYXJhbSBbZXZlbnRCdXNdIC0gRWRpdG9yIGNvbW1vbiBldmVudCBidXMuIEFsbG93cyB0byBzdWJzY3JpYmUgb24gc29tZSBFZGl0b3IgZXZlbnRzLiBDb3VsZCBiZSBvbWl0dGVkIHdoZW4gXCJ2aXJ0dWFsXCIgQmxvY2sgaXMgY3JlYXRlZC4gU2VlIEJsb2Nrc0FQSUBjb21wb3NlQmxvY2tEYXRhLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIGlkOiBlID0genQoKSxcbiAgICBkYXRhOiB0LFxuICAgIHRvb2w6IG8sXG4gICAgYXBpOiBpLFxuICAgIHJlYWRPbmx5OiBuLFxuICAgIHR1bmVzRGF0YTogclxuICB9LCBhKSB7XG4gICAgc3VwZXIoKSwgdGhpcy5jYWNoZWRJbnB1dHMgPSBbXSwgdGhpcy50b29sUmVuZGVyZWRFbGVtZW50ID0gbnVsbCwgdGhpcy50dW5lc0luc3RhbmNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIHRoaXMuZGVmYXVsdFR1bmVzSW5zdGFuY2VzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgdGhpcy51bmF2YWlsYWJsZVR1bmVzRGF0YSA9IHt9LCB0aGlzLmlucHV0SW5kZXggPSAwLCB0aGlzLmVkaXRvckV2ZW50QnVzID0gbnVsbCwgdGhpcy5oYW5kbGVGb2N1cyA9ICgpID0+IHtcbiAgICAgIHRoaXMuZHJvcElucHV0c0NhY2hlKCksIHRoaXMudXBkYXRlQ3VycmVudElucHV0KCk7XG4gICAgfSwgdGhpcy5kaWRNdXRhdGVkID0gKGwgPSB2b2lkIDApID0+IHtcbiAgICAgIGNvbnN0IGMgPSBsID09PSB2b2lkIDAsIHUgPSBsIGluc3RhbmNlb2YgSW5wdXRFdmVudDtcbiAgICAgICFjICYmICF1ICYmIHRoaXMuZGV0ZWN0VG9vbFJvb3RDaGFuZ2UobCk7XG4gICAgICBsZXQgaDtcbiAgICAgIGMgfHwgdSA/IGggPSAhMCA6IGggPSAhKGwubGVuZ3RoID4gMCAmJiBsLmV2ZXJ5KCh2KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYWRkZWROb2RlczogcCwgcmVtb3ZlZE5vZGVzOiBrIH0gPSB2O1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIC4uLkFycmF5LmZyb20ocCksXG4gICAgICAgICAgLi4uQXJyYXkuZnJvbShrKVxuICAgICAgICBdLnNvbWUoKEEpID0+IGQuaXNFbGVtZW50KEEpID8gQS5kYXRhc2V0Lm11dGF0aW9uRnJlZSA9PT0gXCJ0cnVlXCIgOiAhMSk7XG4gICAgICB9KSksIGggJiYgKHRoaXMuZHJvcElucHV0c0NhY2hlKCksIHRoaXMudXBkYXRlQ3VycmVudElucHV0KCksIHRoaXMuY2FsbChcbiAgICAgICAgXCJ1cGRhdGVkXCJcbiAgICAgICAgLyogVVBEQVRFRCAqL1xuICAgICAgKSwgdGhpcy5lbWl0KFwiZGlkTXV0YXRlZFwiLCB0aGlzKSk7XG4gICAgfSwgdGhpcy5uYW1lID0gby5uYW1lLCB0aGlzLmlkID0gZSwgdGhpcy5zZXR0aW5ncyA9IG8uc2V0dGluZ3MsIHRoaXMuY29uZmlnID0gby5zZXR0aW5ncy5jb25maWcgfHwge30sIHRoaXMuYXBpID0gaSwgdGhpcy5lZGl0b3JFdmVudEJ1cyA9IGEgfHwgbnVsbCwgdGhpcy5ibG9ja0FQSSA9IG5ldyBoZSh0aGlzKSwgdGhpcy50b29sID0gbywgdGhpcy50b29sSW5zdGFuY2UgPSBvLmNyZWF0ZSh0LCB0aGlzLmJsb2NrQVBJLCBuKSwgdGhpcy50dW5lcyA9IG8udHVuZXMsIHRoaXMuY29tcG9zZVR1bmVzKHIpLCB0aGlzLmhvbGRlciA9IHRoaXMuY29tcG9zZSgpLCB0aGlzLndhdGNoQmxvY2tNdXRhdGlvbnMoKSwgdGhpcy5hZGRJbnB1dEV2ZW50cygpO1xuICB9XG4gIC8qKlxuICAgKiBDU1MgY2xhc3NlcyBmb3IgdGhlIEJsb2NrXG4gICAqXG4gICAqIEByZXR1cm5zIHt7d3JhcHBlcjogc3RyaW5nLCBjb250ZW50OiBzdHJpbmd9fVxuICAgKi9cbiAgc3RhdGljIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyYXBwZXI6IFwiY2UtYmxvY2tcIixcbiAgICAgIHdyYXBwZXJTdHJldGNoZWQ6IFwiY2UtYmxvY2stLXN0cmV0Y2hlZFwiLFxuICAgICAgY29udGVudDogXCJjZS1ibG9ja19fY29udGVudFwiLFxuICAgICAgZm9jdXNlZDogXCJjZS1ibG9jay0tZm9jdXNlZFwiLFxuICAgICAgc2VsZWN0ZWQ6IFwiY2UtYmxvY2stLXNlbGVjdGVkXCIsXG4gICAgICBkcm9wVGFyZ2V0OiBcImNlLWJsb2NrLS1kcm9wLXRhcmdldFwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRmluZCBhbmQgcmV0dXJuIGFsbCBlZGl0YWJsZSBlbGVtZW50cyAoY29udGVudGVkaXRhYmxlIGFuZCBuYXRpdmUgaW5wdXRzKSBpbiB0aGUgVG9vbCBIVE1MXG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudFtdfVxuICAgKi9cbiAgZ2V0IGlucHV0cygpIHtcbiAgICBpZiAodGhpcy5jYWNoZWRJbnB1dHMubGVuZ3RoICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkSW5wdXRzO1xuICAgIGNvbnN0IGUgPSBkLmZpbmRBbGxJbnB1dHModGhpcy5ob2xkZXIpO1xuICAgIHJldHVybiB0aGlzLmlucHV0SW5kZXggPiBlLmxlbmd0aCAtIDEgJiYgKHRoaXMuaW5wdXRJbmRleCA9IGUubGVuZ3RoIC0gMSksIHRoaXMuY2FjaGVkSW5wdXRzID0gZSwgZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGN1cnJlbnQgVG9vbGBzIGlucHV0XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdldCBjdXJyZW50SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzW3RoaXMuaW5wdXRJbmRleF07XG4gIH1cbiAgLyoqXG4gICAqIFNldCBpbnB1dCBpbmRleCB0byB0aGUgcGFzc2VkIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudCB8IE5vZGV9IGVsZW1lbnQgLSBIVE1MIEVsZW1lbnQgdG8gc2V0IGFzIGN1cnJlbnQgaW5wdXRcbiAgICovXG4gIHNldCBjdXJyZW50SW5wdXQoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLmlucHV0cy5maW5kSW5kZXgoKG8pID0+IG8gPT09IGUgfHwgby5jb250YWlucyhlKSk7XG4gICAgdCAhPT0gLTEgJiYgKHRoaXMuaW5wdXRJbmRleCA9IHQpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gZmlyc3QgVG9vbGBzIGlucHV0XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdldCBmaXJzdElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1swXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGZpcnN0IFRvb2xgcyBpbnB1dFxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBnZXQgbGFzdElucHV0KCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmlucHV0cztcbiAgICByZXR1cm4gZVtlLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gbmV4dCBUb29sYHMgaW5wdXQgb3IgdW5kZWZpbmVkIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgZ2V0IG5leHRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHNbdGhpcy5pbnB1dEluZGV4ICsgMV07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBwcmV2aW91cyBUb29sYHMgaW5wdXQgb3IgdW5kZWZpbmVkIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgZ2V0IHByZXZpb3VzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzW3RoaXMuaW5wdXRJbmRleCAtIDFdO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgQmxvY2sncyBKU09OIGRhdGFcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLnNhdmUoKS50aGVuKChlKSA9PiBlICYmICFWKGUuZGF0YSkgPyBlLmRhdGEgOiB7fSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdG9vbCdzIHNhbml0aXplciBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGdldCBzYW5pdGl6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sLnNhbml0aXplQ29uZmlnO1xuICB9XG4gIC8qKlxuICAgKiBpcyBibG9jayBtZXJnZWFibGVcbiAgICogV2UgcGx1Z2luIGhhdmUgbWVyZ2UgZnVuY3Rpb24gdGhlbiB3ZSBjYWxsIGl0IG1lcmdlYWJsZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBtZXJnZWFibGUoKSB7XG4gICAgcmV0dXJuIEQodGhpcy50b29sSW5zdGFuY2UubWVyZ2UpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBibG9jayBmb3IgZW1wdGluZXNzXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgY29uc3QgZSA9IGQuaXNFbXB0eSh0aGlzLnBsdWdpbnNDb250ZW50KSwgdCA9ICF0aGlzLmhhc01lZGlhO1xuICAgIHJldHVybiBlICYmIHQ7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGJsb2NrIGhhcyBhIG1lZGlhIGNvbnRlbnQgc3VjaCBhcyBpbWFnZXMsIGlmcmFtZSBhbmQgb3RoZXJcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaGFzTWVkaWEoKSB7XG4gICAgY29uc3QgZSA9IFtcbiAgICAgIFwiaW1nXCIsXG4gICAgICBcImlmcmFtZVwiLFxuICAgICAgXCJ2aWRlb1wiLFxuICAgICAgXCJhdWRpb1wiLFxuICAgICAgXCJzb3VyY2VcIixcbiAgICAgIFwiaW5wdXRcIixcbiAgICAgIFwidGV4dGFyZWFcIixcbiAgICAgIFwidHdpdHRlcndpZGdldFwiXG4gICAgXTtcbiAgICByZXR1cm4gISF0aGlzLmhvbGRlci5xdWVyeVNlbGVjdG9yKGUuam9pbihcIixcIikpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgZm9jdXNlZCBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIC0gJ3RydWUnIHRvIHNlbGVjdCwgJ2ZhbHNlJyB0byByZW1vdmUgc2VsZWN0aW9uXG4gICAqL1xuICBzZXQgZm9jdXNlZChlKSB7XG4gICAgdGhpcy5ob2xkZXIuY2xhc3NMaXN0LnRvZ2dsZShGLkNTUy5mb2N1c2VkLCBlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IEJsb2NrJ3MgZm9jdXNlZCBzdGF0ZVxuICAgKi9cbiAgZ2V0IGZvY3VzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC5jb250YWlucyhGLkNTUy5mb2N1c2VkKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdGVkIHN0YXRlXG4gICAqIFdlIGRvbid0IG5lZWQgdG8gbWFyayBCbG9jayBhcyBTZWxlY3RlZCB3aGVuIGl0IGlzIGVtcHR5XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgLSAndHJ1ZScgdG8gc2VsZWN0LCAnZmFsc2UnIHRvIHJlbW92ZSBzZWxlY3Rpb25cbiAgICovXG4gIHNldCBzZWxlY3RlZChlKSB7XG4gICAgdmFyIGksIG47XG4gICAgdGhpcy5ob2xkZXIuY2xhc3NMaXN0LnRvZ2dsZShGLkNTUy5zZWxlY3RlZCwgZSk7XG4gICAgY29uc3QgdCA9IGUgPT09ICEwICYmIG0uaXNSYW5nZUluc2lkZUNvbnRhaW5lcih0aGlzLmhvbGRlciksIG8gPSBlID09PSAhMSAmJiBtLmlzRmFrZUN1cnNvckluc2lkZUNvbnRhaW5lcih0aGlzLmhvbGRlcik7XG4gICAgKHQgfHwgbykgJiYgKChpID0gdGhpcy5lZGl0b3JFdmVudEJ1cykgPT0gbnVsbCB8fCBpLmVtaXQoY3QsIHsgc3RhdGU6IGUgfSksIHQgPyBtLmFkZEZha2VDdXJzb3IoKSA6IG0ucmVtb3ZlRmFrZUN1cnNvcih0aGlzLmhvbGRlciksIChuID0gdGhpcy5lZGl0b3JFdmVudEJ1cykgPT0gbnVsbCB8fCBuLmVtaXQoZHQsIHsgc3RhdGU6IGUgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRydWUgaWYgaXQgaXMgU2VsZWN0ZWRcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC5jb250YWlucyhGLkNTUy5zZWxlY3RlZCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBzdHJldGNoZWQgc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBzdGF0ZSAtICd0cnVlJyB0byBlbmFibGUsICdmYWxzZScgdG8gZGlzYWJsZSBzdHJldGNoZWQgc3RhdGVcbiAgICovXG4gIHNldCBzdHJldGNoZWQoZSkge1xuICAgIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC50b2dnbGUoRi5DU1Mud3JhcHBlclN0cmV0Y2hlZCwgZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBCbG9jaydzIHN0cmV0Y2hlZCBzdGF0ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBzdHJldGNoZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC5jb250YWlucyhGLkNTUy53cmFwcGVyU3RyZXRjaGVkKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlIGRyb3AgdGFyZ2V0IHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgLSAndHJ1ZScgaWYgYmxvY2sgaXMgZHJvcCB0YXJnZXQsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgc2V0IGRyb3BUYXJnZXQoZSkge1xuICAgIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC50b2dnbGUoRi5DU1MuZHJvcFRhcmdldCwgZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgUGx1Z2lucyBjb250ZW50XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdldCBwbHVnaW5zQ29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sUmVuZGVyZWRFbGVtZW50O1xuICB9XG4gIC8qKlxuICAgKiBDYWxscyBUb29sJ3MgbWV0aG9kXG4gICAqXG4gICAqIE1ldGhvZCBjaGVja3MgdG9vbCBwcm9wZXJ0eSB7TWV0aG9kTmFtZX0uIEZpcmVzIG1ldGhvZCB3aXRoIHBhc3NlcyBwYXJhbXMgSWYgaXQgaXMgaW5zdGFuY2Ugb2YgRnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgLSBtZXRob2QgdG8gY2FsbFxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIC0gbWV0aG9kIGFyZ3VtZW50XG4gICAqL1xuICBjYWxsKGUsIHQpIHtcbiAgICBpZiAoRCh0aGlzLnRvb2xJbnN0YW5jZVtlXSkpIHtcbiAgICAgIGUgPT09IFwiYXBwZW5kQ2FsbGJhY2tcIiAmJiBUKFxuICAgICAgICBcImBhcHBlbmRDYWxsYmFja2AgaG9vayBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gVXNlIGByZW5kZXJlZGAgaG9vayBpbnN0ZWFkXCIsXG4gICAgICAgIFwid2FyblwiXG4gICAgICApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy50b29sSW5zdGFuY2VbZV0uY2FsbCh0aGlzLnRvb2xJbnN0YW5jZSwgdCk7XG4gICAgICB9IGNhdGNoIChvKSB7XG4gICAgICAgIFQoYEVycm9yIGR1cmluZyAnJHtlfScgY2FsbDogJHtvLm1lc3NhZ2V9YCwgXCJlcnJvclwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgcGx1Z2lucyBtZXJnZSBtZXRob2RcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja1Rvb2xEYXRhfSBkYXRhIC0gZGF0YSB0byBtZXJnZVxuICAgKi9cbiAgYXN5bmMgbWVyZ2VXaXRoKGUpIHtcbiAgICBhd2FpdCB0aGlzLnRvb2xJbnN0YW5jZS5tZXJnZShlKTtcbiAgfVxuICAvKipcbiAgICogRXh0cmFjdHMgZGF0YSBmcm9tIEJsb2NrXG4gICAqIEdyb3VwcyBUb29sJ3Mgc2F2ZSBwcm9jZXNzaW5nIHRpbWVcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAgY29uc3QgZSA9IGF3YWl0IHRoaXMudG9vbEluc3RhbmNlLnNhdmUodGhpcy5wbHVnaW5zQ29udGVudCksIHQgPSB0aGlzLnVuYXZhaWxhYmxlVHVuZXNEYXRhO1xuICAgIFtcbiAgICAgIC4uLnRoaXMudHVuZXNJbnN0YW5jZXMuZW50cmllcygpLFxuICAgICAgLi4udGhpcy5kZWZhdWx0VHVuZXNJbnN0YW5jZXMuZW50cmllcygpXG4gICAgXS5mb3JFYWNoKChbbiwgcl0pID0+IHtcbiAgICAgIGlmIChEKHIuc2F2ZSkpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdFtuXSA9IHIuc2F2ZSgpO1xuICAgICAgICB9IGNhdGNoIChhKSB7XG4gICAgICAgICAgVChgVHVuZSAke3IuY29uc3RydWN0b3IubmFtZX0gc2F2ZSBtZXRob2QgdGhyb3dzIGFuIEVycm9yICVvYCwgXCJ3YXJuXCIsIGEpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgbyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICBsZXQgaTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGUpLnRoZW4oKG4pID0+IChpID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpLCB7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIHRvb2w6IHRoaXMubmFtZSxcbiAgICAgIGRhdGE6IG4sXG4gICAgICB0dW5lczogdCxcbiAgICAgIHRpbWU6IGkgLSBvXG4gICAgfSkpLmNhdGNoKChuKSA9PiB7XG4gICAgICBUKGBTYXZpbmcgcHJvY2VzcyBmb3IgJHt0aGlzLm5hbWV9IHRvb2wgZmFpbGVkIGR1ZSB0byB0aGUgJHtufWAsIFwibG9nXCIsIFwicmVkXCIpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBVc2VzIFRvb2wncyB2YWxpZGF0aW9uIG1ldGhvZCB0byBjaGVjayB0aGUgY29ycmVjdG5lc3Mgb2Ygb3V0cHV0IGRhdGFcbiAgICogVG9vbCdzIHZhbGlkYXRpb24gbWV0aG9kIGlzIG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgcmV0dXJucyB0cnVlfGZhbHNlIHdoZXRoZXIgZGF0YSBwYXNzZWQgdGhlIHZhbGlkYXRpb24gb3Igbm90XG4gICAqIEBwYXJhbSB7QmxvY2tUb29sRGF0YX0gZGF0YSAtIGRhdGEgdG8gdmFsaWRhdGVcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IHZhbGlkXG4gICAqL1xuICBhc3luYyB2YWxpZGF0ZShlKSB7XG4gICAgbGV0IHQgPSAhMDtcbiAgICByZXR1cm4gdGhpcy50b29sSW5zdGFuY2UudmFsaWRhdGUgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiAodCA9IGF3YWl0IHRoaXMudG9vbEluc3RhbmNlLnZhbGlkYXRlKGUpKSwgdDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBkYXRhIHRvIHJlbmRlciBpbiB0dW5lcyBtZW51LlxuICAgKiBTcGxpdHMgYmxvY2sgdHVuZXMgc2V0dGluZ3MgaW50byAyIGdyb3VwczogcG9wb3ZlciBpdGVtcyBhbmQgY3VzdG9tIGh0bWwuXG4gICAqL1xuICBnZXRUdW5lcygpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgdCA9IFtdLCBvID0gdHlwZW9mIHRoaXMudG9vbEluc3RhbmNlLnJlbmRlclNldHRpbmdzID09IFwiZnVuY3Rpb25cIiA/IHRoaXMudG9vbEluc3RhbmNlLnJlbmRlclNldHRpbmdzKCkgOiBbXSwgaSA9IFtcbiAgICAgIC4uLnRoaXMudHVuZXNJbnN0YW5jZXMudmFsdWVzKCksXG4gICAgICAuLi50aGlzLmRlZmF1bHRUdW5lc0luc3RhbmNlcy52YWx1ZXMoKVxuICAgIF0ubWFwKChuKSA9PiBuLnJlbmRlcigpKTtcbiAgICByZXR1cm4gW28sIGldLmZsYXQoKS5mb3JFYWNoKChuKSA9PiB7XG4gICAgICBkLmlzRWxlbWVudChuKSA/IGUuYXBwZW5kQ2hpbGQobikgOiBBcnJheS5pc0FycmF5KG4pID8gdC5wdXNoKC4uLm4pIDogdC5wdXNoKG4pO1xuICAgIH0pLCBbdCwgZV07XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBjdXJyZW50IGlucHV0IGluZGV4IHdpdGggc2VsZWN0aW9uIGFuY2hvciBub2RlXG4gICAqL1xuICB1cGRhdGVDdXJyZW50SW5wdXQoKSB7XG4gICAgdGhpcy5jdXJyZW50SW5wdXQgPSBkLmlzTmF0aXZlSW5wdXQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgfHwgIW0uYW5jaG9yTm9kZSA/IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgOiBtLmFuY2hvck5vZGU7XG4gIH1cbiAgLyoqXG4gICAqIEFsbG93cyB0byBzYXkgRWRpdG9yIHRoYXQgQmxvY2sgd2FzIGNoYW5nZWQuIFVzZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBFZGl0b3IncyAnb25DaGFuZ2UnIGNhbGxiYWNrXG4gICAqIENhbiBiZSB1c2VmdWwgZm9yIGJsb2NrIGNoYW5nZXMgaW52aXNpYmxlIGZvciBlZGl0b3IgY29yZS5cbiAgICovXG4gIGRpc3BhdGNoQ2hhbmdlKCkge1xuICAgIHRoaXMuZGlkTXV0YXRlZCgpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIFRvb2wgaW5zdGFuY2UgZGVzdHJveSBtZXRob2RcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy51bndhdGNoQmxvY2tNdXRhdGlvbnMoKSwgdGhpcy5yZW1vdmVJbnB1dEV2ZW50cygpLCBzdXBlci5kZXN0cm95KCksIEQodGhpcy50b29sSW5zdGFuY2UuZGVzdHJveSkgJiYgdGhpcy50b29sSW5zdGFuY2UuZGVzdHJveSgpO1xuICB9XG4gIC8qKlxuICAgKiBUb29sIGNvdWxkIHNwZWNpZnkgc2V2ZXJhbCBlbnRyaWVzIHRvIGJlIGRpc3BsYXllZCBhdCB0aGUgVG9vbGJveCAoZm9yIGV4YW1wbGUsIFwiSGVhZGluZyAxXCIsIFwiSGVhZGluZyAyXCIsIFwiSGVhZGluZyAzXCIpXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVudHJ5IHRoYXQgaXMgcmVsYXRlZCB0byB0aGUgQmxvY2sgKGRlcGVuZGVkIG9uIHRoZSBCbG9jayBkYXRhKVxuICAgKi9cbiAgYXN5bmMgZ2V0QWN0aXZlVG9vbGJveEVudHJ5KCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLnRvb2wudG9vbGJveDtcbiAgICBpZiAoZS5sZW5ndGggPT09IDEpXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudG9vbC50b29sYm94WzBdKTtcbiAgICBjb25zdCB0ID0gYXdhaXQgdGhpcy5kYXRhO1xuICAgIHJldHVybiBlLmZpbmQoKGkpID0+IE9iamVjdC5lbnRyaWVzKGkuZGF0YSkuc29tZSgoW24sIHJdKSA9PiB0W25dICYmICR0KHRbbl0sIHIpKSk7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2UgZGVmYXVsdCBCbG9jayB3cmFwcGVycyBhbmQgcHV0IFRvb2xgcyBjb250ZW50IHRoZXJlXG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRGl2RWxlbWVudH1cbiAgICovXG4gIGNvbXBvc2UoKSB7XG4gICAgY29uc3QgZSA9IGQubWFrZShcImRpdlwiLCBGLkNTUy53cmFwcGVyKSwgdCA9IGQubWFrZShcImRpdlwiLCBGLkNTUy5jb250ZW50KSwgbyA9IHRoaXMudG9vbEluc3RhbmNlLnJlbmRlcigpO1xuICAgIHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCA9IG8sIHQuYXBwZW5kQ2hpbGQodGhpcy50b29sUmVuZGVyZWRFbGVtZW50KTtcbiAgICBsZXQgaSA9IHQ7XG4gICAgcmV0dXJuIFsuLi50aGlzLnR1bmVzSW5zdGFuY2VzLnZhbHVlcygpLCAuLi50aGlzLmRlZmF1bHRUdW5lc0luc3RhbmNlcy52YWx1ZXMoKV0uZm9yRWFjaCgobikgPT4ge1xuICAgICAgaWYgKEQobi53cmFwKSlcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpID0gbi53cmFwKGkpO1xuICAgICAgICB9IGNhdGNoIChyKSB7XG4gICAgICAgICAgVChgVHVuZSAke24uY29uc3RydWN0b3IubmFtZX0gd3JhcCBtZXRob2QgdGhyb3dzIGFuIEVycm9yICVvYCwgXCJ3YXJuXCIsIHIpO1xuICAgICAgICB9XG4gICAgfSksIGUuYXBwZW5kQ2hpbGQoaSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlIEJsb2NrIFR1bmVzXG4gICAqXG4gICAqIEBwYXJhbSB0dW5lc0RhdGEgLSBjdXJyZW50IEJsb2NrIHR1bmVzIGRhdGFcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbXBvc2VUdW5lcyhlKSB7XG4gICAgQXJyYXkuZnJvbSh0aGlzLnR1bmVzLnZhbHVlcygpKS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAodC5pc0ludGVybmFsID8gdGhpcy5kZWZhdWx0VHVuZXNJbnN0YW5jZXMgOiB0aGlzLnR1bmVzSW5zdGFuY2VzKS5zZXQodC5uYW1lLCB0LmNyZWF0ZShlW3QubmFtZV0sIHRoaXMuYmxvY2tBUEkpKTtcbiAgICB9KSwgT2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoW3QsIG9dKSA9PiB7XG4gICAgICB0aGlzLnR1bmVzSW5zdGFuY2VzLmhhcyh0KSB8fCAodGhpcy51bmF2YWlsYWJsZVR1bmVzRGF0YVt0XSA9IG8pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGZvY3VzIGV2ZW50IGxpc3RlbmVycyB0byBhbGwgaW5wdXRzIGFuZCBjb250ZW50ZWRpdGFibGVcbiAgICovXG4gIGFkZElucHV0RXZlbnRzKCkge1xuICAgIHRoaXMuaW5wdXRzLmZvckVhY2goKGUpID0+IHtcbiAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMuaGFuZGxlRm9jdXMpLCBkLmlzTmF0aXZlSW5wdXQoZSkgJiYgZS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy5kaWRNdXRhdGVkKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogcmVtb3ZlcyBmb2N1cyBldmVudCBsaXN0ZW5lcnMgZnJvbSBhbGwgaW5wdXRzIGFuZCBjb250ZW50ZWRpdGFibGVcbiAgICovXG4gIHJlbW92ZUlucHV0RXZlbnRzKCkge1xuICAgIHRoaXMuaW5wdXRzLmZvckVhY2goKGUpID0+IHtcbiAgICAgIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMuaGFuZGxlRm9jdXMpLCBkLmlzTmF0aXZlSW5wdXQoZSkgJiYgZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy5kaWRNdXRhdGVkKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogTGlzdGVuIGNvbW1vbiBlZGl0b3IgRG9tIENoYW5nZWQgZXZlbnQgYW5kIGRldGVjdCBtdXRhdGlvbnMgcmVsYXRlZCB0byB0aGUgIEJsb2NrXG4gICAqL1xuICB3YXRjaEJsb2NrTXV0YXRpb25zKCkge1xuICAgIHZhciBlO1xuICAgIHRoaXMucmVkYWN0b3JEb21DaGFuZ2VkQ2FsbGJhY2sgPSAodCkgPT4ge1xuICAgICAgY29uc3QgeyBtdXRhdGlvbnM6IG8gfSA9IHQ7XG4gICAgICBvLnNvbWUoKG4pID0+IFZ0KG4sIHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCkpICYmIHRoaXMuZGlkTXV0YXRlZChvKTtcbiAgICB9LCAoZSA9IHRoaXMuZWRpdG9yRXZlbnRCdXMpID09IG51bGwgfHwgZS5vbihNZSwgdGhpcy5yZWRhY3RvckRvbUNoYW5nZWRDYWxsYmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSByZWRhY3RvciBkb20gY2hhbmdlIGV2ZW50IGxpc3RlbmVyXG4gICAqL1xuICB1bndhdGNoQmxvY2tNdXRhdGlvbnMoKSB7XG4gICAgdmFyIGU7XG4gICAgKGUgPSB0aGlzLmVkaXRvckV2ZW50QnVzKSA9PSBudWxsIHx8IGUub2ZmKE1lLCB0aGlzLnJlZGFjdG9yRG9tQ2hhbmdlZENhbGxiYWNrKTtcbiAgfVxuICAvKipcbiAgICogU29tZXRpbWVzIFRvb2wgY2FuIHJlcGxhY2Ugb3duIG1haW4gZWxlbWVudCwgZm9yIGV4YW1wbGUgSDIgLT4gSDQgb3IgVUwgLT4gT0xcbiAgICogV2UgbmVlZCB0byBkZXRlY3Qgc3VjaCBjaGFuZ2VzIGFuZCB1cGRhdGUgYSBsaW5rIHRvIHRvb2xzIG1haW4gZWxlbWVudCB3aXRoIHRoZSBuZXcgb25lXG4gICAqXG4gICAqIEBwYXJhbSBtdXRhdGlvbnMgLSByZWNvcmRzIG9mIGJsb2NrIGNvbnRlbnQgbXV0YXRpb25zXG4gICAqL1xuICBkZXRlY3RUb29sUm9vdENoYW5nZShlKSB7XG4gICAgZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBpZiAoQXJyYXkuZnJvbSh0LnJlbW92ZWROb2RlcykuaW5jbHVkZXModGhpcy50b29sUmVuZGVyZWRFbGVtZW50KSkge1xuICAgICAgICBjb25zdCBpID0gdC5hZGRlZE5vZGVzW3QuYWRkZWROb2Rlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgdGhpcy50b29sUmVuZGVyZWRFbGVtZW50ID0gaTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIGlucHV0cyBjYWNoZWQgdmFsdWVcbiAgICovXG4gIGRyb3BJbnB1dHNDYWNoZSgpIHtcbiAgICB0aGlzLmNhY2hlZElucHV0cyA9IFtdO1xuICB9XG59XG5jbGFzcyBadCBleHRlbmRzIFMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLmluc2VydCA9IChlID0gdGhpcy5jb25maWcuZGVmYXVsdEJsb2NrLCB0ID0ge30sIG8gPSB7fSwgaSwgbiwgciwgYSkgPT4ge1xuICAgICAgY29uc3QgbCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5pbnNlcnQoe1xuICAgICAgICBpZDogYSxcbiAgICAgICAgdG9vbDogZSxcbiAgICAgICAgZGF0YTogdCxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIG5lZWRUb0ZvY3VzOiBuLFxuICAgICAgICByZXBsYWNlOiByXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgaGUobCk7XG4gICAgfSwgdGhpcy5jb21wb3NlQmxvY2tEYXRhID0gYXN5bmMgKGUpID0+IHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5Ub29scy5ibG9ja1Rvb2xzLmdldChlKTtcbiAgICAgIHJldHVybiBuZXcgRih7XG4gICAgICAgIHRvb2w6IHQsXG4gICAgICAgIGFwaTogdGhpcy5FZGl0b3IuQVBJLFxuICAgICAgICByZWFkT25seTogITAsXG4gICAgICAgIGRhdGE6IHt9LFxuICAgICAgICB0dW5lc0RhdGE6IHt9XG4gICAgICB9KS5kYXRhO1xuICAgIH0sIHRoaXMudXBkYXRlID0gKGUsIHQpID0+IHtcbiAgICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBvIH0gPSB0aGlzLkVkaXRvciwgaSA9IG8uZ2V0QmxvY2tCeUlkKGUpO1xuICAgICAgaWYgKCFpKSB7XG4gICAgICAgIFQoXCJibG9ja3MudXBkYXRlKCk6IEJsb2NrIHdpdGggcGFzc2VkIGlkIHdhcyBub3QgZm91bmRcIiwgXCJ3YXJuXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBuID0gby5nZXRCbG9ja0luZGV4KGkpO1xuICAgICAgby5pbnNlcnQoe1xuICAgICAgICBpZDogaS5pZCxcbiAgICAgICAgdG9vbDogaS5uYW1lLFxuICAgICAgICBkYXRhOiB0LFxuICAgICAgICBpbmRleDogbixcbiAgICAgICAgcmVwbGFjZTogITAsXG4gICAgICAgIHR1bmVzOiBpLnR1bmVzXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2tzfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsZWFyOiAoKSA9PiB0aGlzLmNsZWFyKCksXG4gICAgICByZW5kZXI6IChlKSA9PiB0aGlzLnJlbmRlcihlKSxcbiAgICAgIHJlbmRlckZyb21IVE1MOiAoZSkgPT4gdGhpcy5yZW5kZXJGcm9tSFRNTChlKSxcbiAgICAgIGRlbGV0ZTogKGUpID0+IHRoaXMuZGVsZXRlKGUpLFxuICAgICAgc3dhcDogKGUsIHQpID0+IHRoaXMuc3dhcChlLCB0KSxcbiAgICAgIG1vdmU6IChlLCB0KSA9PiB0aGlzLm1vdmUoZSwgdCksXG4gICAgICBnZXRCbG9ja0J5SW5kZXg6IChlKSA9PiB0aGlzLmdldEJsb2NrQnlJbmRleChlKSxcbiAgICAgIGdldEJ5SWQ6IChlKSA9PiB0aGlzLmdldEJ5SWQoZSksXG4gICAgICBnZXRDdXJyZW50QmxvY2tJbmRleDogKCkgPT4gdGhpcy5nZXRDdXJyZW50QmxvY2tJbmRleCgpLFxuICAgICAgZ2V0QmxvY2tJbmRleDogKGUpID0+IHRoaXMuZ2V0QmxvY2tJbmRleChlKSxcbiAgICAgIGdldEJsb2Nrc0NvdW50OiAoKSA9PiB0aGlzLmdldEJsb2Nrc0NvdW50KCksXG4gICAgICBzdHJldGNoQmxvY2s6IChlLCB0ID0gITApID0+IHRoaXMuc3RyZXRjaEJsb2NrKGUsIHQpLFxuICAgICAgaW5zZXJ0TmV3QmxvY2s6ICgpID0+IHRoaXMuaW5zZXJ0TmV3QmxvY2soKSxcbiAgICAgIGluc2VydDogdGhpcy5pbnNlcnQsXG4gICAgICB1cGRhdGU6IHRoaXMudXBkYXRlLFxuICAgICAgY29tcG9zZUJsb2NrRGF0YTogdGhpcy5jb21wb3NlQmxvY2tEYXRhXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBCbG9ja3MgY291bnRcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldEJsb2Nrc0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuYmxvY2tzLmxlbmd0aDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IGJsb2NrIGluZGV4XG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXRDdXJyZW50QmxvY2tJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBCbG9jayBieSBpZDtcbiAgICpcbiAgICogQHBhcmFtIGlkIC0gYmxvY2sgaWRcbiAgICovXG4gIGdldEJsb2NrSW5kZXgoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUlkKGUpO1xuICAgIGlmICghdCkge1xuICAgICAgSyhcIlRoZXJlIGlzIG5vIGJsb2NrIHdpdGggaWQgYFwiICsgZSArIFwiYFwiLCBcIndhcm5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tJbmRleCh0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBCbG9ja0FQSSBvYmplY3QgYnkgQmxvY2sgaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gaW5kZXggdG8gZ2V0XG4gICAqL1xuICBnZXRCbG9ja0J5SW5kZXgoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUluZGV4KGUpO1xuICAgIGlmICh0ID09PSB2b2lkIDApIHtcbiAgICAgIEsoXCJUaGVyZSBpcyBubyBibG9jayBhdCBpbmRleCBgXCIgKyBlICsgXCJgXCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBoZSh0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBCbG9ja0FQSSBvYmplY3QgYnkgQmxvY2sgaWRcbiAgICpcbiAgICogQHBhcmFtIGlkIC0gaWQgb2YgYmxvY2sgdG8gZ2V0XG4gICAqL1xuICBnZXRCeUlkKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlJZChlKTtcbiAgICByZXR1cm4gdCA9PT0gdm9pZCAwID8gKEsoXCJUaGVyZSBpcyBubyBibG9jayB3aXRoIGlkIGBcIiArIGUgKyBcImBcIiwgXCJ3YXJuXCIpLCBudWxsKSA6IG5ldyBoZSh0KTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBCbG9jayBNYW5hZ2VyIG1ldGhvZCB0aGF0IHN3YXAgQmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggLSBwb3NpdGlvbiBvZiBmaXJzdCBCbG9ja1xuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIHBvc2l0aW9uIG9mIHNlY29uZCBCbG9ja1xuICAgKiBAZGVwcmVjYXRlZCBcdTIwMTQgdXNlICdtb3ZlJyBpbnN0ZWFkXG4gICAqL1xuICBzd2FwKGUsIHQpIHtcbiAgICBUKFxuICAgICAgXCJgYmxvY2tzLnN3YXAoKWAgbWV0aG9kIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBVc2UgYGJsb2NrLm1vdmUoKWAgbWV0aG9kIGluc3RlYWRcIixcbiAgICAgIFwiaW5mb1wiXG4gICAgKSwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnN3YXAoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgYmxvY2sgZnJvbSBvbmUgaW5kZXggdG8gYW5vdGhlclxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIGluZGV4IHRvIG1vdmUgdG9cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCAtIGluZGV4IHRvIG1vdmUgZnJvbVxuICAgKi9cbiAgbW92ZShlLCB0KSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLm1vdmUoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJsb2NrSW5kZXggLSBpbmRleCBvZiBCbG9jayB0byBkZWxldGVcbiAgICovXG4gIGRlbGV0ZShlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5yZW1vdmVCbG9jayhlKTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICBLKHQsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrcy5sZW5ndGggPT09IDAgJiYgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydCgpLCB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrICYmIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jaywgdGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkVORCksIHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgRWRpdG9yJ3MgYXJlYVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyKCEwKSwgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBGaWxscyBFZGl0b3Igd2l0aCBCbG9ja3MgZGF0YVxuICAgKlxuICAgKiBAcGFyYW0ge091dHB1dERhdGF9IGRhdGEgXHUyMDE0IFNhdmVkIEVkaXRvciBkYXRhXG4gICAqL1xuICByZW5kZXIoZSkge1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY2xlYXIoKSwgdGhpcy5FZGl0b3IuUmVuZGVyZXIucmVuZGVyKGUuYmxvY2tzKTtcbiAgfVxuICAvKipcbiAgICogUmVuZGVyIHBhc3NlZCBIVE1MIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSAtIEhUTUwgc3RyaW5nIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIHJlbmRlckZyb21IVE1MKGUpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyKCksIHRoaXMuRWRpdG9yLlBhc3RlLnByb2Nlc3NUZXh0KGUsICEwKTtcbiAgfVxuICAvKipcbiAgICogU3RyZXRjaCBCbG9jaydzIGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gaW5kZXggb2YgQmxvY2sgdG8gc3RyZXRjaFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXR1cyAtIHRydWUgdG8gZW5hYmxlLCBmYWxzZSB0byBkaXNhYmxlXG4gICAqIEBkZXByZWNhdGVkIFVzZSBCbG9ja0FQSSBpbnRlcmZhY2UgdG8gc3RyZXRjaCBCbG9ja3NcbiAgICovXG4gIHN0cmV0Y2hCbG9jayhlLCB0ID0gITApIHtcbiAgICBJZShcbiAgICAgICEwLFxuICAgICAgXCJibG9ja3Muc3RyZXRjaEJsb2NrKClcIixcbiAgICAgIFwiQmxvY2tBUElcIlxuICAgICk7XG4gICAgY29uc3QgbyA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SW5kZXgoZSk7XG4gICAgbyAmJiAoby5zdHJldGNoZWQgPSB0KTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBCbG9ja1xuICAgKiBBZnRlciBzZXQgY2FyZXQgdG8gdGhpcyBCbG9ja1xuICAgKlxuICAgKiBAdG9kbyByZW1vdmUgaW4gMy4wLjBcbiAgICogQGRlcHJlY2F0ZWQgd2l0aCBpbnNlcnQoKSBtZXRob2RcbiAgICovXG4gIGluc2VydE5ld0Jsb2NrKCkge1xuICAgIFQoXCJNZXRob2QgYmxvY2tzLmluc2VydE5ld0Jsb2NrKCkgaXMgZGVwcmVjYXRlZCBhbmQgaXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFVzZSBibG9ja3MuaW5zZXJ0KCkgaW5zdGVhZC5cIiwgXCJ3YXJuXCIpLCB0aGlzLmluc2VydCgpO1xuICB9XG59XG5jbGFzcyBHdCBleHRlbmRzIFMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnNldFRvRmlyc3RCbG9jayA9IChlID0gdGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkRFRkFVTFQsIHQgPSAwKSA9PiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZmlyc3RCbG9jayA/ICh0aGlzLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5maXJzdEJsb2NrLCBlLCB0KSwgITApIDogITEsIHRoaXMuc2V0VG9MYXN0QmxvY2sgPSAoZSA9IHRoaXMuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5ERUZBVUxULCB0ID0gMCkgPT4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmxhc3RCbG9jayA/ICh0aGlzLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5sYXN0QmxvY2ssIGUsIHQpLCAhMCkgOiAhMSwgdGhpcy5zZXRUb1ByZXZpb3VzQmxvY2sgPSAoZSA9IHRoaXMuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5ERUZBVUxULCB0ID0gMCkgPT4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnByZXZpb3VzQmxvY2sgPyAodGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIucHJldmlvdXNCbG9jaywgZSwgdCksICEwKSA6ICExLCB0aGlzLnNldFRvTmV4dEJsb2NrID0gKGUgPSB0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuREVGQVVMVCwgdCA9IDApID0+IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5uZXh0QmxvY2sgPyAodGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIubmV4dEJsb2NrLCBlLCB0KSwgITApIDogITEsIHRoaXMuc2V0VG9CbG9jayA9IChlLCB0ID0gdGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkRFRkFVTFQsIG8gPSAwKSA9PiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuYmxvY2tzW2VdID8gKHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrc1tlXSwgdCwgbyksICEwKSA6ICExLCB0aGlzLmZvY3VzID0gKGUgPSAhMSkgPT4gZSA/IHRoaXMuc2V0VG9MYXN0QmxvY2sodGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkVORCkgOiB0aGlzLnNldFRvRmlyc3RCbG9jayh0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuU1RBUlQpO1xuICB9XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7Q2FyZXR9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2V0VG9GaXJzdEJsb2NrOiB0aGlzLnNldFRvRmlyc3RCbG9jayxcbiAgICAgIHNldFRvTGFzdEJsb2NrOiB0aGlzLnNldFRvTGFzdEJsb2NrLFxuICAgICAgc2V0VG9QcmV2aW91c0Jsb2NrOiB0aGlzLnNldFRvUHJldmlvdXNCbG9jayxcbiAgICAgIHNldFRvTmV4dEJsb2NrOiB0aGlzLnNldFRvTmV4dEJsb2NrLFxuICAgICAgc2V0VG9CbG9jazogdGhpcy5zZXRUb0Jsb2NrLFxuICAgICAgZm9jdXM6IHRoaXMuZm9jdXNcbiAgICB9O1xuICB9XG59XG5jbGFzcyBxdCBleHRlbmRzIFMge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge0V2ZW50c31cbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlbWl0OiAoZSwgdCkgPT4gdGhpcy5lbWl0KGUsIHQpLFxuICAgICAgb2ZmOiAoZSwgdCkgPT4gdGhpcy5vZmYoZSwgdCksXG4gICAgICBvbjogKGUsIHQpID0+IHRoaXMub24oZSwgdClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgb24gRXZlbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBldmVudCBuYW1lIHRvIHN1YnNjcmliZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGV2ZW50IGhhbmRsZXJcbiAgICovXG4gIG9uKGUsIHQpIHtcbiAgICB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub24oZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEVtaXQgZXZlbnQgd2l0aCBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBldmVudCB0byBlbWl0XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gZXZlbnQncyBkYXRhXG4gICAqL1xuICBlbWl0KGUsIHQpIHtcbiAgICB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdChlLCB0KTtcbiAgfVxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSBFdmVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gZXZlbnQgdG8gdW5zdWJzY3JpYmVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBldmVudCBoYW5kbGVyXG4gICAqL1xuICBvZmYoZSwgdCkge1xuICAgIHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5vZmYoZSwgdCk7XG4gIH1cbn1cbmNsYXNzIERlIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBSZXR1cm4gbmFtZXNwYWNlIHNlY3Rpb24gZm9yIHRvb2wgb3IgYmxvY2sgdHVuZVxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCAtIHRvb2wgb2JqZWN0XG4gICAqL1xuICBzdGF0aWMgZ2V0TmFtZXNwYWNlKGUpIHtcbiAgICByZXR1cm4gZS5pc1R1bmUoKSA/IGBibG9ja1R1bmVzLiR7ZS5uYW1lfWAgOiBgdG9vbHMuJHtlLm5hbWV9YDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIEkxOG4gQVBJIG1ldGhvZHMgd2l0aCBnbG9iYWwgZGljdGlvbmFyeSBhY2Nlc3NcbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0OiAoKSA9PiB7XG4gICAgICAgIEsoXCJJMThuLnQoKSBtZXRob2QgY2FuIGJlIGFjY2Vzc2VkIG9ubHkgZnJvbSBUb29sc1wiLCBcIndhcm5cIik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIEkxOG4gQVBJIG1ldGhvZHMgd2l0aCB0b29sIG5hbWVzcGFjZWQgZGljdGlvbmFyeVxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCAtIFRvb2wgb2JqZWN0XG4gICAqL1xuICBnZXRNZXRob2RzRm9yVG9vbChlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICB0aGlzLm1ldGhvZHMsXG4gICAgICB7XG4gICAgICAgIHQ6ICh0KSA9PiAkLnQoRGUuZ2V0TmFtZXNwYWNlKGUpLCB0KVxuICAgICAgfVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEp0IGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBFZGl0b3IuanMgQ29yZSBBUEkgbW9kdWxlc1xuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJsb2NrczogdGhpcy5FZGl0b3IuQmxvY2tzQVBJLm1ldGhvZHMsXG4gICAgICBjYXJldDogdGhpcy5FZGl0b3IuQ2FyZXRBUEkubWV0aG9kcyxcbiAgICAgIGV2ZW50czogdGhpcy5FZGl0b3IuRXZlbnRzQVBJLm1ldGhvZHMsXG4gICAgICBsaXN0ZW5lcnM6IHRoaXMuRWRpdG9yLkxpc3RlbmVyc0FQSS5tZXRob2RzLFxuICAgICAgbm90aWZpZXI6IHRoaXMuRWRpdG9yLk5vdGlmaWVyQVBJLm1ldGhvZHMsXG4gICAgICBzYW5pdGl6ZXI6IHRoaXMuRWRpdG9yLlNhbml0aXplckFQSS5tZXRob2RzLFxuICAgICAgc2F2ZXI6IHRoaXMuRWRpdG9yLlNhdmVyQVBJLm1ldGhvZHMsXG4gICAgICBzZWxlY3Rpb246IHRoaXMuRWRpdG9yLlNlbGVjdGlvbkFQSS5tZXRob2RzLFxuICAgICAgc3R5bGVzOiB0aGlzLkVkaXRvci5TdHlsZXNBUEkuY2xhc3NlcyxcbiAgICAgIHRvb2xiYXI6IHRoaXMuRWRpdG9yLlRvb2xiYXJBUEkubWV0aG9kcyxcbiAgICAgIGlubGluZVRvb2xiYXI6IHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXJBUEkubWV0aG9kcyxcbiAgICAgIHRvb2x0aXA6IHRoaXMuRWRpdG9yLlRvb2x0aXBBUEkubWV0aG9kcyxcbiAgICAgIGkxOG46IHRoaXMuRWRpdG9yLkkxOG5BUEkubWV0aG9kcyxcbiAgICAgIHJlYWRPbmx5OiB0aGlzLkVkaXRvci5SZWFkT25seUFQSS5tZXRob2RzLFxuICAgICAgdWk6IHRoaXMuRWRpdG9yLlVpQVBJLm1ldGhvZHNcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEVkaXRvci5qcyBDb3JlIEFQSSBtZXRob2RzIGZvciBwYXNzZWQgdG9vbFxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCAtIHRvb2wgb2JqZWN0XG4gICAqL1xuICBnZXRNZXRob2RzRm9yVG9vbChlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICB0aGlzLm1ldGhvZHMsXG4gICAgICB7XG4gICAgICAgIGkxOG46IHRoaXMuRWRpdG9yLkkxOG5BUEkuZ2V0TWV0aG9kc0ZvclRvb2woZSlcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5jbGFzcyBRdCBleHRlbmRzIFMge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge0lubGluZVRvb2xiYXJ9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xvc2U6ICgpID0+IHRoaXMuY2xvc2UoKSxcbiAgICAgIG9wZW46ICgpID0+IHRoaXMub3BlbigpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT3BlbiBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgb3BlbigpIHtcbiAgICB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLnRyeVRvU2hvdygpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpO1xuICB9XG59XG5jbGFzcyBlbyBleHRlbmRzIFMge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge0xpc3RlbmVyc31cbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbjogKGUsIHQsIG8sIGkpID0+IHRoaXMub24oZSwgdCwgbywgaSksXG4gICAgICBvZmY6IChlLCB0LCBvLCBpKSA9PiB0aGlzLm9mZihlLCB0LCBvLCBpKSxcbiAgICAgIG9mZkJ5SWQ6IChlKSA9PiB0aGlzLm9mZkJ5SWQoZSlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBZHMgYSBET00gZXZlbnQgbGlzdGVuZXIuIFJldHVybiBpdCdzIGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBzZXQgaGFuZGxlciB0b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0geygpID0+IHZvaWR9IGhhbmRsZXIgLSBldmVudCBoYW5kbGVyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlQ2FwdHVyZSAtIGNhcHR1cmUgZXZlbnQgb3Igbm90XG4gICAqL1xuICBvbihlLCB0LCBvLCBpKSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLm9uKGUsIHQsIG8sIGkpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIERPTSBsaXN0ZW5lciBmcm9tIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byByZW1vdmUgaGFuZGxlciBmcm9tXG4gICAqIEBwYXJhbSBldmVudFR5cGUgLSBldmVudCB0eXBlXG4gICAqIEBwYXJhbSBoYW5kbGVyIC0gZXZlbnQgaGFuZGxlclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUNhcHR1cmUgLSBjYXB0dXJlIGV2ZW50IG9yIG5vdFxuICAgKi9cbiAgb2ZmKGUsIHQsIG8sIGkpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5vZmYoZSwgdCwgbywgaSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgRE9NIGxpc3RlbmVyIGJ5IHRoZSBsaXN0ZW5lciBpZFxuICAgKlxuICAgKiBAcGFyYW0gaWQgLSBpZCBvZiB0aGUgbGlzdGVuZXIgdG8gcmVtb3ZlXG4gICAqL1xuICBvZmZCeUlkKGUpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5vZmZCeUlkKGUpO1xuICB9XG59XG52YXIgTGUgPSB7fSwgdG8gPSB7XG4gIGdldCBleHBvcnRzKCkge1xuICAgIHJldHVybiBMZTtcbiAgfSxcbiAgc2V0IGV4cG9ydHMocykge1xuICAgIExlID0gcztcbiAgfVxufTtcbihmdW5jdGlvbihzLCBlKSB7XG4gIChmdW5jdGlvbih0LCBvKSB7XG4gICAgcy5leHBvcnRzID0gbygpO1xuICB9KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgbyA9IHt9O1xuICAgICAgZnVuY3Rpb24gaShuKSB7XG4gICAgICAgIGlmIChvW25dKVxuICAgICAgICAgIHJldHVybiBvW25dLmV4cG9ydHM7XG4gICAgICAgIHZhciByID0gb1tuXSA9IHsgaTogbiwgbDogITEsIGV4cG9ydHM6IHt9IH07XG4gICAgICAgIHJldHVybiB0W25dLmNhbGwoci5leHBvcnRzLCByLCByLmV4cG9ydHMsIGkpLCByLmwgPSAhMCwgci5leHBvcnRzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGkubSA9IHQsIGkuYyA9IG8sIGkuZCA9IGZ1bmN0aW9uKG4sIHIsIGEpIHtcbiAgICAgICAgaS5vKG4sIHIpIHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCByLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGEgfSk7XG4gICAgICB9LCBpLnIgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHR5cGVvZiBTeW1ib2wgPCBcInVcIiAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KTtcbiAgICAgIH0sIGkudCA9IGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgaWYgKDEgJiByICYmIChuID0gaShuKSksIDggJiByIHx8IDQgJiByICYmIHR5cGVvZiBuID09IFwib2JqZWN0XCIgJiYgbiAmJiBuLl9fZXNNb2R1bGUpXG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIHZhciBhID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGlmIChpLnIoYSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiAhMCwgdmFsdWU6IG4gfSksIDIgJiByICYmIHR5cGVvZiBuICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgZm9yICh2YXIgbCBpbiBuKVxuICAgICAgICAgICAgaS5kKGEsIGwsIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5bY107XG4gICAgICAgICAgICB9LmJpbmQobnVsbCwgbCkpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0sIGkubiA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdmFyIHIgPSBuICYmIG4uX19lc01vZHVsZSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBuLmRlZmF1bHQ7XG4gICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGkuZChyLCBcImFcIiwgciksIHI7XG4gICAgICB9LCBpLm8gPSBmdW5jdGlvbihuLCByKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobiwgcik7XG4gICAgICB9LCBpLnAgPSBcIi9cIiwgaShpLnMgPSAwKTtcbiAgICB9KFtmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICBpKDEpLCAvKiFcbiAgICAgICAqIENvZGV4IEphdmFTY3JpcHQgTm90aWZpY2F0aW9uIG1vZHVsZVxuICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2NvZGV4LXRlYW0vanMtbm90aWZpZXJcbiAgICAgICAqL1xuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBuID0gaSg2KSwgciA9IFwiY2R4LW5vdGlmeS0tYm91bmNlLWluXCIsIGEgPSBudWxsO1xuICAgICAgICByZXR1cm4geyBzaG93OiBmdW5jdGlvbihsKSB7XG4gICAgICAgICAgaWYgKGwubWVzc2FnZSkge1xuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoYSlcbiAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICAgIGEgPSBuLmdldFdyYXBwZXIoKSwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICB2YXIgYyA9IG51bGwsIHUgPSBsLnRpbWUgfHwgOGUzO1xuICAgICAgICAgICAgc3dpdGNoIChsLnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcImNvbmZpcm1cIjpcbiAgICAgICAgICAgICAgICBjID0gbi5jb25maXJtKGwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwicHJvbXB0XCI6XG4gICAgICAgICAgICAgICAgYyA9IG4ucHJvbXB0KGwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGMgPSBuLmFsZXJ0KGwpLCB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGMucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSwgdSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhLmFwcGVuZENoaWxkKGMpLCBjLmNsYXNzTGlzdC5hZGQocik7XG4gICAgICAgICAgfVxuICAgICAgICB9IH07XG4gICAgICB9KCk7XG4gICAgfSwgZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgdmFyIG4gPSBpKDIpO1xuICAgICAgdHlwZW9mIG4gPT0gXCJzdHJpbmdcIiAmJiAobiA9IFtbdC5pLCBuLCBcIlwiXV0pO1xuICAgICAgdmFyIHIgPSB7IGhtcjogITAsIHRyYW5zZm9ybTogdm9pZCAwLCBpbnNlcnRJbnRvOiB2b2lkIDAgfTtcbiAgICAgIGkoNCkobiwgciksIG4ubG9jYWxzICYmICh0LmV4cG9ydHMgPSBuLmxvY2Fscyk7XG4gICAgfSwgZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgKHQuZXhwb3J0cyA9IGkoMykoITEpKS5wdXNoKFt0LmksIGAuY2R4LW5vdGlmeS0tZXJyb3J7YmFja2dyb3VuZDojZmZmYmZiIWltcG9ydGFudH0uY2R4LW5vdGlmeS0tZXJyb3I6OmJlZm9yZXtiYWNrZ3JvdW5kOiNmYjVkNWQhaW1wb3J0YW50fS5jZHgtbm90aWZ5X19pbnB1dHttYXgtd2lkdGg6MTMwcHg7cGFkZGluZzo1cHggMTBweDtiYWNrZ3JvdW5kOiNmN2Y3Zjc7Ym9yZGVyOjA7Ym9yZGVyLXJhZGl1czozcHg7Zm9udC1zaXplOjEzcHg7Y29sb3I6IzY1NmI3YztvdXRsaW5lOjB9LmNkeC1ub3RpZnlfX2lucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNjU2YjdjfS5jZHgtbm90aWZ5X19pbnB1dDo6cGxhY2Vob2xkZXJ7Y29sb3I6IzY1NmI3Y30uY2R4LW5vdGlmeV9faW5wdXQ6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMTAxLDEwNywxMjQsLjMpfS5jZHgtbm90aWZ5X19pbnB1dDpmb2N1czo6cGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgxMDEsMTA3LDEyNCwuMyl9LmNkeC1ub3RpZnlfX2J1dHRvbntib3JkZXI6bm9uZTtib3JkZXItcmFkaXVzOjNweDtmb250LXNpemU6MTNweDtwYWRkaW5nOjVweCAxMHB4O2N1cnNvcjpwb2ludGVyfS5jZHgtbm90aWZ5X19idXR0b246bGFzdC1jaGlsZHttYXJnaW4tbGVmdDoxMHB4fS5jZHgtbm90aWZ5X19idXR0b24tLWNhbmNlbHtiYWNrZ3JvdW5kOiNmMmY1Zjc7Ym94LXNoYWRvdzowIDJweCAxcHggMCByZ2JhKDE2LDE5LDI5LDApO2NvbG9yOiM2NTZiN2N9LmNkeC1ub3RpZnlfX2J1dHRvbi0tY2FuY2VsOmhvdmVye2JhY2tncm91bmQ6I2VlZX0uY2R4LW5vdGlmeV9fYnV0dG9uLS1jb25maXJte2JhY2tncm91bmQ6IzM0Yzk5Mjtib3gtc2hhZG93OjAgMXB4IDFweCAwIHJnYmEoMTgsNDksMzUsLjA1KTtjb2xvcjojZmZmfS5jZHgtbm90aWZ5X19idXR0b24tLWNvbmZpcm06aG92ZXJ7YmFja2dyb3VuZDojMzNiMDgyfS5jZHgtbm90aWZ5X19idG5zLXdyYXBwZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZmxvdzpyb3cgbm93cmFwO2ZsZXgtZmxvdzpyb3cgbm93cmFwO21hcmdpbi10b3A6NXB4fS5jZHgtbm90aWZ5X19jcm9zc3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6NXB4O3JpZ2h0OjVweDt3aWR0aDoxMHB4O2hlaWdodDoxMHB4O3BhZGRpbmc6NXB4O29wYWNpdHk6LjU0O2N1cnNvcjpwb2ludGVyfS5jZHgtbm90aWZ5X19jcm9zczo6YWZ0ZXIsLmNkeC1ub3RpZnlfX2Nyb3NzOjpiZWZvcmV7Y29udGVudDonJztwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjlweDt0b3A6NXB4O2hlaWdodDoxMnB4O3dpZHRoOjJweDtiYWNrZ3JvdW5kOiM1NzVkNjd9LmNkeC1ub3RpZnlfX2Nyb3NzOjpiZWZvcmV7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfS5jZHgtbm90aWZ5X19jcm9zczo6YWZ0ZXJ7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9LmNkeC1ub3RpZnlfX2Nyb3NzOmhvdmVye29wYWNpdHk6MX0uY2R4LW5vdGlmaWVze3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6Mjtib3R0b206MjBweDtsZWZ0OjIwcHg7Zm9udC1mYW1pbHk6LWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsXCJTZWdvZSBVSVwiLFJvYm90byxPeHlnZW4sVWJ1bnR1LENhbnRhcmVsbCxcIkZpcmEgU2Fuc1wiLFwiRHJvaWQgU2Fuc1wiLFwiSGVsdmV0aWNhIE5ldWVcIixzYW5zLXNlcmlmfS5jZHgtbm90aWZ5e3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjIyMHB4O21hcmdpbi10b3A6MTVweDtwYWRkaW5nOjEzcHggMTZweDtiYWNrZ3JvdW5kOiNmZmY7Ym94LXNoYWRvdzowIDExcHggMTdweCAwIHJnYmEoMjMsMzIsNjEsLjEzKTtib3JkZXItcmFkaXVzOjVweDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxLjRlbTt3b3JkLXdyYXA6YnJlYWstd29yZH0uY2R4LW5vdGlmeTo6YmVmb3Jle2NvbnRlbnQ6Jyc7cG9zaXRpb246YWJzb2x1dGU7ZGlzcGxheTpibG9jazt0b3A6MDtsZWZ0OjA7d2lkdGg6M3B4O2hlaWdodDpjYWxjKDEwMCUgLSA2cHgpO21hcmdpbjozcHg7Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZDowIDB9QGtleWZyYW1lcyBib3VuY2VJbnswJXtvcGFjaXR5OjA7dHJhbnNmb3JtOnNjYWxlKC4zKX01MCV7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjA1KX03MCV7dHJhbnNmb3JtOnNjYWxlKC45KX0xMDAle3RyYW5zZm9ybTpzY2FsZSgxKX19LmNkeC1ub3RpZnktLWJvdW5jZS1pbnthbmltYXRpb24tbmFtZTpib3VuY2VJbjthbmltYXRpb24tZHVyYXRpb246LjZzO2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MX0uY2R4LW5vdGlmeS0tc3VjY2Vzc3tiYWNrZ3JvdW5kOiNmYWZmZmUhaW1wb3J0YW50fS5jZHgtbm90aWZ5LS1zdWNjZXNzOjpiZWZvcmV7YmFja2dyb3VuZDojNDFmZmIxIWltcG9ydGFudH1gLCBcIlwiXSk7XG4gICAgfSwgZnVuY3Rpb24odCwgbykge1xuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24oaSkge1xuICAgICAgICB2YXIgbiA9IFtdO1xuICAgICAgICByZXR1cm4gbi50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGZ1bmN0aW9uKGwsIGMpIHtcbiAgICAgICAgICAgICAgdmFyIHUgPSBsWzFdIHx8IFwiXCIsIGggPSBsWzNdO1xuICAgICAgICAgICAgICBpZiAoIWgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHU7XG4gICAgICAgICAgICAgIGlmIChjICYmIHR5cGVvZiBidG9hID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHZhciBmID0gKHAgPSBoLCBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHApKSkpICsgXCIgKi9cIiksIHYgPSBoLnNvdXJjZXMubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIgKyBoLnNvdXJjZVJvb3QgKyBrICsgXCIgKi9cIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3VdLmNvbmNhdCh2KS5jb25jYXQoW2ZdKS5qb2luKGBcbmApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBwO1xuICAgICAgICAgICAgICByZXR1cm4gW3VdLmpvaW4oYFxuYCk7XG4gICAgICAgICAgICB9KHIsIGkpO1xuICAgICAgICAgICAgcmV0dXJuIHJbMl0gPyBcIkBtZWRpYSBcIiArIHJbMl0gKyBcIntcIiArIGEgKyBcIn1cIiA6IGE7XG4gICAgICAgICAgfSkuam9pbihcIlwiKTtcbiAgICAgICAgfSwgbi5pID0gZnVuY3Rpb24ociwgYSkge1xuICAgICAgICAgIHR5cGVvZiByID09IFwic3RyaW5nXCIgJiYgKHIgPSBbW251bGwsIHIsIFwiXCJdXSk7XG4gICAgICAgICAgZm9yICh2YXIgbCA9IHt9LCBjID0gMDsgYyA8IHRoaXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHZhciB1ID0gdGhpc1tjXVswXTtcbiAgICAgICAgICAgIHR5cGVvZiB1ID09IFwibnVtYmVyXCIgJiYgKGxbdV0gPSAhMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoYyA9IDA7IGMgPCByLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB2YXIgaCA9IHJbY107XG4gICAgICAgICAgICB0eXBlb2YgaFswXSA9PSBcIm51bWJlclwiICYmIGxbaFswXV0gfHwgKGEgJiYgIWhbMl0gPyBoWzJdID0gYSA6IGEgJiYgKGhbMl0gPSBcIihcIiArIGhbMl0gKyBcIikgYW5kIChcIiArIGEgKyBcIilcIiksIG4ucHVzaChoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBuO1xuICAgICAgfTtcbiAgICB9LCBmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICB2YXIgbiwgciwgYSA9IHt9LCBsID0gKG4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xuICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByID09PSB2b2lkIDAgJiYgKHIgPSBuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLCByO1xuICAgICAgfSksIGMgPSBmdW5jdGlvbihiKSB7XG4gICAgICAgIHZhciBnID0ge307XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihFKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBFID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgIHJldHVybiBFKCk7XG4gICAgICAgICAgaWYgKGdbRV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdmFyIEMgPSBmdW5jdGlvbihPKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKE8pO1xuICAgICAgICAgICAgfS5jYWxsKHRoaXMsIEUpO1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBDIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KVxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIEMgPSBDLmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICBDID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ1tFXSA9IEM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBnW0VdO1xuICAgICAgICB9O1xuICAgICAgfSgpLCB1ID0gbnVsbCwgaCA9IDAsIGYgPSBbXSwgdiA9IGkoNSk7XG4gICAgICBmdW5jdGlvbiBwKGIsIGcpIHtcbiAgICAgICAgZm9yICh2YXIgRSA9IDA7IEUgPCBiLmxlbmd0aDsgRSsrKSB7XG4gICAgICAgICAgdmFyIEMgPSBiW0VdLCBPID0gYVtDLmlkXTtcbiAgICAgICAgICBpZiAoTykge1xuICAgICAgICAgICAgTy5yZWZzKys7XG4gICAgICAgICAgICBmb3IgKHZhciBJID0gMDsgSSA8IE8ucGFydHMubGVuZ3RoOyBJKyspXG4gICAgICAgICAgICAgIE8ucGFydHNbSV0oQy5wYXJ0c1tJXSk7XG4gICAgICAgICAgICBmb3IgKDsgSSA8IEMucGFydHMubGVuZ3RoOyBJKyspXG4gICAgICAgICAgICAgIE8ucGFydHMucHVzaCh4KEMucGFydHNbSV0sIGcpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIEggPSBbXTtcbiAgICAgICAgICAgIGZvciAoSSA9IDA7IEkgPCBDLnBhcnRzLmxlbmd0aDsgSSsrKVxuICAgICAgICAgICAgICBILnB1c2goeChDLnBhcnRzW0ldLCBnKSk7XG4gICAgICAgICAgICBhW0MuaWRdID0geyBpZDogQy5pZCwgcmVmczogMSwgcGFydHM6IEggfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGsoYiwgZykge1xuICAgICAgICBmb3IgKHZhciBFID0gW10sIEMgPSB7fSwgTyA9IDA7IE8gPCBiLmxlbmd0aDsgTysrKSB7XG4gICAgICAgICAgdmFyIEkgPSBiW09dLCBIID0gZy5iYXNlID8gSVswXSArIGcuYmFzZSA6IElbMF0sIEwgPSB7IGNzczogSVsxXSwgbWVkaWE6IElbMl0sIHNvdXJjZU1hcDogSVszXSB9O1xuICAgICAgICAgIENbSF0gPyBDW0hdLnBhcnRzLnB1c2goTCkgOiBFLnB1c2goQ1tIXSA9IHsgaWQ6IEgsIHBhcnRzOiBbTF0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEU7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBfKGIsIGcpIHtcbiAgICAgICAgdmFyIEUgPSBjKGIuaW5zZXJ0SW50byk7XG4gICAgICAgIGlmICghRSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgdmFyIEMgPSBmW2YubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChiLmluc2VydEF0ID09PSBcInRvcFwiKVxuICAgICAgICAgIEMgPyBDLm5leHRTaWJsaW5nID8gRS5pbnNlcnRCZWZvcmUoZywgQy5uZXh0U2libGluZykgOiBFLmFwcGVuZENoaWxkKGcpIDogRS5pbnNlcnRCZWZvcmUoZywgRS5maXJzdENoaWxkKSwgZi5wdXNoKGcpO1xuICAgICAgICBlbHNlIGlmIChiLmluc2VydEF0ID09PSBcImJvdHRvbVwiKVxuICAgICAgICAgIEUuYXBwZW5kQ2hpbGQoZyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgYi5pbnNlcnRBdCAhPSBcIm9iamVjdFwiIHx8ICFiLmluc2VydEF0LmJlZm9yZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW1N0eWxlIExvYWRlcl1cblxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxuYCk7XG4gICAgICAgICAgdmFyIE8gPSBjKGIuaW5zZXJ0SW50byArIFwiIFwiICsgYi5pbnNlcnRBdC5iZWZvcmUpO1xuICAgICAgICAgIEUuaW5zZXJ0QmVmb3JlKGcsIE8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBBKGIpIHtcbiAgICAgICAgaWYgKGIucGFyZW50Tm9kZSA9PT0gbnVsbClcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIGIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTtcbiAgICAgICAgdmFyIGcgPSBmLmluZGV4T2YoYik7XG4gICAgICAgIGcgPj0gMCAmJiBmLnNwbGljZShnLCAxKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFIoYikge1xuICAgICAgICB2YXIgZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgcmV0dXJuIGIuYXR0cnMudHlwZSA9PT0gdm9pZCAwICYmIChiLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCIpLCB5KGcsIGIuYXR0cnMpLCBfKGIsIGcpLCBnO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24geShiLCBnKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGcpLmZvckVhY2goZnVuY3Rpb24oRSkge1xuICAgICAgICAgIGIuc2V0QXR0cmlidXRlKEUsIGdbRV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHgoYiwgZykge1xuICAgICAgICB2YXIgRSwgQywgTywgSTtcbiAgICAgICAgaWYgKGcudHJhbnNmb3JtICYmIGIuY3NzKSB7XG4gICAgICAgICAgaWYgKCEoSSA9IGcudHJhbnNmb3JtKGIuY3NzKSkpXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIGIuY3NzID0gSTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZy5zaW5nbGV0b24pIHtcbiAgICAgICAgICB2YXIgSCA9IGgrKztcbiAgICAgICAgICBFID0gdSB8fCAodSA9IFIoZykpLCBDID0gTi5iaW5kKG51bGwsIEUsIEgsICExKSwgTyA9IE4uYmluZChudWxsLCBFLCBILCAhMCk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIGIuc291cmNlTWFwICYmIHR5cGVvZiBVUkwgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIEJsb2IgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBidG9hID09IFwiZnVuY3Rpb25cIiA/IChFID0gZnVuY3Rpb24oTCkge1xuICAgICAgICAgICAgdmFyIFcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgICAgIHJldHVybiBMLmF0dHJzLnR5cGUgPT09IHZvaWQgMCAmJiAoTC5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiKSwgTC5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIiwgeShXLCBMLmF0dHJzKSwgXyhMLCBXKSwgVztcbiAgICAgICAgICB9KGcpLCBDID0gZnVuY3Rpb24oTCwgVywgbGUpIHtcbiAgICAgICAgICAgIHZhciBRID0gbGUuY3NzLCBFZSA9IGxlLnNvdXJjZU1hcCwgSXQgPSBXLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdm9pZCAwICYmIEVlO1xuICAgICAgICAgICAgKFcuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IEl0KSAmJiAoUSA9IHYoUSkpLCBFZSAmJiAoUSArPSBgXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGAgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShFZSkpKSkgKyBcIiAqL1wiKTtcbiAgICAgICAgICAgIHZhciBNdCA9IG5ldyBCbG9iKFtRXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSksIFhlID0gTC5ocmVmO1xuICAgICAgICAgICAgTC5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChNdCksIFhlICYmIFVSTC5yZXZva2VPYmplY3RVUkwoWGUpO1xuICAgICAgICAgIH0uYmluZChudWxsLCBFLCBnKSwgTyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgQShFKSwgRS5ocmVmICYmIFVSTC5yZXZva2VPYmplY3RVUkwoRS5ocmVmKTtcbiAgICAgICAgICB9KSA6IChFID0gUihnKSwgQyA9IGZ1bmN0aW9uKEwsIFcpIHtcbiAgICAgICAgICAgIHZhciBsZSA9IFcuY3NzLCBRID0gVy5tZWRpYTtcbiAgICAgICAgICAgIGlmIChRICYmIEwuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgUSksIEwuc3R5bGVTaGVldClcbiAgICAgICAgICAgICAgTC5zdHlsZVNoZWV0LmNzc1RleHQgPSBsZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKDsgTC5maXJzdENoaWxkOyApXG4gICAgICAgICAgICAgICAgTC5yZW1vdmVDaGlsZChMLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBMLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfS5iaW5kKG51bGwsIEUpLCBPID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBBKEUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gQyhiKSwgZnVuY3Rpb24oTCkge1xuICAgICAgICAgIGlmIChMKSB7XG4gICAgICAgICAgICBpZiAoTC5jc3MgPT09IGIuY3NzICYmIEwubWVkaWEgPT09IGIubWVkaWEgJiYgTC5zb3VyY2VNYXAgPT09IGIuc291cmNlTWFwKVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBDKGIgPSBMKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIE8oKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKGIsIGcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBERUJVRyA8IFwidVwiICYmIERFQlVHICYmIHR5cGVvZiBkb2N1bWVudCAhPSBcIm9iamVjdFwiKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcbiAgICAgICAgKGcgPSBnIHx8IHt9KS5hdHRycyA9IHR5cGVvZiBnLmF0dHJzID09IFwib2JqZWN0XCIgPyBnLmF0dHJzIDoge30sIGcuc2luZ2xldG9uIHx8IHR5cGVvZiBnLnNpbmdsZXRvbiA9PSBcImJvb2xlYW5cIiB8fCAoZy5zaW5nbGV0b24gPSBsKCkpLCBnLmluc2VydEludG8gfHwgKGcuaW5zZXJ0SW50byA9IFwiaGVhZFwiKSwgZy5pbnNlcnRBdCB8fCAoZy5pbnNlcnRBdCA9IFwiYm90dG9tXCIpO1xuICAgICAgICB2YXIgRSA9IGsoYiwgZyk7XG4gICAgICAgIHJldHVybiBwKEUsIGcpLCBmdW5jdGlvbihDKSB7XG4gICAgICAgICAgZm9yICh2YXIgTyA9IFtdLCBJID0gMDsgSSA8IEUubGVuZ3RoOyBJKyspIHtcbiAgICAgICAgICAgIHZhciBIID0gRVtJXTtcbiAgICAgICAgICAgIChMID0gYVtILmlkXSkucmVmcy0tLCBPLnB1c2goTCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoQyAmJiBwKGsoQywgZyksIGcpLCBJID0gMDsgSSA8IE8ubGVuZ3RoOyBJKyspIHtcbiAgICAgICAgICAgIHZhciBMO1xuICAgICAgICAgICAgaWYgKChMID0gT1tJXSkucmVmcyA9PT0gMCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBXID0gMDsgVyA8IEwucGFydHMubGVuZ3RoOyBXKyspXG4gICAgICAgICAgICAgICAgTC5wYXJ0c1tXXSgpO1xuICAgICAgICAgICAgICBkZWxldGUgYVtMLmlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgdmFyIHcsIE0gPSAodyA9IFtdLCBmdW5jdGlvbihiLCBnKSB7XG4gICAgICAgIHJldHVybiB3W2JdID0gZywgdy5maWx0ZXIoQm9vbGVhbikuam9pbihgXG5gKTtcbiAgICAgIH0pO1xuICAgICAgZnVuY3Rpb24gTihiLCBnLCBFLCBDKSB7XG4gICAgICAgIHZhciBPID0gRSA/IFwiXCIgOiBDLmNzcztcbiAgICAgICAgaWYgKGIuc3R5bGVTaGVldClcbiAgICAgICAgICBiLnN0eWxlU2hlZXQuY3NzVGV4dCA9IE0oZywgTyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBJID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoTyksIEggPSBiLmNoaWxkTm9kZXM7XG4gICAgICAgICAgSFtnXSAmJiBiLnJlbW92ZUNoaWxkKEhbZ10pLCBILmxlbmd0aCA/IGIuaW5zZXJ0QmVmb3JlKEksIEhbZ10pIDogYi5hcHBlbmRDaGlsZChJKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKHQsIG8pIHtcbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgdmFyIG4gPSB0eXBlb2Ygd2luZG93IDwgXCJ1XCIgJiYgd2luZG93LmxvY2F0aW9uO1xuICAgICAgICBpZiAoIW4pXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gICAgICAgIGlmICghaSB8fCB0eXBlb2YgaSAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB2YXIgciA9IG4ucHJvdG9jb2wgKyBcIi8vXCIgKyBuLmhvc3QsIGEgPSByICsgbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcbiAgICAgICAgcmV0dXJuIGkucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGwsIGMpIHtcbiAgICAgICAgICB2YXIgdSwgaCA9IGMudHJpbSgpLnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihmLCB2KSB7XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICB9KS5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKGYsIHYpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiAvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KGgpID8gbCA6ICh1ID0gaC5pbmRleE9mKFwiLy9cIikgPT09IDAgPyBoIDogaC5pbmRleE9mKFwiL1wiKSA9PT0gMCA/IHIgKyBoIDogYSArIGgucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpLCBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KHUpICsgXCIpXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgdmFyIG4sIHIsIGEsIGwsIGMsIHUsIGgsIGYsIHY7XG4gICAgICB0LmV4cG9ydHMgPSAobiA9IFwiY2R4LW5vdGlmaWVzXCIsIHIgPSBcImNkeC1ub3RpZnlcIiwgYSA9IFwiY2R4LW5vdGlmeV9fY3Jvc3NcIiwgbCA9IFwiY2R4LW5vdGlmeV9fYnV0dG9uLS1jb25maXJtXCIsIGMgPSBcImNkeC1ub3RpZnlfX2J1dHRvbi0tY2FuY2VsXCIsIHUgPSBcImNkeC1ub3RpZnlfX2lucHV0XCIsIGggPSBcImNkeC1ub3RpZnlfX2J1dHRvblwiLCBmID0gXCJjZHgtbm90aWZ5X19idG5zLXdyYXBwZXJcIiwgeyBhbGVydDogdiA9IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgdmFyIGsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgQSA9IHAubWVzc2FnZSwgUiA9IHAuc3R5bGU7XG4gICAgICAgIHJldHVybiBrLmNsYXNzTGlzdC5hZGQociksIFIgJiYgay5jbGFzc0xpc3QuYWRkKHIgKyBcIi0tXCIgKyBSKSwgay5pbm5lckhUTUwgPSBBLCBfLmNsYXNzTGlzdC5hZGQoYSksIF8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGsucmVtb3ZlLmJpbmQoaykpLCBrLmFwcGVuZENoaWxkKF8pLCBrO1xuICAgICAgfSwgY29uZmlybTogZnVuY3Rpb24ocCkge1xuICAgICAgICB2YXIgayA9IHYocCksIF8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCBBID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSwgUiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksIHkgPSBrLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBhKSwgeCA9IHAuY2FuY2VsSGFuZGxlciwgdyA9IHAub2tIYW5kbGVyO1xuICAgICAgICByZXR1cm4gXy5jbGFzc0xpc3QuYWRkKGYpLCBBLmlubmVySFRNTCA9IHAub2tUZXh0IHx8IFwiQ29uZmlybVwiLCBSLmlubmVySFRNTCA9IHAuY2FuY2VsVGV4dCB8fCBcIkNhbmNlbFwiLCBBLmNsYXNzTGlzdC5hZGQoaCksIFIuY2xhc3NMaXN0LmFkZChoKSwgQS5jbGFzc0xpc3QuYWRkKGwpLCBSLmNsYXNzTGlzdC5hZGQoYyksIHggJiYgdHlwZW9mIHggPT0gXCJmdW5jdGlvblwiICYmIChSLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB4KSwgeS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgeCkpLCB3ICYmIHR5cGVvZiB3ID09IFwiZnVuY3Rpb25cIiAmJiBBLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB3KSwgQS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgay5yZW1vdmUuYmluZChrKSksIFIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGsucmVtb3ZlLmJpbmQoaykpLCBfLmFwcGVuZENoaWxkKEEpLCBfLmFwcGVuZENoaWxkKFIpLCBrLmFwcGVuZENoaWxkKF8pLCBrO1xuICAgICAgfSwgcHJvbXB0OiBmdW5jdGlvbihwKSB7XG4gICAgICAgIHZhciBrID0gdihwKSwgXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIEEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLCBSID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLCB5ID0gay5xdWVyeVNlbGVjdG9yKFwiLlwiICsgYSksIHggPSBwLmNhbmNlbEhhbmRsZXIsIHcgPSBwLm9rSGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIF8uY2xhc3NMaXN0LmFkZChmKSwgQS5pbm5lckhUTUwgPSBwLm9rVGV4dCB8fCBcIk9rXCIsIEEuY2xhc3NMaXN0LmFkZChoKSwgQS5jbGFzc0xpc3QuYWRkKGwpLCBSLmNsYXNzTGlzdC5hZGQodSksIHAucGxhY2Vob2xkZXIgJiYgUi5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLCBwLnBsYWNlaG9sZGVyKSwgcC5kZWZhdWx0ICYmIChSLnZhbHVlID0gcC5kZWZhdWx0KSwgcC5pbnB1dFR5cGUgJiYgKFIudHlwZSA9IHAuaW5wdXRUeXBlKSwgeCAmJiB0eXBlb2YgeCA9PSBcImZ1bmN0aW9uXCIgJiYgeS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgeCksIHcgJiYgdHlwZW9mIHcgPT0gXCJmdW5jdGlvblwiICYmIEEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHcoUi52YWx1ZSk7XG4gICAgICAgIH0pLCBBLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBrLnJlbW92ZS5iaW5kKGspKSwgXy5hcHBlbmRDaGlsZChSKSwgXy5hcHBlbmRDaGlsZChBKSwgay5hcHBlbmRDaGlsZChfKSwgaztcbiAgICAgIH0sIGdldFdyYXBwZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7XG4gICAgICAgIHJldHVybiBwLmNsYXNzTGlzdC5hZGQobiksIHA7XG4gICAgICB9IH0pO1xuICAgIH1dKTtcbiAgfSk7XG59KSh0byk7XG5jb25zdCBvbyA9IC8qIEBfX1BVUkVfXyAqLyB4ZShMZSk7XG5jbGFzcyBpbyB7XG4gIC8qKlxuICAgKiBTaG93IHdlYiBub3RpZmljYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtOb3RpZmllck9wdGlvbnMgfCBDb25maXJtTm90aWZpZXJPcHRpb25zIHwgUHJvbXB0Tm90aWZpZXJPcHRpb25zfSBvcHRpb25zIC0gbm90aWZpY2F0aW9uIG9wdGlvbnNcbiAgICovXG4gIHNob3coZSkge1xuICAgIG9vLnNob3coZSk7XG4gIH1cbn1cbmNsYXNzIG5vIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbiAtIE1vZHVsZSBDb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uLmNvbmZpZyAtIEVkaXRvcidzIGNvbmZpZ1xuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5ldmVudHNEaXNwYXRjaGVyIC0gRWRpdG9yJ3MgZXZlbnQgZGlzcGF0Y2hlclxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBjb25maWc6IGUsIGV2ZW50c0Rpc3BhdGNoZXI6IHQgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGNvbmZpZzogZSxcbiAgICAgIGV2ZW50c0Rpc3BhdGNoZXI6IHRcbiAgICB9KSwgdGhpcy5ub3RpZmllciA9IG5ldyBpbygpO1xuICB9XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNob3c6IChlKSA9PiB0aGlzLnNob3coZSlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTaG93IG5vdGlmaWNhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge05vdGlmaWVyT3B0aW9uc30gb3B0aW9ucyAtIG1lc3NhZ2Ugb3B0aW9uXG4gICAqL1xuICBzaG93KGUpIHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZmllci5zaG93KGUpO1xuICB9XG59XG5jbGFzcyBzbyBleHRlbmRzIFMge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIGNvbnN0IGUgPSAoKSA9PiB0aGlzLmlzRW5hYmxlZDtcbiAgICByZXR1cm4ge1xuICAgICAgdG9nZ2xlOiAodCkgPT4gdGhpcy50b2dnbGUodCksXG4gICAgICBnZXQgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNldCBvciB0b2dnbGUgcmVhZC1vbmx5IHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IHN0YXRlIC0gc2V0IG9yIHRvZ2dsZSBzdGF0ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gY3VycmVudCB2YWx1ZVxuICAgKi9cbiAgdG9nZ2xlKGUpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuUmVhZE9ubHkudG9nZ2xlKGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGN1cnJlbnQgcmVhZC1vbmx5IHN0YXRlXG4gICAqL1xuICBnZXQgaXNFbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5SZWFkT25seS5pc0VuYWJsZWQ7XG4gIH1cbn1cbnZhciBPZSA9IHt9LCBybyA9IHtcbiAgZ2V0IGV4cG9ydHMoKSB7XG4gICAgcmV0dXJuIE9lO1xuICB9LFxuICBzZXQgZXhwb3J0cyhzKSB7XG4gICAgT2UgPSBzO1xuICB9XG59O1xuKGZ1bmN0aW9uKHMsIGUpIHtcbiAgKGZ1bmN0aW9uKHQsIG8pIHtcbiAgICBzLmV4cG9ydHMgPSBvKCk7XG4gIH0pKEx0LCBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KGgpIHtcbiAgICAgIHZhciBmID0gaC50YWdzLCB2ID0gT2JqZWN0LmtleXMoZiksIHAgPSB2Lm1hcChmdW5jdGlvbihrKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZltrXTtcbiAgICAgIH0pLmV2ZXJ5KGZ1bmN0aW9uKGspIHtcbiAgICAgICAgcmV0dXJuIGsgPT09IFwib2JqZWN0XCIgfHwgayA9PT0gXCJib29sZWFuXCIgfHwgayA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBjb25maWd1cmF0aW9uIHdhcyBpbnZhbGlkXCIpO1xuICAgICAgdGhpcy5jb25maWcgPSBoO1xuICAgIH1cbiAgICB2YXIgbyA9IFtcIlBcIiwgXCJMSVwiLCBcIlREXCIsIFwiVEhcIiwgXCJESVZcIiwgXCJIMVwiLCBcIkgyXCIsIFwiSDNcIiwgXCJINFwiLCBcIkg1XCIsIFwiSDZcIiwgXCJQUkVcIl07XG4gICAgZnVuY3Rpb24gaShoKSB7XG4gICAgICByZXR1cm4gby5pbmRleE9mKGgubm9kZU5hbWUpICE9PSAtMTtcbiAgICB9XG4gICAgdmFyIG4gPSBbXCJBXCIsIFwiQlwiLCBcIlNUUk9OR1wiLCBcIklcIiwgXCJFTVwiLCBcIlNVQlwiLCBcIlNVUFwiLCBcIlVcIiwgXCJTVFJJS0VcIl07XG4gICAgZnVuY3Rpb24gcihoKSB7XG4gICAgICByZXR1cm4gbi5pbmRleE9mKGgubm9kZU5hbWUpICE9PSAtMTtcbiAgICB9XG4gICAgdC5wcm90b3R5cGUuY2xlYW4gPSBmdW5jdGlvbihoKSB7XG4gICAgICBjb25zdCBmID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCksIHYgPSBmLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICByZXR1cm4gdi5pbm5lckhUTUwgPSBoLCB0aGlzLl9zYW5pdGl6ZShmLCB2KSwgdi5pbm5lckhUTUw7XG4gICAgfSwgdC5wcm90b3R5cGUuX3Nhbml0aXplID0gZnVuY3Rpb24oaCwgZikge1xuICAgICAgdmFyIHYgPSBhKGgsIGYpLCBwID0gdi5maXJzdENoaWxkKCk7XG4gICAgICBpZiAocClcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmIChwLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSlcbiAgICAgICAgICAgIGlmIChwLmRhdGEudHJpbSgpID09PSBcIlwiICYmIChwLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgaShwLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHx8IHAubmV4dEVsZW1lbnRTaWJsaW5nICYmIGkocC5uZXh0RWxlbWVudFNpYmxpbmcpKSkge1xuICAgICAgICAgICAgICBmLnJlbW92ZUNoaWxkKHApLCB0aGlzLl9zYW5pdGl6ZShoLCBmKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgaWYgKHAubm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICBmLnJlbW92ZUNoaWxkKHApLCB0aGlzLl9zYW5pdGl6ZShoLCBmKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgayA9IHIocCksIF87XG4gICAgICAgICAgayAmJiAoXyA9IEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwocC5jaGlsZE5vZGVzLCBpKSk7XG4gICAgICAgICAgdmFyIEEgPSAhIWYucGFyZW50Tm9kZSwgUiA9IGkoZikgJiYgaShwKSAmJiBBLCB5ID0gcC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLCB4ID0gbCh0aGlzLmNvbmZpZywgeSwgcCksIHcgPSBrICYmIF87XG4gICAgICAgICAgaWYgKHcgfHwgYyhwLCB4KSB8fCAhdGhpcy5jb25maWcua2VlcE5lc3RlZEJsb2NrRWxlbWVudHMgJiYgUikge1xuICAgICAgICAgICAgaWYgKCEocC5ub2RlTmFtZSA9PT0gXCJTQ1JJUFRcIiB8fCBwLm5vZGVOYW1lID09PSBcIlNUWUxFXCIpKVxuICAgICAgICAgICAgICBmb3IgKDsgcC5jaGlsZE5vZGVzLmxlbmd0aCA+IDA7IClcbiAgICAgICAgICAgICAgICBmLmluc2VydEJlZm9yZShwLmNoaWxkTm9kZXNbMF0sIHApO1xuICAgICAgICAgICAgZi5yZW1vdmVDaGlsZChwKSwgdGhpcy5fc2FuaXRpemUoaCwgZik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgTSA9IDA7IE0gPCBwLmF0dHJpYnV0ZXMubGVuZ3RoOyBNICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBOID0gcC5hdHRyaWJ1dGVzW01dO1xuICAgICAgICAgICAgdShOLCB4LCBwKSAmJiAocC5yZW1vdmVBdHRyaWJ1dGUoTi5uYW1lKSwgTSA9IE0gLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fc2FuaXRpemUoaCwgcCk7XG4gICAgICAgIH0gd2hpbGUgKHAgPSB2Lm5leHRTaWJsaW5nKCkpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gYShoLCBmKSB7XG4gICAgICByZXR1cm4gaC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgICAgICBmLFxuICAgICAgICBOb2RlRmlsdGVyLlNIT1dfVEVYVCB8IE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UIHwgTm9kZUZpbHRlci5TSE9XX0NPTU1FTlQsXG4gICAgICAgIG51bGwsXG4gICAgICAgICExXG4gICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsKGgsIGYsIHYpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgaC50YWdzW2ZdID09IFwiZnVuY3Rpb25cIiA/IGgudGFnc1tmXSh2KSA6IGgudGFnc1tmXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYyhoLCBmKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGYgPiBcInVcIiA/ICEwIDogdHlwZW9mIGYgPT0gXCJib29sZWFuXCIgPyAhZiA6ICExO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1KGgsIGYsIHYpIHtcbiAgICAgIHZhciBwID0gaC5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gZiA9PT0gITAgPyAhMSA6IHR5cGVvZiBmW3BdID09IFwiZnVuY3Rpb25cIiA/ICFmW3BdKGgudmFsdWUsIHYpIDogdHlwZW9mIGZbcF0gPiBcInVcIiB8fCBmW3BdID09PSAhMSA/ICEwIDogdHlwZW9mIGZbcF0gPT0gXCJzdHJpbmdcIiA/IGZbcF0gIT09IGgudmFsdWUgOiAhMTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH0pO1xufSkocm8pO1xuY29uc3QgYW8gPSBPZTtcbmZ1bmN0aW9uIGh0KHMsIGUpIHtcbiAgcmV0dXJuIHMubWFwKCh0KSA9PiB7XG4gICAgY29uc3QgbyA9IEQoZSkgPyBlKHQudG9vbCkgOiBlO1xuICAgIHJldHVybiBWKG8pIHx8ICh0LmRhdGEgPSBQZSh0LmRhdGEsIG8pKSwgdDtcbiAgfSk7XG59XG5mdW5jdGlvbiBaKHMsIGUgPSB7fSkge1xuICBjb25zdCB0ID0ge1xuICAgIHRhZ3M6IGVcbiAgfTtcbiAgcmV0dXJuIG5ldyBhbyh0KS5jbGVhbihzKTtcbn1cbmZ1bmN0aW9uIFBlKHMsIGUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkocykgPyBsbyhzLCBlKSA6IGoocykgPyBjbyhzLCBlKSA6IEoocykgPyBobyhzLCBlKSA6IHM7XG59XG5mdW5jdGlvbiBsbyhzLCBlKSB7XG4gIHJldHVybiBzLm1hcCgodCkgPT4gUGUodCwgZSkpO1xufVxuZnVuY3Rpb24gY28ocywgZSkge1xuICBjb25zdCB0ID0ge307XG4gIGZvciAoY29uc3QgbyBpbiBzKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgbykpXG4gICAgICBjb250aW51ZTtcbiAgICBjb25zdCBpID0gc1tvXSwgbiA9IHVvKGVbb10pID8gZVtvXSA6IGU7XG4gICAgdFtvXSA9IFBlKGksIG4pO1xuICB9XG4gIHJldHVybiB0O1xufVxuZnVuY3Rpb24gaG8ocywgZSkge1xuICByZXR1cm4gaihlKSA/IFoocywgZSkgOiBlID09PSAhMSA/IFoocywge30pIDogcztcbn1cbmZ1bmN0aW9uIHVvKHMpIHtcbiAgcmV0dXJuIGoocykgfHwgTnQocykgfHwgRChzKTtcbn1cbmNsYXNzIHBvIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7U2FuaXRpemVyQ29uZmlnfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsZWFuOiAoZSwgdCkgPT4gdGhpcy5jbGVhbihlLCB0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm0gc2FuaXRpemluZyBvZiBhIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFpbnRTdHJpbmcgLSB3aGF0IHRvIHNhbml0aXplXG4gICAqIEBwYXJhbSB7U2FuaXRpemVyQ29uZmlnfSBjb25maWcgLSBzYW5pdGl6ZXIgY29uZmlnXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBjbGVhbihlLCB0KSB7XG4gICAgcmV0dXJuIFooZSwgdCk7XG4gIH1cbn1cbmNsYXNzIGZvIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7U2F2ZXJ9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2F2ZTogKCkgPT4gdGhpcy5zYXZlKClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gRWRpdG9yJ3MgZGF0YVxuICAgKlxuICAgKiBAcmV0dXJucyB7T3V0cHV0RGF0YX1cbiAgICovXG4gIHNhdmUoKSB7XG4gICAgY29uc3QgZSA9IFwiRWRpdG9yJ3MgY29udGVudCBjYW4gbm90IGJlIHNhdmVkIGluIHJlYWQtb25seSBtb2RlXCI7XG4gICAgcmV0dXJuIHRoaXMuRWRpdG9yLlJlYWRPbmx5LmlzRW5hYmxlZCA/IChLKGUsIFwid2FyblwiKSwgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGUpKSkgOiB0aGlzLkVkaXRvci5TYXZlci5zYXZlKCk7XG4gIH1cbn1cbmNsYXNzIGdvIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7U2VsZWN0aW9uQVBJSW50ZXJmYWNlfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbmRQYXJlbnRUYWc6IChlLCB0KSA9PiB0aGlzLmZpbmRQYXJlbnRUYWcoZSwgdCksXG4gICAgICBleHBhbmRUb1RhZzogKGUpID0+IHRoaXMuZXhwYW5kVG9UYWcoZSlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBMb29rcyBhaGVhZCBmcm9tIHNlbGVjdGlvbiBhbmQgZmluZCBwYXNzZWQgdGFnIHdpdGggY2xhc3MgbmFtZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSAtIHRhZyB0byBmaW5kXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgLSB0YWcncyBjbGFzcyBuYW1lXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHxudWxsfVxuICAgKi9cbiAgZmluZFBhcmVudFRhZyhlLCB0KSB7XG4gICAgcmV0dXJuIG5ldyBtKCkuZmluZFBhcmVudFRhZyhlLCB0KTtcbiAgfVxuICAvKipcbiAgICogRXhwYW5kIHNlbGVjdGlvbiB0byBwYXNzZWQgdGFnXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgLSB0YWcgdGhhdCBzaG91bGQgY29udGFpbiBzZWxlY3Rpb25cbiAgICovXG4gIGV4cGFuZFRvVGFnKGUpIHtcbiAgICBuZXcgbSgpLmV4cGFuZFRvVGFnKGUpO1xuICB9XG59XG5jbGFzcyBibyBleHRlbmRzIFMge1xuICAvKipcbiAgICogRXhwb3J0ZWQgY2xhc3Nlc1xuICAgKi9cbiAgZ2V0IGNsYXNzZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQmFzZSBCbG9jayBzdHlsZXNcbiAgICAgICAqL1xuICAgICAgYmxvY2s6IFwiY2R4LWJsb2NrXCIsXG4gICAgICAvKipcbiAgICAgICAqIElubGluZSBUb29scyBzdHlsZXNcbiAgICAgICAqL1xuICAgICAgaW5saW5lVG9vbEJ1dHRvbjogXCJjZS1pbmxpbmUtdG9vbFwiLFxuICAgICAgaW5saW5lVG9vbEJ1dHRvbkFjdGl2ZTogXCJjZS1pbmxpbmUtdG9vbC0tYWN0aXZlXCIsXG4gICAgICAvKipcbiAgICAgICAqIFVJIGVsZW1lbnRzXG4gICAgICAgKi9cbiAgICAgIGlucHV0OiBcImNkeC1pbnB1dFwiLFxuICAgICAgbG9hZGVyOiBcImNkeC1sb2FkZXJcIixcbiAgICAgIGJ1dHRvbjogXCJjZHgtYnV0dG9uXCIsXG4gICAgICAvKipcbiAgICAgICAqIFNldHRpbmdzIHN0eWxlc1xuICAgICAgICovXG4gICAgICBzZXR0aW5nc0J1dHRvbjogXCJjZHgtc2V0dGluZ3MtYnV0dG9uXCIsXG4gICAgICBzZXR0aW5nc0J1dHRvbkFjdGl2ZTogXCJjZHgtc2V0dGluZ3MtYnV0dG9uLS1hY3RpdmVcIlxuICAgIH07XG4gIH1cbn1cbmNsYXNzIG1vIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbG9zZTogKCkgPT4gdGhpcy5jbG9zZSgpLFxuICAgICAgb3BlbjogKCkgPT4gdGhpcy5vcGVuKCksXG4gICAgICB0b2dnbGVCbG9ja1NldHRpbmdzOiAoZSkgPT4gdGhpcy50b2dnbGVCbG9ja1NldHRpbmdzKGUpLFxuICAgICAgdG9nZ2xlVG9vbGJveDogKGUpID0+IHRoaXMudG9nZ2xlVG9vbGJveChlKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gdG9vbGJhclxuICAgKi9cbiAgb3BlbigpIHtcbiAgICB0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmVBbmRPcGVuKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlIHRvb2xiYXIgYW5kIGFsbCBpbmNsdWRlZCBlbGVtZW50c1xuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBUb2dnbGVzIEJsb2NrIFNldHRpbmcgb2YgdGhlIGN1cnJlbnQgYmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBvcGVuaW5nU3RhdGUgXHUyMDE0ICBvcGVuaW5nIHN0YXRlIG9mIEJsb2NrIFNldHRpbmdcbiAgICovXG4gIHRvZ2dsZUJsb2NrU2V0dGluZ3MoZSkge1xuICAgIGlmICh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrSW5kZXggPT09IC0xKSB7XG4gICAgICBLKFwiQ291bGQndCB0b2dnbGUgdGhlIFRvb2xiYXIgYmVjYXVzZSB0aGVyZSBpcyBubyBibG9jayBzZWxlY3RlZCBcIiwgXCJ3YXJuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlID8/ICF0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCA/ICh0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmVBbmRPcGVuKCksIHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbigpKSA6IHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3MuY2xvc2UoKTtcbiAgfVxuICAvKipcbiAgICogT3BlbiB0b29sYm94XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3BlbmluZ1N0YXRlIC0gT3BlbmluZyBzdGF0ZSBvZiB0b29sYm94XG4gICAqL1xuICB0b2dnbGVUb29sYm94KGUpIHtcbiAgICBpZiAodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4ID09PSAtMSkge1xuICAgICAgSyhcIkNvdWxkJ3QgdG9nZ2xlIHRoZSBUb29sYm94IGJlY2F1c2UgdGhlcmUgaXMgbm8gYmxvY2sgc2VsZWN0ZWQgXCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZSA/PyAhdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94Lm9wZW5lZCA/ICh0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmVBbmRPcGVuKCksIHRoaXMuRWRpdG9yLlRvb2xiYXIudG9vbGJveC5vcGVuKCkpIDogdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94LmNsb3NlKCk7XG4gIH1cbn1cbnZhciBfZSA9IHt9LCBrbyA9IHtcbiAgZ2V0IGV4cG9ydHMoKSB7XG4gICAgcmV0dXJuIF9lO1xuICB9LFxuICBzZXQgZXhwb3J0cyhzKSB7XG4gICAgX2UgPSBzO1xuICB9XG59O1xuLyohXG4gKiBDb2RlWC5Ub29sdGlwc1xuICogXG4gKiBAdmVyc2lvbiAxLjAuNVxuICogXG4gKiBAbGljZW5jZSBNSVRcbiAqIEBhdXRob3IgQ29kZVggPGh0dHBzOi8vY29kZXguc28+XG4gKiBcbiAqIFxuICovXG4oZnVuY3Rpb24ocywgZSkge1xuICAoZnVuY3Rpb24odCwgbykge1xuICAgIHMuZXhwb3J0cyA9IG8oKTtcbiAgfSkod2luZG93LCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIG8gPSB7fTtcbiAgICAgIGZ1bmN0aW9uIGkobikge1xuICAgICAgICBpZiAob1tuXSlcbiAgICAgICAgICByZXR1cm4gb1tuXS5leHBvcnRzO1xuICAgICAgICB2YXIgciA9IG9bbl0gPSB7IGk6IG4sIGw6ICExLCBleHBvcnRzOiB7fSB9O1xuICAgICAgICByZXR1cm4gdFtuXS5jYWxsKHIuZXhwb3J0cywgciwgci5leHBvcnRzLCBpKSwgci5sID0gITAsIHIuZXhwb3J0cztcbiAgICAgIH1cbiAgICAgIHJldHVybiBpLm0gPSB0LCBpLmMgPSBvLCBpLmQgPSBmdW5jdGlvbihuLCByLCBhKSB7XG4gICAgICAgIGkubyhuLCByKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgciwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBhIH0pO1xuICAgICAgfSwgaS5yID0gZnVuY3Rpb24obikge1xuICAgICAgICB0eXBlb2YgU3ltYm9sIDwgXCJ1XCIgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XG4gICAgICB9LCBpLnQgPSBmdW5jdGlvbihuLCByKSB7XG4gICAgICAgIGlmICgxICYgciAmJiAobiA9IGkobikpLCA4ICYgciB8fCA0ICYgciAmJiB0eXBlb2YgbiA9PSBcIm9iamVjdFwiICYmIG4gJiYgbi5fX2VzTW9kdWxlKVxuICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB2YXIgYSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBpZiAoaS5yKGEpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSwgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogITAsIHZhbHVlOiBuIH0pLCAyICYgciAmJiB0eXBlb2YgbiAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgIGZvciAodmFyIGwgaW4gbilcbiAgICAgICAgICAgIGkuZChhLCBsLCBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuW2NdO1xuICAgICAgICAgICAgfS5iaW5kKG51bGwsIGwpKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9LCBpLm4gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHZhciByID0gbiAmJiBuLl9fZXNNb2R1bGUgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbi5kZWZhdWx0O1xuICAgICAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpLmQociwgXCJhXCIsIHIpLCByO1xuICAgICAgfSwgaS5vID0gZnVuY3Rpb24obiwgcikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sIHIpO1xuICAgICAgfSwgaS5wID0gXCJcIiwgaShpLnMgPSAwKTtcbiAgICB9KFtmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICB0LmV4cG9ydHMgPSBpKDEpO1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgIGkucihvKSwgaS5kKG8sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICB9KTtcbiAgICAgIGNsYXNzIG4ge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICB0aGlzLm5vZGVzID0geyB3cmFwcGVyOiBudWxsLCBjb250ZW50OiBudWxsIH0sIHRoaXMuc2hvd2VkID0gITEsIHRoaXMub2Zmc2V0VG9wID0gMTAsIHRoaXMub2Zmc2V0TGVmdCA9IDEwLCB0aGlzLm9mZnNldFJpZ2h0ID0gMTAsIHRoaXMuaGlkaW5nRGVsYXkgPSAwLCB0aGlzLmhhbmRsZVdpbmRvd1Njcm9sbCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hvd2VkICYmIHRoaXMuaGlkZSghMCk7XG4gICAgICAgICAgfSwgdGhpcy5sb2FkU3R5bGVzKCksIHRoaXMucHJlcGFyZSgpLCB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLmhhbmRsZVdpbmRvd1Njcm9sbCwgeyBwYXNzaXZlOiAhMCB9KTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgQ1NTKCkge1xuICAgICAgICAgIHJldHVybiB7IHRvb2x0aXA6IFwiY3RcIiwgdG9vbHRpcENvbnRlbnQ6IFwiY3RfX2NvbnRlbnRcIiwgdG9vbHRpcFNob3duOiBcImN0LS1zaG93blwiLCBwbGFjZW1lbnQ6IHsgbGVmdDogXCJjdC0tbGVmdFwiLCBib3R0b206IFwiY3QtLWJvdHRvbVwiLCByaWdodDogXCJjdC0tcmlnaHRcIiwgdG9wOiBcImN0LS10b3BcIiB9IH07XG4gICAgICAgIH1cbiAgICAgICAgc2hvdyhhLCBsLCBjKSB7XG4gICAgICAgICAgdGhpcy5ub2Rlcy53cmFwcGVyIHx8IHRoaXMucHJlcGFyZSgpLCB0aGlzLmhpZGluZ1RpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHRoaXMuaGlkaW5nVGltZW91dCk7XG4gICAgICAgICAgY29uc3QgdSA9IE9iamVjdC5hc3NpZ24oeyBwbGFjZW1lbnQ6IFwiYm90dG9tXCIsIG1hcmdpblRvcDogMCwgbWFyZ2luTGVmdDogMCwgbWFyZ2luUmlnaHQ6IDAsIG1hcmdpbkJvdHRvbTogMCwgZGVsYXk6IDcwLCBoaWRpbmdEZWxheTogMCB9LCBjKTtcbiAgICAgICAgICBpZiAodS5oaWRpbmdEZWxheSAmJiAodGhpcy5oaWRpbmdEZWxheSA9IHUuaGlkaW5nRGVsYXkpLCB0aGlzLm5vZGVzLmNvbnRlbnQuaW5uZXJIVE1MID0gXCJcIiwgdHlwZW9mIGwgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHRoaXMubm9kZXMuY29udGVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsKSk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIShsIGluc3RhbmNlb2YgTm9kZSkpXG4gICAgICAgICAgICAgIHRocm93IEVycm9yKFwiW0NvZGVYIFRvb2x0aXBdIFdyb25nIHR5cGUgb2YgXHUwMEFCY29udGVudFx1MDBCQiBwYXNzZWQuIEl0IHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBOb2RlIG9yIFN0cmluZy4gQnV0IFwiICsgdHlwZW9mIGwgKyBcIiBnaXZlbi5cIik7XG4gICAgICAgICAgICB0aGlzLm5vZGVzLmNvbnRlbnQuYXBwZW5kQ2hpbGQobCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAodGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoLi4uT2JqZWN0LnZhbHVlcyh0aGlzLkNTUy5wbGFjZW1lbnQpKSwgdS5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0b3BcIjpcbiAgICAgICAgICAgICAgdGhpcy5wbGFjZVRvcChhLCB1KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgICB0aGlzLnBsYWNlTGVmdChhLCB1KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgICAgICAgdGhpcy5wbGFjZVJpZ2h0KGEsIHUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRoaXMucGxhY2VCb3R0b20oYSwgdSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHUgJiYgdS5kZWxheSA/IHRoaXMuc2hvd2luZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnRvb2x0aXBTaG93biksIHRoaXMuc2hvd2VkID0gITA7XG4gICAgICAgICAgfSwgdS5kZWxheSkgOiAodGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MudG9vbHRpcFNob3duKSwgdGhpcy5zaG93ZWQgPSAhMCk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZShhID0gITEpIHtcbiAgICAgICAgICBpZiAodGhpcy5oaWRpbmdEZWxheSAmJiAhYSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhpZGluZ1RpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHRoaXMuaGlkaW5nVGltZW91dCksIHZvaWQgKHRoaXMuaGlkaW5nVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmhpZGUoITApO1xuICAgICAgICAgICAgfSwgdGhpcy5oaWRpbmdEZWxheSkpO1xuICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLnRvb2x0aXBTaG93biksIHRoaXMuc2hvd2VkID0gITEsIHRoaXMuc2hvd2luZ1RpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHRoaXMuc2hvd2luZ1RpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIG9uSG92ZXIoYSwgbCwgYykge1xuICAgICAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93KGEsIGwsIGMpO1xuICAgICAgICAgIH0pLCBhLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgICAgdGhpcy5ub2Rlcy53cmFwcGVyLnJlbW92ZSgpLCB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLmhhbmRsZVdpbmRvd1Njcm9sbCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJlcGFyZSgpIHtcbiAgICAgICAgICB0aGlzLm5vZGVzLndyYXBwZXIgPSB0aGlzLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MudG9vbHRpcCksIHRoaXMubm9kZXMuY29udGVudCA9IHRoaXMubWFrZShcImRpdlwiLCB0aGlzLkNTUy50b29sdGlwQ29udGVudCksIHRoaXMuYXBwZW5kKHRoaXMubm9kZXMud3JhcHBlciwgdGhpcy5ub2Rlcy5jb250ZW50KSwgdGhpcy5hcHBlbmQoZG9jdW1lbnQuYm9keSwgdGhpcy5ub2Rlcy53cmFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgICBsb2FkU3R5bGVzKCkge1xuICAgICAgICAgIGNvbnN0IGEgPSBcImNvZGV4LXRvb2x0aXBzLXN0eWxlXCI7XG4gICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IGwgPSBpKDIpLCBjID0gdGhpcy5tYWtlKFwic3R5bGVcIiwgbnVsbCwgeyB0ZXh0Q29udGVudDogbC50b1N0cmluZygpLCBpZDogYSB9KTtcbiAgICAgICAgICB0aGlzLnByZXBlbmQoZG9jdW1lbnQuaGVhZCwgYyk7XG4gICAgICAgIH1cbiAgICAgICAgcGxhY2VCb3R0b20oYSwgbCkge1xuICAgICAgICAgIGNvbnN0IGMgPSBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB1ID0gYy5sZWZ0ICsgYS5jbGllbnRXaWR0aCAvIDIgLSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0V2lkdGggLyAyLCBoID0gYy5ib3R0b20gKyB3aW5kb3cucGFnZVlPZmZzZXQgKyB0aGlzLm9mZnNldFRvcCArIGwubWFyZ2luVG9wO1xuICAgICAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoXCJib3R0b21cIiwgdSwgaCk7XG4gICAgICAgIH1cbiAgICAgICAgcGxhY2VUb3AoYSwgbCkge1xuICAgICAgICAgIGNvbnN0IGMgPSBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB1ID0gYy5sZWZ0ICsgYS5jbGllbnRXaWR0aCAvIDIgLSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0V2lkdGggLyAyLCBoID0gYy50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgLSB0aGlzLm5vZGVzLndyYXBwZXIuY2xpZW50SGVpZ2h0IC0gdGhpcy5vZmZzZXRUb3A7XG4gICAgICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChcInRvcFwiLCB1LCBoKTtcbiAgICAgICAgfVxuICAgICAgICBwbGFjZUxlZnQoYSwgbCkge1xuICAgICAgICAgIGNvbnN0IGMgPSBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB1ID0gYy5sZWZ0IC0gdGhpcy5ub2Rlcy53cmFwcGVyLm9mZnNldFdpZHRoIC0gdGhpcy5vZmZzZXRMZWZ0IC0gbC5tYXJnaW5MZWZ0LCBoID0gYy50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgKyBhLmNsaWVudEhlaWdodCAvIDIgLSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0SGVpZ2h0IC8gMjtcbiAgICAgICAgICB0aGlzLmFwcGx5UGxhY2VtZW50KFwibGVmdFwiLCB1LCBoKTtcbiAgICAgICAgfVxuICAgICAgICBwbGFjZVJpZ2h0KGEsIGwpIHtcbiAgICAgICAgICBjb25zdCBjID0gYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdSA9IGMucmlnaHQgKyB0aGlzLm9mZnNldFJpZ2h0ICsgbC5tYXJnaW5SaWdodCwgaCA9IGMudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0ICsgYS5jbGllbnRIZWlnaHQgLyAyIC0gdGhpcy5ub2Rlcy53cmFwcGVyLm9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChcInJpZ2h0XCIsIHUsIGgpO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5UGxhY2VtZW50KGEsIGwsIGMpIHtcbiAgICAgICAgICB0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5wbGFjZW1lbnRbYV0pLCB0aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUubGVmdCA9IGwgKyBcInB4XCIsIHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3AgPSBjICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIG1ha2UoYSwgbCA9IG51bGwsIGMgPSB7fSkge1xuICAgICAgICAgIGNvbnN0IHUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGEpO1xuICAgICAgICAgIEFycmF5LmlzQXJyYXkobCkgPyB1LmNsYXNzTGlzdC5hZGQoLi4ubCkgOiBsICYmIHUuY2xhc3NMaXN0LmFkZChsKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IGggaW4gYylcbiAgICAgICAgICAgIGMuaGFzT3duUHJvcGVydHkoaCkgJiYgKHVbaF0gPSBjW2hdKTtcbiAgICAgICAgICByZXR1cm4gdTtcbiAgICAgICAgfVxuICAgICAgICBhcHBlbmQoYSwgbCkge1xuICAgICAgICAgIEFycmF5LmlzQXJyYXkobCkgPyBsLmZvckVhY2goKGMpID0+IGEuYXBwZW5kQ2hpbGQoYykpIDogYS5hcHBlbmRDaGlsZChsKTtcbiAgICAgICAgfVxuICAgICAgICBwcmVwZW5kKGEsIGwpIHtcbiAgICAgICAgICBBcnJheS5pc0FycmF5KGwpID8gKGwgPSBsLnJldmVyc2UoKSkuZm9yRWFjaCgoYykgPT4gYS5wcmVwZW5kKGMpKSA6IGEucHJlcGVuZChsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKHQsIG8pIHtcbiAgICAgIHQuZXhwb3J0cyA9IGAuY3R7ei1pbmRleDo5OTk7b3BhY2l0eTowOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtwb2ludGVyLWV2ZW50czpub25lOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IDUwbXMgZWFzZS1pbiwtd2Via2l0LXRyYW5zZm9ybSA3MG1zIGN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO3RyYW5zaXRpb246b3BhY2l0eSA1MG1zIGVhc2UtaW4sLXdlYmtpdC10cmFuc2Zvcm0gNzBtcyBjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTt0cmFuc2l0aW9uOm9wYWNpdHkgNTBtcyBlYXNlLWluLHRyYW5zZm9ybSA3MG1zIGN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO3RyYW5zaXRpb246b3BhY2l0eSA1MG1zIGVhc2UtaW4sdHJhbnNmb3JtIDcwbXMgY3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSksLXdlYmtpdC10cmFuc2Zvcm0gNzBtcyBjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTt3aWxsLWNoYW5nZTpvcGFjaXR5LHRvcCxsZWZ0Oy13ZWJraXQtYm94LXNoYWRvdzowIDhweCAxMnB4IDAgcmdiYSgyOSwzMiw0MywuMTcpLDAgNHB4IDVweCAtM3B4IHJnYmEoNSw2LDEyLC40OSk7Ym94LXNoYWRvdzowIDhweCAxMnB4IDAgcmdiYSgyOSwzMiw0MywuMTcpLDAgNHB4IDVweCAtM3B4IHJnYmEoNSw2LDEyLC40OSk7Ym9yZGVyLXJhZGl1czo5cHh9LmN0LC5jdDpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowfS5jdDpiZWZvcmV7Y29udGVudDpcIlwiO2JvdHRvbTowO3JpZ2h0OjA7YmFja2dyb3VuZC1jb2xvcjojMWQyMDJiO3otaW5kZXg6LTE7Ym9yZGVyLXJhZGl1czo0cHh9QHN1cHBvcnRzKC13ZWJraXQtbWFzay1ib3gtaW1hZ2U6dXJsKFwiXCIpKXsuY3Q6YmVmb3Jle2JvcmRlci1yYWRpdXM6MDstd2Via2l0LW1hc2stYm94LWltYWdlOnVybCgnZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCI+PHBhdGggZD1cIk0xMC43MSAwaDIuNThjMy4wMiAwIDQuNjQuNDIgNi4xIDEuMmE4LjE4IDguMTggMCAwMTMuNCAzLjRDMjMuNiA2LjA3IDI0IDcuNyAyNCAxMC43MXYyLjU4YzAgMy4wMi0uNDIgNC42NC0xLjIgNi4xYTguMTggOC4xOCAwIDAxLTMuNCAzLjRjLTEuNDcuOC0zLjEgMS4yMS02LjExIDEuMjFIMTAuN2MtMy4wMiAwLTQuNjQtLjQyLTYuMS0xLjJhOC4xOCA4LjE4IDAgMDEtMy40LTMuNEMuNCAxNy45MyAwIDE2LjMgMCAxMy4yOVYxMC43YzAtMy4wMi40Mi00LjY0IDEuMi02LjFhOC4xOCA4LjE4IDAgMDEzLjQtMy40QzYuMDcuNCA3LjcgMCAxMC43MSAwelwiLz48L3N2Zz4nKSA0OCUgNDElIDM3LjklIDUzLjMlfX1AbWVkaWEgKC0tbW9iaWxlKXsuY3R7ZGlzcGxheTpub25lfX0uY3RfX2NvbnRlbnR7cGFkZGluZzo2cHggMTBweDtjb2xvcjojY2RkMWUwO2ZvbnQtc2l6ZToxMnB4O3RleHQtYWxpZ246Y2VudGVyO2xldHRlci1zcGFjaW5nOi4wMmVtO2xpbmUtaGVpZ2h0OjFlbX0uY3Q6YWZ0ZXJ7Y29udGVudDpcIlwiO3dpZHRoOjhweDtoZWlnaHQ6OHB4O3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6IzFkMjAyYjt6LWluZGV4Oi0xfS5jdC0tYm90dG9tey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSg1cHgpfS5jdC0tYm90dG9tOmFmdGVye3RvcDotM3B4O2xlZnQ6NTAlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyl9LmN0LS10b3B7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNXB4KX0uY3QtLXRvcDphZnRlcnt0b3A6YXV0bztib3R0b206LTNweDtsZWZ0OjUwJTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHJvdGF0ZSgtNDVkZWcpfS5jdC0tbGVmdHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01cHgpfS5jdC0tbGVmdDphZnRlcnt0b3A6NTAlO2xlZnQ6YXV0bztyaWdodDowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSg0MS42JSwtNTAlKSByb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlKDQxLjYlLC01MCUpIHJvdGF0ZSgtNDVkZWcpfS5jdC0tcmlnaHR7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCg1cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDVweCl9LmN0LS1yaWdodDphZnRlcnt0b3A6NTAlO2xlZnQ6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTQxLjYlLC01MCUpIHJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTQxLjYlLC01MCUpIHJvdGF0ZSgtNDVkZWcpfS5jdC0tc2hvd257b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9YDtcbiAgICB9XSkuZGVmYXVsdDtcbiAgfSk7XG59KShrbyk7XG5jb25zdCB2byA9IC8qIEBfX1BVUkVfXyAqLyB4ZShfZSk7XG5jbGFzcyBGZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubGliID0gbmV3IHZvKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbGVhc2UgdGhlIGxpYnJhcnlcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5saWIuZGVzdHJveSgpO1xuICB9XG4gIC8qKlxuICAgKiBTaG93cyB0b29sdGlwIG9uIGVsZW1lbnQgd2l0aCBwYXNzZWQgSFRNTCBjb250ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBhbnkgSFRNTCBlbGVtZW50IGluIERPTVxuICAgKiBAcGFyYW0gY29udGVudCAtIHRvb2x0aXAncyBjb250ZW50XG4gICAqIEBwYXJhbSBvcHRpb25zIC0gc2hvd2luZyBzZXR0aW5nc1xuICAgKi9cbiAgc2hvdyhlLCB0LCBvKSB7XG4gICAgdGhpcy5saWIuc2hvdyhlLCB0LCBvKTtcbiAgfVxuICAvKipcbiAgICogSGlkZXMgdG9vbHRpcFxuICAgKlxuICAgKiBAcGFyYW0gc2tpcEhpZGluZ0RlbGF5IFx1MjAxNCBwYXNzIHRydWUgdG8gaW1tZWRpYXRlbHkgaGlkZSB0aGUgdG9vbHRpcFxuICAgKi9cbiAgaGlkZShlID0gITEpIHtcbiAgICB0aGlzLmxpYi5oaWRlKGUpO1xuICB9XG4gIC8qKlxuICAgKiBCaW5kcyAnbW91c2VlbnRlcicgYW5kICdtb3VzZWxlYXZlJyBldmVudHMgdGhhdCBzaG93cy9oaWRlcyB0aGUgVG9vbHRpcFxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gYW55IEhUTUwgZWxlbWVudCBpbiBET01cbiAgICogQHBhcmFtIGNvbnRlbnQgLSB0b29sdGlwJ3MgY29udGVudFxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNob3dpbmcgc2V0dGluZ3NcbiAgICovXG4gIG9uSG92ZXIoZSwgdCwgbykge1xuICAgIHRoaXMubGliLm9uSG92ZXIoZSwgdCwgbyk7XG4gIH1cbn1cbmNsYXNzIHhvIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24gLSBNb2R1bGUgQ29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5jb25maWcgLSBFZGl0b3IncyBjb25maWdcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uZXZlbnRzRGlzcGF0Y2hlciAtIEVkaXRvcidzIGV2ZW50IGRpc3BhdGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBjb25maWc6IGUsXG4gICAgICBldmVudHNEaXNwYXRjaGVyOiB0XG4gICAgfSksIHRoaXMudG9vbHRpcCA9IG5ldyBGZSgpO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95IE1vZHVsZVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnRvb2x0aXAuZGVzdHJveSgpO1xuICB9XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNob3c6IChlLCB0LCBvKSA9PiB0aGlzLnNob3coZSwgdCwgbyksXG4gICAgICBoaWRlOiAoKSA9PiB0aGlzLmhpZGUoKSxcbiAgICAgIG9uSG92ZXI6IChlLCB0LCBvKSA9PiB0aGlzLm9uSG92ZXIoZSwgdCwgbylcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2Qgc2hvdyB0b29sdGlwIG9uIGVsZW1lbnQgd2l0aCBwYXNzZWQgSFRNTCBjb250ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBlbGVtZW50IG9uIHdoaWNoIHRvb2x0aXAgc2hvdWxkIGJlIHNob3duXG4gICAqIEBwYXJhbSB7VG9vbHRpcENvbnRlbnR9IGNvbnRlbnQgLSB0b29sdGlwIGNvbnRlbnRcbiAgICogQHBhcmFtIHtUb29sdGlwT3B0aW9uc30gb3B0aW9ucyAtIHRvb2x0aXAgb3B0aW9uc1xuICAgKi9cbiAgc2hvdyhlLCB0LCBvKSB7XG4gICAgdGhpcy50b29sdGlwLnNob3coZSwgdCwgbyk7XG4gIH1cbiAgLyoqXG4gICAqIE1ldGhvZCBoaWRlcyB0b29sdGlwIG9uIEhUTUwgcGFnZVxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICB9XG4gIC8qKlxuICAgKiBEZWNvcmF0b3IgZm9yIHNob3dpbmcgVG9vbHRpcCBieSBtb3VzZWVudGVyL21vdXNlbGVhdmVcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgb24gd2hpY2ggdG9vbHRpcCBzaG91bGQgYmUgc2hvd25cbiAgICogQHBhcmFtIHtUb29sdGlwQ29udGVudH0gY29udGVudCAtIHRvb2x0aXAgY29udGVudFxuICAgKiBAcGFyYW0ge1Rvb2x0aXBPcHRpb25zfSBvcHRpb25zIC0gdG9vbHRpcCBvcHRpb25zXG4gICAqL1xuICBvbkhvdmVyKGUsIHQsIG8pIHtcbiAgICB0aGlzLnRvb2x0aXAub25Ib3ZlcihlLCB0LCBvKTtcbiAgfVxufVxuY2xhc3Mgd28gZXh0ZW5kcyBTIHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzIC8gZ2V0dGVyc1xuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vZGVzOiB0aGlzLmVkaXRvck5vZGVzXG4gICAgICAvKipcbiAgICAgICAqIFRoZXJlIGNhbiBiZSBhZGRlZCBzb21lIFVJIG1ldGhvZHMsIGxpa2UgdG9nZ2xlVGhpbk1vZGUoKSBldGNcbiAgICAgICAqL1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEV4cG9ydGVkIGNsYXNzZXNcbiAgICovXG4gIGdldCBlZGl0b3JOb2RlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBUb3AtbGV2ZWwgZWRpdG9yIGluc3RhbmNlIHdyYXBwZXJcbiAgICAgICAqL1xuICAgICAgd3JhcHBlcjogdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlcixcbiAgICAgIC8qKlxuICAgICAgICogRWxlbWVudCB0aGF0IGhvbGRzIGFsbCB0aGUgQmxvY2tzXG4gICAgICAgKi9cbiAgICAgIHJlZGFjdG9yOiB0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3RvclxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIHV0KHMsIGUpIHtcbiAgY29uc3QgdCA9IHt9O1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMocykuZm9yRWFjaCgoW28sIGldKSA9PiB7XG4gICAgaWYgKGooaSkpIHtcbiAgICAgIGNvbnN0IG4gPSBlID8gYCR7ZX0uJHtvfWAgOiBvO1xuICAgICAgT2JqZWN0LnZhbHVlcyhpKS5ldmVyeSgoYSkgPT4gSihhKSkgPyB0W29dID0gbiA6IHRbb10gPSB1dChpLCBuKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdFtvXSA9IGk7XG4gIH0pLCB0O1xufVxuY29uc3QgWCA9IHV0KHJ0KTtcbmZ1bmN0aW9uIHlvKHMsIGUpIHtcbiAgY29uc3QgdCA9IHt9O1xuICByZXR1cm4gT2JqZWN0LmtleXMocykuZm9yRWFjaCgobykgPT4ge1xuICAgIGNvbnN0IGkgPSBlW29dO1xuICAgIGkgIT09IHZvaWQgMCA/IHRbaV0gPSBzW29dIDogdFtvXSA9IHNbb107XG4gIH0pLCB0O1xufVxuY29uc3QgRW8gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTkgMTJMOSA3LjFDOSA3LjA0NDc3IDkuMDQ0NzcgNyA5LjEgN0gxMC40QzExLjUgNyAxNCA3LjEgMTQgOS41QzE0IDkuNSAxNCAxMiAxMSAxMk05IDEyVjE2LjhDOSAxNi45MTA1IDkuMDg5NTQgMTcgOS4yIDE3SDEyLjVDMTQgMTcgMTUgMTYgMTUgMTQuNUMxNSAxMS43MDQ2IDExIDEyIDExIDEyTTkgMTJIMTFcIi8+PC9zdmc+JywgcHQgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTcgMTBMMTEuODU4NiAxNC44NTg2QzExLjkzNjcgMTQuOTM2NyAxMi4wNjMzIDE0LjkzNjcgMTIuMTQxNCAxNC44NTg2TDE3IDEwXCIvPjwvc3ZnPicsIEJvID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk03IDE1TDExLjg1ODYgMTAuMTQxNEMxMS45MzY3IDEwLjA2MzMgMTIuMDYzMyAxMC4wNjMzIDEyLjE0MTQgMTAuMTQxNEwxNyAxNVwiLz48L3N2Zz4nLCBDbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOCA4TDEyIDEyTTEyIDEyTDE2IDE2TTEyIDEyTDE2IDhNMTIgMTJMOCAxNlwiLz48L3N2Zz4nLCBUbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjRcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIvPjwvc3ZnPicsIFNvID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xMy4zNCAxMEMxMi40MjIzIDEyLjczMzcgMTEgMTcgMTEgMTdcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE0LjIxIDdIMTQuMlwiLz48L3N2Zz4nLCBxZSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNy42OTk5OCAxMi42TDcuNjc4OTYgMTIuNjJDNi41Mzk5MyAxMy43MDQ4IDYuNTIwMTIgMTUuNTE1NSA3LjYzNTE2IDE2LjYyNVYxNi42MjVDOC43MjI5MyAxNy43MDczIDEwLjQ3OTkgMTcuNzEwMiAxMS41NzEyIDE2LjYzMTRMMTMuMDI2MyAxNS4xOTNDMTQuMDcwMyAxNC4xNjA5IDE0LjIxNDEgMTIuNTI1IDEzLjM2NjIgMTEuMzI2NkwxMy4yMiAxMS4xMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTYuMjIgMTEuMTJMMTYuMzU2NCAxMC45ODA1QzE3LjI4OTUgMTAuMDI2NSAxNy4zNDc4IDguNTIwNyAxNi40OTE0IDcuNDk3MzNWNy40OTczM0MxNS41NjkxIDYuMzk1MDkgMTMuOTI2OSA2LjI1MTQzIDEyLjgyNzEgNy4xNzY3NUwxMS4zOTAxIDguMzg1ODhDMTAuMDkzNSA5LjQ3Njc0IDkuOTU3MDYgMTEuNDI0MSAxMS4wODg4IDEyLjY4NTJMMTEuMTIgMTIuNzJcIi8+PC9zdmc+JywgSW8gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjIuNlwiIGQ9XCJNOS40MDk5OSA3LjI5OTk5SDkuNFwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMi42XCIgZD1cIk0xNC42IDcuMjk5OTlIMTQuNTlcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjIuNlwiIGQ9XCJNOS4zMDk5OSAxMkg5LjNcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjIuNlwiIGQ9XCJNMTQuNiAxMkgxNC41OVwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMi42XCIgZD1cIk05LjQwOTk5IDE2LjdIOS40XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyLjZcIiBkPVwiTTE0LjYgMTYuN0gxNC41OVwiLz48L3N2Zz4nLCBNbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTIgN1YxMk0xMiAxN1YxMk0xNyAxMkgxMk0xMiAxMkg3XCIvPjwvc3ZnPicsIExvID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxjaXJjbGUgY3g9XCIxMC41XCIgY3k9XCIxMC41XCIgcj1cIjUuNVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+PGxpbmUgeDE9XCIxNS40MTQyXCIgeDI9XCIxOVwiIHkxPVwiMTVcIiB5Mj1cIjE4LjU4NThcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48L3N2Zz4nLCBPbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTUuNzc5NSAxMS41QzE1Ljc3OTUgMTEuNSAxNi4wNTMgMTEuMTk2MiAxNi41NDk3IDEwLjY3MjJDMTcuNDQ0MiA5LjcyODU2IDE3LjQ3MDEgOC4yNDc1IDE2LjU3ODEgNy4zMDE0NVY3LjMwMTQ1QzE1LjY0ODIgNi4zMTUyMiAxNC4wODczIDYuMjkyMjcgMTMuMTI4OCA3LjI1MDczTDExLjg3OTYgOC40OTk5OVwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOC4yNDUxNyAxMi4zODgzQzguMjQ1MTcgMTIuMzg4MyA3Ljk3MTcxIDEyLjY5MjIgNy40NzUwNCAxMy4yMTYxQzYuNTgwNTEgMTQuMTU5OCA2LjU1NDY3IDE1LjY0MDggNy40NDY2NiAxNi41ODY5VjE2LjU4NjlDOC4zNzY1MyAxNy41NzMxIDkuOTM3NDQgMTcuNTk2MSAxMC44OTU5IDE2LjYzNzZMMTIuMTQ1MiAxNS4zODgzXCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNy43ODAyIDE1LjEwMzJMMTYuNTk3IDE0Ljk0MjJDMTYuMDEwOSAxNC44NjI0IDE1LjQ4NDEgMTUuMzA1OSAxNS40NjI3IDE1Ljg5NjlMMTUuNDE5OSAxNy4wODE4XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk02LjM5MDY0IDkuMDMyMzhMNy41ODQzMiA5LjA2NjY4QzguMTc1NTEgOS4wODM2NiA4LjY1MjIgOC41ODY2NSA4LjYxMDU2IDcuOTk2NjlMOC41MjcxIDYuODEzOTdcIi8+PGxpbmUgeDE9XCIxMi4xMTQyXCIgeDI9XCIxMS43XCIgeTE9XCIxMi4yXCIgeTI9XCIxMS43ODU4XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIi8+PC9zdmc+JztcbmNsYXNzIFAge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBwb3BvdmVyIGl0ZW0gaW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIHBvcG92ZXIgaXRlbSBjb25zdHJ1Y3Rpb24gcGFyYW1zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5ub2RlcyA9IHtcbiAgICAgIHJvb3Q6IG51bGwsXG4gICAgICBpY29uOiBudWxsXG4gICAgfSwgdGhpcy5jb25maXJtYXRpb25TdGF0ZSA9IG51bGwsIHRoaXMucmVtb3ZlU3BlY2lhbEZvY3VzQmVoYXZpb3IgPSAoKSA9PiB7XG4gICAgICB0aGlzLm5vZGVzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShQLkNTUy5ub0ZvY3VzKTtcbiAgICB9LCB0aGlzLnJlbW92ZVNwZWNpYWxIb3ZlckJlaGF2aW9yID0gKCkgPT4ge1xuICAgICAgdGhpcy5ub2Rlcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoUC5DU1Mubm9Ib3Zlcik7XG4gICAgfSwgdGhpcy5vbkVycm9yQW5pbWF0aW9uRW5kID0gKCkgPT4ge1xuICAgICAgdGhpcy5ub2Rlcy5pY29uLmNsYXNzTGlzdC5yZW1vdmUoUC5DU1Mud29iYmxlQW5pbWF0aW9uKSwgdGhpcy5ub2Rlcy5pY29uLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgdGhpcy5vbkVycm9yQW5pbWF0aW9uRW5kKTtcbiAgICB9LCB0aGlzLnBhcmFtcyA9IGUsIHRoaXMubm9kZXMucm9vdCA9IHRoaXMubWFrZShlKTtcbiAgfVxuICAvKipcbiAgICogVHJ1ZSBpZiBpdGVtIGlzIGRpc2FibGVkIGFuZCBoZW5jZSBub3QgY2xpY2thYmxlXG4gICAqL1xuICBnZXQgaXNEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMuaXNEaXNhYmxlZDtcbiAgfVxuICAvKipcbiAgICogRXhwb3NlcyBwb3BvdmVyIGl0ZW0gdG9nZ2xlIHBhcmFtZXRlclxuICAgKi9cbiAgZ2V0IHRvZ2dsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMudG9nZ2xlO1xuICB9XG4gIC8qKlxuICAgKiBJdGVtIHRpdGxlXG4gICAqL1xuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLnRpdGxlO1xuICB9XG4gIC8qKlxuICAgKiBUcnVlIGlmIHBvcG92ZXIgc2hvdWxkIGNsb3NlIG9uY2UgaXRlbSBpcyBhY3RpdmF0ZWRcbiAgICovXG4gIGdldCBjbG9zZU9uQWN0aXZhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLmNsb3NlT25BY3RpdmF0ZTtcbiAgfVxuICAvKipcbiAgICogVHJ1ZSBpZiBjb25maXJtYXRpb24gc3RhdGUgaXMgZW5hYmxlZCBmb3IgcG9wb3ZlciBpdGVtXG4gICAqL1xuICBnZXQgaXNDb25maXJtYXRpb25TdGF0ZUVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlybWF0aW9uU3RhdGUgIT09IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFRydWUgaWYgaXRlbSBpcyBmb2N1c2VkIGluIGtleWJvYXJkIG5hdmlnYXRpb24gcHJvY2Vzc1xuICAgKi9cbiAgZ2V0IGlzRm9jdXNlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhQLkNTUy5mb2N1c2VkKTtcbiAgfVxuICAvKipcbiAgICogUG9wb3ZlciBpdGVtIENTUyBjbGFzc2VzXG4gICAqL1xuICBzdGF0aWMgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGFpbmVyOiBcImNlLXBvcG92ZXItaXRlbVwiLFxuICAgICAgdGl0bGU6IFwiY2UtcG9wb3Zlci1pdGVtX190aXRsZVwiLFxuICAgICAgc2Vjb25kYXJ5VGl0bGU6IFwiY2UtcG9wb3Zlci1pdGVtX19zZWNvbmRhcnktdGl0bGVcIixcbiAgICAgIGljb246IFwiY2UtcG9wb3Zlci1pdGVtX19pY29uXCIsXG4gICAgICBhY3RpdmU6IFwiY2UtcG9wb3Zlci1pdGVtLS1hY3RpdmVcIixcbiAgICAgIGRpc2FibGVkOiBcImNlLXBvcG92ZXItaXRlbS0tZGlzYWJsZWRcIixcbiAgICAgIGZvY3VzZWQ6IFwiY2UtcG9wb3Zlci1pdGVtLS1mb2N1c2VkXCIsXG4gICAgICBoaWRkZW46IFwiY2UtcG9wb3Zlci1pdGVtLS1oaWRkZW5cIixcbiAgICAgIGNvbmZpcm1hdGlvblN0YXRlOiBcImNlLXBvcG92ZXItaXRlbS0tY29uZmlybWF0aW9uXCIsXG4gICAgICBub0hvdmVyOiBcImNlLXBvcG92ZXItaXRlbS0tbm8taG92ZXJcIixcbiAgICAgIG5vRm9jdXM6IFwiY2UtcG9wb3Zlci1pdGVtLS1uby1mb2N1c1wiLFxuICAgICAgd29iYmxlQW5pbWF0aW9uOiBcIndvYmJsZVwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBwb3BvdmVyIGl0ZW0gcm9vdCBlbGVtZW50XG4gICAqL1xuICBnZXRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLnJvb3Q7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBwb3BvdmVyIGl0ZW0gY2xpY2tcbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIGlmICh0aGlzLmlzQ29uZmlybWF0aW9uU3RhdGVFbmFibGVkKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlKHRoaXMuY29uZmlybWF0aW9uU3RhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlKHRoaXMucGFyYW1zKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyBpdGVtIGFjdGl2ZSBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gaXNBY3RpdmUgLSB0cnVlIGlmIGl0ZW0gc2hvdWxkIHN0cmljdGx5IHNob3VsZCBiZWNvbWUgYWN0aXZlXG4gICAqL1xuICB0b2dnbGVBY3RpdmUoZSkge1xuICAgIHRoaXMubm9kZXMucm9vdC5jbGFzc0xpc3QudG9nZ2xlKFAuQ1NTLmFjdGl2ZSwgZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgaXRlbSBoaWRkZW4gc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIGlzSGlkZGVuIC0gdHJ1ZSBpZiBpdGVtIHNob3VsZCBiZSBoaWRkZW5cbiAgICovXG4gIHRvZ2dsZUhpZGRlbihlKSB7XG4gICAgdGhpcy5ub2Rlcy5yb290LmNsYXNzTGlzdC50b2dnbGUoUC5DU1MuaGlkZGVuLCBlKTtcbiAgfVxuICAvKipcbiAgICogUmVzZXRzIHBvcG92ZXIgaXRlbSB0byBpdHMgb3JpZ2luYWwgc3RhdGVcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuaXNDb25maXJtYXRpb25TdGF0ZUVuYWJsZWQgJiYgdGhpcy5kaXNhYmxlQ29uZmlybWF0aW9uTW9kZSgpO1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgY2FsbGVkIG9uY2UgaXRlbSBiZWNvbWVzIGZvY3VzZWQgZHVyaW5nIGtleWJvYXJkIG5hdmlnYXRpb25cbiAgICovXG4gIG9uRm9jdXMoKSB7XG4gICAgdGhpcy5kaXNhYmxlU3BlY2lhbEhvdmVyQW5kRm9jdXNCZWhhdmlvcigpO1xuICB9XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIEhUTUwgZWxlbWVudCBjb3JyZXNwb25kaW5nIHRvIHBvcG92ZXIgaXRlbSBwYXJhbXNcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIGl0ZW0gY29uc3RydWN0aW9uIHBhcmFtc1xuICAgKi9cbiAgbWFrZShlKSB7XG4gICAgY29uc3QgdCA9IGQubWFrZShcImRpdlwiLCBQLkNTUy5jb250YWluZXIpO1xuICAgIHJldHVybiBlLm5hbWUgJiYgKHQuZGF0YXNldC5pdGVtTmFtZSA9IGUubmFtZSksIHRoaXMubm9kZXMuaWNvbiA9IGQubWFrZShcImRpdlwiLCBQLkNTUy5pY29uLCB7XG4gICAgICBpbm5lckhUTUw6IGUuaWNvbiB8fCBUb1xuICAgIH0pLCB0LmFwcGVuZENoaWxkKHRoaXMubm9kZXMuaWNvbiksIHQuYXBwZW5kQ2hpbGQoZC5tYWtlKFwiZGl2XCIsIFAuQ1NTLnRpdGxlLCB7XG4gICAgICBpbm5lckhUTUw6IGUudGl0bGUgfHwgXCJcIlxuICAgIH0pKSwgZS5zZWNvbmRhcnlMYWJlbCAmJiB0LmFwcGVuZENoaWxkKGQubWFrZShcImRpdlwiLCBQLkNTUy5zZWNvbmRhcnlUaXRsZSwge1xuICAgICAgdGV4dENvbnRlbnQ6IGUuc2Vjb25kYXJ5TGFiZWxcbiAgICB9KSksIGUuaXNBY3RpdmUgJiYgdC5jbGFzc0xpc3QuYWRkKFAuQ1NTLmFjdGl2ZSksIGUuaXNEaXNhYmxlZCAmJiB0LmNsYXNzTGlzdC5hZGQoUC5DU1MuZGlzYWJsZWQpLCB0O1xuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgY29uZmlybWF0aW9uIG1vZGUgZm9yIHRoZSBpdGVtLlxuICAgKlxuICAgKiBAcGFyYW0gbmV3U3RhdGUgLSBuZXcgcG9wb3ZlciBpdGVtIHBhcmFtcyB0aGF0IHNob3VsZCBiZSBhcHBsaWVkXG4gICAqL1xuICBlbmFibGVDb25maXJtYXRpb25Nb2RlKGUpIHtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgLi4udGhpcy5wYXJhbXMsXG4gICAgICAuLi5lLFxuICAgICAgY29uZmlybWF0aW9uOiBlLmNvbmZpcm1hdGlvblxuICAgIH0sIG8gPSB0aGlzLm1ha2UodCk7XG4gICAgdGhpcy5ub2Rlcy5yb290LmlubmVySFRNTCA9IG8uaW5uZXJIVE1MLCB0aGlzLm5vZGVzLnJvb3QuY2xhc3NMaXN0LmFkZChQLkNTUy5jb25maXJtYXRpb25TdGF0ZSksIHRoaXMuY29uZmlybWF0aW9uU3RhdGUgPSBlLCB0aGlzLmVuYWJsZVNwZWNpYWxIb3ZlckFuZEZvY3VzQmVoYXZpb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpdGVtIHRvIGl0cyBvcmlnaW5hbCBzdGF0ZVxuICAgKi9cbiAgZGlzYWJsZUNvbmZpcm1hdGlvbk1vZGUoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMubWFrZSh0aGlzLnBhcmFtcyk7XG4gICAgdGhpcy5ub2Rlcy5yb290LmlubmVySFRNTCA9IGUuaW5uZXJIVE1MLCB0aGlzLm5vZGVzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShQLkNTUy5jb25maXJtYXRpb25TdGF0ZSksIHRoaXMuY29uZmlybWF0aW9uU3RhdGUgPSBudWxsLCB0aGlzLmRpc2FibGVTcGVjaWFsSG92ZXJBbmRGb2N1c0JlaGF2aW9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZXMgc3BlY2lhbCBmb2N1cyBhbmQgaG92ZXIgYmVoYXZpb3IgZm9yIGl0ZW0gaW4gY29uZmlybWF0aW9uIHN0YXRlLlxuICAgKiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50IGl0ZW0gZnJvbSBiZWluZyBoaWdobGlnaHRlZCBhcyBob3ZlcmVkL2ZvY3VzZWQganVzdCBhZnRlciBjbGljay5cbiAgICovXG4gIGVuYWJsZVNwZWNpYWxIb3ZlckFuZEZvY3VzQmVoYXZpb3IoKSB7XG4gICAgdGhpcy5ub2Rlcy5yb290LmNsYXNzTGlzdC5hZGQoUC5DU1Mubm9Ib3ZlciksIHRoaXMubm9kZXMucm9vdC5jbGFzc0xpc3QuYWRkKFAuQ1NTLm5vRm9jdXMpLCB0aGlzLm5vZGVzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5yZW1vdmVTcGVjaWFsSG92ZXJCZWhhdmlvciwgeyBvbmNlOiAhMCB9KTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgc3BlY2lhbCBmb2N1cyBhbmQgaG92ZXIgYmVoYXZpb3JcbiAgICovXG4gIGRpc2FibGVTcGVjaWFsSG92ZXJBbmRGb2N1c0JlaGF2aW9yKCkge1xuICAgIHRoaXMucmVtb3ZlU3BlY2lhbEZvY3VzQmVoYXZpb3IoKSwgdGhpcy5yZW1vdmVTcGVjaWFsSG92ZXJCZWhhdmlvcigpLCB0aGlzLm5vZGVzLnJvb3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5yZW1vdmVTcGVjaWFsSG92ZXJCZWhhdmlvcik7XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGl0ZW0ncyBvbkFjdGl2YXRlIGNhbGxiYWNrIGlmIHRoZSBpdGVtIGhhcyBubyBjb25maXJtYXRpb24gY29uZmlndXJlZFxuICAgKlxuICAgKiBAcGFyYW0gaXRlbSAtIGl0ZW0gdG8gYWN0aXZhdGUgb3IgYnJpbmcgdG8gY29uZmlybWF0aW9uIG1vZGVcbiAgICovXG4gIGFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlKGUpIHtcbiAgICBpZiAoZS5jb25maXJtYXRpb24gPT09IHZvaWQgMClcbiAgICAgIHRyeSB7XG4gICAgICAgIGUub25BY3RpdmF0ZShlKSwgdGhpcy5kaXNhYmxlQ29uZmlybWF0aW9uTW9kZSgpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHRoaXMuYW5pbWF0ZUVycm9yKCk7XG4gICAgICB9XG4gICAgZWxzZVxuICAgICAgdGhpcy5lbmFibGVDb25maXJtYXRpb25Nb2RlKGUuY29uZmlybWF0aW9uKTtcbiAgfVxuICAvKipcbiAgICogQW5pbWF0ZXMgaXRlbSB3aGljaCBzeW1ib2xpemVzIHRoYXQgZXJyb3Igb2NjdXJlZCB3aGlsZSBleGVjdXRpbmcgJ29uQWN0aXZhdGUoKScgY2FsbGJhY2tcbiAgICovXG4gIGFuaW1hdGVFcnJvcigpIHtcbiAgICB0aGlzLm5vZGVzLmljb24uY2xhc3NMaXN0LmNvbnRhaW5zKFAuQ1NTLndvYmJsZUFuaW1hdGlvbikgfHwgKHRoaXMubm9kZXMuaWNvbi5jbGFzc0xpc3QuYWRkKFAuQ1NTLndvYmJsZUFuaW1hdGlvbiksIHRoaXMubm9kZXMuaWNvbi5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIHRoaXMub25FcnJvckFuaW1hdGlvbkVuZCkpO1xuICB9XG59XG5jb25zdCBjZSA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnRbXX0gbm9kZUxpc3QgXHUyMDE0IHRoZSBsaXN0IG9mIGl0ZXJhYmxlIEhUTUwtaXRlbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvY3VzZWRDc3NDbGFzcyAtIHVzZXItcHJvdmlkZWQgQ1NTLWNsYXNzIHRoYXQgd2lsbCBiZSBzZXQgaW4gZmxpcHBpbmcgcHJvY2Vzc1xuICAgKi9cbiAgY29uc3RydWN0b3IocywgZSkge1xuICAgIHRoaXMuY3Vyc29yID0gLTEsIHRoaXMuaXRlbXMgPSBbXSwgdGhpcy5pdGVtcyA9IHMgfHwgW10sIHRoaXMuZm9jdXNlZENzc0NsYXNzID0gZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBGb2N1c2VkIGJ1dHRvbiBOb2RlXG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdldCBjdXJyZW50SXRlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJzb3IgPT09IC0xID8gbnVsbCA6IHRoaXMuaXRlbXNbdGhpcy5jdXJzb3JdO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGN1cnNvciB0byBzcGVjaWZpZWQgcG9zaXRpb25cbiAgICpcbiAgICogQHBhcmFtIGN1cnNvclBvc2l0aW9uIC0gbmV3IGN1cnNvciBwb3NpdGlvblxuICAgKi9cbiAgc2V0Q3Vyc29yKHMpIHtcbiAgICBzIDwgdGhpcy5pdGVtcy5sZW5ndGggJiYgcyA+PSAtMSAmJiAodGhpcy5kcm9wQ3Vyc29yKCksIHRoaXMuY3Vyc29yID0gcywgdGhpcy5pdGVtc1t0aGlzLmN1cnNvcl0uY2xhc3NMaXN0LmFkZCh0aGlzLmZvY3VzZWRDc3NDbGFzcykpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGl0ZW1zLiBDYW4gYmUgdXNlZCB3aGVuIGl0ZXJhYmxlIGl0ZW1zIGNoYW5nZWQgZHluYW1pY2FsbHlcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudFtdfSBub2RlTGlzdCAtIG5vZGVzIHRvIGl0ZXJhdGVcbiAgICovXG4gIHNldEl0ZW1zKHMpIHtcbiAgICB0aGlzLml0ZW1zID0gcztcbiAgfVxuICAvKipcbiAgICogU2V0cyBjdXJzb3IgbmV4dCB0byB0aGUgY3VycmVudFxuICAgKi9cbiAgbmV4dCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMubGVhZk5vZGVzQW5kUmV0dXJuSW5kZXgoY2UuZGlyZWN0aW9ucy5SSUdIVCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgY3Vyc29yIGJlZm9yZSBjdXJyZW50XG4gICAqL1xuICBwcmV2aW91cygpIHtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMubGVhZk5vZGVzQW5kUmV0dXJuSW5kZXgoY2UuZGlyZWN0aW9ucy5MRUZUKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBjdXJzb3IgdG8gdGhlIGRlZmF1bHQgcG9zaXRpb24gYW5kIHJlbW92ZXMgQ1NTLWNsYXNzIGZyb20gcHJldmlvdXNseSBmb2N1c2VkIGl0ZW1cbiAgICovXG4gIGRyb3BDdXJzb3IoKSB7XG4gICAgdGhpcy5jdXJzb3IgIT09IC0xICYmICh0aGlzLml0ZW1zW3RoaXMuY3Vyc29yXS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuZm9jdXNlZENzc0NsYXNzKSwgdGhpcy5jdXJzb3IgPSAtMSk7XG4gIH1cbiAgLyoqXG4gICAqIExlYWZzIG5vZGVzIGluc2lkZSB0aGUgdGFyZ2V0IGxpc3QgZnJvbSBhY3RpdmUgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0aW9uIC0gbGVhZiBkaXJlY3Rpb24uIENhbiBiZSAnbGVmdCcgb3IgJ3JpZ2h0J1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBpbmRleCBvZiBmb2N1c2VkIG5vZGVcbiAgICovXG4gIGxlYWZOb2Rlc0FuZFJldHVybkluZGV4KHMpIHtcbiAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJzb3I7XG4gICAgbGV0IGUgPSB0aGlzLmN1cnNvcjtcbiAgICByZXR1cm4gZSA9PT0gLTEgPyBlID0gcyA9PT0gY2UuZGlyZWN0aW9ucy5SSUdIVCA/IC0xIDogMCA6IHRoaXMuaXRlbXNbZV0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmZvY3VzZWRDc3NDbGFzcyksIHMgPT09IGNlLmRpcmVjdGlvbnMuUklHSFQgPyBlID0gKGUgKyAxKSAlIHRoaXMuaXRlbXMubGVuZ3RoIDogZSA9ICh0aGlzLml0ZW1zLmxlbmd0aCArIGUgLSAxKSAlIHRoaXMuaXRlbXMubGVuZ3RoLCBkLmNhblNldENhcmV0KHRoaXMuaXRlbXNbZV0pICYmIG9lKCgpID0+IG0uc2V0Q3Vyc29yKHRoaXMuaXRlbXNbZV0pLCA1MCkoKSwgdGhpcy5pdGVtc1tlXS5jbGFzc0xpc3QuYWRkKHRoaXMuZm9jdXNlZENzc0NsYXNzKSwgZTtcbiAgfVxufTtcbmxldCBuZSA9IGNlO1xubmUuZGlyZWN0aW9ucyA9IHtcbiAgUklHSFQ6IFwicmlnaHRcIixcbiAgTEVGVDogXCJsZWZ0XCJcbn07XG5jbGFzcyBHIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RmxpcHBlck9wdGlvbnN9IG9wdGlvbnMgLSBkaWZmZXJlbnQgY29uc3RydWN0aW5nIHNldHRpbmdzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5pdGVyYXRvciA9IG51bGwsIHRoaXMuYWN0aXZhdGVkID0gITEsIHRoaXMuZmxpcENhbGxiYWNrcyA9IFtdLCB0aGlzLm9uS2V5RG93biA9ICh0KSA9PiB7XG4gICAgICBpZiAodGhpcy5pc0V2ZW50UmVhZHlGb3JIYW5kbGluZyh0KSlcbiAgICAgICAgc3dpdGNoIChHLnVzZWRLZXlzLmluY2x1ZGVzKHQua2V5Q29kZSkgJiYgdC5wcmV2ZW50RGVmYXVsdCgpLCB0LmtleUNvZGUpIHtcbiAgICAgICAgICBjYXNlIEIuVEFCOlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVUYWJQcmVzcyh0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQi5MRUZUOlxuICAgICAgICAgIGNhc2UgQi5VUDpcbiAgICAgICAgICAgIHRoaXMuZmxpcExlZnQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQi5SSUdIVDpcbiAgICAgICAgICBjYXNlIEIuRE9XTjpcbiAgICAgICAgICAgIHRoaXMuZmxpcFJpZ2h0KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIEIuRU5URVI6XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVudGVyUHJlc3ModCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0sIHRoaXMuaXRlcmF0b3IgPSBuZXcgbmUoZS5pdGVtcywgZS5mb2N1c2VkSXRlbUNsYXNzKSwgdGhpcy5hY3RpdmF0ZUNhbGxiYWNrID0gZS5hY3RpdmF0ZUNhbGxiYWNrLCB0aGlzLmFsbG93ZWRLZXlzID0gZS5hbGxvd2VkS2V5cyB8fCBHLnVzZWRLZXlzO1xuICB9XG4gIC8qKlxuICAgKiBUcnVlIGlmIGZsaXBwZXIgaXMgY3VycmVudGx5IGFjdGl2YXRlZFxuICAgKi9cbiAgZ2V0IGlzQWN0aXZhdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2YXRlZDtcbiAgfVxuICAvKipcbiAgICogQXJyYXkgb2Yga2V5cyAoY29kZXMpIHRoYXQgaXMgaGFuZGxlZCBieSBGbGlwcGVyXG4gICAqIFVzZWQgdG86XG4gICAqICAtIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIHRoaXMga2V5cywgbm90IGFsbCBrZXlkb3ducyAoQHNlZSBjb25zdHJ1Y3RvcilcbiAgICogIC0gdG8gc2tpcCBleHRlcm5hbCBiZWhhdmlvdXJzIG9ubHkgZm9yIHRoZXNlIGtleXMsIHdoZW4gZmlsbGVyIGlzIGFjdGl2YXRlZCAoQHNlZSBCbG9ja0V2ZW50c0BhcnJvd1JpZ2h0QW5kRG93bilcbiAgICovXG4gIHN0YXRpYyBnZXQgdXNlZEtleXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIEIuVEFCLFxuICAgICAgQi5MRUZULFxuICAgICAgQi5SSUdIVCxcbiAgICAgIEIuRU5URVIsXG4gICAgICBCLlVQLFxuICAgICAgQi5ET1dOXG4gICAgXTtcbiAgfVxuICAvKipcbiAgICogQWN0aXZlIHRhYi9hcnJvd3MgaGFuZGxpbmcgYnkgZmxpcHBlclxuICAgKlxuICAgKiBAcGFyYW0gaXRlbXMgLSBTb21lIG1vZHVsZXMgKGxpa2UsIElubGluZVRvb2xiYXIsIEJsb2NrU2V0dGluZ3MpIG1pZ2h0IHJlZnJlc2ggYnV0dG9ucyBkeW5hbWljYWxseVxuICAgKiBAcGFyYW0gY3Vyc29yUG9zaXRpb24gLSBpbmRleCBvZiB0aGUgaXRlbSB0aGF0IHNob3VsZCBiZSBmb2N1c2VkIG9uY2UgZmxpcHBlciBpcyBhY3RpdmF0ZWRcbiAgICovXG4gIGFjdGl2YXRlKGUsIHQpIHtcbiAgICB0aGlzLmFjdGl2YXRlZCA9ICEwLCBlICYmIHRoaXMuaXRlcmF0b3Iuc2V0SXRlbXMoZSksIHQgIT09IHZvaWQgMCAmJiB0aGlzLml0ZXJhdG9yLnNldEN1cnNvcih0KSwgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24sICEwKTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSB0YWIvYXJyb3dzIGhhbmRsaW5nIGJ5IGZsaXBwZXJcbiAgICovXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5hY3RpdmF0ZWQgPSAhMSwgdGhpcy5kcm9wQ3Vyc29yKCksIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMub25LZXlEb3duKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXMgZmlyc3QgaXRlbVxuICAgKi9cbiAgZm9jdXNGaXJzdCgpIHtcbiAgICB0aGlzLmRyb3BDdXJzb3IoKSwgdGhpcy5mbGlwUmlnaHQoKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXNlcyBwcmV2aW91cyBmbGlwcGVyIGl0ZXJhdG9yIGl0ZW1cbiAgICovXG4gIGZsaXBMZWZ0KCkge1xuICAgIHRoaXMuaXRlcmF0b3IucHJldmlvdXMoKSwgdGhpcy5mbGlwQ2FsbGJhY2soKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXNlcyBuZXh0IGZsaXBwZXIgaXRlcmF0b3IgaXRlbVxuICAgKi9cbiAgZmxpcFJpZ2h0KCkge1xuICAgIHRoaXMuaXRlcmF0b3IubmV4dCgpLCB0aGlzLmZsaXBDYWxsYmFjaygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSBpZiBzb21lIGJ1dHRvbiBpcyBmb2N1c2VkXG4gICAqL1xuICBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gISF0aGlzLml0ZXJhdG9yLmN1cnJlbnRJdGVtO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlcmVzIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGV4ZWN1dGVkIG9uIGVhY2ggbmF2aWdhdGlvbiBhY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIGNiIC0gZnVuY3Rpb24gdG8gZXhlY3V0ZVxuICAgKi9cbiAgb25GbGlwKGUpIHtcbiAgICB0aGlzLmZsaXBDYWxsYmFja3MucHVzaChlKTtcbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlcmVzIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gZWFjaCBuYXZpZ2F0aW9uIGFjdGlvblxuICAgKlxuICAgKiBAcGFyYW0gY2IgLSBmdW5jdGlvbiB0byBzdG9wIGV4ZWN1dGluZ1xuICAgKi9cbiAgcmVtb3ZlT25GbGlwKGUpIHtcbiAgICB0aGlzLmZsaXBDYWxsYmFja3MgPSB0aGlzLmZsaXBDYWxsYmFja3MuZmlsdGVyKCh0KSA9PiB0ICE9PSBlKTtcbiAgfVxuICAvKipcbiAgICogRHJvcHMgZmxpcHBlcidzIGl0ZXJhdG9yIGN1cnNvclxuICAgKlxuICAgKiBAc2VlIERvbUl0ZXJhdG9yI2Ryb3BDdXJzb3JcbiAgICovXG4gIGRyb3BDdXJzb3IoKSB7XG4gICAgdGhpcy5pdGVyYXRvci5kcm9wQ3Vyc29yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgZmlyZWQgYmVmb3JlIGhhbmRsaW5nIGZsaXBwZXIga2V5Y29kZXNcbiAgICogVGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIGRlZmluZXMgaWYgaXQgaXMgbmVlZCB0byBiZSBoYW5kbGVkIG9yIG5vdFxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5ZG93biBrZXlib2FyZCBldmVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRXZlbnRSZWFkeUZvckhhbmRsaW5nKGUpIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmF0ZWQgJiYgdGhpcy5hbGxvd2VkS2V5cy5pbmNsdWRlcyhlLmtleUNvZGUpO1xuICB9XG4gIC8qKlxuICAgKiBXaGVuIGZsaXBwZXIgaXMgYWN0aXZhdGVkIHRhYiBwcmVzcyB3aWxsIGxlYWYgdGhlIGl0ZW1zXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSB0YWIga2V5ZG93biBldmVudFxuICAgKi9cbiAgaGFuZGxlVGFiUHJlc3MoZSkge1xuICAgIHN3aXRjaCAoZS5zaGlmdEtleSA/IG5lLmRpcmVjdGlvbnMuTEVGVCA6IG5lLmRpcmVjdGlvbnMuUklHSFQpIHtcbiAgICAgIGNhc2UgbmUuZGlyZWN0aW9ucy5SSUdIVDpcbiAgICAgICAgdGhpcy5mbGlwUmlnaHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIG5lLmRpcmVjdGlvbnMuTEVGVDpcbiAgICAgICAgdGhpcy5mbGlwTGVmdCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEVudGVyIHByZXNzIHdpbGwgY2xpY2sgY3VycmVudCBpdGVtIGlmIGZsaXBwZXIgaXMgYWN0aXZhdGVkXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBlbnRlciBrZXlkb3duIGV2ZW50XG4gICAqL1xuICBoYW5kbGVFbnRlclByZXNzKGUpIHtcbiAgICB0aGlzLmFjdGl2YXRlZCAmJiAodGhpcy5pdGVyYXRvci5jdXJyZW50SXRlbSAmJiAoZS5zdG9wUHJvcGFnYXRpb24oKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLml0ZXJhdG9yLmN1cnJlbnRJdGVtLmNsaWNrKCkpLCBEKHRoaXMuYWN0aXZhdGVDYWxsYmFjaykgJiYgdGhpcy5hY3RpdmF0ZUNhbGxiYWNrKHRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0pKTtcbiAgfVxuICAvKipcbiAgICogRmlyZWQgYWZ0ZXIgZmxpcHBpbmcgaW4gYW55IGRpcmVjdGlvblxuICAgKi9cbiAgZmxpcENhbGxiYWNrKCkge1xuICAgIHRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0gJiYgdGhpcy5pdGVyYXRvci5jdXJyZW50SXRlbS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKCksIHRoaXMuZmxpcENhbGxiYWNrcy5mb3JFYWNoKChlKSA9PiBlKCkpO1xuICB9XG59XG5jbGFzcyB1ZSB7XG4gIC8qKlxuICAgKiBTdHlsZXNcbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cmFwcGVyOiBcImNkeC1zZWFyY2gtZmllbGRcIixcbiAgICAgIGljb246IFwiY2R4LXNlYXJjaC1maWVsZF9faWNvblwiLFxuICAgICAgaW5wdXQ6IFwiY2R4LXNlYXJjaC1maWVsZF9faW5wdXRcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gYXZhaWxhYmxlIGNvbmZpZ1xuICAgKiBAcGFyYW0gb3B0aW9ucy5pdGVtcyAtIHNlYXJjaGFibGUgaXRlbXMgbGlzdFxuICAgKiBAcGFyYW0gb3B0aW9ucy5vblNlYXJjaCAtIHNlYXJjaCBjYWxsYmFja1xuICAgKiBAcGFyYW0gb3B0aW9ucy5wbGFjZWhvbGRlciAtIGlucHV0IHBsYWNlaG9sZGVyXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zOiBlLCBvblNlYXJjaDogdCwgcGxhY2Vob2xkZXI6IG8gfSkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IFJlKCksIHRoaXMuaXRlbXMgPSBlLCB0aGlzLm9uU2VhcmNoID0gdCwgdGhpcy5yZW5kZXIobyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc2VhcmNoIGZpZWxkIGVsZW1lbnRcbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMud3JhcHBlcjtcbiAgfVxuICAvKipcbiAgICogU2V0cyBmb2N1cyB0byB0aGUgaW5wdXRcbiAgICovXG4gIGZvY3VzKCkge1xuICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIHNlYXJjaCBxdWVyeSBhbmQgcmVzdWx0c1xuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5pbnB1dC52YWx1ZSA9IFwiXCIsIHRoaXMuc2VhcmNoUXVlcnkgPSBcIlwiLCB0aGlzLm9uU2VhcmNoKFwiXCIsIHRoaXMuZm91bmRJdGVtcyk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBtZW1vcnlcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMucmVtb3ZlQWxsKCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHNlYXJjaCBmaWVsZFxuICAgKlxuICAgKiBAcGFyYW0gcGxhY2Vob2xkZXIgLSBpbnB1dCBwbGFjZWhvbGRlclxuICAgKi9cbiAgcmVuZGVyKGUpIHtcbiAgICB0aGlzLndyYXBwZXIgPSBkLm1ha2UoXCJkaXZcIiwgdWUuQ1NTLndyYXBwZXIpO1xuICAgIGNvbnN0IHQgPSBkLm1ha2UoXCJkaXZcIiwgdWUuQ1NTLmljb24sIHtcbiAgICAgIGlubmVySFRNTDogTG9cbiAgICB9KTtcbiAgICB0aGlzLmlucHV0ID0gZC5tYWtlKFwiaW5wdXRcIiwgdWUuQ1NTLmlucHV0LCB7XG4gICAgICBwbGFjZWhvbGRlcjogZVxuICAgIH0pLCB0aGlzLndyYXBwZXIuYXBwZW5kQ2hpbGQodCksIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmlucHV0KSwgdGhpcy5saXN0ZW5lcnMub24odGhpcy5pbnB1dCwgXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnNlYXJjaFF1ZXJ5ID0gdGhpcy5pbnB1dC52YWx1ZSwgdGhpcy5vblNlYXJjaCh0aGlzLnNlYXJjaFF1ZXJ5LCB0aGlzLmZvdW5kSXRlbXMpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGxpc3Qgb2YgZm91bmQgaXRlbXMgZm9yIHRoZSBjdXJyZW50IHNlYXJjaCBxdWVyeVxuICAgKi9cbiAgZ2V0IGZvdW5kSXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChlKSA9PiB0aGlzLmNoZWNrSXRlbShlKSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnRhaW5zIGxvZ2ljIGZvciBjaGVja2luZyB3aGV0aGVyIHBhc3NlZCBpdGVtIGNvbmZvcm1zIHRoZSBzZWFyY2ggcXVlcnlcbiAgICpcbiAgICogQHBhcmFtIGl0ZW0gLSBpdGVtIHRvIGJlIGNoZWNrZWRcbiAgICovXG4gIGNoZWNrSXRlbShlKSB7XG4gICAgdmFyIGk7XG4gICAgY29uc3QgdCA9ICgoaSA9IGUudGl0bGUpID09IG51bGwgPyB2b2lkIDAgOiBpLnRvTG93ZXJDYXNlKCkpIHx8IFwiXCIsIG8gPSB0aGlzLnNlYXJjaFF1ZXJ5LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHQuaW5jbHVkZXMobyk7XG4gIH1cbn1cbmNvbnN0IGRlID0gY2xhc3Mge1xuICAvKipcbiAgICogTG9ja3MgYm9keSBlbGVtZW50IHNjcm9sbFxuICAgKi9cbiAgbG9jaygpIHtcbiAgICBHZSA/IHRoaXMubG9ja0hhcmQoKSA6IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChkZS5DU1Muc2Nyb2xsTG9ja2VkKTtcbiAgfVxuICAvKipcbiAgICogVW5sb2NrcyBib2R5IGVsZW1lbnQgc2Nyb2xsXG4gICAqL1xuICB1bmxvY2soKSB7XG4gICAgR2UgPyB0aGlzLnVubG9ja0hhcmQoKSA6IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShkZS5DU1Muc2Nyb2xsTG9ja2VkKTtcbiAgfVxuICAvKipcbiAgICogTG9ja3Mgc2Nyb2xsIGluIGEgaGFyZCB3YXkgKHZpYSBzZXR0aW5nIGZpeGVkIHBvc2l0aW9uIHRvIGJvZHkgZWxlbWVudClcbiAgICovXG4gIGxvY2tIYXJkKCkge1xuICAgIHRoaXMuc2Nyb2xsUG9zaXRpb24gPSB3aW5kb3cucGFnZVlPZmZzZXQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgIFwiLS13aW5kb3ctc2Nyb2xsLW9mZnNldFwiLFxuICAgICAgYCR7dGhpcy5zY3JvbGxQb3NpdGlvbn1weGBcbiAgICApLCBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoZGUuQ1NTLnNjcm9sbExvY2tlZEhhcmQpO1xuICB9XG4gIC8qKlxuICAgKiBVbmxvY2tzIGhhcmQgc2Nyb2xsIGxvY2tcbiAgICovXG4gIHVubG9ja0hhcmQoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGRlLkNTUy5zY3JvbGxMb2NrZWRIYXJkKSwgdGhpcy5zY3JvbGxQb3NpdGlvbiAhPT0gbnVsbCAmJiB3aW5kb3cuc2Nyb2xsVG8oMCwgdGhpcy5zY3JvbGxQb3NpdGlvbiksIHRoaXMuc2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICB9XG59O1xubGV0IGZ0ID0gZGU7XG5mdC5DU1MgPSB7XG4gIHNjcm9sbExvY2tlZDogXCJjZS1zY3JvbGwtbG9ja2VkXCIsXG4gIHNjcm9sbExvY2tlZEhhcmQ6IFwiY2Utc2Nyb2xsLWxvY2tlZC0taGFyZFwiXG59O1xudmFyIF9vID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBBbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsIE5vID0gKHMsIGUsIHQsIG8pID0+IHtcbiAgZm9yICh2YXIgaSA9IG8gPiAxID8gdm9pZCAwIDogbyA/IEFvKGUsIHQpIDogZSwgbiA9IHMubGVuZ3RoIC0gMSwgcjsgbiA+PSAwOyBuLS0pXG4gICAgKHIgPSBzW25dKSAmJiAoaSA9IChvID8gcihlLCB0LCBpKSA6IHIoaSkpIHx8IGkpO1xuICByZXR1cm4gbyAmJiBpICYmIF9vKGUsIHQsIGkpLCBpO1xufSwgZmUgPSAvKiBAX19QVVJFX18gKi8gKChzKSA9PiAocy5DbG9zZSA9IFwiY2xvc2VcIiwgcykpKGZlIHx8IHt9KTtcbmNvbnN0IHogPSBjbGFzcyBleHRlbmRzIHdlIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBwb3BvdmVyIGNvbnN0cnVjdGlvbiBwYXJhbXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHMpIHtcbiAgICBzdXBlcigpLCB0aGlzLnNjb3BlRWxlbWVudCA9IGRvY3VtZW50LmJvZHksIHRoaXMubGlzdGVuZXJzID0gbmV3IFJlKCksIHRoaXMuc2Nyb2xsTG9ja2VyID0gbmV3IGZ0KCksIHRoaXMubm9kZXMgPSB7XG4gICAgICB3cmFwcGVyOiBudWxsLFxuICAgICAgcG9wb3ZlcjogbnVsbCxcbiAgICAgIG5vdGhpbmdGb3VuZE1lc3NhZ2U6IG51bGwsXG4gICAgICBjdXN0b21Db250ZW50OiBudWxsLFxuICAgICAgaXRlbXM6IG51bGwsXG4gICAgICBvdmVybGF5OiBudWxsXG4gICAgfSwgdGhpcy5tZXNzYWdlcyA9IHtcbiAgICAgIG5vdGhpbmdGb3VuZDogXCJOb3RoaW5nIGZvdW5kXCIsXG4gICAgICBzZWFyY2g6IFwiU2VhcmNoXCJcbiAgICB9LCB0aGlzLm9uRmxpcCA9ICgpID0+IHtcbiAgICAgIHRoaXMuaXRlbXMuZmluZCgodCkgPT4gdC5pc0ZvY3VzZWQpLm9uRm9jdXMoKTtcbiAgICB9LCB0aGlzLml0ZW1zID0gcy5pdGVtcy5tYXAoKGUpID0+IG5ldyBQKGUpKSwgcy5zY29wZUVsZW1lbnQgIT09IHZvaWQgMCAmJiAodGhpcy5zY29wZUVsZW1lbnQgPSBzLnNjb3BlRWxlbWVudCksIHMubWVzc2FnZXMgJiYgKHRoaXMubWVzc2FnZXMgPSB7XG4gICAgICAuLi50aGlzLm1lc3NhZ2VzLFxuICAgICAgLi4ucy5tZXNzYWdlc1xuICAgIH0pLCBzLmN1c3RvbUNvbnRlbnRGbGlwcGFibGVJdGVtcyAmJiAodGhpcy5jdXN0b21Db250ZW50RmxpcHBhYmxlSXRlbXMgPSBzLmN1c3RvbUNvbnRlbnRGbGlwcGFibGVJdGVtcyksIHRoaXMubWFrZSgpLCBzLmN1c3RvbUNvbnRlbnQgJiYgdGhpcy5hZGRDdXN0b21Db250ZW50KHMuY3VzdG9tQ29udGVudCksIHMuc2VhcmNoYWJsZSAmJiB0aGlzLmFkZFNlYXJjaCgpLCB0aGlzLmluaXRpYWxpemVGbGlwcGVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIFBvcG92ZXIgQ1NTIGNsYXNzZXNcbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3BvdmVyOiBcImNlLXBvcG92ZXJcIixcbiAgICAgIHBvcG92ZXJPcGVuVG9wOiBcImNlLXBvcG92ZXItLW9wZW4tdG9wXCIsXG4gICAgICBwb3BvdmVyT3BlbmVkOiBcImNlLXBvcG92ZXItLW9wZW5lZFwiLFxuICAgICAgc2VhcmNoOiBcImNlLXBvcG92ZXJfX3NlYXJjaFwiLFxuICAgICAgbm90aGluZ0ZvdW5kTWVzc2FnZTogXCJjZS1wb3BvdmVyX19ub3RoaW5nLWZvdW5kLW1lc3NhZ2VcIixcbiAgICAgIG5vdGhpbmdGb3VuZE1lc3NhZ2VEaXNwbGF5ZWQ6IFwiY2UtcG9wb3Zlcl9fbm90aGluZy1mb3VuZC1tZXNzYWdlLS1kaXNwbGF5ZWRcIixcbiAgICAgIGN1c3RvbUNvbnRlbnQ6IFwiY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnRcIixcbiAgICAgIGN1c3RvbUNvbnRlbnRIaWRkZW46IFwiY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnQtLWhpZGRlblwiLFxuICAgICAgaXRlbXM6IFwiY2UtcG9wb3Zlcl9faXRlbXNcIixcbiAgICAgIG92ZXJsYXk6IFwiY2UtcG9wb3Zlcl9fb3ZlcmxheVwiLFxuICAgICAgb3ZlcmxheUhpZGRlbjogXCJjZS1wb3BvdmVyX19vdmVybGF5LS1oaWRkZW5cIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgSFRNTCBlbGVtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHBvcG92ZXJcbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMud3JhcHBlcjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHNvbWUgaXRlbSBpbnNpZGUgcG9wb3ZlciBpcyBmb2N1c2VkXG4gICAqL1xuICBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gdGhpcy5mbGlwcGVyLmhhc0ZvY3VzKCk7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gcG9wb3ZlclxuICAgKi9cbiAgc2hvdygpIHtcbiAgICB0aGlzLnNob3VsZE9wZW5Cb3R0b20gfHwgKHRoaXMubm9kZXMucG9wb3Zlci5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tcG9wb3Zlci1oZWlnaHRcIiwgdGhpcy5oZWlnaHQgKyBcInB4XCIpLCB0aGlzLm5vZGVzLnBvcG92ZXIuY2xhc3NMaXN0LmFkZCh6LkNTUy5wb3BvdmVyT3BlblRvcCkpLCB0aGlzLm5vZGVzLm92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSh6LkNTUy5vdmVybGF5SGlkZGVuKSwgdGhpcy5ub2Rlcy5wb3BvdmVyLmNsYXNzTGlzdC5hZGQoei5DU1MucG9wb3Zlck9wZW5lZCksIHRoaXMuZmxpcHBlci5hY3RpdmF0ZSh0aGlzLmZsaXBwYWJsZUVsZW1lbnRzKSwgdGhpcy5zZWFyY2ggIT09IHZvaWQgMCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2VhcmNoLmZvY3VzKCk7XG4gICAgfSwgMTAwKSwgZWUoKSAmJiB0aGlzLnNjcm9sbExvY2tlci5sb2NrKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlcyBwb3BvdmVyXG4gICAqL1xuICBoaWRlKCkge1xuICAgIHRoaXMubm9kZXMucG9wb3Zlci5jbGFzc0xpc3QucmVtb3ZlKHouQ1NTLnBvcG92ZXJPcGVuZWQpLCB0aGlzLm5vZGVzLnBvcG92ZXIuY2xhc3NMaXN0LnJlbW92ZSh6LkNTUy5wb3BvdmVyT3BlblRvcCksIHRoaXMubm9kZXMub3ZlcmxheS5jbGFzc0xpc3QuYWRkKHouQ1NTLm92ZXJsYXlIaWRkZW4pLCB0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpLCB0aGlzLml0ZW1zLmZvckVhY2goKHMpID0+IHMucmVzZXQoKSksIHRoaXMuc2VhcmNoICE9PSB2b2lkIDAgJiYgdGhpcy5zZWFyY2guY2xlYXIoKSwgZWUoKSAmJiB0aGlzLnNjcm9sbExvY2tlci51bmxvY2soKSwgdGhpcy5lbWl0KFxuICAgICAgXCJjbG9zZVwiXG4gICAgICAvKiBDbG9zZSAqL1xuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBtZW1vcnlcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5mbGlwcGVyLmRlYWN0aXZhdGUoKSwgdGhpcy5saXN0ZW5lcnMucmVtb3ZlQWxsKCksIGVlKCkgJiYgdGhpcy5zY3JvbGxMb2NrZXIudW5sb2NrKCk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgSFRNTCBlbGVtZW50IGNvcnJlc3BvbmRpbmcgdG8gcG9wb3ZlclxuICAgKi9cbiAgbWFrZSgpIHtcbiAgICB0aGlzLm5vZGVzLnBvcG92ZXIgPSBkLm1ha2UoXCJkaXZcIiwgW3ouQ1NTLnBvcG92ZXJdKSwgdGhpcy5ub2Rlcy5ub3RoaW5nRm91bmRNZXNzYWdlID0gZC5tYWtlKFwiZGl2XCIsIFt6LkNTUy5ub3RoaW5nRm91bmRNZXNzYWdlXSwge1xuICAgICAgdGV4dENvbnRlbnQ6IHRoaXMubWVzc2FnZXMubm90aGluZ0ZvdW5kXG4gICAgfSksIHRoaXMubm9kZXMucG9wb3Zlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLm5vdGhpbmdGb3VuZE1lc3NhZ2UpLCB0aGlzLm5vZGVzLml0ZW1zID0gZC5tYWtlKFwiZGl2XCIsIFt6LkNTUy5pdGVtc10pLCB0aGlzLml0ZW1zLmZvckVhY2goKHMpID0+IHtcbiAgICAgIHRoaXMubm9kZXMuaXRlbXMuYXBwZW5kQ2hpbGQocy5nZXRFbGVtZW50KCkpO1xuICAgIH0pLCB0aGlzLm5vZGVzLnBvcG92ZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5pdGVtcyksIHRoaXMubGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucG9wb3ZlciwgXCJjbGlja1wiLCAocykgPT4ge1xuICAgICAgY29uc3QgZSA9IHRoaXMuZ2V0VGFyZ2V0SXRlbShzKTtcbiAgICAgIGUgIT09IHZvaWQgMCAmJiB0aGlzLmhhbmRsZUl0ZW1DbGljayhlKTtcbiAgICB9KSwgdGhpcy5ub2Rlcy53cmFwcGVyID0gZC5tYWtlKFwiZGl2XCIpLCB0aGlzLm5vZGVzLm92ZXJsYXkgPSBkLm1ha2UoXCJkaXZcIiwgW3ouQ1NTLm92ZXJsYXksIHouQ1NTLm92ZXJsYXlIaWRkZW5dKSwgdGhpcy5saXN0ZW5lcnMub24odGhpcy5ub2Rlcy5vdmVybGF5LCBcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pLCB0aGlzLm5vZGVzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5vdmVybGF5KSwgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMucG9wb3Zlcik7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgc2VhcmNoIHRvIHRoZSBwb3BvdmVyXG4gICAqL1xuICBhZGRTZWFyY2goKSB7XG4gICAgdGhpcy5zZWFyY2ggPSBuZXcgdWUoe1xuICAgICAgaXRlbXM6IHRoaXMuaXRlbXMsXG4gICAgICBwbGFjZWhvbGRlcjogdGhpcy5tZXNzYWdlcy5zZWFyY2gsXG4gICAgICBvblNlYXJjaDogKGUsIHQpID0+IHtcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgICAgY29uc3QgbiA9ICF0LmluY2x1ZGVzKGkpO1xuICAgICAgICAgIGkudG9nZ2xlSGlkZGVuKG4pO1xuICAgICAgICB9KSwgdGhpcy50b2dnbGVOb3RoaW5nRm91bmRNZXNzYWdlKHQubGVuZ3RoID09PSAwKSwgdGhpcy50b2dnbGVDdXN0b21Db250ZW50KGUgIT09IFwiXCIpO1xuICAgICAgICBjb25zdCBvID0gZSA9PT0gXCJcIiA/IHRoaXMuZmxpcHBhYmxlRWxlbWVudHMgOiB0Lm1hcCgoaSkgPT4gaS5nZXRFbGVtZW50KCkpO1xuICAgICAgICB0aGlzLmZsaXBwZXIuaXNBY3RpdmF0ZWQgJiYgKHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksIHRoaXMuZmxpcHBlci5hY3RpdmF0ZShvKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgcyA9IHRoaXMuc2VhcmNoLmdldEVsZW1lbnQoKTtcbiAgICBzLmNsYXNzTGlzdC5hZGQoei5DU1Muc2VhcmNoKSwgdGhpcy5ub2Rlcy5wb3BvdmVyLmluc2VydEJlZm9yZShzLCB0aGlzLm5vZGVzLnBvcG92ZXIuZmlyc3RDaGlsZCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgY3VzdG9tIGh0bWwgY29udGVudCB0byB0aGUgcG9wb3ZlclxuICAgKlxuICAgKiBAcGFyYW0gY29udGVudCAtIGh0bWwgY29udGVudCB0byBhcHBlbmRcbiAgICovXG4gIGFkZEN1c3RvbUNvbnRlbnQocykge1xuICAgIHRoaXMubm9kZXMuY3VzdG9tQ29udGVudCA9IHMsIHRoaXMubm9kZXMuY3VzdG9tQ29udGVudC5jbGFzc0xpc3QuYWRkKHouQ1NTLmN1c3RvbUNvbnRlbnQpLCB0aGlzLm5vZGVzLnBvcG92ZXIuaW5zZXJ0QmVmb3JlKHMsIHRoaXMubm9kZXMucG9wb3Zlci5maXJzdENoaWxkKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlldmVzIHBvcG92ZXIgaXRlbSB0aGF0IGlzIHRoZSB0YXJnZXQgb2YgdGhlIHNwZWNpZmllZCBldmVudFxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgLSBldmVudCB0byByZXRyaWV2ZSBwb3BvdmVyIGl0ZW0gZnJvbVxuICAgKi9cbiAgZ2V0VGFyZ2V0SXRlbShzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmluZCgoZSkgPT4gcy5jb21wb3NlZFBhdGgoKS5pbmNsdWRlcyhlLmdldEVsZW1lbnQoKSkpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIGl0ZW0gY2xpY2tzXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtIC0gaXRlbSB0byBoYW5kbGUgY2xpY2sgb2ZcbiAgICovXG4gIGhhbmRsZUl0ZW1DbGljayhzKSB7XG4gICAgcy5pc0Rpc2FibGVkIHx8ICh0aGlzLml0ZW1zLmZpbHRlcigoZSkgPT4gZSAhPT0gcykuZm9yRWFjaCgoZSkgPT4gZS5yZXNldCgpKSwgcy5oYW5kbGVDbGljaygpLCB0aGlzLnRvZ2dsZUl0ZW1BY3RpdmVuZXNzSWZOZWVkZWQocyksIHMuY2xvc2VPbkFjdGl2YXRlICYmIHRoaXMuaGlkZSgpKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBGbGlwcGVyIGluc3RhbmNlIHdoaWNoIGFsbG93cyB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHBvcG92ZXIgaXRlbXMgdmlhIGtleWJvYXJkXG4gICAqL1xuICBpbml0aWFsaXplRmxpcHBlcigpIHtcbiAgICB0aGlzLmZsaXBwZXIgPSBuZXcgRyh7XG4gICAgICBpdGVtczogdGhpcy5mbGlwcGFibGVFbGVtZW50cyxcbiAgICAgIGZvY3VzZWRJdGVtQ2xhc3M6IFAuQ1NTLmZvY3VzZWQsXG4gICAgICBhbGxvd2VkS2V5czogW1xuICAgICAgICBCLlRBQixcbiAgICAgICAgQi5VUCxcbiAgICAgICAgQi5ET1dOLFxuICAgICAgICBCLkVOVEVSXG4gICAgICBdXG4gICAgfSksIHRoaXMuZmxpcHBlci5vbkZsaXAodGhpcy5vbkZsaXApO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGxpc3Qgb2YgZWxlbWVudHMgYXZhaWxhYmxlIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uLlxuICAgKiBDb250YWlucyBib3RoIHVzdWFsIHBvcG92ZXIgaXRlbXMgZWxlbWVudHMgYW5kIGN1c3RvbSBodG1sIGNvbnRlbnQuXG4gICAqL1xuICBnZXQgZmxpcHBhYmxlRWxlbWVudHMoKSB7XG4gICAgY29uc3QgcyA9IHRoaXMuaXRlbXMubWFwKCh0KSA9PiB0LmdldEVsZW1lbnQoKSk7XG4gICAgcmV0dXJuICh0aGlzLmN1c3RvbUNvbnRlbnRGbGlwcGFibGVJdGVtcyB8fCBbXSkuY29uY2F0KHMpO1xuICB9XG4gIGdldCBoZWlnaHQoKSB7XG4gICAgbGV0IHMgPSAwO1xuICAgIGlmICh0aGlzLm5vZGVzLnBvcG92ZXIgPT09IG51bGwpXG4gICAgICByZXR1cm4gcztcbiAgICBjb25zdCBlID0gdGhpcy5ub2Rlcy5wb3BvdmVyLmNsb25lTm9kZSghMCk7XG4gICAgcmV0dXJuIGUuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCIsIGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCIsIGUuc3R5bGUudG9wID0gXCItMTAwMHB4XCIsIGUuY2xhc3NMaXN0LmFkZCh6LkNTUy5wb3BvdmVyT3BlbmVkKSwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKSwgcyA9IGUub2Zmc2V0SGVpZ2h0LCBlLnJlbW92ZSgpLCBzO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcG9wb3ZlciBzaG91bGQgYmUgb3BlbmVkIGJvdHRvbS5cbiAgICogSXQgc2hvdWxkIGhhcHBlbiB3aGVuIHRoZXJlIGlzIGVub3VnaCBzcGFjZSBiZWxvdyBvciBub3QgZW5vdWdoIHNwYWNlIGFib3ZlXG4gICAqL1xuICBnZXQgc2hvdWxkT3BlbkJvdHRvbSgpIHtcbiAgICBjb25zdCBzID0gdGhpcy5ub2Rlcy5wb3BvdmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBlID0gdGhpcy5zY29wZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHQgPSB0aGlzLmhlaWdodCwgbyA9IHMudG9wICsgdCwgaSA9IHMudG9wIC0gdCwgbiA9IE1hdGgubWluKHdpbmRvdy5pbm5lckhlaWdodCwgZS5ib3R0b20pO1xuICAgIHJldHVybiBpIDwgZS50b3AgfHwgbyA8PSBuO1xuICB9XG4gIC8qKlxuICAgKiBUb2dnbGVzIG5vdGhpbmcgZm91bmQgbWVzc2FnZSB2aXNpYmlsaXR5XG4gICAqXG4gICAqIEBwYXJhbSBpc0Rpc3BsYXllZCAtIHRydWUgaWYgdGhlIG1lc3NhZ2Ugc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgKi9cbiAgdG9nZ2xlTm90aGluZ0ZvdW5kTWVzc2FnZShzKSB7XG4gICAgdGhpcy5ub2Rlcy5ub3RoaW5nRm91bmRNZXNzYWdlLmNsYXNzTGlzdC50b2dnbGUoei5DU1Mubm90aGluZ0ZvdW5kTWVzc2FnZURpc3BsYXllZCwgcyk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgY3VzdG9tIGNvbnRlbnQgdmlzaWJpbGl0eVxuICAgKlxuICAgKiBAcGFyYW0gaXNEaXNwbGF5ZWQgLSB0cnVlIGlmIGN1c3RvbSBjb250ZW50IHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICovXG4gIHRvZ2dsZUN1c3RvbUNvbnRlbnQocykge1xuICAgIHZhciBlO1xuICAgIChlID0gdGhpcy5ub2Rlcy5jdXN0b21Db250ZW50KSA9PSBudWxsIHx8IGUuY2xhc3NMaXN0LnRvZ2dsZSh6LkNTUy5jdXN0b21Db250ZW50SGlkZGVuLCBzKTtcbiAgfVxuICAvKipcbiAgICogLSBUb2dnbGVzIGl0ZW0gYWN0aXZlIHN0YXRlLCBpZiBjbGlja2VkIHBvcG92ZXIgaXRlbSBoYXMgcHJvcGVydHkgJ3RvZ2dsZScgc2V0IHRvIHRydWUuXG4gICAqXG4gICAqIC0gUGVyZm9ybXMgcmFkaW9idXR0b24tbGlrZSBiZWhhdmlvciBpZiB0aGUgaXRlbSBoYXMgcHJvcGVydHkgJ3RvZ2dsZScgc2V0IHRvIHN0cmluZyBrZXkuXG4gICAqIChBbGwgdGhlIG90aGVyIGl0ZW1zIHdpdGggdGhlIHNhbWUga2V5IGdldCBpbmFjdGl2ZSwgYW5kIHRoZSBpdGVtIGdldHMgYWN0aXZlKVxuICAgKlxuICAgKiBAcGFyYW0gY2xpY2tlZEl0ZW0gLSBwb3BvdmVyIGl0ZW0gdGhhdCB3YXMgY2xpY2tlZFxuICAgKi9cbiAgdG9nZ2xlSXRlbUFjdGl2ZW5lc3NJZk5lZWRlZChzKSB7XG4gICAgaWYgKHMudG9nZ2xlID09PSAhMCAmJiBzLnRvZ2dsZUFjdGl2ZSgpLCB0eXBlb2Ygcy50b2dnbGUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgZSA9IHRoaXMuaXRlbXMuZmlsdGVyKCh0KSA9PiB0LnRvZ2dsZSA9PT0gcy50b2dnbGUpO1xuICAgICAgaWYgKGUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHMudG9nZ2xlQWN0aXZlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICB0LnRvZ2dsZUFjdGl2ZSh0ID09PSBzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcbmxldCBIZSA9IHo7XG5ObyhbXG4gIGFlXG5dLCBIZS5wcm90b3R5cGUsIFwiaGVpZ2h0XCIsIDEpO1xuY2xhc3MgUm8gZXh0ZW5kcyBTIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy5zZWxlY3Rpb24gPSBuZXcgbSgpLCB0aGlzLm9uUG9wb3ZlckNsb3NlID0gKCkgPT4ge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE1vZHVsZSBFdmVudHNcbiAgICpcbiAgICogQHJldHVybnMge3tvcGVuZWQ6IHN0cmluZywgY2xvc2VkOiBzdHJpbmd9fVxuICAgKi9cbiAgZ2V0IGV2ZW50cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbmVkOiBcImJsb2NrLXNldHRpbmdzLW9wZW5lZFwiLFxuICAgICAgY2xvc2VkOiBcImJsb2NrLXNldHRpbmdzLWNsb3NlZFwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQmxvY2sgU2V0dGluZ3MgQ1NTXG4gICAqL1xuICBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZXR0aW5nczogXCJjZS1zZXR0aW5nc1wiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogR2V0dGVyIGZvciBpbm5lciBwb3BvdmVyJ3MgZmxpcHBlciBpbnN0YW5jZVxuICAgKlxuICAgKiBAdG9kbyByZW1vdmUgb25jZSBCbG9ja1NldHRpbmdzIGJlY29tZXMgc3RhbmRhbG9uZSBub24tbW9kdWxlIGNsYXNzXG4gICAqL1xuICBnZXQgZmxpcHBlcigpIHtcbiAgICB2YXIgZTtcbiAgICByZXR1cm4gKGUgPSB0aGlzLnBvcG92ZXIpID09IG51bGwgPyB2b2lkIDAgOiBlLmZsaXBwZXI7XG4gIH1cbiAgLyoqXG4gICAqIFBhbmVsIHdpdGggYmxvY2sgc2V0dGluZ3Mgd2l0aCAyIHNlY3Rpb25zOlxuICAgKiAgLSBUb29sJ3MgU2V0dGluZ3NcbiAgICogIC0gRGVmYXVsdCBTZXR0aW5ncyBbTW92ZSwgUmVtb3ZlLCBldGNdXG4gICAqL1xuICBtYWtlKCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlciA9IGQubWFrZShcImRpdlwiLCBbdGhpcy5DU1Muc2V0dGluZ3NdKTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgbW9kdWxlXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlQWxsTm9kZXMoKTtcbiAgfVxuICAvKipcbiAgICogT3BlbiBCbG9jayBTZXR0aW5ncyBwYW5lXG4gICAqXG4gICAqIEBwYXJhbSB0YXJnZXRCbG9jayAtIG5lYXIgd2hpY2ggQmxvY2sgd2Ugc2hvdWxkIG9wZW4gQmxvY2tTZXR0aW5nc1xuICAgKi9cbiAgb3BlbihlID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jaykge1xuICAgIHRoaXMub3BlbmVkID0gITAsIHRoaXMuc2VsZWN0aW9uLnNhdmUoKSwgZS5zZWxlY3RlZCA9ICEwLCB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhckNhY2hlKCk7XG4gICAgY29uc3QgW3QsIG9dID0gZS5nZXRUdW5lcygpO1xuICAgIHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5lbWl0KHRoaXMuZXZlbnRzLm9wZW5lZCksIHRoaXMucG9wb3ZlciA9IG5ldyBIZSh7XG4gICAgICBzZWFyY2hhYmxlOiAhMCxcbiAgICAgIGl0ZW1zOiB0Lm1hcCgoaSkgPT4gdGhpcy5yZXNvbHZlVHVuZUFsaWFzZXMoaSkpLFxuICAgICAgY3VzdG9tQ29udGVudDogbyxcbiAgICAgIGN1c3RvbUNvbnRlbnRGbGlwcGFibGVJdGVtczogdGhpcy5nZXRDb250cm9scyhvKSxcbiAgICAgIHNjb3BlRWxlbWVudDogdGhpcy5FZGl0b3IuQVBJLm1ldGhvZHMudWkubm9kZXMucmVkYWN0b3IsXG4gICAgICBtZXNzYWdlczoge1xuICAgICAgICBub3RoaW5nRm91bmQ6ICQudWkoWC51aS5wb3BvdmVyLCBcIk5vdGhpbmcgZm91bmRcIiksXG4gICAgICAgIHNlYXJjaDogJC51aShYLnVpLnBvcG92ZXIsIFwiRmlsdGVyXCIpXG4gICAgICB9XG4gICAgfSksIHRoaXMucG9wb3Zlci5vbihmZS5DbG9zZSwgdGhpcy5vblBvcG92ZXJDbG9zZSksIHRoaXMubm9kZXMud3JhcHBlci5hcHBlbmQodGhpcy5wb3BvdmVyLmdldEVsZW1lbnQoKSksIHRoaXMucG9wb3Zlci5zaG93KCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgcm9vdCBibG9jayBzZXR0aW5ncyBlbGVtZW50XG4gICAqL1xuICBnZXRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLndyYXBwZXI7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlIEJsb2NrIFNldHRpbmdzIHBhbmVcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMub3BlbmVkID0gITEsIG0uaXNBdEVkaXRvciB8fCB0aGlzLnNlbGVjdGlvbi5yZXN0b3JlKCksIHRoaXMuc2VsZWN0aW9uLmNsZWFyU2F2ZWQoKSwgIXRoaXMuRWRpdG9yLkNyb3NzQmxvY2tTZWxlY3Rpb24uaXNDcm9zc0Jsb2NrU2VsZWN0aW9uU3RhcnRlZCAmJiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrICYmICh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLnNlbGVjdGVkID0gITEpLCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdCh0aGlzLmV2ZW50cy5jbG9zZWQpLCB0aGlzLnBvcG92ZXIgJiYgKHRoaXMucG9wb3Zlci5vZmYoZmUuQ2xvc2UsIHRoaXMub25Qb3BvdmVyQ2xvc2UpLCB0aGlzLnBvcG92ZXIuZGVzdHJveSgpLCB0aGlzLnBvcG92ZXIuZ2V0RWxlbWVudCgpLnJlbW92ZSgpLCB0aGlzLnBvcG92ZXIgPSBudWxsKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBsaXN0IG9mIGJ1dHRvbnMgYW5kIGlucHV0cyBpbnNpZGUgc3BlY2lmaWVkIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0gY29udGFpbmVyIC0gY29udGFpbmVyIHRvIHF1ZXJ5IGNvbnRyb2xzIGluc2lkZSBvZlxuICAgKi9cbiAgZ2V0Q29udHJvbHMoZSkge1xuICAgIGNvbnN0IHsgU3R5bGVzQVBJOiB0IH0gPSB0aGlzLkVkaXRvciwgbyA9IGUucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIGAuJHt0LmNsYXNzZXMuc2V0dGluZ3NCdXR0b259LCAke2QuYWxsSW5wdXRzU2VsZWN0b3J9YFxuICAgICk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc29sdmVzIGFsaWFzZXMgaW4gdHVuZXMgbWVudSBpdGVtc1xuICAgKlxuICAgKiBAcGFyYW0gaXRlbSAtIGl0ZW0gd2l0aCByZXNvbHZlZCBhbGlhc2VzXG4gICAqL1xuICByZXNvbHZlVHVuZUFsaWFzZXMoZSkge1xuICAgIGNvbnN0IHQgPSB5byhlLCB7IGxhYmVsOiBcInRpdGxlXCIgfSk7XG4gICAgcmV0dXJuIGUuY29uZmlybWF0aW9uICYmICh0LmNvbmZpcm1hdGlvbiA9IHRoaXMucmVzb2x2ZVR1bmVBbGlhc2VzKGUuY29uZmlybWF0aW9uKSksIHQ7XG4gIH1cbn1cbmNsYXNzIFkgZXh0ZW5kcyBTIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy50b29scyA9IFtdLCB0aGlzLmZsaXBwZXIgPSBudWxsLCB0aGlzLnRvZ2dsaW5nQ2FsbGJhY2sgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDU1MgZ2V0dGVyXG4gICAqL1xuICBzdGF0aWMgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udmVyc2lvblRvb2xiYXJXcmFwcGVyOiBcImNlLWNvbnZlcnNpb24tdG9vbGJhclwiLFxuICAgICAgY29udmVyc2lvblRvb2xiYXJTaG93ZWQ6IFwiY2UtY29udmVyc2lvbi10b29sYmFyLS1zaG93ZWRcIixcbiAgICAgIGNvbnZlcnNpb25Ub29sYmFyVG9vbHM6IFwiY2UtY29udmVyc2lvbi10b29sYmFyX190b29sc1wiLFxuICAgICAgY29udmVyc2lvblRvb2xiYXJMYWJlbDogXCJjZS1jb252ZXJzaW9uLXRvb2xiYXJfX2xhYmVsXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbDogXCJjZS1jb252ZXJzaW9uLXRvb2xcIixcbiAgICAgIGNvbnZlcnNpb25Ub29sSGlkZGVuOiBcImNlLWNvbnZlcnNpb24tdG9vbC0taGlkZGVuXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbEljb246IFwiY2UtY29udmVyc2lvbi10b29sX19pY29uXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbEZvY3VzZWQ6IFwiY2UtY29udmVyc2lvbi10b29sLS1mb2N1c2VkXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbEFjdGl2ZTogXCJjZS1jb252ZXJzaW9uLXRvb2wtLWFjdGl2ZVwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIFVJIG9mIENvbnZlcnNpb24gVG9vbGJhclxuICAgKi9cbiAgbWFrZSgpIHtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIgPSBkLm1ha2UoXCJkaXZcIiwgW1xuICAgICAgWS5DU1MuY29udmVyc2lvblRvb2xiYXJXcmFwcGVyLFxuICAgICAgLi4udGhpcy5pc1J0bCA/IFt0aGlzLkVkaXRvci5VSS5DU1MuZWRpdG9yUnRsRml4XSA6IFtdXG4gICAgXSksIHRoaXMubm9kZXMudG9vbHMgPSBkLm1ha2UoXCJkaXZcIiwgWS5DU1MuY29udmVyc2lvblRvb2xiYXJUb29scyk7XG4gICAgY29uc3QgZSA9IGQubWFrZShcImRpdlwiLCBZLkNTUy5jb252ZXJzaW9uVG9vbGJhckxhYmVsLCB7XG4gICAgICB0ZXh0Q29udGVudDogJC51aShYLnVpLmlubGluZVRvb2xiYXIuY29udmVydGVyLCBcIkNvbnZlcnQgdG9cIilcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5hZGRUb29scygpLCB0aGlzLmVuYWJsZUZsaXBwZXIoKSwgZC5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLCBlKSwgZC5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLCB0aGlzLm5vZGVzLnRvb2xzKSwgdGhpcy5ub2Rlcy53cmFwcGVyO1xuICB9XG4gIC8qKlxuICAgKiBEZWFjdGl2YXRlcyBmbGlwcGVyIGFuZCByZW1vdmVzIGFsbCBub2Rlc1xuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmZsaXBwZXIgJiYgKHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksIHRoaXMuZmxpcHBlciA9IG51bGwpLCB0aGlzLnJlbW92ZUFsbE5vZGVzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSBjb252ZXJzaW9uIGRyb3Bkb3duIHZpc2liaWxpdHlcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3RvZ2dsaW5nQ2FsbGJhY2tdIFx1MjAxNCBjYWxsYmFjayB0aGF0IHdpbGwgYWNjZXB0IG9wZW5pbmcgc3RhdGVcbiAgICovXG4gIHRvZ2dsZShlKSB7XG4gICAgdGhpcy5vcGVuZWQgPyB0aGlzLmNsb3NlKCkgOiB0aGlzLm9wZW4oKSwgRChlKSAmJiAodGhpcy50b2dnbGluZ0NhbGxiYWNrID0gZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNob3dzIENvbnZlcnNpb24gVG9vbGJhclxuICAgKi9cbiAgb3BlbigpIHtcbiAgICB0aGlzLmZpbHRlclRvb2xzKCksIHRoaXMub3BlbmVkID0gITAsIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKFkuQ1NTLmNvbnZlcnNpb25Ub29sYmFyU2hvd2VkKSwgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLmZsaXBwZXIuYWN0aXZhdGUodGhpcy50b29scy5tYXAoKGUpID0+IGUuYnV0dG9uKS5maWx0ZXIoKGUpID0+ICFlLmNsYXNzTGlzdC5jb250YWlucyhZLkNTUy5jb252ZXJzaW9uVG9vbEhpZGRlbikpKSwgdGhpcy5mbGlwcGVyLmZvY3VzRmlyc3QoKSwgRCh0aGlzLnRvZ2dsaW5nQ2FsbGJhY2spICYmIHRoaXMudG9nZ2xpbmdDYWxsYmFjayghMCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlcyBDb252ZXJzaW9uIFRvb2xiYXJcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMub3BlbmVkID0gITEsIHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKFkuQ1NTLmNvbnZlcnNpb25Ub29sYmFyU2hvd2VkKSwgRCh0aGlzLnRvZ2dsaW5nQ2FsbGJhY2spICYmIHRoaXMudG9nZ2xpbmdDYWxsYmFjayghMSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBpdCBoYXMgbW9yZSB0aGFuIG9uZSB0b29sIGF2YWlsYWJsZSBmb3IgY29udmVydCBpblxuICAgKi9cbiAgaGFzVG9vbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbHMubGVuZ3RoID09PSAxID8gdGhpcy50b29sc1swXS5uYW1lICE9PSB0aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2sgOiAhMDtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgb25lIEJsb2NrIHdpdGggYW5vdGhlclxuICAgKiBGb3IgdGhhdCBUb29scyBtdXN0IHByb3ZpZGUgaW1wb3J0L2V4cG9ydCBtZXRob2RzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNpbmdUb29sTmFtZSAtIG5hbWUgb2YgVG9vbCB3aGljaCByZXBsYWNlcyBjdXJyZW50XG4gICAqIEBwYXJhbSBibG9ja0RhdGFPdmVycmlkZXMgLSBCbG9jayBkYXRhIG92ZXJyaWRlcy4gQ291bGQgYmUgcGFzc2VkIGluIGNhc2UgaWYgTXVsdGlwbGUgVG9vbGJveCBpdGVtcyBzcGVjaWZpZWRcbiAgICovXG4gIGFzeW5jIHJlcGxhY2VXaXRoQmxvY2soZSwgdCkge1xuICAgIGNvbnN0IG8gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLnRvb2wsIG4gPSAoYXdhaXQgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay5zYXZlKCkpLmRhdGEsIHIgPSB0aGlzLkVkaXRvci5Ub29scy5ibG9ja1Rvb2xzLmdldChlKTtcbiAgICBsZXQgYSA9IFwiXCI7XG4gICAgY29uc3QgbCA9IG8uY29udmVyc2lvbkNvbmZpZy5leHBvcnQ7XG4gICAgaWYgKEQobCkpXG4gICAgICBhID0gbChuKTtcbiAgICBlbHNlIGlmIChKKGwpKVxuICAgICAgYSA9IG5bbF07XG4gICAgZWxzZSB7XG4gICAgICBUKFwiQ29udmVyc2lvbiBcdTAwQUJleHBvcnRcdTAwQkIgcHJvcGVydHkgbXVzdCBiZSBhIHN0cmluZyBvciBmdW5jdGlvbi4gU3RyaW5nIG1lYW5zIGtleSBvZiBzYXZlZCBkYXRhIG9iamVjdCB0byBleHBvcnQuIEZ1bmN0aW9uIHNob3VsZCBleHBvcnQgcHJvY2Vzc2VkIHN0cmluZyB0byBleHBvcnQuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjID0gWihcbiAgICAgIGEsXG4gICAgICByLnNhbml0aXplQ29uZmlnXG4gICAgKTtcbiAgICBsZXQgdSA9IHt9O1xuICAgIGNvbnN0IGggPSByLmNvbnZlcnNpb25Db25maWcuaW1wb3J0O1xuICAgIGlmIChEKGgpKVxuICAgICAgdSA9IGgoYyk7XG4gICAgZWxzZSBpZiAoSihoKSlcbiAgICAgIHVbaF0gPSBjO1xuICAgIGVsc2Uge1xuICAgICAgVChcIkNvbnZlcnNpb24gXHUwMEFCaW1wb3J0XHUwMEJCIHByb3BlcnR5IG11c3QgYmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24uIFN0cmluZyBtZWFucyBrZXkgb2YgdG9vbCBkYXRhIHRvIGltcG9ydC4gRnVuY3Rpb24gYWNjZXB0cyBhIGltcG9ydGVkIHN0cmluZyBhbmQgcmV0dXJuIGNvbXBvc2VkIHRvb2wgZGF0YS5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHQgJiYgKHUgPSBPYmplY3QuYXNzaWduKHUsIHQpKSwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnJlcGxhY2Uoe1xuICAgICAgdG9vbDogZSxcbiAgICAgIGRhdGE6IHVcbiAgICB9KSwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oKSwgdGhpcy5jbG9zZSgpLCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCksIG9lKCgpID0+IHtcbiAgICAgIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayk7XG4gICAgfSwgMTApKCk7XG4gIH1cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIGV4aXN0aW5nIFRvb2xzIGFuZCBpbnNlcnRzIHRvIHRoZSBDb252ZXJzaW9uVG9vbGJhclxuICAgKiBpZiB0b29scyBoYXZlIGFiaWxpdHkgdG8gaW1wb3J0XG4gICAqL1xuICBhZGRUb29scygpIHtcbiAgICBjb25zdCBlID0gdGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scztcbiAgICBBcnJheS5mcm9tKGUuZW50cmllcygpKS5mb3JFYWNoKChbdCwgb10pID0+IHtcbiAgICAgIGNvbnN0IGkgPSBvLmNvbnZlcnNpb25Db25maWc7XG4gICAgICAhaSB8fCAhaS5pbXBvcnQgfHwgby50b29sYm94LmZvckVhY2goXG4gICAgICAgIChuKSA9PiB0aGlzLmFkZFRvb2xJZlZhbGlkKHQsIG4pXG4gICAgICApO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIGEgdG9vbCB0byB0aGUgQ29udmVyc2lvblRvb2xiYXIgaWYgdGhlIHRvb2wncyB0b29sYm94IGNvbmZpZyBpcyB2YWxpZFxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSAtIHRvb2wncyBuYW1lXG4gICAqIEBwYXJhbSB0b29sYm94U2V0dGluZ3MgLSB0b29sJ3Mgc2luZ2xlIHRvb2xib3ggc2V0dGluZ1xuICAgKi9cbiAgYWRkVG9vbElmVmFsaWQoZSwgdCkge1xuICAgIFYodCkgfHwgIXQuaWNvbiB8fCB0aGlzLmFkZFRvb2woZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCB0b29sIHRvIHRoZSBDb252ZXJzaW9uIFRvb2xiYXJcbiAgICpcbiAgICogQHBhcmFtIHRvb2xOYW1lIC0gbmFtZSBvZiBUb29sIHRvIGFkZFxuICAgKiBAcGFyYW0gdG9vbGJveEl0ZW0gLSB0b29sJ3MgdG9vbGJveCBpdGVtIGRhdGFcbiAgICovXG4gIGFkZFRvb2woZSwgdCkge1xuICAgIGNvbnN0IG8gPSBkLm1ha2UoXCJkaXZcIiwgW1kuQ1NTLmNvbnZlcnNpb25Ub29sXSksIGkgPSBkLm1ha2UoXCJkaXZcIiwgW1kuQ1NTLmNvbnZlcnNpb25Ub29sSWNvbl0pO1xuICAgIG8uZGF0YXNldC50b29sID0gZSwgaS5pbm5lckhUTUwgPSB0Lmljb24sIGQuYXBwZW5kKG8sIGkpLCBkLmFwcGVuZChvLCBkLnRleHQoJC50KFgudG9vbE5hbWVzLCB0LnRpdGxlIHx8IGtlKGUpKSkpLCBkLmFwcGVuZCh0aGlzLm5vZGVzLnRvb2xzLCBvKSwgdGhpcy50b29scy5wdXNoKHtcbiAgICAgIG5hbWU6IGUsXG4gICAgICBidXR0b246IG8sXG4gICAgICB0b29sYm94SXRlbTogdFxuICAgIH0pLCB0aGlzLmxpc3RlbmVycy5vbihvLCBcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucmVwbGFjZVdpdGhCbG9jayhlLCB0LmRhdGEpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBIaWRlIGN1cnJlbnQgVG9vbCBhbmQgc2hvdyBvdGhlcnNcbiAgICovXG4gIGFzeW5jIGZpbHRlclRvb2xzKCkge1xuICAgIGNvbnN0IHsgY3VycmVudEJsb2NrOiBlIH0gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIsIHQgPSBhd2FpdCBlLmdldEFjdGl2ZVRvb2xib3hFbnRyeSgpO1xuICAgIGZ1bmN0aW9uIG8oaSwgbikge1xuICAgICAgcmV0dXJuIGkuaWNvbiA9PT0gbi5pY29uICYmIGkudGl0bGUgPT09IG4udGl0bGU7XG4gICAgfVxuICAgIHRoaXMudG9vbHMuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgbGV0IG4gPSAhMTtcbiAgICAgIGlmICh0KSB7XG4gICAgICAgIGNvbnN0IHIgPSBvKHQsIGkudG9vbGJveEl0ZW0pO1xuICAgICAgICBuID0gaS5idXR0b24uZGF0YXNldC50b29sID09PSBlLm5hbWUgJiYgcjtcbiAgICAgIH1cbiAgICAgIGkuYnV0dG9uLmhpZGRlbiA9IG4sIGkuYnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoWS5DU1MuY29udmVyc2lvblRvb2xIaWRkZW4sIG4pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlIEZsaXBwZXIgdG8gYmUgYWJsZSB0byBsZWFmIHRvb2xzIGJ5IGFycm93cy90YWJcbiAgICovXG4gIGVuYWJsZUZsaXBwZXIoKSB7XG4gICAgdGhpcy5mbGlwcGVyID0gbmV3IEcoe1xuICAgICAgZm9jdXNlZEl0ZW1DbGFzczogWS5DU1MuY29udmVyc2lvblRvb2xGb2N1c2VkXG4gICAgfSk7XG4gIH1cbn1cbnZhciBBZSA9IHt9LCBEbyA9IHtcbiAgZ2V0IGV4cG9ydHMoKSB7XG4gICAgcmV0dXJuIEFlO1xuICB9LFxuICBzZXQgZXhwb3J0cyhzKSB7XG4gICAgQWUgPSBzO1xuICB9XG59O1xuLyohXG4gKiBMaWJyYXJ5IGZvciBoYW5kbGluZyBrZXlib2FyZCBzaG9ydGN1dHNcbiAqIEBjb3B5cmlnaHQgQ29kZVggKGh0dHBzOi8vY29kZXguc28pXG4gKiBAbGljZW5zZSBNSVRcbiAqIEBhdXRob3IgQ29kZVggKGh0dHBzOi8vY29kZXguc28pXG4gKiBAdmVyc2lvbiAxLjIuMFxuICovXG4oZnVuY3Rpb24ocywgZSkge1xuICAoZnVuY3Rpb24odCwgbykge1xuICAgIHMuZXhwb3J0cyA9IG8oKTtcbiAgfSkod2luZG93LCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIG8gPSB7fTtcbiAgICAgIGZ1bmN0aW9uIGkobikge1xuICAgICAgICBpZiAob1tuXSlcbiAgICAgICAgICByZXR1cm4gb1tuXS5leHBvcnRzO1xuICAgICAgICB2YXIgciA9IG9bbl0gPSB7IGk6IG4sIGw6ICExLCBleHBvcnRzOiB7fSB9O1xuICAgICAgICByZXR1cm4gdFtuXS5jYWxsKHIuZXhwb3J0cywgciwgci5leHBvcnRzLCBpKSwgci5sID0gITAsIHIuZXhwb3J0cztcbiAgICAgIH1cbiAgICAgIHJldHVybiBpLm0gPSB0LCBpLmMgPSBvLCBpLmQgPSBmdW5jdGlvbihuLCByLCBhKSB7XG4gICAgICAgIGkubyhuLCByKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgciwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBhIH0pO1xuICAgICAgfSwgaS5yID0gZnVuY3Rpb24obikge1xuICAgICAgICB0eXBlb2YgU3ltYm9sIDwgXCJ1XCIgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XG4gICAgICB9LCBpLnQgPSBmdW5jdGlvbihuLCByKSB7XG4gICAgICAgIGlmICgxICYgciAmJiAobiA9IGkobikpLCA4ICYgciB8fCA0ICYgciAmJiB0eXBlb2YgbiA9PSBcIm9iamVjdFwiICYmIG4gJiYgbi5fX2VzTW9kdWxlKVxuICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB2YXIgYSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBpZiAoaS5yKGEpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSwgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogITAsIHZhbHVlOiBuIH0pLCAyICYgciAmJiB0eXBlb2YgbiAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgIGZvciAodmFyIGwgaW4gbilcbiAgICAgICAgICAgIGkuZChhLCBsLCBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuW2NdO1xuICAgICAgICAgICAgfS5iaW5kKG51bGwsIGwpKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9LCBpLm4gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHZhciByID0gbiAmJiBuLl9fZXNNb2R1bGUgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbi5kZWZhdWx0O1xuICAgICAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpLmQociwgXCJhXCIsIHIpLCByO1xuICAgICAgfSwgaS5vID0gZnVuY3Rpb24obiwgcikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sIHIpO1xuICAgICAgfSwgaS5wID0gXCJcIiwgaShpLnMgPSAwKTtcbiAgICB9KFtmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICBmdW5jdGlvbiBuKGwsIGMpIHtcbiAgICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCBjLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgdmFyIGggPSBjW3VdO1xuICAgICAgICAgIGguZW51bWVyYWJsZSA9IGguZW51bWVyYWJsZSB8fCAhMSwgaC5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIGggJiYgKGgud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsLCBoLmtleSwgaCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHIobCwgYywgdSkge1xuICAgICAgICByZXR1cm4gYyAmJiBuKGwucHJvdG90eXBlLCBjKSwgdSAmJiBuKGwsIHUpLCBsO1xuICAgICAgfVxuICAgICAgaS5yKG8pO1xuICAgICAgdmFyIGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gbChjKSB7XG4gICAgICAgICAgdmFyIHUgPSB0aGlzO1xuICAgICAgICAgIChmdW5jdGlvbihoLCBmKSB7XG4gICAgICAgICAgICBpZiAoIShoIGluc3RhbmNlb2YgZikpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICAgICAgfSkodGhpcywgbCksIHRoaXMuY29tbWFuZHMgPSB7fSwgdGhpcy5rZXlzID0ge30sIHRoaXMubmFtZSA9IGMubmFtZSwgdGhpcy5wYXJzZVNob3J0Y3V0TmFtZShjLm5hbWUpLCB0aGlzLmVsZW1lbnQgPSBjLm9uLCB0aGlzLmNhbGxiYWNrID0gYy5jYWxsYmFjaywgdGhpcy5leGVjdXRlU2hvcnRjdXQgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICB1LmV4ZWN1dGUoaCk7XG4gICAgICAgICAgfSwgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuZXhlY3V0ZVNob3J0Y3V0LCAhMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHIobCwgbnVsbCwgW3sga2V5OiBcInN1cHBvcnRlZENvbW1hbmRzXCIsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHsgU0hJRlQ6IFtcIlNISUZUXCJdLCBDTUQ6IFtcIkNNRFwiLCBcIkNPTlRST0xcIiwgXCJDT01NQU5EXCIsIFwiV0lORE9XU1wiLCBcIkNUUkxcIl0sIEFMVDogW1wiQUxUXCIsIFwiT1BUSU9OXCJdIH07XG4gICAgICAgIH0gfSwgeyBrZXk6IFwia2V5Q29kZXNcIiwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4geyAwOiA0OCwgMTogNDksIDI6IDUwLCAzOiA1MSwgNDogNTIsIDU6IDUzLCA2OiA1NCwgNzogNTUsIDg6IDU2LCA5OiA1NywgQTogNjUsIEI6IDY2LCBDOiA2NywgRDogNjgsIEU6IDY5LCBGOiA3MCwgRzogNzEsIEg6IDcyLCBJOiA3MywgSjogNzQsIEs6IDc1LCBMOiA3NiwgTTogNzcsIE46IDc4LCBPOiA3OSwgUDogODAsIFE6IDgxLCBSOiA4MiwgUzogODMsIFQ6IDg0LCBVOiA4NSwgVjogODYsIFc6IDg3LCBYOiA4OCwgWTogODksIFo6IDkwLCBCQUNLU1BBQ0U6IDgsIEVOVEVSOiAxMywgRVNDQVBFOiAyNywgTEVGVDogMzcsIFVQOiAzOCwgUklHSFQ6IDM5LCBET1dOOiA0MCwgSU5TRVJUOiA0NSwgREVMRVRFOiA0NiwgXCIuXCI6IDE5MCB9O1xuICAgICAgICB9IH1dKSwgcihsLCBbeyBrZXk6IFwicGFyc2VTaG9ydGN1dE5hbWVcIiwgdmFsdWU6IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICBjID0gYy5zcGxpdChcIitcIik7XG4gICAgICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCBjLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICBjW3VdID0gY1t1XS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgdmFyIGggPSAhMTtcbiAgICAgICAgICAgIGZvciAodmFyIGYgaW4gbC5zdXBwb3J0ZWRDb21tYW5kcylcbiAgICAgICAgICAgICAgaWYgKGwuc3VwcG9ydGVkQ29tbWFuZHNbZl0uaW5jbHVkZXMoY1t1XSkpIHtcbiAgICAgICAgICAgICAgICBoID0gdGhpcy5jb21tYW5kc1tmXSA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBoIHx8ICh0aGlzLmtleXNbY1t1XV0gPSAhMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIHYgaW4gbC5zdXBwb3J0ZWRDb21tYW5kcylcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZHNbdl0gfHwgKHRoaXMuY29tbWFuZHNbdl0gPSAhMSk7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwiZXhlY3V0ZVwiLCB2YWx1ZTogZnVuY3Rpb24oYykge1xuICAgICAgICAgIHZhciB1LCBoID0geyBDTUQ6IGMuY3RybEtleSB8fCBjLm1ldGFLZXksIFNISUZUOiBjLnNoaWZ0S2V5LCBBTFQ6IGMuYWx0S2V5IH0sIGYgPSAhMDtcbiAgICAgICAgICBmb3IgKHUgaW4gdGhpcy5jb21tYW5kcylcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZHNbdV0gIT09IGhbdV0gJiYgKGYgPSAhMSk7XG4gICAgICAgICAgdmFyIHYsIHAgPSAhMDtcbiAgICAgICAgICBmb3IgKHYgaW4gdGhpcy5rZXlzKVxuICAgICAgICAgICAgcCA9IHAgJiYgYy5rZXlDb2RlID09PSBsLmtleUNvZGVzW3ZdO1xuICAgICAgICAgIGYgJiYgcCAmJiB0aGlzLmNhbGxiYWNrKGMpO1xuICAgICAgICB9IH0sIHsga2V5OiBcInJlbW92ZVwiLCB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuZXhlY3V0ZVNob3J0Y3V0KTtcbiAgICAgICAgfSB9XSksIGw7XG4gICAgICB9KCk7XG4gICAgICBvLmRlZmF1bHQgPSBhO1xuICAgIH1dKS5kZWZhdWx0O1xuICB9KTtcbn0pKERvKTtcbmNvbnN0IFBvID0gLyogQF9fUFVSRV9fICovIHhlKEFlKTtcbmNsYXNzIEZvIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgc2hvcnRjdXRcbiAgICpcbiAgICogQHBhcmFtIHNob3J0Y3V0IC0gc2hvcnRjdXQgb3B0aW9uc1xuICAgKi9cbiAgYWRkKGUpIHtcbiAgICBpZiAodGhpcy5maW5kU2hvcnRjdXQoZS5vbiwgZS5uYW1lKSlcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgU2hvcnRjdXQgJHtlLm5hbWV9IGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBmb3IgJHtlLm9ufS4gUGxlYXNlIHJlbW92ZSBpdCBiZWZvcmUgYWRkIGEgbmV3IGhhbmRsZXIuYFxuICAgICAgKTtcbiAgICBjb25zdCBvID0gbmV3IFBvKHtcbiAgICAgIG5hbWU6IGUubmFtZSxcbiAgICAgIG9uOiBlLm9uLFxuICAgICAgY2FsbGJhY2s6IGUuaGFuZGxlclxuICAgIH0pLCBpID0gdGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzLmdldChlLm9uKSB8fCBbXTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTaG9ydGN1dHMuc2V0KGUub24sIFsuLi5pLCBvXSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzaG9ydGN1dFxuICAgKlxuICAgKiBAcGFyYW0gZWxlbWVudCAtIEVsZW1lbnQgc2hvcnRjdXQgaXMgc2V0IGZvclxuICAgKiBAcGFyYW0gbmFtZSAtIHNob3J0Y3V0IG5hbWVcbiAgICovXG4gIHJlbW92ZShlLCB0KSB7XG4gICAgY29uc3QgbyA9IHRoaXMuZmluZFNob3J0Y3V0KGUsIHQpO1xuICAgIGlmICghbylcbiAgICAgIHJldHVybjtcbiAgICBvLnJlbW92ZSgpO1xuICAgIGNvbnN0IGkgPSB0aGlzLnJlZ2lzdGVyZWRTaG9ydGN1dHMuZ2V0KGUpO1xuICAgIHRoaXMucmVnaXN0ZXJlZFNob3J0Y3V0cy5zZXQoZSwgaS5maWx0ZXIoKG4pID0+IG4gIT09IG8pKTtcbiAgfVxuICAvKipcbiAgICogR2V0IFNob3J0Y3V0IGluc3RhbmNlIGlmIGV4aXN0XG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50IC0gRWxlbWVudCBzaG9yY3V0IGlzIHNldCBmb3JcbiAgICogQHBhcmFtIHNob3J0Y3V0IC0gc2hvcnRjdXQgbmFtZVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBpbmRleCAtIHNob3J0Y3V0IGluZGV4IGlmIGV4aXN0XG4gICAqL1xuICBmaW5kU2hvcnRjdXQoZSwgdCkge1xuICAgIHJldHVybiAodGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzLmdldChlKSB8fCBbXSkuZmluZCgoeyBuYW1lOiBpIH0pID0+IGkgPT09IHQpO1xuICB9XG59XG5jb25zdCByZSA9IG5ldyBGbygpO1xudmFyIEhvID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCB6byA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsIGd0ID0gKHMsIGUsIHQsIG8pID0+IHtcbiAgZm9yICh2YXIgaSA9IG8gPiAxID8gdm9pZCAwIDogbyA/IHpvKGUsIHQpIDogZSwgbiA9IHMubGVuZ3RoIC0gMSwgcjsgbiA+PSAwOyBuLS0pXG4gICAgKHIgPSBzW25dKSAmJiAoaSA9IChvID8gcihlLCB0LCBpKSA6IHIoaSkpIHx8IGkpO1xuICByZXR1cm4gbyAmJiBpICYmIEhvKGUsIHQsIGkpLCBpO1xufSwgYmUgPSAvKiBAX19QVVJFX18gKi8gKChzKSA9PiAocy5PcGVuZWQgPSBcInRvb2xib3gtb3BlbmVkXCIsIHMuQ2xvc2VkID0gXCJ0b29sYm94LWNsb3NlZFwiLCBzLkJsb2NrQWRkZWQgPSBcInRvb2xib3gtYmxvY2stYWRkZWRcIiwgcykpKGJlIHx8IHt9KTtcbmNvbnN0IGJ0ID0gY2xhc3MgZXh0ZW5kcyB3ZSB7XG4gIC8qKlxuICAgKiBUb29sYm94IGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gYXZhaWxhYmxlIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIG9wdGlvbnMuYXBpIC0gRWRpdG9yIEFQSSBtZXRob2RzXG4gICAqIEBwYXJhbSBvcHRpb25zLnRvb2xzIC0gVG9vbHMgYXZhaWxhYmxlIHRvIGNoZWNrIHdoZXRoZXIgc29tZSBvZiB0aGVtIHNob3VsZCBiZSBkaXNwbGF5ZWQgYXQgdGhlIFRvb2xib3ggb3Igbm90XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaTogcywgdG9vbHM6IGUsIGkxOG5MYWJlbHM6IHQgfSkge1xuICAgIHN1cGVyKCksIHRoaXMub3BlbmVkID0gITEsIHRoaXMubm9kZXMgPSB7XG4gICAgICB0b29sYm94OiBudWxsXG4gICAgfSwgdGhpcy5vblBvcG92ZXJDbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMub3BlbmVkID0gITEsIHRoaXMuZW1pdChcbiAgICAgICAgXCJ0b29sYm94LWNsb3NlZFwiXG4gICAgICAgIC8qIENsb3NlZCAqL1xuICAgICAgKTtcbiAgICB9LCB0aGlzLmFwaSA9IHMsIHRoaXMudG9vbHMgPSBlLCB0aGlzLmkxOG5MYWJlbHMgPSB0O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRydWUgaWYgVG9vbGJveCBpcyBFbXB0eSBhbmQgbm90aGluZyB0byBzaG93XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbHNUb0JlRGlzcGxheWVkLmxlbmd0aCA9PT0gMDtcbiAgfVxuICAvKipcbiAgICogQ1NTIHN0eWxlc1xuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b29sYm94OiBcImNlLXRvb2xib3hcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE1ha2VzIHRoZSBUb29sYm94XG4gICAqL1xuICBtYWtlKCkge1xuICAgIHJldHVybiB0aGlzLnBvcG92ZXIgPSBuZXcgSGUoe1xuICAgICAgc2NvcGVFbGVtZW50OiB0aGlzLmFwaS51aS5ub2Rlcy5yZWRhY3RvcixcbiAgICAgIHNlYXJjaGFibGU6ICEwLFxuICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgbm90aGluZ0ZvdW5kOiB0aGlzLmkxOG5MYWJlbHMubm90aGluZ0ZvdW5kLFxuICAgICAgICBzZWFyY2g6IHRoaXMuaTE4bkxhYmVscy5maWx0ZXJcbiAgICAgIH0sXG4gICAgICBpdGVtczogdGhpcy50b29sYm94SXRlbXNUb0JlRGlzcGxheWVkXG4gICAgfSksIHRoaXMucG9wb3Zlci5vbihmZS5DbG9zZSwgdGhpcy5vblBvcG92ZXJDbG9zZSksIHRoaXMuZW5hYmxlU2hvcnRjdXRzKCksIHRoaXMubm9kZXMudG9vbGJveCA9IHRoaXMucG9wb3Zlci5nZXRFbGVtZW50KCksIHRoaXMubm9kZXMudG9vbGJveC5jbGFzc0xpc3QuYWRkKGJ0LkNTUy50b29sYm94KSwgdGhpcy5ub2Rlcy50b29sYm94O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIFRvb2xib3ggaGFzIHRoZSBGbGlwcGVyIGFjdGl2YXRlZCBhbmQgdGhlIEZsaXBwZXIgaGFzIHNlbGVjdGVkIGJ1dHRvblxuICAgKi9cbiAgaGFzRm9jdXMoKSB7XG4gICAgdmFyIHM7XG4gICAgcmV0dXJuIChzID0gdGhpcy5wb3BvdmVyKSA9PSBudWxsID8gdm9pZCAwIDogcy5oYXNGb2N1cygpO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95IE1vZHVsZVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB2YXIgcztcbiAgICBzdXBlci5kZXN0cm95KCksIHRoaXMubm9kZXMgJiYgdGhpcy5ub2Rlcy50b29sYm94ICYmICh0aGlzLm5vZGVzLnRvb2xib3gucmVtb3ZlKCksIHRoaXMubm9kZXMudG9vbGJveCA9IG51bGwpLCB0aGlzLnJlbW92ZUFsbFNob3J0Y3V0cygpLCAocyA9IHRoaXMucG9wb3ZlcikgPT0gbnVsbCB8fCBzLm9mZihmZS5DbG9zZSwgdGhpcy5vblBvcG92ZXJDbG9zZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRvb2xib3ggVG9vbCdzIGJ1dHRvbiBjbGljayBoYW5kbGVyXG4gICAqXG4gICAqIEBwYXJhbSB0b29sTmFtZSAtIHRvb2wgdHlwZSB0byBiZSBhY3RpdmF0ZWRcbiAgICogQHBhcmFtIGJsb2NrRGF0YU92ZXJyaWRlcyAtIEJsb2NrIGRhdGEgcHJlZGVmaW5lZCBieSB0aGUgYWN0aXZhdGVkIFRvb2xib3ggaXRlbVxuICAgKi9cbiAgdG9vbEJ1dHRvbkFjdGl2YXRlZChzLCBlKSB7XG4gICAgdGhpcy5pbnNlcnROZXdCbG9jayhzLCBlKTtcbiAgfVxuICAvKipcbiAgICogT3BlbiBUb29sYm94IHdpdGggVG9vbHNcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgdmFyIHM7XG4gICAgdGhpcy5pc0VtcHR5IHx8ICgocyA9IHRoaXMucG9wb3ZlcikgPT0gbnVsbCB8fCBzLnNob3coKSwgdGhpcy5vcGVuZWQgPSAhMCwgdGhpcy5lbWl0KFxuICAgICAgXCJ0b29sYm94LW9wZW5lZFwiXG4gICAgICAvKiBPcGVuZWQgKi9cbiAgICApKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgVG9vbGJveFxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdmFyIHM7XG4gICAgKHMgPSB0aGlzLnBvcG92ZXIpID09IG51bGwgfHwgcy5oaWRlKCksIHRoaXMub3BlbmVkID0gITEsIHRoaXMuZW1pdChcbiAgICAgIFwidG9vbGJveC1jbG9zZWRcIlxuICAgICAgLyogQ2xvc2VkICovXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgVG9vbGJveFxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXMub3BlbmVkID8gdGhpcy5jbG9zZSgpIDogdGhpcy5vcGVuKCk7XG4gIH1cbiAgZ2V0IHRvb2xzVG9CZURpc3BsYXllZCgpIHtcbiAgICBjb25zdCBzID0gW107XG4gICAgcmV0dXJuIHRoaXMudG9vbHMuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgZS50b29sYm94ICYmIHMucHVzaChlKTtcbiAgICB9KSwgcztcbiAgfVxuICBnZXQgdG9vbGJveEl0ZW1zVG9CZURpc3BsYXllZCgpIHtcbiAgICBjb25zdCBzID0gKGUsIHQpID0+ICh7XG4gICAgICBpY29uOiBlLmljb24sXG4gICAgICB0aXRsZTogJC50KFgudG9vbE5hbWVzLCBlLnRpdGxlIHx8IGtlKHQubmFtZSkpLFxuICAgICAgbmFtZTogdC5uYW1lLFxuICAgICAgb25BY3RpdmF0ZTogKCkgPT4ge1xuICAgICAgICB0aGlzLnRvb2xCdXR0b25BY3RpdmF0ZWQodC5uYW1lLCBlLmRhdGEpO1xuICAgICAgfSxcbiAgICAgIHNlY29uZGFyeUxhYmVsOiB0LnNob3J0Y3V0ID8gbnQodC5zaG9ydGN1dCkgOiBcIlwiXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMudG9vbHNUb0JlRGlzcGxheWVkLnJlZHVjZSgoZSwgdCkgPT4gKEFycmF5LmlzQXJyYXkodC50b29sYm94KSA/IHQudG9vbGJveC5mb3JFYWNoKChvKSA9PiB7XG4gICAgICBlLnB1c2gocyhvLCB0KSk7XG4gICAgfSkgOiB0LnRvb2xib3ggIT09IHZvaWQgMCAmJiBlLnB1c2gocyh0LnRvb2xib3gsIHQpKSwgZSksIFtdKTtcbiAgfVxuICAvKipcbiAgICogSXRlcmF0ZSBhbGwgdG9vbHMgYW5kIGVuYWJsZSB0aGVpcnMgc2hvcnRjdXRzIGlmIHNwZWNpZmllZFxuICAgKi9cbiAgZW5hYmxlU2hvcnRjdXRzKCkge1xuICAgIHRoaXMudG9vbHNUb0JlRGlzcGxheWVkLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGNvbnN0IGUgPSBzLnNob3J0Y3V0O1xuICAgICAgZSAmJiB0aGlzLmVuYWJsZVNob3J0Y3V0Rm9yVG9vbChzLm5hbWUsIGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGUgc2hvcnRjdXQgQmxvY2sgVG9vbCBpbXBsZW1lbnRlZCBzaG9ydGN1dFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9vbE5hbWUgLSBUb29sIG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNob3J0Y3V0IC0gc2hvcnRjdXQgYWNjb3JkaW5nIHRvIHRoZSBTaG9ydGN1dERhdGEgTW9kdWxlIGZvcm1hdFxuICAgKi9cbiAgZW5hYmxlU2hvcnRjdXRGb3JUb29sKHMsIGUpIHtcbiAgICByZS5hZGQoe1xuICAgICAgbmFtZTogZSxcbiAgICAgIG9uOiB0aGlzLmFwaS51aS5ub2Rlcy5yZWRhY3RvcixcbiAgICAgIGhhbmRsZXI6ICh0KSA9PiB7XG4gICAgICAgIHQucHJldmVudERlZmF1bHQoKSwgdGhpcy5pbnNlcnROZXdCbG9jayhzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgYWRkZWQgc2hvcnRjdXRzXG4gICAqIEZpcmVkIHdoZW4gdGhlIFJlYWQtT25seSBtb2RlIGlzIGFjdGl2YXRlZFxuICAgKi9cbiAgcmVtb3ZlQWxsU2hvcnRjdXRzKCkge1xuICAgIHRoaXMudG9vbHNUb0JlRGlzcGxheWVkLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGNvbnN0IGUgPSBzLnNob3J0Y3V0O1xuICAgICAgZSAmJiByZS5yZW1vdmUodGhpcy5hcGkudWkubm9kZXMucmVkYWN0b3IsIGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIG5ldyBibG9ja1xuICAgKiBDYW4gYmUgY2FsbGVkIHdoZW4gYnV0dG9uIGNsaWNrZWQgb24gVG9vbGJveCBvciBieSBTaG9ydGN1dERhdGFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvb2xOYW1lIC0gVG9vbCBuYW1lXG4gICAqIEBwYXJhbSBibG9ja0RhdGFPdmVycmlkZXMgLSBwcmVkZWZpbmVkIEJsb2NrIGRhdGFcbiAgICovXG4gIGFzeW5jIGluc2VydE5ld0Jsb2NrKHMsIGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCksIG8gPSB0aGlzLmFwaS5ibG9ja3MuZ2V0QmxvY2tCeUluZGV4KHQpO1xuICAgIGlmICghbylcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBpID0gby5pc0VtcHR5ID8gdCA6IHQgKyAxO1xuICAgIGxldCBuO1xuICAgIGlmIChlKSB7XG4gICAgICBjb25zdCBhID0gYXdhaXQgdGhpcy5hcGkuYmxvY2tzLmNvbXBvc2VCbG9ja0RhdGEocyk7XG4gICAgICBuID0gT2JqZWN0LmFzc2lnbihhLCBlKTtcbiAgICB9XG4gICAgY29uc3QgciA9IHRoaXMuYXBpLmJsb2Nrcy5pbnNlcnQoXG4gICAgICBzLFxuICAgICAgbixcbiAgICAgIHZvaWQgMCxcbiAgICAgIGksXG4gICAgICB2b2lkIDAsXG4gICAgICBvLmlzRW1wdHlcbiAgICApO1xuICAgIHIuY2FsbChxLkFQUEVORF9DQUxMQkFDSyksIHRoaXMuYXBpLmNhcmV0LnNldFRvQmxvY2soaSksIHRoaXMuZW1pdChcInRvb2xib3gtYmxvY2stYWRkZWRcIiwge1xuICAgICAgYmxvY2s6IHJcbiAgICB9KSwgdGhpcy5hcGkudG9vbGJhci5jbG9zZSgpO1xuICB9XG59O1xubGV0IHplID0gYnQ7XG5ndChbXG4gIGFlXG5dLCB6ZS5wcm90b3R5cGUsIFwidG9vbHNUb0JlRGlzcGxheWVkXCIsIDEpO1xuZ3QoW1xuICBhZVxuXSwgemUucHJvdG90eXBlLCBcInRvb2xib3hJdGVtc1RvQmVEaXNwbGF5ZWRcIiwgMSk7XG5jb25zdCBtdCA9IFwiYmxvY2sgaG92ZXJlZFwiO1xuY2xhc3Mgam8gZXh0ZW5kcyBTIHtcbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbiAtIE1vZHVsZSBDb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uLmNvbmZpZyAtIEVkaXRvcidzIGNvbmZpZ1xuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5ldmVudHNEaXNwYXRjaGVyIC0gRWRpdG9yJ3MgZXZlbnQgZGlzcGF0Y2hlclxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBjb25maWc6IGUsIGV2ZW50c0Rpc3BhdGNoZXI6IHQgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGNvbmZpZzogZSxcbiAgICAgIGV2ZW50c0Rpc3BhdGNoZXI6IHRcbiAgICB9KSwgdGhpcy50b29sdGlwID0gbmV3IEZlKCk7XG4gIH1cbiAgLyoqXG4gICAqIENTUyBzdHlsZXNcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvb2xiYXI6IFwiY2UtdG9vbGJhclwiLFxuICAgICAgY29udGVudDogXCJjZS10b29sYmFyX19jb250ZW50XCIsXG4gICAgICBhY3Rpb25zOiBcImNlLXRvb2xiYXJfX2FjdGlvbnNcIixcbiAgICAgIGFjdGlvbnNPcGVuZWQ6IFwiY2UtdG9vbGJhcl9fYWN0aW9ucy0tb3BlbmVkXCIsXG4gICAgICB0b29sYmFyT3BlbmVkOiBcImNlLXRvb2xiYXItLW9wZW5lZFwiLFxuICAgICAgb3BlbmVkVG9vbGJveEhvbGRlck1vZGlmaWVyOiBcImNvZGV4LWVkaXRvci0tdG9vbGJveC1vcGVuZWRcIixcbiAgICAgIHBsdXNCdXR0b246IFwiY2UtdG9vbGJhcl9fcGx1c1wiLFxuICAgICAgcGx1c0J1dHRvblNob3J0Y3V0OiBcImNlLXRvb2xiYXJfX3BsdXMtc2hvcnRjdXRcIixcbiAgICAgIHNldHRpbmdzVG9nZ2xlcjogXCJjZS10b29sYmFyX19zZXR0aW5ncy1idG5cIixcbiAgICAgIHNldHRpbmdzVG9nZ2xlckhpZGRlbjogXCJjZS10b29sYmFyX19zZXR0aW5ncy1idG4tLWhpZGRlblwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgVG9vbGJhciBvcGVuaW5nIHN0YXRlXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IG9wZW5lZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLkNTUy50b29sYmFyT3BlbmVkKTtcbiAgfVxuICAvKipcbiAgICogUHVibGljIGludGVyZmFjZSBmb3IgYWNjZXNzaW5nIHRoZSBUb29sYm94XG4gICAqL1xuICBnZXQgdG9vbGJveCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbmVkOiB0aGlzLnRvb2xib3hJbnN0YW5jZS5vcGVuZWQsXG4gICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICB0aGlzLnRvb2xib3hJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgfSxcbiAgICAgIG9wZW46ICgpID0+IHtcbiAgICAgICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayA9IHRoaXMuaG92ZXJlZEJsb2NrLCB0aGlzLnRvb2xib3hJbnN0YW5jZS5vcGVuKCk7XG4gICAgICB9LFxuICAgICAgdG9nZ2xlOiAoKSA9PiB0aGlzLnRvb2xib3hJbnN0YW5jZS50b2dnbGUoKSxcbiAgICAgIGhhc0ZvY3VzOiAoKSA9PiB0aGlzLnRvb2xib3hJbnN0YW5jZS5oYXNGb2N1cygpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQmxvY2sgYWN0aW9ucyBhcHBlYXJhbmNlIG1hbmlwdWxhdGlvbnNcbiAgICovXG4gIGdldCBibG9ja0FjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhpZGU6ICgpID0+IHtcbiAgICAgICAgdGhpcy5ub2Rlcy5hY3Rpb25zLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1MuYWN0aW9uc09wZW5lZCk7XG4gICAgICB9LFxuICAgICAgc2hvdzogKCkgPT4ge1xuICAgICAgICB0aGlzLm5vZGVzLmFjdGlvbnMuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5hY3Rpb25zT3BlbmVkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2RzIGZvciB3b3JraW5nIHdpdGggQmxvY2sgVHVuZXMgdG9nZ2xlclxuICAgKi9cbiAgZ2V0IGJsb2NrVHVuZXNUb2dnbGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoaWRlOiAoKSA9PiB0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnNldHRpbmdzVG9nZ2xlckhpZGRlbiksXG4gICAgICBzaG93OiAoKSA9PiB0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLnNldHRpbmdzVG9nZ2xlckhpZGRlbilcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBUb2dnbGVzIHJlYWQtb25seSBtb2RlXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVhZE9ubHlFbmFibGVkIC0gcmVhZC1vbmx5IG1vZGVcbiAgICovXG4gIHRvZ2dsZVJlYWRPbmx5KGUpIHtcbiAgICBlID8gKHRoaXMuZGVzdHJveSgpLCB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmRlc3Ryb3koKSwgdGhpcy5kaXNhYmxlTW9kdWxlQmluZGluZ3MoKSkgOiAodGhpcy5kcmF3VUkoKSwgdGhpcy5lbmFibGVNb2R1bGVCaW5kaW5ncygpKTtcbiAgfVxuICAvKipcbiAgICogTW92ZSBUb29sYmFyIHRvIHRoZSBwYXNzZWQgKG9yIGN1cnJlbnQpIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSBibG9jayAtIGJsb2NrIHRvIG1vdmUgVG9vbGJhciBuZWFyIGl0XG4gICAqL1xuICBtb3ZlQW5kT3BlbihlID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jaykge1xuICAgIGlmICh0aGlzLnRvb2xib3hJbnN0YW5jZS5vcGVuZWQgJiYgdGhpcy50b29sYm94SW5zdGFuY2UuY2xvc2UoKSwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuZWQgJiYgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpLCAhZSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLmhvdmVyZWRCbG9jayA9IGU7XG4gICAgY29uc3QgdCA9IGUuaG9sZGVyLCB7IGlzTW9iaWxlOiBvIH0gPSB0aGlzLkVkaXRvci5VSSwgaSA9IGUucGx1Z2luc0NvbnRlbnQsIG4gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpKSwgciA9IHBhcnNlSW50KG4ucGFkZGluZ1RvcCwgMTApLCBhID0gdC5vZmZzZXRIZWlnaHQ7XG4gICAgbGV0IGw7XG4gICAgbyA/IGwgPSB0Lm9mZnNldFRvcCArIGEgOiBsID0gdC5vZmZzZXRUb3AgKyByLCB0aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUudG9wID0gYCR7TWF0aC5mbG9vcihsKX1weGAsIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3MubGVuZ3RoID09PSAxICYmIGUuaXNFbXB0eSA/IHRoaXMuYmxvY2tUdW5lc1RvZ2dsZXIuaGlkZSgpIDogdGhpcy5ibG9ja1R1bmVzVG9nZ2xlci5zaG93KCksIHRoaXMub3BlbigpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSB0aGUgVG9vbGJhclxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5FZGl0b3IuUmVhZE9ubHkuaXNFbmFibGVkIHx8ICh0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy50b29sYmFyT3BlbmVkKSwgdGhpcy5ibG9ja0FjdGlvbnMuaGlkZSgpLCB0aGlzLnRvb2xib3hJbnN0YW5jZS5jbG9zZSgpLCB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBPcGVuIFRvb2xiYXIgd2l0aCBQbHVzIEJ1dHRvbiBhbmQgQWN0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHdpdGhCbG9ja0FjdGlvbnMgLSBieSBkZWZhdWx0LCBUb29sYmFyIG9wZW5zIHdpdGggQmxvY2sgQWN0aW9ucy5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBmbGFnIGFsbG93cyB0byBvcGVuIFRvb2xiYXIgd2l0aG91dCBBY3Rpb25zLlxuICAgKi9cbiAgb3BlbihlID0gITApIHtcbiAgICBvZSgoKSA9PiB7XG4gICAgICB0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy50b29sYmFyT3BlbmVkKSwgZSA/IHRoaXMuYmxvY2tBY3Rpb25zLnNob3coKSA6IHRoaXMuYmxvY2tBY3Rpb25zLmhpZGUoKTtcbiAgICB9LCA1MCkoKTtcbiAgfVxuICAvKipcbiAgICogRHJhd3MgVG9vbGJhciBlbGVtZW50c1xuICAgKi9cbiAgbWFrZSgpIHtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIgPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MudG9vbGJhciksIFtcImNvbnRlbnRcIiwgXCJhY3Rpb25zXCJdLmZvckVhY2goKHQpID0+IHtcbiAgICAgIHRoaXMubm9kZXNbdF0gPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1NbdF0pO1xuICAgIH0pLCBkLmFwcGVuZCh0aGlzLm5vZGVzLndyYXBwZXIsIHRoaXMubm9kZXMuY29udGVudCksIGQuYXBwZW5kKHRoaXMubm9kZXMuY29udGVudCwgdGhpcy5ub2Rlcy5hY3Rpb25zKSwgdGhpcy5ub2Rlcy5wbHVzQnV0dG9uID0gZC5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLnBsdXNCdXR0b24sIHtcbiAgICAgIGlubmVySFRNTDogTW9cbiAgICB9KSwgZC5hcHBlbmQodGhpcy5ub2Rlcy5hY3Rpb25zLCB0aGlzLm5vZGVzLnBsdXNCdXR0b24pLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbih0aGlzLm5vZGVzLnBsdXNCdXR0b24sIFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy50b29sdGlwLmhpZGUoITApLCB0aGlzLnBsdXNCdXR0b25DbGlja2VkKCk7XG4gICAgfSwgITEpO1xuICAgIGNvbnN0IGUgPSBkLm1ha2UoXCJkaXZcIik7XG4gICAgZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgkLnVpKFgudWkudG9vbGJhci50b29sYm94LCBcIkFkZFwiKSkpLCBlLmFwcGVuZENoaWxkKGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy5wbHVzQnV0dG9uU2hvcnRjdXQsIHtcbiAgICAgIHRleHRDb250ZW50OiBcIlx1MjFFNSBUYWJcIlxuICAgIH0pKSwgdGhpcy50b29sdGlwLm9uSG92ZXIodGhpcy5ub2Rlcy5wbHVzQnV0dG9uLCBlLCB7XG4gICAgICBoaWRpbmdEZWxheTogNDAwXG4gICAgfSksIHRoaXMubm9kZXMuc2V0dGluZ3NUb2dnbGVyID0gZC5tYWtlKFwic3BhblwiLCB0aGlzLkNTUy5zZXR0aW5nc1RvZ2dsZXIsIHtcbiAgICAgIGlubmVySFRNTDogSW9cbiAgICB9KSwgZC5hcHBlbmQodGhpcy5ub2Rlcy5hY3Rpb25zLCB0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlciksIHRoaXMudG9vbHRpcC5vbkhvdmVyKFxuICAgICAgdGhpcy5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIsXG4gICAgICAkLnVpKFgudWkuYmxvY2tUdW5lcy50b2dnbGVyLCBcIkNsaWNrIHRvIHR1bmVcIiksXG4gICAgICB7XG4gICAgICAgIGhpZGluZ0RlbGF5OiA0MDBcbiAgICAgIH1cbiAgICApLCBkLmFwcGVuZCh0aGlzLm5vZGVzLmFjdGlvbnMsIHRoaXMubWFrZVRvb2xib3goKSksIGQuYXBwZW5kKHRoaXMubm9kZXMuYWN0aW9ucywgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5nZXRFbGVtZW50KCkpLCBkLmFwcGVuZCh0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyLCB0aGlzLm5vZGVzLndyYXBwZXIpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBUb29sYm94IGluc3RhbmNlIGFuZCByZXR1cm4gaXQncyByZW5kZXJlZCBlbGVtZW50XG4gICAqL1xuICBtYWtlVG9vbGJveCgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sYm94SW5zdGFuY2UgPSBuZXcgemUoe1xuICAgICAgYXBpOiB0aGlzLkVkaXRvci5BUEkubWV0aG9kcyxcbiAgICAgIHRvb2xzOiB0aGlzLkVkaXRvci5Ub29scy5ibG9ja1Rvb2xzLFxuICAgICAgaTE4bkxhYmVsczoge1xuICAgICAgICBmaWx0ZXI6ICQudWkoWC51aS5wb3BvdmVyLCBcIkZpbHRlclwiKSxcbiAgICAgICAgbm90aGluZ0ZvdW5kOiAkLnVpKFgudWkucG9wb3ZlciwgXCJOb3RoaW5nIGZvdW5kXCIpXG4gICAgICB9XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKGJlLk9wZW5lZCwgKCkgPT4ge1xuICAgICAgdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLm9wZW5lZFRvb2xib3hIb2xkZXJNb2RpZmllcik7XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKGJlLkNsb3NlZCwgKCkgPT4ge1xuICAgICAgdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLm9wZW5lZFRvb2xib3hIb2xkZXJNb2RpZmllcik7XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKGJlLkJsb2NrQWRkZWQsICh7IGJsb2NrOiBlIH0pID0+IHtcbiAgICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBDYXJldDogbyB9ID0gdGhpcy5FZGl0b3IsIGkgPSB0LmdldEJsb2NrQnlJZChlLmlkKTtcbiAgICAgIGkuaW5wdXRzLmxlbmd0aCA9PT0gMCAmJiAoaSA9PT0gdC5sYXN0QmxvY2sgPyAodC5pbnNlcnRBdEVuZCgpLCBvLnNldFRvQmxvY2sodC5sYXN0QmxvY2spKSA6IG8uc2V0VG9CbG9jayh0Lm5leHRCbG9jaykpO1xuICAgIH0pLCB0aGlzLnRvb2xib3hJbnN0YW5jZS5tYWtlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIFBsdXMgQnV0dG9uXG4gICAqL1xuICBwbHVzQnV0dG9uQ2xpY2tlZCgpIHtcbiAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrID0gdGhpcy5ob3ZlcmVkQmxvY2ssIHRoaXMudG9vbGJveEluc3RhbmNlLnRvZ2dsZSgpO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGUgYmluZGluZ3NcbiAgICovXG4gIGVuYWJsZU1vZHVsZUJpbmRpbmdzKCkge1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMuc2V0dGluZ3NUb2dnbGVyLCBcIm1vdXNlZG93blwiLCAoZSkgPT4ge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKSwgdGhpcy5zZXR0aW5nc1RvZ2dsZXJDbGlja2VkKCksIHRoaXMudG9vbGJveEluc3RhbmNlLm9wZW5lZCAmJiB0aGlzLnRvb2xib3hJbnN0YW5jZS5jbG9zZSgpLCB0aGlzLnRvb2x0aXAuaGlkZSghMCk7XG4gICAgfSwgITApLCBlZSgpIHx8IHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5vbihtdCwgKGUpID0+IHtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkIHx8IHRoaXMudG9vbGJveEluc3RhbmNlLm9wZW5lZCB8fCB0aGlzLm1vdmVBbmRPcGVuKGUuYmxvY2spO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEaXNhYmxlIGJpbmRpbmdzXG4gICAqL1xuICBkaXNhYmxlTW9kdWxlQmluZGluZ3MoKSB7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMuY2xlYXJBbGwoKTtcbiAgfVxuICAvKipcbiAgICogQ2xpY2tzIG9uIHRoZSBCbG9jayBTZXR0aW5ncyB0b2dnbGVyXG4gICAqL1xuICBzZXR0aW5nc1RvZ2dsZXJDbGlja2VkKCkge1xuICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgPSB0aGlzLmhvdmVyZWRCbG9jaywgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuZWQgPyB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCkgOiB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW4odGhpcy5ob3ZlcmVkQmxvY2spO1xuICB9XG4gIC8qKlxuICAgKiBEcmF3cyBUb29sYmFyIFVJXG4gICAqXG4gICAqIFRvb2xiYXIgY29udGFpbnMgQmxvY2tTZXR0aW5ncyBhbmQgVG9vbGJveC5cbiAgICogVGhhdCdzIHdoeSBhdCBmaXJzdCB3ZSBkcmF3IGl0cyBjb21wb25lbnRzIGFuZCB0aGVuIFRvb2xiYXIgaXRzZWxmXG4gICAqXG4gICAqIFN0ZXBzOlxuICAgKiAgLSBNYWtlIFRvb2xiYXIgZGVwZW5kZW50IGNvbXBvbmVudHMgbGlrZSBCbG9ja1NldHRpbmdzLCBUb29sYm94IGFuZCBzbyBvblxuICAgKiAgLSBNYWtlIGl0c2VsZiBhbmQgYXBwZW5kIGRlcGVuZGVudCBub2RlcyB0byBpdHNlbGZcbiAgICpcbiAgICovXG4gIGRyYXdVSSgpIHtcbiAgICB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm1ha2UoKSwgdGhpcy5tYWtlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGNyZWF0ZWQgYW5kIHNhdmVkIEhUTUxFbGVtZW50c1xuICAgKiBJdCBpcyB1c2VkIGluIFJlYWQtT25seSBtb2RlXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlQWxsTm9kZXMoKSwgdGhpcy50b29sYm94SW5zdGFuY2UgJiYgdGhpcy50b29sYm94SW5zdGFuY2UuZGVzdHJveSgpLCB0aGlzLnRvb2x0aXAuZGVzdHJveSgpO1xuICB9XG59XG52YXIgeWUgPSAvKiBAX19QVVJFX18gKi8gKChzKSA9PiAoc1tzLkJsb2NrID0gMF0gPSBcIkJsb2NrXCIsIHNbcy5JbmxpbmUgPSAxXSA9IFwiSW5saW5lXCIsIHNbcy5UdW5lID0gMl0gPSBcIlR1bmVcIiwgcykpKHllIHx8IHt9KSwgbWUgPSAvKiBAX19QVVJFX18gKi8gKChzKSA9PiAocy5TaG9ydGN1dCA9IFwic2hvcnRjdXRcIiwgcy5Ub29sYm94ID0gXCJ0b29sYm94XCIsIHMuRW5hYmxlZElubGluZVRvb2xzID0gXCJpbmxpbmVUb29sYmFyXCIsIHMuRW5hYmxlZEJsb2NrVHVuZXMgPSBcInR1bmVzXCIsIHMuQ29uZmlnID0gXCJjb25maWdcIiwgcykpKG1lIHx8IHt9KSwga3QgPSAvKiBAX19QVVJFX18gKi8gKChzKSA9PiAocy5TaG9ydGN1dCA9IFwic2hvcnRjdXRcIiwgcy5TYW5pdGl6ZUNvbmZpZyA9IFwic2FuaXRpemVcIiwgcykpKGt0IHx8IHt9KSwgc2UgPSAvKiBAX19QVVJFX18gKi8gKChzKSA9PiAocy5Jc0VuYWJsZWRMaW5lQnJlYWtzID0gXCJlbmFibGVMaW5lQnJlYWtzXCIsIHMuVG9vbGJveCA9IFwidG9vbGJveFwiLCBzLkNvbnZlcnNpb25Db25maWcgPSBcImNvbnZlcnNpb25Db25maWdcIiwgcy5Jc1JlYWRPbmx5U3VwcG9ydGVkID0gXCJpc1JlYWRPbmx5U3VwcG9ydGVkXCIsIHMuUGFzdGVDb25maWcgPSBcInBhc3RlQ29uZmlnXCIsIHMpKShzZSB8fCB7fSksIGplID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHMuSXNJbmxpbmUgPSBcImlzSW5saW5lXCIsIHMuVGl0bGUgPSBcInRpdGxlXCIsIHMpKShqZSB8fCB7fSksIHZ0ID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHMuSXNUdW5lID0gXCJpc1R1bmVcIiwgcykpKHZ0IHx8IHt9KTtcbmNsYXNzIFVlIHtcbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge0NvbnN0cnVjdG9yT3B0aW9uc30gb3B0aW9ucyAtIENvbnN0cnVjdG9yIG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBuYW1lOiBlLFxuICAgIGNvbnN0cnVjdGFibGU6IHQsXG4gICAgY29uZmlnOiBvLFxuICAgIGFwaTogaSxcbiAgICBpc0RlZmF1bHQ6IG4sXG4gICAgaXNJbnRlcm5hbDogciA9ICExLFxuICAgIGRlZmF1bHRQbGFjZWhvbGRlcjogYVxuICB9KSB7XG4gICAgdGhpcy5hcGkgPSBpLCB0aGlzLm5hbWUgPSBlLCB0aGlzLmNvbnN0cnVjdGFibGUgPSB0LCB0aGlzLmNvbmZpZyA9IG8sIHRoaXMuaXNEZWZhdWx0ID0gbiwgdGhpcy5pc0ludGVybmFsID0gciwgdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXIgPSBhO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRvb2wgdXNlciBjb25maWd1cmF0aW9uXG4gICAqL1xuICBnZXQgc2V0dGluZ3MoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuY29uZmlnLmNvbmZpZyB8fCB7fTtcbiAgICByZXR1cm4gdGhpcy5pc0RlZmF1bHQgJiYgIShcInBsYWNlaG9sZGVyXCIgaW4gZSkgJiYgdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXIgJiYgKGUucGxhY2Vob2xkZXIgPSB0aGlzLmRlZmF1bHRQbGFjZWhvbGRlciksIGU7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxzIFRvb2wncyByZXNldCBtZXRob2RcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIGlmIChEKHRoaXMuY29uc3RydWN0YWJsZS5yZXNldCkpXG4gICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlLnJlc2V0KCk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxzIFRvb2wncyBwcmVwYXJlIG1ldGhvZFxuICAgKi9cbiAgcHJlcGFyZSgpIHtcbiAgICBpZiAoRCh0aGlzLmNvbnN0cnVjdGFibGUucHJlcGFyZSkpXG4gICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlLnByZXBhcmUoe1xuICAgICAgICB0b29sTmFtZTogdGhpcy5uYW1lLFxuICAgICAgICBjb25maWc6IHRoaXMuc2V0dGluZ3NcbiAgICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHNob3J0Y3V0IGZvciBUb29sIChpbnRlcm5hbCBvciBzcGVjaWZpZWQgYnkgdXNlcilcbiAgICovXG4gIGdldCBzaG9ydGN1dCgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5jb25zdHJ1Y3RhYmxlLnNob3J0Y3V0O1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5zaG9ydGN1dCB8fCBlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRvb2wncyBzYW5pdGl6ZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgZ2V0IHNhbml0aXplQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdGFibGUuc2FuaXRpemUgfHwge307XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBUb29scyBpcyBpbmxpbmVcbiAgICovXG4gIGlzSW5saW5lKCkge1xuICAgIHJldHVybiB0aGlzLnR5cGUgPT09IDE7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBUb29scyBpcyBibG9ja1xuICAgKi9cbiAgaXNCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSAwO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgVG9vbHMgaXMgdHVuZVxuICAgKi9cbiAgaXNUdW5lKCkge1xuICAgIHJldHVybiB0aGlzLnR5cGUgPT09IDI7XG4gIH1cbn1cbmNsYXNzIFVvIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24gLSBNb2R1bGUgQ29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5jb25maWcgLSBFZGl0b3IncyBjb25maWdcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uZXZlbnRzRGlzcGF0Y2hlciAtIEVkaXRvcidzIGV2ZW50IGRpc3BhdGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBjb25maWc6IGUsXG4gICAgICBldmVudHNEaXNwYXRjaGVyOiB0XG4gICAgfSksIHRoaXMuQ1NTID0ge1xuICAgICAgaW5saW5lVG9vbGJhcjogXCJjZS1pbmxpbmUtdG9vbGJhclwiLFxuICAgICAgaW5saW5lVG9vbGJhclNob3dlZDogXCJjZS1pbmxpbmUtdG9vbGJhci0tc2hvd2VkXCIsXG4gICAgICBpbmxpbmVUb29sYmFyTGVmdE9yaWVudGVkOiBcImNlLWlubGluZS10b29sYmFyLS1sZWZ0LW9yaWVudGVkXCIsXG4gICAgICBpbmxpbmVUb29sYmFyUmlnaHRPcmllbnRlZDogXCJjZS1pbmxpbmUtdG9vbGJhci0tcmlnaHQtb3JpZW50ZWRcIixcbiAgICAgIGlubGluZVRvb2xiYXJTaG9ydGN1dDogXCJjZS1pbmxpbmUtdG9vbGJhcl9fc2hvcnRjdXRcIixcbiAgICAgIGJ1dHRvbnNXcmFwcGVyOiBcImNlLWlubGluZS10b29sYmFyX19idXR0b25zXCIsXG4gICAgICBhY3Rpb25zV3JhcHBlcjogXCJjZS1pbmxpbmUtdG9vbGJhcl9fYWN0aW9uc1wiLFxuICAgICAgaW5saW5lVG9vbEJ1dHRvbjogXCJjZS1pbmxpbmUtdG9vbFwiLFxuICAgICAgaW5wdXRGaWVsZDogXCJjZHgtaW5wdXRcIixcbiAgICAgIGZvY3VzZWRCdXR0b246IFwiY2UtaW5saW5lLXRvb2wtLWZvY3VzZWRcIixcbiAgICAgIGNvbnZlcnNpb25Ub2dnbGVyOiBcImNlLWlubGluZS10b29sYmFyX19kcm9wZG93blwiLFxuICAgICAgY29udmVyc2lvblRvZ2dsZXJBcnJvdzogXCJjZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tYXJyb3dcIixcbiAgICAgIGNvbnZlcnNpb25Ub2dnbGVySGlkZGVuOiBcImNlLWlubGluZS10b29sYmFyX19kcm9wZG93bi0taGlkZGVuXCIsXG4gICAgICBjb252ZXJzaW9uVG9nZ2xlckNvbnRlbnQ6IFwiY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLWNvbnRlbnRcIixcbiAgICAgIHRvZ2dsZXJBbmRCdXR0b25zV3JhcHBlcjogXCJjZS1pbmxpbmUtdG9vbGJhcl9fdG9nZ2xlci1hbmQtYnV0dG9uLXdyYXBwZXJcIlxuICAgIH0sIHRoaXMub3BlbmVkID0gITEsIHRoaXMudG9vbGJhclZlcnRpY2FsTWFyZ2luID0gZWUoKSA/IDIwIDogNiwgdGhpcy5idXR0b25zTGlzdCA9IG51bGwsIHRoaXMud2lkdGggPSAwLCB0aGlzLmZsaXBwZXIgPSBudWxsLCB0aGlzLnRvb2x0aXAgPSBuZXcgRmUoKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyByZWFkLW9ubHkgbW9kZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIHJlYWQtb25seSBtb2RlXG4gICAqL1xuICB0b2dnbGVSZWFkT25seShlKSB7XG4gICAgZSA/ICh0aGlzLmRlc3Ryb3koKSwgdGhpcy5FZGl0b3IuQ29udmVyc2lvblRvb2xiYXIuZGVzdHJveSgpKSA6IHRoaXMubWFrZSgpO1xuICB9XG4gIC8qKlxuICAgKiAgTW92aW5nIC8gYXBwZWFyYW5jZVxuICAgKiAgfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flxuICAgKi9cbiAgLyoqXG4gICAqIFNob3dzIElubGluZSBUb29sYmFyIGlmIHNvbWV0aGluZyBpcyBzZWxlY3RlZFxuICAgKlxuICAgKiBAcGFyYW0gW25lZWRUb0Nsb3NlXSAtIHBhc3MgdHJ1ZSB0byBjbG9zZSB0b29sYmFyIGlmIGl0IGlzIG5vdCBhbGxvd2VkLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdm9pZCB0byB1c2UgaXQganVzdCBmb3IgY2xvc2luZyBJVCwgYmV0dGVyIGNhbGwgLmNsb3NlKCkgY2xlYXJseS5cbiAgICogQHBhcmFtIFtuZWVkVG9TaG93Q29udmVyc2lvblRvb2xiYXJdIC0gcGFzcyBmYWxzZSB0byBub3QgdG8gc2hvdyBDb252ZXJzaW9uIFRvb2xiYXJcbiAgICovXG4gIHRyeVRvU2hvdyhlID0gITEsIHQgPSAhMCkge1xuICAgIGlmICghdGhpcy5hbGxvd2VkVG9TaG93KCkpIHtcbiAgICAgIGUgJiYgdGhpcy5jbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm1vdmUoKSwgdGhpcy5vcGVuKHQpLCB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgVG9vbGJhciB0byB0aGUgc2VsZWN0ZWQgdGV4dFxuICAgKi9cbiAgbW92ZSgpIHtcbiAgICBjb25zdCBlID0gbS5yZWN0LCB0ID0gdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbyA9IHtcbiAgICAgIHg6IGUueCAtIHQubGVmdCxcbiAgICAgIHk6IGUueSArIGUuaGVpZ2h0IC0gLy8gKyB3aW5kb3cuc2Nyb2xsWVxuICAgICAgdC50b3AgKyB0aGlzLnRvb2xiYXJWZXJ0aWNhbE1hcmdpblxuICAgIH07XG4gICAgZS53aWR0aCAmJiAoby54ICs9IE1hdGguZmxvb3IoZS53aWR0aCAvIDIpKTtcbiAgICBjb25zdCBpID0gby54IC0gdGhpcy53aWR0aCAvIDIsIG4gPSBvLnggKyB0aGlzLndpZHRoIC8gMjtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgIHRoaXMuQ1NTLmlubGluZVRvb2xiYXJMZWZ0T3JpZW50ZWQsXG4gICAgICBpIDwgdGhpcy5FZGl0b3IuVUkuY29udGVudFJlY3QubGVmdFxuICAgICksIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QudG9nZ2xlKFxuICAgICAgdGhpcy5DU1MuaW5saW5lVG9vbGJhclJpZ2h0T3JpZW50ZWQsXG4gICAgICBuID4gdGhpcy5FZGl0b3IuVUkuY29udGVudFJlY3QucmlnaHRcbiAgICApLCB0aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUubGVmdCA9IE1hdGguZmxvb3Ioby54KSArIFwicHhcIiwgdGhpcy5ub2Rlcy53cmFwcGVyLnN0eWxlLnRvcCA9IE1hdGguZmxvb3Ioby55KSArIFwicHhcIjtcbiAgfVxuICAvKipcbiAgICogSGlkZXMgSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMub3BlbmVkICYmICh0aGlzLkVkaXRvci5SZWFkT25seS5pc0VuYWJsZWQgfHwgKHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmlubGluZVRvb2xiYXJTaG93ZWQpLCBBcnJheS5mcm9tKHRoaXMudG9vbHNJbnN0YW5jZXMuZW50cmllcygpKS5mb3JFYWNoKChbZSwgdF0pID0+IHtcbiAgICAgIGNvbnN0IG8gPSB0aGlzLmdldFRvb2xTaG9ydGN1dChlKTtcbiAgICAgIG8gJiYgcmUucmVtb3ZlKHRoaXMuRWRpdG9yLlVJLm5vZGVzLnJlZGFjdG9yLCBvKSwgRCh0LmNsZWFyKSAmJiB0LmNsZWFyKCk7XG4gICAgfSksIHRoaXMub3BlbmVkID0gITEsIHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksIHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCkpKTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgSW5saW5lIFRvb2xiYXJcbiAgICpcbiAgICogQHBhcmFtIFtuZWVkVG9TaG93Q29udmVyc2lvblRvb2xiYXJdIC0gcGFzcyBmYWxzZSB0byBub3QgdG8gc2hvdyBDb252ZXJzaW9uIFRvb2xiYXJcbiAgICovXG4gIG9wZW4oZSA9ICEwKSB7XG4gICAgaWYgKHRoaXMub3BlbmVkKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuYWRkVG9vbHNGaWx0ZXJlZCgpLCB0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5pbmxpbmVUb29sYmFyU2hvd2VkKSwgdGhpcy5idXR0b25zTGlzdCA9IHRoaXMubm9kZXMuYnV0dG9ucy5xdWVyeVNlbGVjdG9yQWxsKGAuJHt0aGlzLkNTUy5pbmxpbmVUb29sQnV0dG9ufWApLCB0aGlzLm9wZW5lZCA9ICEwLCBlICYmIHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmhhc1Rvb2xzKCkgPyB0aGlzLnNldENvbnZlcnNpb25Ub2dnbGVyQ29udGVudCgpIDogdGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlci5oaWRkZW4gPSAhMDtcbiAgICBsZXQgdCA9IEFycmF5LmZyb20odGhpcy5idXR0b25zTGlzdCk7XG4gICAgdC51bnNoaWZ0KHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIpLCB0ID0gdC5maWx0ZXIoKG8pID0+ICFvLmhpZGRlbiksIHRoaXMuZmxpcHBlci5hY3RpdmF0ZSh0KTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgbm9kZSBpcyBjb250YWluZWQgYnkgSW5saW5lIFRvb2xiYXJcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIFx1MjAxNCBub2RlIHRvIGNoZWNrXG4gICAqL1xuICBjb250YWluc05vZGUoZSkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLndyYXBwZXIuY29udGFpbnMoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgVUkgYW5kIGl0cyBjb21wb25lbnRzXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZmxpcHBlciAmJiAodGhpcy5mbGlwcGVyLmRlYWN0aXZhdGUoKSwgdGhpcy5mbGlwcGVyID0gbnVsbCksIHRoaXMucmVtb3ZlQWxsTm9kZXMoKSwgdGhpcy50b29sdGlwLmRlc3Ryb3koKTtcbiAgfVxuICAvKipcbiAgICogTWFraW5nIERPTVxuICAgKi9cbiAgbWFrZSgpIHtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIgPSBkLm1ha2UoXCJkaXZcIiwgW1xuICAgICAgdGhpcy5DU1MuaW5saW5lVG9vbGJhcixcbiAgICAgIC4uLnRoaXMuaXNSdGwgPyBbdGhpcy5FZGl0b3IuVUkuQ1NTLmVkaXRvclJ0bEZpeF0gOiBbXVxuICAgIF0pLCB0aGlzLm5vZGVzLnRvZ2dsZXJBbmRCdXR0b25zV3JhcHBlciA9IGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy50b2dnbGVyQW5kQnV0dG9uc1dyYXBwZXIpLCB0aGlzLm5vZGVzLmJ1dHRvbnMgPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MuYnV0dG9uc1dyYXBwZXIpLCB0aGlzLm5vZGVzLmFjdGlvbnMgPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MuYWN0aW9uc1dyYXBwZXIpLCB0aGlzLmxpc3RlbmVycy5vbih0aGlzLm5vZGVzLndyYXBwZXIsIFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG4gICAgICBlLnRhcmdldC5jbG9zZXN0KGAuJHt0aGlzLkNTUy5hY3Rpb25zV3JhcHBlcn1gKSB8fCBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSksIGQuYXBwZW5kKHRoaXMubm9kZXMud3JhcHBlciwgW3RoaXMubm9kZXMudG9nZ2xlckFuZEJ1dHRvbnNXcmFwcGVyLCB0aGlzLm5vZGVzLmFjdGlvbnNdKSwgZC5hcHBlbmQodGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlciwgdGhpcy5ub2Rlcy53cmFwcGVyKSwgdGhpcy5hZGRDb252ZXJzaW9uVG9nZ2xlcigpLCBkLmFwcGVuZCh0aGlzLm5vZGVzLnRvZ2dsZXJBbmRCdXR0b25zV3JhcHBlciwgdGhpcy5ub2Rlcy5idXR0b25zKSwgdGhpcy5wcmVwYXJlQ29udmVyc2lvblRvb2xiYXIoKSwgdGhpcy5yZWNhbGN1bGF0ZVdpZHRoKCksIHRoaXMuZW5hYmxlRmxpcHBlcigpO1xuICB9XG4gIC8qKlxuICAgKiBOZWVkIHRvIHNob3cgSW5saW5lIFRvb2xiYXIgb3Igbm90XG4gICAqL1xuICBhbGxvd2VkVG9TaG93KCkge1xuICAgIGNvbnN0IGUgPSBbXCJJTUdcIiwgXCJJTlBVVFwiXSwgdCA9IG0uZ2V0KCksIG8gPSBtLnRleHQ7XG4gICAgaWYgKCF0IHx8ICF0LmFuY2hvck5vZGUgfHwgdC5pc0NvbGxhcHNlZCB8fCBvLmxlbmd0aCA8IDEpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgaSA9IGQuaXNFbGVtZW50KHQuYW5jaG9yTm9kZSkgPyB0LmFuY2hvck5vZGUgOiB0LmFuY2hvck5vZGUucGFyZW50RWxlbWVudDtcbiAgICBpZiAodCAmJiBlLmluY2x1ZGVzKGkudGFnTmFtZSkgfHwgaS5jbG9zZXN0KCdbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXScpID09PSBudWxsKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHIgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2sodC5hbmNob3JOb2RlKTtcbiAgICByZXR1cm4gciA/IHIudG9vbC5pbmxpbmVUb29scy5zaXplICE9PSAwIDogITE7XG4gIH1cbiAgLyoqXG4gICAqIFJlY2FsY3VsYXRlIGlubGluZSB0b29sYmFyIHdpZHRoXG4gICAqL1xuICByZWNhbGN1bGF0ZVdpZHRoKCkge1xuICAgIHRoaXMud2lkdGggPSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0V2lkdGg7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHRvZ2dsZXIgZm9yIENvbnZlcnNpb24gRHJvcGRvd25cbiAgICogYW5kIHByZXBlbmQgaXQgdG8gdGhlIGJ1dHRvbnMgbGlzdFxuICAgKi9cbiAgYWRkQ29udmVyc2lvblRvZ2dsZXIoKSB7XG4gICAgdGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlciA9IGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy5jb252ZXJzaW9uVG9nZ2xlciksIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXJDb250ZW50ID0gZC5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLmNvbnZlcnNpb25Ub2dnbGVyQ29udGVudCk7XG4gICAgY29uc3QgZSA9IGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy5jb252ZXJzaW9uVG9nZ2xlckFycm93LCB7XG4gICAgICBpbm5lckhUTUw6IHB0XG4gICAgfSk7XG4gICAgdGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLmNvbnZlcnNpb25Ub2dnbGVyQ29udGVudCksIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuYXBwZW5kQ2hpbGQoZSksIHRoaXMubm9kZXMudG9nZ2xlckFuZEJ1dHRvbnNXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIpLCB0aGlzLmxpc3RlbmVycy5vbih0aGlzLm5vZGVzLmNvbnZlcnNpb25Ub2dnbGVyLCBcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLnRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAhdCAmJiB0aGlzLm9wZW5lZCA/IHRoaXMuZmxpcHBlci5hY3RpdmF0ZSgpIDogdGhpcy5vcGVuZWQgJiYgdGhpcy5mbGlwcGVyLmRlYWN0aXZhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pLCBlZSgpID09PSAhMSAmJiB0aGlzLnRvb2x0aXAub25Ib3Zlcih0aGlzLm5vZGVzLmNvbnZlcnNpb25Ub2dnbGVyLCAkLnVpKFgudWkuaW5saW5lVG9vbGJhci5jb252ZXJ0ZXIsIFwiQ29udmVydCB0b1wiKSwge1xuICAgICAgcGxhY2VtZW50OiBcInRvcFwiLFxuICAgICAgaGlkaW5nRGVsYXk6IDEwMFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDaGFuZ2VzIENvbnZlcnNpb24gRHJvcGRvd24gY29udGVudCBmb3IgY3VycmVudCBibG9jaydzIFRvb2xcbiAgICovXG4gIGFzeW5jIHNldENvbnZlcnNpb25Ub2dnbGVyQ29udGVudCgpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSB9ID0gdGhpcy5FZGl0b3IsIHsgY3VycmVudEJsb2NrOiB0IH0gPSBlLCBvID0gdC5uYW1lLCBpID0gdC50b29sLmNvbnZlcnNpb25Db25maWcsIG4gPSBpICYmIGkuZXhwb3J0O1xuICAgIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuaGlkZGVuID0gIW4sIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkNTUy5jb252ZXJzaW9uVG9nZ2xlckhpZGRlbiwgIW4pO1xuICAgIGNvbnN0IHIgPSBhd2FpdCB0LmdldEFjdGl2ZVRvb2xib3hFbnRyeSgpIHx8IHt9O1xuICAgIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXJDb250ZW50LmlubmVySFRNTCA9IHIuaWNvbiB8fCByLnRpdGxlIHx8IGtlKG8pO1xuICB9XG4gIC8qKlxuICAgKiBNYWtlcyB0aGUgQ29udmVyc2lvbiBEcm9wZG93blxuICAgKi9cbiAgcHJlcGFyZUNvbnZlcnNpb25Ub29sYmFyKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5tYWtlKCk7XG4gICAgZC5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLCBlKTtcbiAgfVxuICAvKipcbiAgICogIFdvcmtpbmcgd2l0aCBUb29sc1xuICAgKiAgfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flxuICAgKi9cbiAgLyoqXG4gICAqIEFwcGVuZCBvbmx5IGFsbG93ZWQgVG9vbHNcbiAgICovXG4gIGFkZFRvb2xzRmlsdGVyZWQoKSB7XG4gICAgY29uc3QgZSA9IG0uZ2V0KCksIHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2soZS5hbmNob3JOb2RlKTtcbiAgICB0aGlzLm5vZGVzLmJ1dHRvbnMuaW5uZXJIVE1MID0gXCJcIiwgdGhpcy5ub2Rlcy5hY3Rpb25zLmlubmVySFRNTCA9IFwiXCIsIHRoaXMudG9vbHNJbnN0YW5jZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCBBcnJheS5mcm9tKHQudG9vbC5pbmxpbmVUb29scy52YWx1ZXMoKSkuZm9yRWFjaCgobykgPT4ge1xuICAgICAgdGhpcy5hZGRUb29sKG8pO1xuICAgIH0pLCB0aGlzLnJlY2FsY3VsYXRlV2lkdGgoKTtcbiAgfVxuICAvKipcbiAgICogQWRkIHRvb2wgYnV0dG9uIGFuZCBhY3RpdmF0ZSBjbGlja3NcbiAgICpcbiAgICogQHBhcmFtIHtJbmxpbmVUb29sfSB0b29sIC0gSW5saW5lVG9vbCBvYmplY3RcbiAgICovXG4gIGFkZFRvb2woZSkge1xuICAgIGNvbnN0IHQgPSBlLmNyZWF0ZSgpLCBvID0gdC5yZW5kZXIoKTtcbiAgICBpZiAoIW8pIHtcbiAgICAgIFQoXCJSZW5kZXIgbWV0aG9kIG11c3QgcmV0dXJuIGFuIGluc3RhbmNlIG9mIE5vZGVcIiwgXCJ3YXJuXCIsIGUubmFtZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvLmRhdGFzZXQudG9vbCA9IGUubmFtZSwgdGhpcy5ub2Rlcy5idXR0b25zLmFwcGVuZENoaWxkKG8pLCB0aGlzLnRvb2xzSW5zdGFuY2VzLnNldChlLm5hbWUsIHQpLCBEKHQucmVuZGVyQWN0aW9ucykpIHtcbiAgICAgIGNvbnN0IGEgPSB0LnJlbmRlckFjdGlvbnMoKTtcbiAgICAgIHRoaXMubm9kZXMuYWN0aW9ucy5hcHBlbmRDaGlsZChhKTtcbiAgICB9XG4gICAgdGhpcy5saXN0ZW5lcnMub24obywgXCJjbGlja1wiLCAoYSkgPT4ge1xuICAgICAgdGhpcy50b29sQ2xpY2tlZCh0KSwgYS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICAgIGNvbnN0IGkgPSB0aGlzLmdldFRvb2xTaG9ydGN1dChlLm5hbWUpO1xuICAgIGlmIChpKVxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5lbmFibGVTaG9ydGN1dHModCwgaSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgIH1cbiAgICBjb25zdCBuID0gZC5tYWtlKFwiZGl2XCIpLCByID0gJC50KFxuICAgICAgWC50b29sTmFtZXMsXG4gICAgICBlLnRpdGxlIHx8IGtlKGUubmFtZSlcbiAgICApO1xuICAgIG4uYXBwZW5kQ2hpbGQoZC50ZXh0KHIpKSwgaSAmJiBuLmFwcGVuZENoaWxkKGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy5pbmxpbmVUb29sYmFyU2hvcnRjdXQsIHtcbiAgICAgIHRleHRDb250ZW50OiBudChpKVxuICAgIH0pKSwgZWUoKSA9PT0gITEgJiYgdGhpcy50b29sdGlwLm9uSG92ZXIobywgbiwge1xuICAgICAgcGxhY2VtZW50OiBcInRvcFwiLFxuICAgICAgaGlkaW5nRGVsYXk6IDEwMFxuICAgIH0pLCB0LmNoZWNrU3RhdGUobS5nZXQoKSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBzaG9ydGN1dCBuYW1lIGZvciB0b29sXG4gICAqXG4gICAqIEBwYXJhbSB0b29sTmFtZSBcdTIwMTQgVG9vbCBuYW1lXG4gICAqL1xuICBnZXRUb29sU2hvcnRjdXQoZSkge1xuICAgIGNvbnN0IHsgVG9vbHM6IHQgfSA9IHRoaXMuRWRpdG9yLCBvID0gdC5pbmxpbmVUb29scy5nZXQoZSksIGkgPSB0LmludGVybmFsLmlubGluZVRvb2xzO1xuICAgIHJldHVybiBBcnJheS5mcm9tKGkua2V5cygpKS5pbmNsdWRlcyhlKSA/IHRoaXMuaW5saW5lVG9vbHNbZV1ba3QuU2hvcnRjdXRdIDogby5zaG9ydGN1dDtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIFRvb2wgc2hvcnRjdXQgd2l0aCBFZGl0b3IgU2hvcnRjdXRzIE1vZHVsZVxuICAgKlxuICAgKiBAcGFyYW0ge0lubGluZVRvb2x9IHRvb2wgLSBUb29sIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaG9ydGN1dCAtIHNob3J0Y3V0IGFjY29yZGluZyB0byB0aGUgU2hvcnRjdXREYXRhIE1vZHVsZSBmb3JtYXRcbiAgICovXG4gIGVuYWJsZVNob3J0Y3V0cyhlLCB0KSB7XG4gICAgcmUuYWRkKHtcbiAgICAgIG5hbWU6IHQsXG4gICAgICBoYW5kbGVyOiAobykgPT4ge1xuICAgICAgICBjb25zdCB7IGN1cnJlbnRCbG9jazogaSB9ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyO1xuICAgICAgICBpICYmIGkudG9vbC5lbmFibGVkSW5saW5lVG9vbHMgJiYgKG8ucHJldmVudERlZmF1bHQoKSwgdGhpcy50b29sQ2xpY2tlZChlKSk7XG4gICAgICB9LFxuICAgICAgb246IHRoaXMuRWRpdG9yLlVJLm5vZGVzLnJlZGFjdG9yXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIElubGluZSBUb29sIGJ1dHRvbiBjbGlja3NcbiAgICpcbiAgICogQHBhcmFtIHtJbmxpbmVUb29sfSB0b29sIC0gVG9vbCdzIGluc3RhbmNlXG4gICAqL1xuICB0b29sQ2xpY2tlZChlKSB7XG4gICAgY29uc3QgdCA9IG0ucmFuZ2U7XG4gICAgZS5zdXJyb3VuZCh0KSwgdGhpcy5jaGVja1Rvb2xzU3RhdGUoKSwgZS5yZW5kZXJBY3Rpb25zICE9PSB2b2lkIDAgJiYgdGhpcy5mbGlwcGVyLmRlYWN0aXZhdGUoKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgVG9vbHNgIHN0YXRlIGJ5IHNlbGVjdGlvblxuICAgKi9cbiAgY2hlY2tUb29sc1N0YXRlKCkge1xuICAgIHRoaXMudG9vbHNJbnN0YW5jZXMuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgZS5jaGVja1N0YXRlKG0uZ2V0KCkpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5saW5lIHRvb2xzIHRvb2xzXG4gICAqIFRvb2xzIHRoYXQgaGFzIGlzSW5saW5lIGlzIHRydWVcbiAgICovXG4gIGdldCBpbmxpbmVUb29scygpIHtcbiAgICBjb25zdCBlID0ge307XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5FZGl0b3IuVG9vbHMuaW5saW5lVG9vbHMuZW50cmllcygpKS5mb3JFYWNoKChbdCwgb10pID0+IHtcbiAgICAgIGVbdF0gPSBvLmNyZWF0ZSgpO1xuICAgIH0pLCBlO1xuICB9XG4gIC8qKlxuICAgKiBBbGxvdyB0byBsZWFmIGJ1dHRvbnMgYnkgYXJyb3dzIC8gdGFiXG4gICAqIEJ1dHRvbnMgd2lsbCBiZSBmaWxsZWQgb24gb3BlbmluZ1xuICAgKi9cbiAgZW5hYmxlRmxpcHBlcigpIHtcbiAgICB0aGlzLmZsaXBwZXIgPSBuZXcgRyh7XG4gICAgICBmb2N1c2VkSXRlbUNsYXNzOiB0aGlzLkNTUy5mb2N1c2VkQnV0dG9uLFxuICAgICAgYWxsb3dlZEtleXM6IFtcbiAgICAgICAgQi5FTlRFUixcbiAgICAgICAgQi5UQUJcbiAgICAgIF1cbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgJG8gZXh0ZW5kcyBTIHtcbiAgLyoqXG4gICAqIEFsbCBrZXlkb3ducyBvbiBCbG9ja1xuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5ZG93blxuICAgKi9cbiAga2V5ZG93bihlKSB7XG4gICAgc3dpdGNoICh0aGlzLmJlZm9yZUtleWRvd25Qcm9jZXNzaW5nKGUpLCBlLmtleUNvZGUpIHtcbiAgICAgIGNhc2UgQi5CQUNLU1BBQ0U6XG4gICAgICAgIHRoaXMuYmFja3NwYWNlKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQi5FTlRFUjpcbiAgICAgICAgdGhpcy5lbnRlcihlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEIuRE9XTjpcbiAgICAgIGNhc2UgQi5SSUdIVDpcbiAgICAgICAgdGhpcy5hcnJvd1JpZ2h0QW5kRG93bihlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEIuVVA6XG4gICAgICBjYXNlIEIuTEVGVDpcbiAgICAgICAgdGhpcy5hcnJvd0xlZnRBbmRVcChlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEIuVEFCOlxuICAgICAgICB0aGlzLnRhYlByZXNzZWQoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRmlyZXMgb24ga2V5ZG93biBiZWZvcmUgZXZlbnQgcHJvY2Vzc2luZ1xuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5ZG93blxuICAgKi9cbiAgYmVmb3JlS2V5ZG93blByb2Nlc3NpbmcoZSkge1xuICAgIHRoaXMubmVlZFRvb2xiYXJDbG9zaW5nKGUpICYmIHR0KGUua2V5Q29kZSkgJiYgKHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKSwgdGhpcy5FZGl0b3IuQ29udmVyc2lvblRvb2xiYXIuY2xvc2UoKSwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLnNoaWZ0S2V5IHx8ICh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY2xlYXJGb2N1c2VkKCksIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKGUpKSk7XG4gIH1cbiAgLyoqXG4gICAqIEtleSB1cCBvbiBCbG9jazpcbiAgICogLSBzaG93cyBJbmxpbmUgVG9vbGJhciBpZiBzb21ldGhpbmcgc2VsZWN0ZWRcbiAgICogLSBzaG93cyBjb252ZXJzaW9uIHRvb2xiYXIgd2l0aCA4NSUgb2YgYmxvY2sgc2VsZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXl1cCBldmVudFxuICAgKi9cbiAga2V5dXAoZSkge1xuICAgIGUuc2hpZnRLZXkgfHwgdGhpcy5FZGl0b3IuVUkuY2hlY2tFbXB0aW5lc3MoKTtcbiAgfVxuICAvKipcbiAgICogT3BlbiBUb29sYm94IHRvIGxlYWYgVG9vbHNcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIHRhYiBrZXlkb3duIGV2ZW50XG4gICAqL1xuICB0YWJQcmVzc2VkKGUpIHtcbiAgICB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKTtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgSW5saW5lVG9vbGJhcjogbywgQ29udmVyc2lvblRvb2xiYXI6IGkgfSA9IHRoaXMuRWRpdG9yLCBuID0gdC5jdXJyZW50QmxvY2s7XG4gICAgaWYgKCFuKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHIgPSBuLmlzRW1wdHksIGEgPSBuLnRvb2wuaXNEZWZhdWx0ICYmIHIsIGwgPSAhciAmJiBpLm9wZW5lZCwgYyA9ICFyICYmICFtLmlzQ29sbGFwc2VkICYmIG8ub3BlbmVkO1xuICAgIGEgPyB0aGlzLmFjdGl2YXRlVG9vbGJveCgpIDogIWwgJiYgIWMgJiYgdGhpcy5hY3RpdmF0ZUJsb2NrU2V0dGluZ3MoKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGRyb3AgdGFyZ2V0IHN0eWxlc1xuICAgKlxuICAgKiBAcGFyYW0ge0RyYWdFdmVudH0gZXZlbnQgLSBkcmFnIG92ZXIgZXZlbnRcbiAgICovXG4gIGRyYWdPdmVyKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlDaGlsZE5vZGUoZS50YXJnZXQpO1xuICAgIHQuZHJvcFRhcmdldCA9ICEwO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgZHJvcCB0YXJnZXQgc3R5bGVcbiAgICpcbiAgICogQHBhcmFtIHtEcmFnRXZlbnR9IGV2ZW50IC0gZHJhZyBsZWF2ZSBldmVudFxuICAgKi9cbiAgZHJhZ0xlYXZlKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlDaGlsZE5vZGUoZS50YXJnZXQpO1xuICAgIHQuZHJvcFRhcmdldCA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBDb3B5aW5nIHNlbGVjdGVkIGJsb2Nrc1xuICAgKiBCZWZvcmUgcHV0dGluZyB0byB0aGUgY2xpcGJvYXJkIHdlIHNhbml0aXplIGFsbCBibG9ja3MgYW5kIHRoZW4gY29weSB0byB0aGUgY2xpcGJvYXJkXG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpcGJvYXJkRXZlbnR9IGV2ZW50IC0gY2xpcGJvYXJkIGV2ZW50XG4gICAqL1xuICBoYW5kbGVDb21tYW5kQyhlKSB7XG4gICAgY29uc3QgeyBCbG9ja1NlbGVjdGlvbjogdCB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdC5hbnlCbG9ja1NlbGVjdGVkICYmIHQuY29weVNlbGVjdGVkQmxvY2tzKGUpO1xuICB9XG4gIC8qKlxuICAgKiBDb3B5IGFuZCBEZWxldGUgc2VsZWN0ZWQgQmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpcGJvYXJkRXZlbnR9IGV2ZW50IC0gY2xpcGJvYXJkIGV2ZW50XG4gICAqL1xuICBoYW5kbGVDb21tYW5kWChlKSB7XG4gICAgY29uc3QgeyBCbG9ja1NlbGVjdGlvbjogdCwgQmxvY2tNYW5hZ2VyOiBvLCBDYXJldDogaSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdC5hbnlCbG9ja1NlbGVjdGVkICYmIHQuY29weVNlbGVjdGVkQmxvY2tzKGUpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgbiA9IG8ucmVtb3ZlU2VsZWN0ZWRCbG9ja3MoKSwgciA9IG8uaW5zZXJ0RGVmYXVsdEJsb2NrQXRJbmRleChuLCAhMCk7XG4gICAgICBpLnNldFRvQmxvY2sociwgaS5wb3NpdGlvbnMuU1RBUlQpLCB0LmNsZWFyU2VsZWN0aW9uKGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFTlRFUiBwcmVzc2VkIG9uIGJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlkb3duXG4gICAqL1xuICBlbnRlcihlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIFVJOiBvIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBpZiAodC5jdXJyZW50QmxvY2sudG9vbC5pc0xpbmVCcmVha3NFbmFibGVkIHx8IG8uc29tZVRvb2xiYXJPcGVuZWQgJiYgby5zb21lRmxpcHBlckJ1dHRvbkZvY3VzZWQgfHwgZS5zaGlmdEtleSlcbiAgICAgIHJldHVybjtcbiAgICBsZXQgbiA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2s7XG4gICAgdGhpcy5FZGl0b3IuQ2FyZXQuaXNBdFN0YXJ0ICYmICF0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLmhhc01lZGlhID8gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4KSA6IHRoaXMuRWRpdG9yLkNhcmV0LmlzQXRFbmQgPyBuID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4ICsgMSkgOiBuID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnNwbGl0KCksIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sobiksIHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4obiksIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGJhY2tzcGFjZSBrZXlkb3duIG9uIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlkb3duXG4gICAqL1xuICBiYWNrc3BhY2UoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBCbG9ja1NlbGVjdGlvbjogbywgQ2FyZXQ6IGkgfSA9IHRoaXMuRWRpdG9yLCBuID0gdC5jdXJyZW50QmxvY2ssIHIgPSBuLnRvb2w7XG4gICAgaWYgKG4uc2VsZWN0ZWQgfHwgbi5pc0VtcHR5ICYmIG4uY3VycmVudElucHV0ID09PSBuLmZpcnN0SW5wdXQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGMgPSB0LmN1cnJlbnRCbG9ja0luZGV4O1xuICAgICAgdC5wcmV2aW91c0Jsb2NrICYmIHQucHJldmlvdXNCbG9jay5pbnB1dHMubGVuZ3RoID09PSAwID8gdC5yZW1vdmVCbG9jayhjIC0gMSkgOiB0LnJlbW92ZUJsb2NrKCksIGkuc2V0VG9CbG9jayhcbiAgICAgICAgdC5jdXJyZW50QmxvY2ssXG4gICAgICAgIGMgPyBpLnBvc2l0aW9ucy5FTkQgOiBpLnBvc2l0aW9ucy5TVEFSVFxuICAgICAgKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpLCBvLmNsZWFyU2VsZWN0aW9uKGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoci5pc0xpbmVCcmVha3NFbmFibGVkICYmICFpLmlzQXRTdGFydClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBhID0gdC5jdXJyZW50QmxvY2tJbmRleCA9PT0gMDtcbiAgICBpLmlzQXRTdGFydCAmJiBtLmlzQ29sbGFwc2VkICYmIG4uY3VycmVudElucHV0ID09PSBuLmZpcnN0SW5wdXQgJiYgIWEgJiYgKGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5tZXJnZUJsb2NrcygpKTtcbiAgfVxuICAvKipcbiAgICogTWVyZ2UgY3VycmVudCBhbmQgcHJldmlvdXMgQmxvY2tzIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSB0eXBlXG4gICAqL1xuICBtZXJnZUJsb2NrcygpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSwgQ2FyZXQ6IHQsIFRvb2xiYXI6IG8gfSA9IHRoaXMuRWRpdG9yLCBpID0gZS5wcmV2aW91c0Jsb2NrLCBuID0gZS5jdXJyZW50QmxvY2s7XG4gICAgaWYgKG4ubmFtZSAhPT0gaS5uYW1lIHx8ICFpLm1lcmdlYWJsZSkge1xuICAgICAgaWYgKGkuaW5wdXRzLmxlbmd0aCA9PT0gMCB8fCBpLmlzRW1wdHkpIHtcbiAgICAgICAgZS5yZW1vdmVCbG9jayhlLmN1cnJlbnRCbG9ja0luZGV4IC0gMSksIHQuc2V0VG9CbG9jayhlLmN1cnJlbnRCbG9jayksIG8uY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdC5uYXZpZ2F0ZVByZXZpb3VzKCkgJiYgby5jbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0LmNyZWF0ZVNoYWRvdyhpLnBsdWdpbnNDb250ZW50KSwgZS5tZXJnZUJsb2NrcyhpLCBuKS50aGVuKCgpID0+IHtcbiAgICAgIHQucmVzdG9yZUNhcmV0KGkucGx1Z2luc0NvbnRlbnQpLCBpLnBsdWdpbnNDb250ZW50Lm5vcm1hbGl6ZSgpLCBvLmNsb3NlKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSByaWdodCBhbmQgZG93biBrZXlib2FyZCBrZXlzXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgYXJyb3dSaWdodEFuZERvd24oZSkge1xuICAgIGNvbnN0IHQgPSBHLnVzZWRLZXlzLmluY2x1ZGVzKGUua2V5Q29kZSkgJiYgKCFlLnNoaWZ0S2V5IHx8IGUua2V5Q29kZSA9PT0gQi5UQUIpO1xuICAgIGlmICh0aGlzLkVkaXRvci5VSS5zb21lVG9vbGJhck9wZW5lZCAmJiB0KVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jbGVhckZvY3VzZWQoKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpO1xuICAgIGNvbnN0IG8gPSB0aGlzLkVkaXRvci5DYXJldC5pc0F0RW5kIHx8IHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmFueUJsb2NrU2VsZWN0ZWQ7XG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgZS5rZXlDb2RlID09PSBCLkRPV04gJiYgbykge1xuICAgICAgdGhpcy5FZGl0b3IuQ3Jvc3NCbG9ja1NlbGVjdGlvbi50b2dnbGVCbG9ja1NlbGVjdGVkU3RhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgKGUua2V5Q29kZSA9PT0gQi5ET1dOIHx8IGUua2V5Q29kZSA9PT0gQi5SSUdIVCAmJiAhdGhpcy5pc1J0bCA/IHRoaXMuRWRpdG9yLkNhcmV0Lm5hdmlnYXRlTmV4dCgpIDogdGhpcy5FZGl0b3IuQ2FyZXQubmF2aWdhdGVQcmV2aW91cygpKSA/IGUucHJldmVudERlZmF1bHQoKSA6IG9lKCgpID0+IHtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgJiYgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay51cGRhdGVDdXJyZW50SW5wdXQoKTtcbiAgICB9LCAyMCkoKSwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBsZWZ0IGFuZCB1cCBrZXlib2FyZCBrZXlzXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgYXJyb3dMZWZ0QW5kVXAoZSkge1xuICAgIGlmICh0aGlzLkVkaXRvci5VSS5zb21lVG9vbGJhck9wZW5lZCkge1xuICAgICAgaWYgKEcudXNlZEtleXMuaW5jbHVkZXMoZS5rZXlDb2RlKSAmJiAoIWUuc2hpZnRLZXkgfHwgZS5rZXlDb2RlID09PSBCLlRBQikpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRoaXMuRWRpdG9yLlVJLmNsb3NlQWxsVG9vbGJhcnMoKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyRm9jdXNlZCgpLCB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCk7XG4gICAgY29uc3QgdCA9IHRoaXMuRWRpdG9yLkNhcmV0LmlzQXRTdGFydCB8fCB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5hbnlCbG9ja1NlbGVjdGVkO1xuICAgIGlmIChlLnNoaWZ0S2V5ICYmIGUua2V5Q29kZSA9PT0gQi5VUCAmJiB0KSB7XG4gICAgICB0aGlzLkVkaXRvci5Dcm9zc0Jsb2NrU2VsZWN0aW9uLnRvZ2dsZUJsb2NrU2VsZWN0ZWRTdGF0ZSghMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIChlLmtleUNvZGUgPT09IEIuVVAgfHwgZS5rZXlDb2RlID09PSBCLkxFRlQgJiYgIXRoaXMuaXNSdGwgPyB0aGlzLkVkaXRvci5DYXJldC5uYXZpZ2F0ZVByZXZpb3VzKCkgOiB0aGlzLkVkaXRvci5DYXJldC5uYXZpZ2F0ZU5leHQoKSkgPyBlLnByZXZlbnREZWZhdWx0KCkgOiBvZSgoKSA9PiB7XG4gICAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrICYmIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sudXBkYXRlQ3VycmVudElucHV0KCk7XG4gICAgfSwgMjApKCksIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKGUpO1xuICB9XG4gIC8qKlxuICAgKiBDYXNlcyB3aGVuIHdlIG5lZWQgdG8gY2xvc2UgVG9vbGJhclxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIG5lZWRUb29sYmFyQ2xvc2luZyhlKSB7XG4gICAgY29uc3QgdCA9IGUua2V5Q29kZSA9PT0gQi5FTlRFUiAmJiB0aGlzLkVkaXRvci5Ub29sYmFyLnRvb2xib3gub3BlbmVkLCBvID0gZS5rZXlDb2RlID09PSBCLkVOVEVSICYmIHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkLCBpID0gZS5rZXlDb2RlID09PSBCLkVOVEVSICYmIHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIub3BlbmVkLCBuID0gZS5rZXlDb2RlID09PSBCLkVOVEVSICYmIHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLm9wZW5lZCwgciA9IGUua2V5Q29kZSA9PT0gQi5UQUI7XG4gICAgcmV0dXJuICEoZS5zaGlmdEtleSB8fCByIHx8IHQgfHwgbyB8fCBpIHx8IG4pO1xuICB9XG4gIC8qKlxuICAgKiBJZiBUb29sYm94IGlzIG5vdCBvcGVuLCB0aGVuIGp1c3Qgb3BlbiBpdCBhbmQgc2hvdyBwbHVzIGJ1dHRvblxuICAgKi9cbiAgYWN0aXZhdGVUb29sYm94KCkge1xuICAgIHRoaXMuRWRpdG9yLlRvb2xiYXIub3BlbmVkIHx8IHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4oKSwgdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94Lm9wZW4oKTtcbiAgfVxuICAvKipcbiAgICogT3BlbiBUb29sYmFyIGFuZCBzaG93IEJsb2NrU2V0dGluZ3MgYmVmb3JlIGZsaXBwaW5nIFRvb2xzXG4gICAqL1xuICBhY3RpdmF0ZUJsb2NrU2V0dGluZ3MoKSB7XG4gICAgdGhpcy5FZGl0b3IuVG9vbGJhci5vcGVuZWQgfHwgKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suZm9jdXNlZCA9ICEwLCB0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmVBbmRPcGVuKCkpLCB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCB8fCB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW4oKTtcbiAgfVxufVxuY2xhc3MgQ2Uge1xuICAvKipcbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHdvcmtpbmdBcmVhIFx1MjAxNCBlZGl0b3JgcyB3b3JraW5nIG5vZGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICB0aGlzLmJsb2NrcyA9IFtdLCB0aGlzLndvcmtpbmdBcmVhID0gZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGxlbmd0aCBvZiBCbG9jayBpbnN0YW5jZXMgYXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLmxlbmd0aDtcbiAgfVxuICAvKipcbiAgICogR2V0IEJsb2NrIGluc3RhbmNlcyBhcnJheVxuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2tbXX1cbiAgICovXG4gIGdldCBhcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja3M7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBibG9ja3MgaHRtbCBlbGVtZW50cyBhcnJheVxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRbXX1cbiAgICovXG4gIGdldCBub2RlcygpIHtcbiAgICByZXR1cm4gaXQodGhpcy53b3JraW5nQXJlYS5jaGlsZHJlbik7XG4gIH1cbiAgLyoqXG4gICAqIFByb3h5IHRyYXAgdG8gaW1wbGVtZW50IGFycmF5LWxpa2Ugc2V0dGVyXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGJsb2Nrc1swXSA9IG5ldyBCbG9jayguLi4pXG4gICAqIEBwYXJhbSB7QmxvY2tzfSBpbnN0YW5jZSBcdTIwMTQgQmxvY2tzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IHByb3BlcnR5IFx1MjAxNCBibG9jayBpbmRleCBvciBhbnkgQmxvY2tzIGNsYXNzIHByb3BlcnR5IGtleSB0byBzZXRcbiAgICogQHBhcmFtIHtCbG9ja30gdmFsdWUgXHUyMDE0IHZhbHVlIHRvIHNldFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBzZXQoZSwgdCwgbykge1xuICAgIHJldHVybiBpc05hTihOdW1iZXIodCkpID8gKFJlZmxlY3Quc2V0KGUsIHQsIG8pLCAhMCkgOiAoZS5pbnNlcnQoK3QsIG8pLCAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIFByb3h5IHRyYXAgdG8gaW1wbGVtZW50IGFycmF5LWxpa2UgZ2V0dGVyXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2tzfSBpbnN0YW5jZSBcdTIwMTQgQmxvY2tzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IHByb3BlcnR5IFx1MjAxNCBCbG9ja3MgY2xhc3MgcHJvcGVydHkga2V5XG4gICAqIEByZXR1cm5zIHtCbG9ja3wqfVxuICAgKi9cbiAgc3RhdGljIGdldChlLCB0KSB7XG4gICAgcmV0dXJuIGlzTmFOKE51bWJlcih0KSkgPyBSZWZsZWN0LmdldChlLCB0KSA6IGUuZ2V0KCt0KTtcbiAgfVxuICAvKipcbiAgICogUHVzaCBuZXcgQmxvY2sgdG8gdGhlIGJsb2NrcyBhcnJheSBhbmQgYXBwZW5kIGl0IHRvIHdvcmtpbmcgYXJlYVxuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9jayAtIEJsb2NrIHRvIGFkZFxuICAgKi9cbiAgcHVzaChlKSB7XG4gICAgdGhpcy5ibG9ja3MucHVzaChlKSwgdGhpcy5pbnNlcnRUb0RPTShlKTtcbiAgfVxuICAvKipcbiAgICogU3dhcHMgYmxvY2tzIHdpdGggaW5kZXhlcyBmaXJzdCBhbmQgc2Vjb25kXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmaXJzdCAtIGZpcnN0IGJsb2NrIGluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmQgLSBzZWNvbmQgYmxvY2sgaW5kZXhcbiAgICogQGRlcHJlY2F0ZWQgXHUyMDE0IHVzZSAnbW92ZScgaW5zdGVhZFxuICAgKi9cbiAgc3dhcChlLCB0KSB7XG4gICAgY29uc3QgbyA9IHRoaXMuYmxvY2tzW3RdO1xuICAgIGQuc3dhcCh0aGlzLmJsb2Nrc1tlXS5ob2xkZXIsIG8uaG9sZGVyKSwgdGhpcy5ibG9ja3NbdF0gPSB0aGlzLmJsb2Nrc1tlXSwgdGhpcy5ibG9ja3NbZV0gPSBvO1xuICB9XG4gIC8qKlxuICAgKiBNb3ZlIGEgYmxvY2sgZnJvbSBvbmUgdG8gYW5vdGhlciBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIG5ldyBpbmRleCBvZiB0aGUgYmxvY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCAtIGJsb2NrIHRvIG1vdmVcbiAgICovXG4gIG1vdmUoZSwgdCkge1xuICAgIGNvbnN0IG8gPSB0aGlzLmJsb2Nrcy5zcGxpY2UodCwgMSlbMF0sIGkgPSBlIC0gMSwgbiA9IE1hdGgubWF4KDAsIGkpLCByID0gdGhpcy5ibG9ja3Nbbl07XG4gICAgZSA+IDAgPyB0aGlzLmluc2VydFRvRE9NKG8sIFwiYWZ0ZXJlbmRcIiwgcikgOiB0aGlzLmluc2VydFRvRE9NKG8sIFwiYmVmb3JlYmVnaW5cIiwgciksIHRoaXMuYmxvY2tzLnNwbGljZShlLCAwLCBvKTtcbiAgICBjb25zdCBhID0gdGhpcy5jb21wb3NlQmxvY2tFdmVudChcIm1vdmVcIiwge1xuICAgICAgZnJvbUluZGV4OiB0LFxuICAgICAgdG9JbmRleDogZVxuICAgIH0pO1xuICAgIG8uY2FsbChxLk1PVkVELCBhKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBCbG9jayBhdCBwYXNzZWQgaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFx1MjAxNCBpbmRleCB0byBpbnNlcnQgQmxvY2tcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgXHUyMDE0IEJsb2NrIHRvIGluc2VydFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcGxhY2UgXHUyMDE0IGl0IHRydWUsIHJlcGxhY2UgYmxvY2sgb24gZ2l2ZW4gaW5kZXhcbiAgICovXG4gIGluc2VydChlLCB0LCBvID0gITEpIHtcbiAgICBpZiAoIXRoaXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnB1c2godCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUgPiB0aGlzLmxlbmd0aCAmJiAoZSA9IHRoaXMubGVuZ3RoKSwgbyAmJiAodGhpcy5ibG9ja3NbZV0uaG9sZGVyLnJlbW92ZSgpLCB0aGlzLmJsb2Nrc1tlXS5jYWxsKHEuUkVNT1ZFRCkpO1xuICAgIGNvbnN0IGkgPSBvID8gMSA6IDA7XG4gICAgaWYgKHRoaXMuYmxvY2tzLnNwbGljZShlLCBpLCB0KSwgZSA+IDApIHtcbiAgICAgIGNvbnN0IG4gPSB0aGlzLmJsb2Nrc1tlIC0gMV07XG4gICAgICB0aGlzLmluc2VydFRvRE9NKHQsIFwiYWZ0ZXJlbmRcIiwgbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG4gPSB0aGlzLmJsb2Nrc1tlICsgMV07XG4gICAgICBuID8gdGhpcy5pbnNlcnRUb0RPTSh0LCBcImJlZm9yZWJlZ2luXCIsIG4pIDogdGhpcy5pbnNlcnRUb0RPTSh0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBibG9ja1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBpbmRleCBvZiBCbG9jayB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZShlKSB7XG4gICAgaXNOYU4oZSkgJiYgKGUgPSB0aGlzLmxlbmd0aCAtIDEpLCB0aGlzLmJsb2Nrc1tlXS5ob2xkZXIucmVtb3ZlKCksIHRoaXMuYmxvY2tzW2VdLmNhbGwocS5SRU1PVkVEKSwgdGhpcy5ibG9ja3Muc3BsaWNlKGUsIDEpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIGJsb2Nrc1xuICAgKi9cbiAgcmVtb3ZlQWxsKCkge1xuICAgIHRoaXMud29ya2luZ0FyZWEuaW5uZXJIVE1MID0gXCJcIiwgdGhpcy5ibG9ja3MuZm9yRWFjaCgoZSkgPT4gZS5jYWxsKHEuUkVNT1ZFRCkpLCB0aGlzLmJsb2Nrcy5sZW5ndGggPSAwO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgQmxvY2sgYWZ0ZXIgcGFzc2VkIHRhcmdldFxuICAgKlxuICAgKiBAdG9kbyBkZWNpZGUgaWYgdGhpcyBtZXRob2QgaXMgbmVjZXNzYXJ5XG4gICAqIEBwYXJhbSB7QmxvY2t9IHRhcmdldEJsb2NrIFx1MjAxNCB0YXJnZXQgYWZ0ZXIgd2hpY2ggQmxvY2sgc2hvdWxkIGJlIGluc2VydGVkXG4gICAqIEBwYXJhbSB7QmxvY2t9IG5ld0Jsb2NrIFx1MjAxNCBCbG9jayB0byBpbnNlcnRcbiAgICovXG4gIGluc2VydEFmdGVyKGUsIHQpIHtcbiAgICBjb25zdCBvID0gdGhpcy5ibG9ja3MuaW5kZXhPZihlKTtcbiAgICB0aGlzLmluc2VydChvICsgMSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBCbG9jayBieSBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggXHUyMDE0IEJsb2NrIGluZGV4XG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldChlKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzW2VdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gaW5kZXggb2YgcGFzc2VkIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIC0gQmxvY2sgdG8gZmluZFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgaW5kZXhPZihlKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLmluZGV4T2YoZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBuZXcgQmxvY2sgaW50byBET01cbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBCbG9jayB0byBpbnNlcnRcbiAgICogQHBhcmFtIHtJbnNlcnRQb3NpdGlvbn0gcG9zaXRpb24gXHUyMDE0IGluc2VydCBwb3NpdGlvbiAoaWYgc2V0LCB3aWxsIHVzZSBpbnNlcnRBZGphY2VudEVsZW1lbnQpXG4gICAqIEBwYXJhbSB7QmxvY2t9IHRhcmdldCBcdTIwMTQgQmxvY2sgcmVsYXRlZCB0byBwb3NpdGlvblxuICAgKi9cbiAgaW5zZXJ0VG9ET00oZSwgdCwgbykge1xuICAgIHQgPyBvLmhvbGRlci5pbnNlcnRBZGphY2VudEVsZW1lbnQodCwgZS5ob2xkZXIpIDogdGhpcy53b3JraW5nQXJlYS5hcHBlbmRDaGlsZChlLmhvbGRlciksIGUuY2FsbChxLlJFTkRFUkVEKTtcbiAgfVxuICAvKipcbiAgICogQ29tcG9zZXMgQmxvY2sgZXZlbnQgd2l0aCBwYXNzZWQgdHlwZSBhbmQgZGV0YWlsc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGRldGFpbCAtIGV2ZW50IGRldGFpbFxuICAgKi9cbiAgY29tcG9zZUJsb2NrRXZlbnQoZSwgdCkge1xuICAgIHJldHVybiBuZXcgQ3VzdG9tRXZlbnQoZSwge1xuICAgICAgZGV0YWlsOiB0XG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IEplID0gXCJibG9jay1yZW1vdmVkXCIsIFFlID0gXCJibG9jay1hZGRlZFwiLCBXbyA9IFwiYmxvY2stbW92ZWRcIiwgWW8gPSBcImJsb2NrLWNoYW5nZWRcIjtcbmNsYXNzIEtvIGV4dGVuZHMgUyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuX2N1cnJlbnRCbG9ja0luZGV4ID0gLTEsIHRoaXMuX2Jsb2NrcyA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudCBCbG9jayBpbmRleFxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGN1cnJlbnRCbG9ja0luZGV4KCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50QmxvY2tJbmRleDtcbiAgfVxuICAvKipcbiAgICogU2V0IGN1cnJlbnQgQmxvY2sgaW5kZXggYW5kIGZpcmUgQmxvY2sgbGlmZWN5Y2xlIGNhbGxiYWNrc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3SW5kZXggLSBpbmRleCBvZiBCbG9jayB0byBzZXQgYXMgY3VycmVudFxuICAgKi9cbiAgc2V0IGN1cnJlbnRCbG9ja0luZGV4KGUpIHtcbiAgICB0aGlzLl9jdXJyZW50QmxvY2tJbmRleCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybnMgZmlyc3QgQmxvY2tcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0IGZpcnN0QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1swXTtcbiAgfVxuICAvKipcbiAgICogcmV0dXJucyBsYXN0IEJsb2NrXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldCBsYXN0QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1t0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMV07XG4gIH1cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IEJsb2NrIGluc3RhbmNlXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldCBjdXJyZW50QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1t0aGlzLmN1cnJlbnRCbG9ja0luZGV4XTtcbiAgfVxuICAvKipcbiAgICogU2V0IHBhc3NlZCBCbG9jayBhcyBhIGN1cnJlbnRcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrIC0gYmxvY2sgdG8gc2V0IGFzIGEgY3VycmVudFxuICAgKi9cbiAgc2V0IGN1cnJlbnRCbG9jayhlKSB7XG4gICAgdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IHRoaXMuZ2V0QmxvY2tJbmRleChlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBuZXh0IEJsb2NrIGluc3RhbmNlXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja3xudWxsfVxuICAgKi9cbiAgZ2V0IG5leHRCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9PT0gdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEgPyBudWxsIDogdGhpcy5fYmxvY2tzW3RoaXMuY3VycmVudEJsb2NrSW5kZXggKyAxXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGZpcnN0IEJsb2NrIHdpdGggaW5wdXRzIGFmdGVyIGN1cnJlbnQgQmxvY2tcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrIHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0IG5leHRDb250ZW50ZnVsQmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLnNsaWNlKHRoaXMuY3VycmVudEJsb2NrSW5kZXggKyAxKS5maW5kKCh0KSA9PiAhIXQuaW5wdXRzLmxlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBmaXJzdCBCbG9jayB3aXRoIGlucHV0cyBiZWZvcmUgY3VycmVudCBCbG9ja1xuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2sgfCB1bmRlZmluZWR9XG4gICAqL1xuICBnZXQgcHJldmlvdXNDb250ZW50ZnVsQmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLnNsaWNlKDAsIHRoaXMuY3VycmVudEJsb2NrSW5kZXgpLnJldmVyc2UoKS5maW5kKCh0KSA9PiAhIXQuaW5wdXRzLmxlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgcHJldmlvdXMgQmxvY2sgaW5zdGFuY2VcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfG51bGx9XG4gICAqL1xuICBnZXQgcHJldmlvdXNCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9PT0gMCA/IG51bGwgOiB0aGlzLl9ibG9ja3NbdGhpcy5jdXJyZW50QmxvY2tJbmRleCAtIDFdO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYXJyYXkgb2YgQmxvY2sgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja1tdfSB7QGxpbmsgQmxvY2tzI2FycmF5fVxuICAgKi9cbiAgZ2V0IGJsb2NrcygpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzLmFycmF5O1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBlYWNoIEJsb2NrIGlzIGVtcHR5XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzRWRpdG9yRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLmV2ZXJ5KChlKSA9PiBlLmlzRW1wdHkpO1xuICB9XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGFmdGVyIEVkaXRvci5VSSBwcmVwYXJhdGlvblxuICAgKiBEZWZpbmUgdGhpcy5fYmxvY2tzIHByb3BlcnR5XG4gICAqL1xuICBwcmVwYXJlKCkge1xuICAgIGNvbnN0IGUgPSBuZXcgQ2UodGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3IpO1xuICAgIHRoaXMuX2Jsb2NrcyA9IG5ldyBQcm94eShlLCB7XG4gICAgICBzZXQ6IENlLnNldCxcbiAgICAgIGdldDogQ2UuZ2V0XG4gICAgfSksIHRoaXMubGlzdGVuZXJzLm9uKFxuICAgICAgZG9jdW1lbnQsXG4gICAgICBcImNvcHlcIixcbiAgICAgICh0KSA9PiB0aGlzLkVkaXRvci5CbG9ja0V2ZW50cy5oYW5kbGVDb21tYW5kQyh0KVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSByZWFkLW9ubHkgc3RhdGVcbiAgICpcbiAgICogSWYgcmVhZE9ubHkgaXMgdHJ1ZTpcbiAgICogIC0gVW5iaW5kIGV2ZW50IGhhbmRsZXJzIGZyb20gY3JlYXRlZCBCbG9ja3NcbiAgICpcbiAgICogaWYgcmVhZE9ubHkgaXMgZmFsc2U6XG4gICAqICAtIEJpbmQgZXZlbnQgaGFuZGxlcnMgdG8gYWxsIGV4aXN0aW5nIEJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIFwicmVhZCBvbmx5XCIgc3RhdGVcbiAgICovXG4gIHRvZ2dsZVJlYWRPbmx5KGUpIHtcbiAgICBlID8gdGhpcy5kaXNhYmxlTW9kdWxlQmluZGluZ3MoKSA6IHRoaXMuZW5hYmxlTW9kdWxlQmluZGluZ3MoKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBCbG9jayBpbnN0YW5jZSBieSB0b29sIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBibG9jayBjcmVhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnRvb2wgLSB0b29scyBwYXNzZWQgaW4gZWRpdG9yIGNvbmZpZyB7QGxpbmsgRWRpdG9yQ29uZmlnI3Rvb2xzfVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWRdIC0gdW5pcXVlIGlkIGZvciB0aGlzIGJsb2NrXG4gICAqIEBwYXJhbSB7QmxvY2tUb29sRGF0YX0gW29wdGlvbnMuZGF0YV0gLSBjb25zdHJ1Y3RvciBwYXJhbXNcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgY29tcG9zZUJsb2NrKHtcbiAgICB0b29sOiBlLFxuICAgIGRhdGE6IHQgPSB7fSxcbiAgICBpZDogbyA9IHZvaWQgMCxcbiAgICB0dW5lczogaSA9IHt9XG4gIH0pIHtcbiAgICBjb25zdCBuID0gdGhpcy5FZGl0b3IuUmVhZE9ubHkuaXNFbmFibGVkLCByID0gdGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scy5nZXQoZSksIGEgPSBuZXcgRih7XG4gICAgICBpZDogbyxcbiAgICAgIGRhdGE6IHQsXG4gICAgICB0b29sOiByLFxuICAgICAgYXBpOiB0aGlzLkVkaXRvci5BUEksXG4gICAgICByZWFkT25seTogbixcbiAgICAgIHR1bmVzRGF0YTogaVxuICAgIH0sIHRoaXMuZXZlbnRzRGlzcGF0Y2hlcik7XG4gICAgcmV0dXJuIG4gfHwgdGhpcy5iaW5kQmxvY2tFdmVudHMoYSksIGE7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBuZXcgYmxvY2sgaW50byBfYmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gaW5zZXJ0IG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmlkXSAtIGJsb2NrJ3MgdW5pcXVlIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50b29sXSAtIHBsdWdpbiBuYW1lLCBieSBkZWZhdWx0IG1ldGhvZCBpbnNlcnRzIHRoZSBkZWZhdWx0IGJsb2NrIHR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmRhdGFdIC0gcGx1Z2luIGRhdGFcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmluZGV4XSAtIGluZGV4IHdoZXJlIHRvIGluc2VydCBuZXcgQmxvY2tcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5uZWVkVG9Gb2N1c10gLSBmbGFnIHNob3dzIGlmIG5lZWRlZCB0byB1cGRhdGUgY3VycmVudCBCbG9jayBpbmRleFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJlcGxhY2VdIC0gZmxhZyBzaG93cyBpZiBibG9jayBieSBwYXNzZWQgaW5kZXggc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggaW5zZXJ0ZWQgb25lXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGluc2VydCh7XG4gICAgaWQ6IGUgPSB2b2lkIDAsXG4gICAgdG9vbDogdCA9IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayxcbiAgICBkYXRhOiBvID0ge30sXG4gICAgaW5kZXg6IGksXG4gICAgbmVlZFRvRm9jdXM6IG4gPSAhMCxcbiAgICByZXBsYWNlOiByID0gITEsXG4gICAgdHVuZXM6IGEgPSB7fVxuICB9ID0ge30pIHtcbiAgICBsZXQgbCA9IGk7XG4gICAgbCA9PT0gdm9pZCAwICYmIChsID0gdGhpcy5jdXJyZW50QmxvY2tJbmRleCArIChyID8gMCA6IDEpKTtcbiAgICBjb25zdCBjID0gdGhpcy5jb21wb3NlQmxvY2soe1xuICAgICAgaWQ6IGUsXG4gICAgICB0b29sOiB0LFxuICAgICAgZGF0YTogbyxcbiAgICAgIHR1bmVzOiBhXG4gICAgfSk7XG4gICAgcmV0dXJuIHIgJiYgdGhpcy5ibG9ja0RpZE11dGF0ZWQoSmUsIHRoaXMuZ2V0QmxvY2tCeUluZGV4KGwpLCB7XG4gICAgICBpbmRleDogbFxuICAgIH0pLCB0aGlzLl9ibG9ja3MuaW5zZXJ0KGwsIGMsIHIpLCB0aGlzLmJsb2NrRGlkTXV0YXRlZChRZSwgYywge1xuICAgICAgaW5kZXg6IGxcbiAgICB9KSwgbiA/IHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSBsIDogbCA8PSB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ICYmIHRoaXMuY3VycmVudEJsb2NrSW5kZXgrKywgYztcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZSBjdXJyZW50IHdvcmtpbmcgYmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSByZXBsYWNlIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudG9vbCBcdTIwMTQgcGx1Z2luIG5hbWVcbiAgICogQHBhcmFtIHtCbG9ja1Rvb2xEYXRhfSBvcHRpb25zLmRhdGEgXHUyMDE0IHBsdWdpbiBkYXRhXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIHJlcGxhY2Uoe1xuICAgIHRvb2w6IGUgPSB0aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2ssXG4gICAgZGF0YTogdCA9IHt9XG4gIH0pIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnQoe1xuICAgICAgdG9vbDogZSxcbiAgICAgIGRhdGE6IHQsXG4gICAgICBpbmRleDogdGhpcy5jdXJyZW50QmxvY2tJbmRleCxcbiAgICAgIHJlcGxhY2U6ICEwXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBwYXN0ZWQgY29udGVudC4gQ2FsbCBvblBhc3RlIGNhbGxiYWNrIGFmdGVyIGluc2VydC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvb2xOYW1lIC0gbmFtZSBvZiBUb29sIHRvIGluc2VydFxuICAgKiBAcGFyYW0ge1Bhc3RlRXZlbnR9IHBhc3RlRXZlbnQgLSBwYXN0ZWQgZGF0YVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcGxhY2UgLSBzaG91bGQgcmVwbGFjZSBjdXJyZW50IGJsb2NrXG4gICAqL1xuICBwYXN0ZShlLCB0LCBvID0gITEpIHtcbiAgICBjb25zdCBpID0gdGhpcy5pbnNlcnQoe1xuICAgICAgdG9vbDogZSxcbiAgICAgIHJlcGxhY2U6IG9cbiAgICB9KTtcbiAgICB0cnkge1xuICAgICAgaS5jYWxsKHEuT05fUEFTVEUsIHQpO1xuICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgIFQoYCR7ZX06IG9uUGFzdGUgY2FsbGJhY2sgY2FsbCBpcyBmYWlsZWRgLCBcImVycm9yXCIsIG4pO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBkZWZhdWx0IGJsb2NrIGF0IHBhc3NlZCBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBpbmRleCB3aGVyZSBCbG9jayBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBuZWVkVG9Gb2N1cyAtIGlmIHRydWUsIHVwZGF0ZXMgY3VycmVudCBCbG9jayBpbmRleFxuICAgKlxuICAgKiBUT0RPOiBSZW1vdmUgbWV0aG9kIGFuZCB1c2UgaW5zZXJ0KCkgd2l0aCBpbmRleCBpbnN0ZWFkICg/KVxuICAgKiBAcmV0dXJucyB7QmxvY2t9IGluc2VydGVkIEJsb2NrXG4gICAqL1xuICBpbnNlcnREZWZhdWx0QmxvY2tBdEluZGV4KGUsIHQgPSAhMSkge1xuICAgIGNvbnN0IG8gPSB0aGlzLmNvbXBvc2VCbG9jayh7IHRvb2w6IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayB9KTtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzW2VdID0gbywgdGhpcy5ibG9ja0RpZE11dGF0ZWQoUWUsIG8sIHtcbiAgICAgIGluZGV4OiBlXG4gICAgfSksIHQgPyB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID0gZSA6IGUgPD0gdGhpcy5jdXJyZW50QmxvY2tJbmRleCAmJiB0aGlzLmN1cnJlbnRCbG9ja0luZGV4KyssIG87XG4gIH1cbiAgLyoqXG4gICAqIEFsd2F5cyBpbnNlcnRzIGF0IHRoZSBlbmRcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgaW5zZXJ0QXRFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSB0aGlzLmJsb2Nrcy5sZW5ndGggLSAxLCB0aGlzLmluc2VydCgpO1xuICB9XG4gIC8qKlxuICAgKiBNZXJnZSB0d28gYmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IHRhcmdldEJsb2NrIC0gcHJldmlvdXMgYmxvY2sgd2lsbCBiZSBhcHBlbmQgdG8gdGhpcyBibG9ja1xuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9ja1RvTWVyZ2UgLSBibG9jayB0aGF0IHdpbGwgYmUgbWVyZ2VkIHdpdGggdGFyZ2V0IGJsb2NrXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHRoZSBzZXF1ZW5jZSB0aGF0IGNhbiBiZSBjb250aW51ZWRcbiAgICovXG4gIGFzeW5jIG1lcmdlQmxvY2tzKGUsIHQpIHtcbiAgICBjb25zdCBvID0gdGhpcy5fYmxvY2tzLmluZGV4T2YodCk7XG4gICAgaWYgKHQuaXNFbXB0eSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBpID0gYXdhaXQgdC5kYXRhO1xuICAgIFYoaSkgfHwgYXdhaXQgZS5tZXJnZVdpdGgoaSksIHRoaXMucmVtb3ZlQmxvY2sobyksIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSB0aGlzLl9ibG9ja3MuaW5kZXhPZihlKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGJsb2NrIHdpdGggcGFzc2VkIGluZGV4IG9yIHJlbW92ZSBsYXN0XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfG51bGx9IGluZGV4IC0gaW5kZXggb2YgQmxvY2sgdG8gcmVtb3ZlXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBpZiBCbG9jayB0byByZW1vdmUgaXMgbm90IGZvdW5kXG4gICAqL1xuICByZW1vdmVCbG9jayhlID0gdGhpcy5jdXJyZW50QmxvY2tJbmRleCkge1xuICAgIGlmICghdGhpcy52YWxpZGF0ZUluZGV4KGUpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBhIEJsb2NrIHRvIHJlbW92ZVwiKTtcbiAgICBjb25zdCB0ID0gdGhpcy5fYmxvY2tzW2VdO1xuICAgIHQuZGVzdHJveSgpLCB0aGlzLl9ibG9ja3MucmVtb3ZlKGUpLCB0aGlzLmJsb2NrRGlkTXV0YXRlZChKZSwgdCwge1xuICAgICAgaW5kZXg6IGVcbiAgICB9KSwgdGhpcy5jdXJyZW50QmxvY2tJbmRleCA+PSBlICYmIHRoaXMuY3VycmVudEJsb2NrSW5kZXgtLSwgdGhpcy5ibG9ja3MubGVuZ3RoID8gZSA9PT0gMCAmJiAodGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IDApIDogKHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSAtMSwgdGhpcy5pbnNlcnQoKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBvbmx5IHNlbGVjdGVkIEJsb2Nrc1xuICAgKiBhbmQgcmV0dXJucyBmaXJzdCBCbG9jayBpbmRleCB3aGVyZSBzdGFydGVkIHJlbW92aW5nLi4uXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8dW5kZWZpbmVkfVxuICAgKi9cbiAgcmVtb3ZlU2VsZWN0ZWRCbG9ja3MoKSB7XG4gICAgbGV0IGU7XG4gICAgZm9yIChsZXQgdCA9IHRoaXMuYmxvY2tzLmxlbmd0aCAtIDE7IHQgPj0gMDsgdC0tKVxuICAgICAgdGhpcy5ibG9ja3NbdF0uc2VsZWN0ZWQgJiYgKHRoaXMucmVtb3ZlQmxvY2sodCksIGUgPSB0KTtcbiAgICByZXR1cm4gZTtcbiAgfVxuICAvKipcbiAgICogQXR0ZW50aW9uIVxuICAgKiBBZnRlciByZW1vdmluZyBpbnNlcnQgdGhlIG5ldyBkZWZhdWx0IHR5cGVkIEJsb2NrIGFuZCBmb2N1cyBvbiBpdFxuICAgKiBSZW1vdmVzIGFsbCBibG9ja3NcbiAgICovXG4gIHJlbW92ZUFsbEJsb2NrcygpIHtcbiAgICBmb3IgKGxldCBlID0gdGhpcy5ibG9ja3MubGVuZ3RoIC0gMTsgZSA+PSAwOyBlLS0pXG4gICAgICB0aGlzLl9ibG9ja3MucmVtb3ZlKGUpO1xuICAgIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSAtMSwgdGhpcy5pbnNlcnQoKSwgdGhpcy5jdXJyZW50QmxvY2suZmlyc3RJbnB1dC5mb2N1cygpO1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCBjdXJyZW50IEJsb2NrXG4gICAqIDEuIEV4dHJhY3QgY29udGVudCBmcm9tIENhcmV0IHBvc2l0aW9uIHRvIHRoZSBCbG9ja2BzIGVuZFxuICAgKiAyLiBJbnNlcnQgYSBuZXcgQmxvY2sgYmVsb3cgY3VycmVudCBvbmUgd2l0aCBleHRyYWN0ZWQgY29udGVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2t9XG4gICAqL1xuICBzcGxpdCgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5FZGl0b3IuQ2FyZXQuZXh0cmFjdEZyYWdtZW50RnJvbUNhcmV0UG9zaXRpb24oKSwgdCA9IGQubWFrZShcImRpdlwiKTtcbiAgICB0LmFwcGVuZENoaWxkKGUpO1xuICAgIGNvbnN0IG8gPSB7XG4gICAgICB0ZXh0OiBkLmlzRW1wdHkodCkgPyBcIlwiIDogdC5pbm5lckhUTUxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmluc2VydCh7IGRhdGE6IG8gfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgQmxvY2sgYnkgcGFzc2VkIGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIGluZGV4IHRvIGdldC4gLTEgdG8gZ2V0IGxhc3RcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0QmxvY2tCeUluZGV4KGUpIHtcbiAgICByZXR1cm4gZSA9PT0gLTEgJiYgKGUgPSB0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSksIHRoaXMuX2Jsb2Nrc1tlXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBpbmRleCBmb3IgcGFzc2VkIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSBibG9jayAtIGJsb2NrIHRvIGZpbmQgaW5kZXhcbiAgICovXG4gIGdldEJsb2NrSW5kZXgoZSkge1xuICAgIHJldHVybiB0aGlzLl9ibG9ja3MuaW5kZXhPZihlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgQmxvY2sgYnkgcGFzc2VkIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpZCAtIGlkIG9mIGJsb2NrIHRvIGdldFxuICAgKiBAcmV0dXJucyB7QmxvY2t9XG4gICAqL1xuICBnZXRCbG9ja0J5SWQoZSkge1xuICAgIHJldHVybiB0aGlzLl9ibG9ja3MuYXJyYXkuZmluZCgodCkgPT4gdC5pZCA9PT0gZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBCbG9jayBpbnN0YW5jZSBieSBodG1sIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IC0gaHRtbCBlbGVtZW50IHRvIGdldCBCbG9jayBieVxuICAgKi9cbiAgZ2V0QmxvY2soZSkge1xuICAgIGQuaXNFbGVtZW50KGUpIHx8IChlID0gZS5wYXJlbnROb2RlKTtcbiAgICBjb25zdCB0ID0gdGhpcy5fYmxvY2tzLm5vZGVzLCBvID0gZS5jbG9zZXN0KGAuJHtGLkNTUy53cmFwcGVyfWApLCBpID0gdC5pbmRleE9mKG8pO1xuICAgIGlmIChpID49IDApXG4gICAgICByZXR1cm4gdGhpcy5fYmxvY2tzW2ldO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc2VsZWN0aW9uIGZyb20gYWxsIEJsb2NrcyB0aGVuIGhpZ2hsaWdodCBvbmx5IEN1cnJlbnQgQmxvY2tcbiAgICovXG4gIGhpZ2hsaWdodEN1cnJlbnROb2RlKCkge1xuICAgIHRoaXMuY2xlYXJGb2N1c2VkKCksIHRoaXMuY3VycmVudEJsb2NrLmZvY3VzZWQgPSAhMDtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHNlbGVjdGlvbiBmcm9tIGFsbCBCbG9ja3NcbiAgICovXG4gIGNsZWFyRm9jdXNlZCgpIHtcbiAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBlLmZvY3VzZWQgPSAhMTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogMSkgRmluZCBmaXJzdC1sZXZlbCBCbG9jayBmcm9tIHBhc3NlZCBjaGlsZCBOb2RlXG4gICAqIDIpIE1hcmsgaXQgYXMgY3VycmVudFxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IGNoaWxkTm9kZSAtIGxvb2sgYWhlYWQgZnJvbSB0aGlzIG5vZGUuXG4gICAqIEByZXR1cm5zIHtCbG9jayB8IHVuZGVmaW5lZH0gY2FuIHJldHVybiB1bmRlZmluZWQgaW4gY2FzZSB3aGVuIHRoZSBwYXNzZWQgY2hpbGQgbm90ZSBpcyBub3QgYSBwYXJ0IG9mIHRoZSBjdXJyZW50IGVkaXRvciBpbnN0YW5jZVxuICAgKi9cbiAgc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUoZSkge1xuICAgIGQuaXNFbGVtZW50KGUpIHx8IChlID0gZS5wYXJlbnROb2RlKTtcbiAgICBjb25zdCB0ID0gZS5jbG9zZXN0KGAuJHtGLkNTUy53cmFwcGVyfWApO1xuICAgIGlmICghdClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBvID0gdC5jbG9zZXN0KGAuJHt0aGlzLkVkaXRvci5VSS5DU1MuZWRpdG9yV3JhcHBlcn1gKTtcbiAgICBpZiAobyAhPSBudWxsICYmIG8uaXNFcXVhbE5vZGUodGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlcikpXG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IHRoaXMuX2Jsb2Nrcy5ub2Rlcy5pbmRleE9mKHQpLCB0aGlzLmN1cnJlbnRCbG9jay51cGRhdGVDdXJyZW50SW5wdXQoKSwgdGhpcy5jdXJyZW50QmxvY2s7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBibG9jayB3aGljaCBjb250ZW50cyBwYXNzZWQgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IGNoaWxkTm9kZSAtIG5vZGUgdG8gZ2V0IEJsb2NrIGJ5XG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldEJsb2NrQnlDaGlsZE5vZGUoZSkge1xuICAgIGQuaXNFbGVtZW50KGUpIHx8IChlID0gZS5wYXJlbnROb2RlKTtcbiAgICBjb25zdCB0ID0gZS5jbG9zZXN0KGAuJHtGLkNTUy53cmFwcGVyfWApO1xuICAgIHJldHVybiB0aGlzLmJsb2Nrcy5maW5kKChvKSA9PiBvLmhvbGRlciA9PT0gdCk7XG4gIH1cbiAgLyoqXG4gICAqIFN3YXAgQmxvY2tzIFBvc2l0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggLSBpbmRleCBvZiBmaXJzdCBibG9ja1xuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIGluZGV4IG9mIHNlY29uZCBibG9ja1xuICAgKiBAZGVwcmVjYXRlZCBcdTIwMTQgdXNlICdtb3ZlJyBpbnN0ZWFkXG4gICAqL1xuICBzd2FwKGUsIHQpIHtcbiAgICB0aGlzLl9ibG9ja3Muc3dhcChlLCB0KSwgdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IHQ7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgYSBibG9jayB0byBhIG5ldyBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIGluZGV4IHdoZXJlIHRvIG1vdmUgQmxvY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCAtIGluZGV4IG9mIEJsb2NrIHRvIG1vdmVcbiAgICovXG4gIG1vdmUoZSwgdCA9IHRoaXMuY3VycmVudEJsb2NrSW5kZXgpIHtcbiAgICBpZiAoaXNOYU4oZSkgfHwgaXNOYU4odCkpIHtcbiAgICAgIFQoXCJXYXJuaW5nIGR1cmluZyAnbW92ZScgY2FsbDogaW5jb3JyZWN0IGluZGljZXMgcHJvdmlkZWQuXCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnZhbGlkYXRlSW5kZXgoZSkgfHwgIXRoaXMudmFsaWRhdGVJbmRleCh0KSkge1xuICAgICAgVChcIldhcm5pbmcgZHVyaW5nICdtb3ZlJyBjYWxsOiBpbmRpY2VzIGNhbm5vdCBiZSBsb3dlciB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIHRoZSBhbW91bnQgb2YgYmxvY2tzLlwiLCBcIndhcm5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2Jsb2Nrcy5tb3ZlKGUsIHQpLCB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID0gZSwgdGhpcy5ibG9ja0RpZE11dGF0ZWQoV28sIHRoaXMuY3VycmVudEJsb2NrLCB7XG4gICAgICBmcm9tSW5kZXg6IHQsXG4gICAgICB0b0luZGV4OiBlXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgY3VycmVudCBCbG9jayBJbmRleCAtMSB3aGljaCBtZWFucyB1bmtub3duXG4gICAqIGFuZCBjbGVhciBoaWdobGlnaHRzXG4gICAqL1xuICBkcm9wUG9pbnRlcigpIHtcbiAgICB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID0gLTEsIHRoaXMuY2xlYXJGb2N1c2VkKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBFZGl0b3JcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBuZWVkVG9BZGREZWZhdWx0QmxvY2sgLSAxKSBpbiBpbnRlcm5hbCBjYWxscyAoZm9yIGV4YW1wbGUsIGluIGFwaS5ibG9ja3MucmVuZGVyKVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlIGRvbid0IG5lZWQgdG8gYWRkIGFuIGVtcHR5IGRlZmF1bHQgYmxvY2tcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMikgaW4gYXBpLmJsb2Nrcy5jbGVhciB3ZSBzaG91bGQgYWRkIGVtcHR5IGJsb2NrXG4gICAqL1xuICBjbGVhcihlID0gITEpIHtcbiAgICB0aGlzLl9ibG9ja3MucmVtb3ZlQWxsKCksIHRoaXMuZHJvcFBvaW50ZXIoKSwgZSAmJiB0aGlzLmluc2VydCgpLCB0aGlzLkVkaXRvci5VSS5jaGVja0VtcHRpbmVzcygpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhbnMgdXAgYWxsIHRoZSBibG9jayB0b29scycgcmVzb3VyY2VzXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gZWRpdG9yIGlzIGRlc3Ryb3llZFxuICAgKi9cbiAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLmJsb2Nrcy5tYXAoKGUpID0+IGUuZGVzdHJveSgpKSk7XG4gIH1cbiAgLyoqXG4gICAqIEJpbmQgQmxvY2sgZXZlbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIC0gQmxvY2sgdG8gd2hpY2ggZXZlbnQgc2hvdWxkIGJlIGJvdW5kXG4gICAqL1xuICBiaW5kQmxvY2tFdmVudHMoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tFdmVudHM6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUuaG9sZGVyLCBcImtleWRvd25cIiwgKG8pID0+IHtcbiAgICAgIHQua2V5ZG93bihvKTtcbiAgICB9KSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZS5ob2xkZXIsIFwia2V5dXBcIiwgKG8pID0+IHtcbiAgICAgIHQua2V5dXAobyk7XG4gICAgfSksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUuaG9sZGVyLCBcImRyYWdvdmVyXCIsIChvKSA9PiB7XG4gICAgICB0LmRyYWdPdmVyKG8pO1xuICAgIH0pLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihlLmhvbGRlciwgXCJkcmFnbGVhdmVcIiwgKG8pID0+IHtcbiAgICAgIHQuZHJhZ0xlYXZlKG8pO1xuICAgIH0pLCBlLm9uKFwiZGlkTXV0YXRlZFwiLCAobykgPT4gdGhpcy5ibG9ja0RpZE11dGF0ZWQoWW8sIG8sIHtcbiAgICAgIGluZGV4OiB0aGlzLmdldEJsb2NrSW5kZXgobylcbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgbXV0YWJsZSBoYW5kbGVycyBhbmQgYmluZGluZ3NcbiAgICovXG4gIGRpc2FibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5jbGVhckFsbCgpO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGVzIGFsbCBtb2R1bGUgaGFuZGxlcnMgYW5kIGJpbmRpbmdzIGZvciBhbGwgQmxvY2tzXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihcbiAgICAgIGRvY3VtZW50LFxuICAgICAgXCJjdXRcIixcbiAgICAgIChlKSA9PiB0aGlzLkVkaXRvci5CbG9ja0V2ZW50cy5oYW5kbGVDb21tYW5kWChlKVxuICAgICksIHRoaXMuYmxvY2tzLmZvckVhY2goKGUpID0+IHtcbiAgICAgIHRoaXMuYmluZEJsb2NrRXZlbnRzKGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhhdCB0aGUgZ2l2ZW4gaW5kZXggaXMgbm90IGxvd2VyIHRoYW4gMCBvciBoaWdoZXIgdGhhbiB0aGUgYW1vdW50IG9mIGJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBpbmRleCBvZiBibG9ja3MgYXJyYXkgdG8gdmFsaWRhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB2YWxpZGF0ZUluZGV4KGUpIHtcbiAgICByZXR1cm4gIShlIDwgMCB8fCBlID49IHRoaXMuX2Jsb2Nrcy5sZW5ndGgpO1xuICB9XG4gIC8qKlxuICAgKiBCbG9jayBtdXRhdGlvbiBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gbXV0YXRpb25UeXBlIC0gd2hhdCBoYXBwZW5lZCB3aXRoIGJsb2NrXG4gICAqIEBwYXJhbSBibG9jayAtIG11dGF0ZWQgYmxvY2tcbiAgICogQHBhcmFtIGRldGFpbERhdGEgLSBhZGRpdGlvbmFsIGRhdGEgdG8gcGFzcyB3aXRoIGNoYW5nZSBldmVudFxuICAgKi9cbiAgYmxvY2tEaWRNdXRhdGVkKGUsIHQsIG8pIHtcbiAgICBjb25zdCBpID0gbmV3IEN1c3RvbUV2ZW50KGUsIHtcbiAgICAgIGRldGFpbDoge1xuICAgICAgICB0YXJnZXQ6IG5ldyBoZSh0KSxcbiAgICAgICAgLi4ub1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdChsdCwge1xuICAgICAgZXZlbnQ6IGlcbiAgICB9KSwgdDtcbiAgfVxufVxuY2xhc3MgWG8gZXh0ZW5kcyBTIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5hbnlCbG9ja1NlbGVjdGVkQ2FjaGUgPSBudWxsLCB0aGlzLm5lZWRUb1NlbGVjdEFsbCA9ICExLCB0aGlzLm5hdGl2ZUlucHV0U2VsZWN0ZWQgPSAhMSwgdGhpcy5yZWFkeVRvQmxvY2tTZWxlY3Rpb24gPSAhMTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIENvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7U2FuaXRpemVyQ29uZmlnfVxuICAgKi9cbiAgZ2V0IHNhbml0aXplckNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcDoge30sXG4gICAgICBoMToge30sXG4gICAgICBoMjoge30sXG4gICAgICBoMzoge30sXG4gICAgICBoNDoge30sXG4gICAgICBoNToge30sXG4gICAgICBoNjoge30sXG4gICAgICBvbDoge30sXG4gICAgICB1bDoge30sXG4gICAgICBsaToge30sXG4gICAgICBicjogITAsXG4gICAgICBpbWc6IHtcbiAgICAgICAgc3JjOiAhMCxcbiAgICAgICAgd2lkdGg6ICEwLFxuICAgICAgICBoZWlnaHQ6ICEwXG4gICAgICB9LFxuICAgICAgYToge1xuICAgICAgICBocmVmOiAhMFxuICAgICAgfSxcbiAgICAgIGI6IHt9LFxuICAgICAgaToge30sXG4gICAgICB1OiB7fVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEZsYWcgdGhhdCBpZGVudGlmaWVzIGFsbCBCbG9ja3Mgc2VsZWN0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGFsbEJsb2Nrc1NlbGVjdGVkKCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBlIH0gPSB0aGlzLkVkaXRvcjtcbiAgICByZXR1cm4gZS5ibG9ja3MuZXZlcnkoKHQpID0+IHQuc2VsZWN0ZWQgPT09ICEwKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdGVkIGFsbCBibG9ja3NcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBzdGF0ZSAtIHN0YXRlIHRvIHNldFxuICAgKi9cbiAgc2V0IGFsbEJsb2Nrc1NlbGVjdGVkKGUpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdC5ibG9ja3MuZm9yRWFjaCgobykgPT4ge1xuICAgICAgby5zZWxlY3RlZCA9IGU7XG4gICAgfSksIHRoaXMuY2xlYXJDYWNoZSgpO1xuICB9XG4gIC8qKlxuICAgKiBGbGFnIHRoYXQgaWRlbnRpZmllcyBhbnkgQmxvY2sgc2VsZWN0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGFueUJsb2NrU2VsZWN0ZWQoKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGUgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHJldHVybiB0aGlzLmFueUJsb2NrU2VsZWN0ZWRDYWNoZSA9PT0gbnVsbCAmJiAodGhpcy5hbnlCbG9ja1NlbGVjdGVkQ2FjaGUgPSBlLmJsb2Nrcy5zb21lKCh0KSA9PiB0LnNlbGVjdGVkID09PSAhMCkpLCB0aGlzLmFueUJsb2NrU2VsZWN0ZWRDYWNoZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHNlbGVjdGVkIEJsb2NrcyBhcnJheVxuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2tbXX1cbiAgICovXG4gIGdldCBzZWxlY3RlZEJsb2NrcygpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrcy5maWx0ZXIoKGUpID0+IGUuc2VsZWN0ZWQpO1xuICB9XG4gIC8qKlxuICAgKiBNb2R1bGUgUHJlcGFyYXRpb25cbiAgICogUmVnaXN0ZXJzIFNob3J0Y3V0cyBDTUQrQSBhbmQgQ01EK0NcbiAgICogdG8gc2VsZWN0IGFsbCBhbmQgY29weSB0aGVtXG4gICAqL1xuICBwcmVwYXJlKCkge1xuICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IG0oKSwgcmUuYWRkKHtcbiAgICAgIG5hbWU6IFwiQ01EK0FcIixcbiAgICAgIGhhbmRsZXI6IChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBSZWFkT25seTogbyB9ID0gdGhpcy5FZGl0b3I7XG4gICAgICAgIGlmIChvLmlzRW5hYmxlZCkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5zZWxlY3RBbGxCbG9ja3MoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdC5jdXJyZW50QmxvY2sgJiYgdGhpcy5oYW5kbGVDb21tYW5kQShlKTtcbiAgICAgIH0sXG4gICAgICBvbjogdGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3JcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlIHJlYWQtb25seSBzdGF0ZVxuICAgKlxuICAgKiAgLSBSZW1vdmUgYWxsIHJhbmdlc1xuICAgKiAgLSBVbnNlbGVjdCBhbGwgQmxvY2tzXG4gICAqL1xuICB0b2dnbGVSZWFkT25seSgpIHtcbiAgICBtLmdldCgpLnJlbW92ZUFsbFJhbmdlcygpLCB0aGlzLmFsbEJsb2Nrc1NlbGVjdGVkID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzZWxlY3Rpb24gb2YgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXI/fSBpbmRleCAtIEJsb2NrIGluZGV4IGFjY29yZGluZyB0byB0aGUgQmxvY2tNYW5hZ2VyJ3MgaW5kZXhlc1xuICAgKi9cbiAgdW5TZWxlY3RCbG9ja0J5SW5kZXgoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0IH0gPSB0aGlzLkVkaXRvcjtcbiAgICBsZXQgbztcbiAgICBpc05hTihlKSA/IG8gPSB0LmN1cnJlbnRCbG9jayA6IG8gPSB0LmdldEJsb2NrQnlJbmRleChlKSwgby5zZWxlY3RlZCA9ICExLCB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgc2VsZWN0aW9uIGZyb20gQmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IHJlYXNvbiAtIGV2ZW50IGNhdXNlZCBjbGVhciBvZiBzZWxlY3Rpb25cbiAgICogQHBhcmFtIHtib29sZWFufSByZXN0b3JlU2VsZWN0aW9uIC0gaWYgdHJ1ZSwgcmVzdG9yZSBzYXZlZCBzZWxlY3Rpb25cbiAgICovXG4gIGNsZWFyU2VsZWN0aW9uKGUsIHQgPSAhMSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBvLCBDYXJldDogaSwgUmVjdGFuZ2xlU2VsZWN0aW9uOiBuIH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0aGlzLm5lZWRUb1NlbGVjdEFsbCA9ICExLCB0aGlzLm5hdGl2ZUlucHV0U2VsZWN0ZWQgPSAhMSwgdGhpcy5yZWFkeVRvQmxvY2tTZWxlY3Rpb24gPSAhMTtcbiAgICBjb25zdCByID0gZSAmJiBlIGluc3RhbmNlb2YgS2V5Ym9hcmRFdmVudCwgYSA9IHIgJiYgdHQoZS5rZXlDb2RlKTtcbiAgICBpZiAodGhpcy5hbnlCbG9ja1NlbGVjdGVkICYmIHIgJiYgYSAmJiAhbS5pc1NlbGVjdGlvbkV4aXN0cykge1xuICAgICAgY29uc3QgbCA9IG8ucmVtb3ZlU2VsZWN0ZWRCbG9ja3MoKTtcbiAgICAgIG8uaW5zZXJ0RGVmYXVsdEJsb2NrQXRJbmRleChsLCAhMCksIGkuc2V0VG9CbG9jayhvLmN1cnJlbnRCbG9jayksIG9lKCgpID0+IHtcbiAgICAgICAgY29uc3QgYyA9IGUua2V5O1xuICAgICAgICBpLmluc2VydENvbnRlbnRBdENhcmV0UG9zaXRpb24oYy5sZW5ndGggPiAxID8gXCJcIiA6IGMpO1xuICAgICAgfSwgMjApKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLkVkaXRvci5Dcm9zc0Jsb2NrU2VsZWN0aW9uLmNsZWFyKGUpLCAhdGhpcy5hbnlCbG9ja1NlbGVjdGVkIHx8IG4uaXNSZWN0QWN0aXZhdGVkKCkpIHtcbiAgICAgIHRoaXMuRWRpdG9yLlJlY3RhbmdsZVNlbGVjdGlvbi5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0ICYmIHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSwgdGhpcy5hbGxCbG9ja3NTZWxlY3RlZCA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBSZWR1Y2UgZWFjaCBCbG9jayBhbmQgY29weSBpdHMgY29udGVudFxuICAgKlxuICAgKiBAcGFyYW0ge0NsaXBib2FyZEV2ZW50fSBlIC0gY29weS9jdXQgZXZlbnRcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBjb3B5U2VsZWN0ZWRCbG9ja3MoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB0ID0gZC5tYWtlKFwiZGl2XCIpO1xuICAgIHRoaXMuc2VsZWN0ZWRCbG9ja3MuZm9yRWFjaCgobikgPT4ge1xuICAgICAgY29uc3QgciA9IFoobi5ob2xkZXIuaW5uZXJIVE1MLCB0aGlzLnNhbml0aXplckNvbmZpZyksIGEgPSBkLm1ha2UoXCJwXCIpO1xuICAgICAgYS5pbm5lckhUTUwgPSByLCB0LmFwcGVuZENoaWxkKGEpO1xuICAgIH0pO1xuICAgIGNvbnN0IG8gPSBBcnJheS5mcm9tKHQuY2hpbGROb2RlcykubWFwKChuKSA9PiBuLnRleHRDb250ZW50KS5qb2luKGBcblxuYCksIGkgPSB0LmlubmVySFRNTDtcbiAgICByZXR1cm4gZS5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIG8pLCBlLmNsaXBib2FyZERhdGEuc2V0RGF0YShcInRleHQvaHRtbFwiLCBpKSwgUHJvbWlzZS5hbGwodGhpcy5zZWxlY3RlZEJsb2Nrcy5tYXAoKG4pID0+IG4uc2F2ZSgpKSkudGhlbigobikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZS5jbGlwYm9hcmREYXRhLnNldERhdGEodGhpcy5FZGl0b3IuUGFzdGUuTUlNRV9UWVBFLCBKU09OLnN0cmluZ2lmeShuKSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogc2VsZWN0IEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyP30gaW5kZXggLSBCbG9jayBpbmRleCBhY2NvcmRpbmcgdG8gdGhlIEJsb2NrTWFuYWdlcidzIGluZGV4ZXNcbiAgICovXG4gIHNlbGVjdEJsb2NrQnlJbmRleChlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHQuY2xlYXJGb2N1c2VkKCk7XG4gICAgbGV0IG87XG4gICAgaXNOYU4oZSkgPyBvID0gdC5jdXJyZW50QmxvY2sgOiBvID0gdC5nZXRCbG9ja0J5SW5kZXgoZSksIHRoaXMuc2VsZWN0aW9uLnNhdmUoKSwgbS5nZXQoKS5yZW1vdmVBbGxSYW5nZXMoKSwgby5zZWxlY3RlZCA9ICEwLCB0aGlzLmNsZWFyQ2FjaGUoKSwgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhciBhbnlCbG9ja1NlbGVjdGVkIGNhY2hlXG4gICAqL1xuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuYW55QmxvY2tTZWxlY3RlZENhY2hlID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIGRlc3RydWN0aW9uXG4gICAqIERlLXJlZ2lzdGVycyBTaG9ydGN1dCBDTUQrQVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICByZS5yZW1vdmUodGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3IsIFwiQ01EK0FcIik7XG4gIH1cbiAgLyoqXG4gICAqIEZpcnN0IENNRCtBIHNlbGVjdHMgYWxsIGlucHV0IGNvbnRlbnQgYnkgbmF0aXZlIGJlaGF2aW91cixcbiAgICogbmV4dCBDTUQrQSBrZXlwcmVzcyBzZWxlY3RzIGFsbCBibG9ja3NcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWJvYXJkIGV2ZW50XG4gICAqL1xuICBoYW5kbGVDb21tYW5kQShlKSB7XG4gICAgaWYgKHRoaXMuRWRpdG9yLlJlY3RhbmdsZVNlbGVjdGlvbi5jbGVhclNlbGVjdGlvbigpLCBkLmlzTmF0aXZlSW5wdXQoZS50YXJnZXQpICYmICF0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbikge1xuICAgICAgdGhpcy5yZWFkeVRvQmxvY2tTZWxlY3Rpb24gPSAhMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbyA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9jayhlLnRhcmdldCkuaW5wdXRzO1xuICAgIGlmIChvLmxlbmd0aCA+IDEgJiYgIXRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbiA9ICEwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoby5sZW5ndGggPT09IDEgJiYgIXRoaXMubmVlZFRvU2VsZWN0QWxsKSB7XG4gICAgICB0aGlzLm5lZWRUb1NlbGVjdEFsbCA9ICEwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm5lZWRUb1NlbGVjdEFsbCA/IChlLnByZXZlbnREZWZhdWx0KCksIHRoaXMuc2VsZWN0QWxsQmxvY2tzKCksIHRoaXMubmVlZFRvU2VsZWN0QWxsID0gITEsIHRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uID0gITEsIHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCkpIDogdGhpcy5yZWFkeVRvQmxvY2tTZWxlY3Rpb24gJiYgKGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5zZWxlY3RCbG9ja0J5SW5kZXgoKSwgdGhpcy5uZWVkVG9TZWxlY3RBbGwgPSAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdCBBbGwgQmxvY2tzXG4gICAqIEVhY2ggQmxvY2sgaGFzIHNlbGVjdGVkIHNldHRlciB0aGF0IG1ha2VzIEJsb2NrIGNvcHlhYmxlXG4gICAqL1xuICBzZWxlY3RBbGxCbG9ja3MoKSB7XG4gICAgdGhpcy5zZWxlY3Rpb24uc2F2ZSgpLCBtLmdldCgpLnJlbW92ZUFsbFJhbmdlcygpLCB0aGlzLmFsbEJsb2Nrc1NlbGVjdGVkID0gITAsIHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKTtcbiAgfVxufVxuY2xhc3MgdmUgZXh0ZW5kcyBTIHtcbiAgLyoqXG4gICAqIEFsbG93ZWQgY2FyZXQgcG9zaXRpb25zIGluIGlucHV0XG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHJldHVybnMge3tTVEFSVDogc3RyaW5nLCBFTkQ6IHN0cmluZywgREVGQVVMVDogc3RyaW5nfX1cbiAgICovXG4gIGdldCBwb3NpdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFNUQVJUOiBcInN0YXJ0XCIsXG4gICAgICBFTkQ6IFwiZW5kXCIsXG4gICAgICBERUZBVUxUOiBcImRlZmF1bHRcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEVsZW1lbnRzIHN0eWxlcyB0aGF0IGNhbiBiZSB1c2VmdWwgZm9yIENhcmV0IE1vZHVsZVxuICAgKi9cbiAgc3RhdGljIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNoYWRvd0NhcmV0OiBcImNkeC1zaGFkb3ctY2FyZXRcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCdzIGRlZXBlc3QgZmlyc3Qgbm9kZSBhbmQgY2hlY2tzIGlmIG9mZnNldCBpcyB6ZXJvXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzQXRTdGFydCgpIHtcbiAgICBjb25zdCBlID0gbS5nZXQoKSwgdCA9IGQuZ2V0RGVlcGVzdE5vZGUodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay5jdXJyZW50SW5wdXQpO1xuICAgIGxldCBvID0gZS5mb2N1c05vZGU7XG4gICAgaWYgKGQuaXNOYXRpdmVJbnB1dCh0KSlcbiAgICAgIHJldHVybiB0LnNlbGVjdGlvbkVuZCA9PT0gMDtcbiAgICBpZiAoIWUuYW5jaG9yTm9kZSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBsZXQgaSA9IG8udGV4dENvbnRlbnQuc2VhcmNoKC9cXFMvKTtcbiAgICBpID09PSAtMSAmJiAoaSA9IDApO1xuICAgIGxldCBuID0gZS5mb2N1c09mZnNldDtcbiAgICByZXR1cm4gby5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUgJiYgby5jaGlsZE5vZGVzLmxlbmd0aCAmJiAoby5jaGlsZE5vZGVzW25dID8gKG8gPSBvLmNoaWxkTm9kZXNbbl0sIG4gPSAwKSA6IChvID0gby5jaGlsZE5vZGVzW24gLSAxXSwgbiA9IG8udGV4dENvbnRlbnQubGVuZ3RoKSksIChkLmlzTGluZUJyZWFrVGFnKHQpIHx8IGQuaXNFbXB0eSh0KSkgJiYgdGhpcy5nZXRIaWdoZXJMZXZlbFNpYmxpbmdzKG8sIFwibGVmdFwiKS5ldmVyeSgobCkgPT4ge1xuICAgICAgY29uc3QgYyA9IGQuaXNMaW5lQnJlYWtUYWcobCksIHUgPSBsLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBkLmlzTGluZUJyZWFrVGFnKGwuY2hpbGRyZW5bMF0pLCBoID0gYyB8fCB1O1xuICAgICAgcmV0dXJuIGQuaXNFbXB0eShsKSAmJiAhaDtcbiAgICB9KSAmJiBuID09PSBpID8gITAgOiB0ID09PSBudWxsIHx8IG8gPT09IHQgJiYgbiA8PSBpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQncyBkZWVwZXN0IGxhc3Qgbm9kZSBhbmQgY2hlY2tzIGlmIG9mZnNldCBpcyBsYXN0IG5vZGUgdGV4dCBsZW5ndGhcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNBdEVuZCgpIHtcbiAgICBjb25zdCBlID0gbS5nZXQoKTtcbiAgICBsZXQgdCA9IGUuZm9jdXNOb2RlO1xuICAgIGNvbnN0IG8gPSBkLmdldERlZXBlc3ROb2RlKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suY3VycmVudElucHV0LCAhMCk7XG4gICAgaWYgKGQuaXNOYXRpdmVJbnB1dChvKSlcbiAgICAgIHJldHVybiBvLnNlbGVjdGlvbkVuZCA9PT0gby52YWx1ZS5sZW5ndGg7XG4gICAgaWYgKCFlLmZvY3VzTm9kZSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBsZXQgaSA9IGUuZm9jdXNPZmZzZXQ7XG4gICAgaWYgKHQubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFICYmIHQuY2hpbGROb2Rlcy5sZW5ndGggJiYgKHQuY2hpbGROb2Rlc1tpIC0gMV0gPyAodCA9IHQuY2hpbGROb2Rlc1tpIC0gMV0sIGkgPSB0LnRleHRDb250ZW50Lmxlbmd0aCkgOiAodCA9IHQuY2hpbGROb2Rlc1swXSwgaSA9IDApKSwgZC5pc0xpbmVCcmVha1RhZyhvKSB8fCBkLmlzRW1wdHkobykpIHtcbiAgICAgIGNvbnN0IHIgPSB0aGlzLmdldEhpZ2hlckxldmVsU2libGluZ3ModCwgXCJyaWdodFwiKTtcbiAgICAgIGlmIChyLmV2ZXJ5KChsLCBjKSA9PiBjID09PSByLmxlbmd0aCAtIDEgJiYgZC5pc0xpbmVCcmVha1RhZyhsKSB8fCBkLmlzRW1wdHkobCkgJiYgIWQuaXNMaW5lQnJlYWtUYWcobCkpICYmIGkgPT09IHQudGV4dENvbnRlbnQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIGNvbnN0IG4gPSBvLnRleHRDb250ZW50LnJlcGxhY2UoL1xccyskLywgXCJcIik7XG4gICAgcmV0dXJuIHQgPT09IG8gJiYgaSA+PSBuLmxlbmd0aDtcbiAgfVxuICAvKipcbiAgICogTWV0aG9kIGdldHMgQmxvY2sgaW5zdGFuY2UgYW5kIHB1dHMgY2FyZXQgdG8gdGhlIHRleHQgbm9kZSB3aXRoIG9mZnNldFxuICAgKiBUaGVyZSB0d28gd2F5cyB0aGF0IG1ldGhvZCBhcHBsaWVzIGNhcmV0IHBvc2l0aW9uOlxuICAgKiAgIC0gZmlyc3QgZm91bmQgdGV4dCBub2RlOiBzZXRzIGF0IHRoZSBiZWdpbm5pbmcsIGJ1dCB5b3UgY2FuIHBhc3MgYW4gb2Zmc2V0XG4gICAqICAgLSBsYXN0IGZvdW5kIHRleHQgbm9kZTogc2V0cyBhdCB0aGUgZW5kIG9mIHRoZSBub2RlLiBBbHNvLCB5b3UgY2FuIGN1c3RvbWl6ZSB0aGUgYmVoYXZpb3VyXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIC0gQmxvY2sgY2xhc3NcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBvc2l0aW9uIC0gcG9zaXRpb24gd2hlcmUgdG8gc2V0IGNhcmV0LlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBkZWZhdWx0IC0gbGVhdmUgZGVmYXVsdCBiZWhhdmlvdXIgYW5kIGFwcGx5IG9mZnNldCBpZiBpdCdzIHBhc3NlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gY2FyZXQgb2Zmc2V0IHJlZ2FyZGluZyB0byB0aGUgdGV4dCBub2RlXG4gICAqL1xuICBzZXRUb0Jsb2NrKGUsIHQgPSB0aGlzLnBvc2l0aW9ucy5ERUZBVUxULCBvID0gMCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBpIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBsZXQgbjtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgdGhpcy5wb3NpdGlvbnMuU1RBUlQ6XG4gICAgICAgIG4gPSBlLmZpcnN0SW5wdXQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0aGlzLnBvc2l0aW9ucy5FTkQ6XG4gICAgICAgIG4gPSBlLmxhc3RJbnB1dDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuID0gZS5jdXJyZW50SW5wdXQ7XG4gICAgfVxuICAgIGlmICghbilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCByID0gZC5nZXREZWVwZXN0Tm9kZShuLCB0ID09PSB0aGlzLnBvc2l0aW9ucy5FTkQpLCBhID0gZC5nZXRDb250ZW50TGVuZ3RoKHIpO1xuICAgIHN3aXRjaCAoITApIHtcbiAgICAgIGNhc2UgdCA9PT0gdGhpcy5wb3NpdGlvbnMuU1RBUlQ6XG4gICAgICAgIG8gPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdCA9PT0gdGhpcy5wb3NpdGlvbnMuRU5EOlxuICAgICAgY2FzZSBvID4gYTpcbiAgICAgICAgbyA9IGE7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvZSgoKSA9PiB7XG4gICAgICB0aGlzLnNldChyLCBvKTtcbiAgICB9LCAyMCkoKSwgaS5zZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZShlLmhvbGRlciksIGkuY3VycmVudEJsb2NrLmN1cnJlbnRJbnB1dCA9IG47XG4gIH1cbiAgLyoqXG4gICAqIFNldCBjYXJldCB0byB0aGUgY3VycmVudCBpbnB1dCBvZiBjdXJyZW50IEJsb2NrLlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBpbnB1dCAtIGlucHV0IHdoZXJlIGNhcmV0IHNob3VsZCBiZSBzZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBvc2l0aW9uIC0gcG9zaXRpb24gb2YgdGhlIGNhcmV0LlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBkZWZhdWx0IC0gbGVhdmUgZGVmYXVsdCBiZWhhdmlvdXIgYW5kIGFwcGx5IG9mZnNldCBpZiBpdCdzIHBhc3NlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gY2FyZXQgb2Zmc2V0IHJlZ2FyZGluZyB0byB0aGUgdGV4dCBub2RlXG4gICAqL1xuICBzZXRUb0lucHV0KGUsIHQgPSB0aGlzLnBvc2l0aW9ucy5ERUZBVUxULCBvID0gMCkge1xuICAgIGNvbnN0IHsgY3VycmVudEJsb2NrOiBpIH0gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIsIG4gPSBkLmdldERlZXBlc3ROb2RlKGUpO1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgY2FzZSB0aGlzLnBvc2l0aW9ucy5TVEFSVDpcbiAgICAgICAgdGhpcy5zZXQobiwgMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0aGlzLnBvc2l0aW9ucy5FTkQ6XG4gICAgICAgIHRoaXMuc2V0KG4sIGQuZ2V0Q29udGVudExlbmd0aChuKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbyAmJiB0aGlzLnNldChuLCBvKTtcbiAgICB9XG4gICAgaS5jdXJyZW50SW5wdXQgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIERvY3VtZW50IFJhbmdlIGFuZCBzZXRzIGNhcmV0IHRvIHRoZSBlbGVtZW50IHdpdGggb2Zmc2V0XG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSB0YXJnZXQgbm9kZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIG9mZnNldFxuICAgKi9cbiAgc2V0KGUsIHQgPSAwKSB7XG4gICAgY29uc3QgeyB0b3A6IG8sIGJvdHRvbTogaSB9ID0gbS5zZXRDdXJzb3IoZSwgdCksIHsgaW5uZXJIZWlnaHQ6IG4gfSA9IHdpbmRvdztcbiAgICBvIDwgMCAmJiB3aW5kb3cuc2Nyb2xsQnkoMCwgbyksIGkgPiBuICYmIHdpbmRvdy5zY3JvbGxCeSgwLCBpIC0gbik7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBDYXJldCB0byB0aGUgbGFzdCBCbG9ja1xuICAgKiBJZiBsYXN0IGJsb2NrIGlzIG5vdCBlbXB0eSwgYXBwZW5kIGFub3RoZXIgZW1wdHkgYmxvY2tcbiAgICovXG4gIHNldFRvVGhlTGFzdEJsb2NrKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIubGFzdEJsb2NrO1xuICAgIGlmIChlKVxuICAgICAgaWYgKGUudG9vbC5pc0RlZmF1bHQgJiYgZS5pc0VtcHR5KVxuICAgICAgICB0aGlzLnNldFRvQmxvY2soZSk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5pbnNlcnRBdEVuZCgpO1xuICAgICAgICB0aGlzLnNldFRvQmxvY2sodCk7XG4gICAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4dHJhY3QgY29udGVudCBmcmFnbWVudCBvZiBjdXJyZW50IEJsb2NrIGZyb20gQ2FyZXQgcG9zaXRpb24gdG8gdGhlIGVuZCBvZiB0aGUgQmxvY2tcbiAgICovXG4gIGV4dHJhY3RGcmFnbWVudEZyb21DYXJldFBvc2l0aW9uKCkge1xuICAgIGNvbnN0IGUgPSBtLmdldCgpO1xuICAgIGlmIChlLnJhbmdlQ291bnQpIHtcbiAgICAgIGNvbnN0IHQgPSBlLmdldFJhbmdlQXQoMCksIG8gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLmN1cnJlbnRJbnB1dDtcbiAgICAgIGlmICh0LmRlbGV0ZUNvbnRlbnRzKCksIG8pXG4gICAgICAgIGlmIChkLmlzTmF0aXZlSW5wdXQobykpIHtcbiAgICAgICAgICBjb25zdCBpID0gbywgbiA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgciA9IGkudmFsdWUuc3Vic3RyaW5nKDAsIGkuc2VsZWN0aW9uU3RhcnQpLCBhID0gaS52YWx1ZS5zdWJzdHJpbmcoaS5zZWxlY3Rpb25TdGFydCk7XG4gICAgICAgICAgcmV0dXJuIG4udGV4dENvbnRlbnQgPSBhLCBpLnZhbHVlID0gciwgbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBpID0gdC5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgcmV0dXJuIGkuc2VsZWN0Tm9kZUNvbnRlbnRzKG8pLCBpLnNldFN0YXJ0KHQuZW5kQ29udGFpbmVyLCB0LmVuZE9mZnNldCksIGkuZXh0cmFjdENvbnRlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldCdzIGNhcmV0IHRvIHRoZSBuZXh0IEJsb2NrIG9yIFRvb2xgcyBpbnB1dFxuICAgKiBCZWZvcmUgbW92aW5nIGNhcmV0LCB3ZSBzaG91bGQgY2hlY2sgaWYgY2FyZXQgcG9zaXRpb24gaXMgYXQgdGhlIGVuZCBvZiBQbHVnaW5zIG5vZGVcbiAgICogVXNpbmcge0BsaW5rIERvbSNnZXREZWVwZXN0Tm9kZX0gdG8gZ2V0IGEgbGFzdCBub2RlIGFuZCBtYXRjaCB3aXRoIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgbmF2aWdhdGVOZXh0KCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBlIH0gPSB0aGlzLkVkaXRvciwgeyBjdXJyZW50QmxvY2s6IHQsIG5leHRDb250ZW50ZnVsQmxvY2s6IG8gfSA9IGUsIHsgbmV4dElucHV0OiBpIH0gPSB0LCBuID0gdGhpcy5pc0F0RW5kO1xuICAgIGxldCByID0gbztcbiAgICBpZiAoIXIgJiYgIWkpIHtcbiAgICAgIGlmICh0LnRvb2wuaXNEZWZhdWx0IHx8ICFuKVxuICAgICAgICByZXR1cm4gITE7XG4gICAgICByID0gZS5pbnNlcnRBdEVuZCgpO1xuICAgIH1cbiAgICByZXR1cm4gbiA/IChpID8gdGhpcy5zZXRUb0lucHV0KGksIHRoaXMucG9zaXRpb25zLlNUQVJUKSA6IHRoaXMuc2V0VG9CbG9jayhyLCB0aGlzLnBvc2l0aW9ucy5TVEFSVCksICEwKSA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBTZXQncyBjYXJldCB0byB0aGUgcHJldmlvdXMgVG9vbGBzIGlucHV0IG9yIEJsb2NrXG4gICAqIEJlZm9yZSBtb3ZpbmcgY2FyZXQsIHdlIHNob3VsZCBjaGVjayBpZiBjYXJldCBwb3NpdGlvbiBpcyBzdGFydCBvZiB0aGUgUGx1Z2lucyBub2RlXG4gICAqIFVzaW5nIHtAbGluayBEb20jZ2V0RGVlcGVzdE5vZGV9IHRvIGdldCBhIGxhc3Qgbm9kZSBhbmQgbWF0Y2ggd2l0aCBjdXJyZW50IHNlbGVjdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIG5hdmlnYXRlUHJldmlvdXMoKSB7XG4gICAgY29uc3QgeyBjdXJyZW50QmxvY2s6IGUsIHByZXZpb3VzQ29udGVudGZ1bEJsb2NrOiB0IH0gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXI7XG4gICAgaWYgKCFlKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHsgcHJldmlvdXNJbnB1dDogbyB9ID0gZTtcbiAgICByZXR1cm4gIXQgJiYgIW8gPyAhMSA6IHRoaXMuaXNBdFN0YXJ0ID8gKG8gPyB0aGlzLnNldFRvSW5wdXQobywgdGhpcy5wb3NpdGlvbnMuRU5EKSA6IHRoaXMuc2V0VG9CbG9jayh0LCB0aGlzLnBvc2l0aW9ucy5FTkQpLCAhMCkgOiAhMTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBzaGFkb3cgZWxlbWVudCBhZnRlciBwYXNzZWQgZWxlbWVudCB3aGVyZSBjYXJldCBjYW4gYmUgcGxhY2VkXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgYWZ0ZXIgd2hpY2ggc2hhZG93IGNhcmV0IHNob3VsZCBiZSBpbnNlcnRlZFxuICAgKi9cbiAgY3JlYXRlU2hhZG93KGUpIHtcbiAgICBjb25zdCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgdC5jbGFzc0xpc3QuYWRkKHZlLkNTUy5zaGFkb3dDYXJldCksIGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsIHQpO1xuICB9XG4gIC8qKlxuICAgKiBSZXN0b3JlcyBjYXJldCBwb3NpdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gZWxlbWVudCB3aGVyZSBjYXJldCBzaG91bGQgYmUgcmVzdG9yZWRcbiAgICovXG4gIHJlc3RvcmVDYXJldChlKSB7XG4gICAgY29uc3QgdCA9IGUucXVlcnlTZWxlY3RvcihgLiR7dmUuQ1NTLnNoYWRvd0NhcmV0fWApO1xuICAgIGlmICghdClcbiAgICAgIHJldHVybjtcbiAgICBuZXcgbSgpLmV4cGFuZFRvVGFnKHQpLCBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IGkgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgaS5zZWxlY3ROb2RlKHQpLCBpLmV4dHJhY3RDb250ZW50cygpO1xuICAgIH0sIDUwKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBwYXNzZWQgY29udGVudCBhdCBjYXJldCBwb3NpdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCAtIGNvbnRlbnQgdG8gaW5zZXJ0XG4gICAqL1xuICBpbnNlcnRDb250ZW50QXRDYXJldFBvc2l0aW9uKGUpIHtcbiAgICBjb25zdCB0ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgaSA9IG0uZ2V0KCksIG4gPSBtLnJhbmdlO1xuICAgIG8uaW5uZXJIVE1MID0gZSwgQXJyYXkuZnJvbShvLmNoaWxkTm9kZXMpLmZvckVhY2goKGwpID0+IHQuYXBwZW5kQ2hpbGQobCkpLCB0LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmIHQuYXBwZW5kQ2hpbGQobmV3IFRleHQoKSk7XG4gICAgY29uc3QgciA9IHQubGFzdENoaWxkO1xuICAgIG4uZGVsZXRlQ29udGVudHMoKSwgbi5pbnNlcnROb2RlKHQpO1xuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIGEuc2V0U3RhcnQociwgci50ZXh0Q29udGVudC5sZW5ndGgpLCBpLnJlbW92ZUFsbFJhbmdlcygpLCBpLmFkZFJhbmdlKGEpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIGZpcnN0LWxldmVsIChmaXJzdCBjaGlsZCBvZiBbY29udGVudGVkaXRhYmxlXSkgc2libGluZ3MgZnJvbSBwYXNzZWQgbm9kZVxuICAgKiBUaGVuIHlvdSBjYW4gY2hlY2sgaXQgZm9yIGVtcHRpbmVzc1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZGl2IGNvbnRlbnRlZGl0YWJsZT5cbiAgICogPHA+PC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIDxwPjwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBsZWZ0IGZpcnN0LWxldmVsIHNpYmxpbmdzXG4gICAqIDxwPjwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiA8YmxvY2txdW90ZT48YT48Yj5hZGFkZGFkPC9iPjxhPjxibG9ja3F1b3RlPiAgICAgICA8LS0gcGFzc2VkIG5vZGUgZm9yIGV4YW1wbGUgPGI+XG4gICAqIDxwPjwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiA8cD48L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcmlnaHQgZmlyc3QtbGV2ZWwgc2libGluZ3NcbiAgICogPHA+PC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIDwvZGl2PlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBmcm9tIC0gZWxlbWVudCBmcm9tIHdoaWNoIHNpYmxpbmdzIHNob3VsZCBiZSBzZWFyY2hlZFxuICAgKiBAcGFyYW0geydsZWZ0JyB8ICdyaWdodCd9IGRpcmVjdGlvbiAtIGRpcmVjdGlvbiBvZiBzZWFyY2hcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50W119XG4gICAqL1xuICBnZXRIaWdoZXJMZXZlbFNpYmxpbmdzKGUsIHQpIHtcbiAgICBsZXQgbyA9IGU7XG4gICAgY29uc3QgaSA9IFtdO1xuICAgIGZvciAoOyBvLnBhcmVudE5vZGUgJiYgby5wYXJlbnROb2RlLmNvbnRlbnRFZGl0YWJsZSAhPT0gXCJ0cnVlXCI7IClcbiAgICAgIG8gPSBvLnBhcmVudE5vZGU7XG4gICAgY29uc3QgbiA9IHQgPT09IFwibGVmdFwiID8gXCJwcmV2aW91c1NpYmxpbmdcIiA6IFwibmV4dFNpYmxpbmdcIjtcbiAgICBmb3IgKDsgb1tuXTsgKVxuICAgICAgbyA9IG9bbl0sIGkucHVzaChvKTtcbiAgICByZXR1cm4gaTtcbiAgfVxufVxuY2xhc3MgVm8gZXh0ZW5kcyBTIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5vbk1vdXNlVXAgPSAoKSA9PiB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5vZmYoZG9jdW1lbnQsIFwibW91c2VvdmVyXCIsIHRoaXMub25Nb3VzZU92ZXIpLCB0aGlzLmxpc3RlbmVycy5vZmYoZG9jdW1lbnQsIFwibW91c2V1cFwiLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgfSwgdGhpcy5vbk1vdXNlT3ZlciA9IChlKSA9PiB7XG4gICAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgQmxvY2tTZWxlY3Rpb246IG8gfSA9IHRoaXMuRWRpdG9yLCBpID0gdC5nZXRCbG9ja0J5Q2hpbGROb2RlKGUucmVsYXRlZFRhcmdldCkgfHwgdGhpcy5sYXN0U2VsZWN0ZWRCbG9jaywgbiA9IHQuZ2V0QmxvY2tCeUNoaWxkTm9kZShlLnRhcmdldCk7XG4gICAgICBpZiAoISghaSB8fCAhbikgJiYgbiAhPT0gaSkge1xuICAgICAgICBpZiAoaSA9PT0gdGhpcy5maXJzdFNlbGVjdGVkQmxvY2spIHtcbiAgICAgICAgICBtLmdldCgpLnJlbW92ZUFsbFJhbmdlcygpLCBpLnNlbGVjdGVkID0gITAsIG4uc2VsZWN0ZWQgPSAhMCwgby5jbGVhckNhY2hlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuID09PSB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jaykge1xuICAgICAgICAgIGkuc2VsZWN0ZWQgPSAhMSwgbi5zZWxlY3RlZCA9ICExLCBvLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpLCB0aGlzLnRvZ2dsZUJsb2Nrc1NlbGVjdGVkU3RhdGUoaSwgbiksIHRoaXMubGFzdFNlbGVjdGVkQmxvY2sgPSBuO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE1vZHVsZSBwcmVwYXJhdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGFzeW5jIHByZXBhcmUoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMub24oZG9jdW1lbnQsIFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLmVuYWJsZUNyb3NzQmxvY2tTZWxlY3Rpb24oZSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdXAgbGlzdGVuZXJzXG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBtb3VzZSBkb3duIGV2ZW50XG4gICAqL1xuICB3YXRjaFNlbGVjdGlvbihlKSB7XG4gICAgaWYgKGUuYnV0dG9uICE9PSBfdC5MRUZUKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0IH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayA9IHQuZ2V0QmxvY2soZS50YXJnZXQpLCB0aGlzLmxhc3RTZWxlY3RlZEJsb2NrID0gdGhpcy5maXJzdFNlbGVjdGVkQmxvY2ssIHRoaXMubGlzdGVuZXJzLm9uKGRvY3VtZW50LCBcIm1vdXNlb3ZlclwiLCB0aGlzLm9uTW91c2VPdmVyKSwgdGhpcy5saXN0ZW5lcnMub24oZG9jdW1lbnQsIFwibW91c2V1cFwiLCB0aGlzLm9uTW91c2VVcCk7XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybiBib29sZWFuIGlzIGNyb3NzIGJsb2NrIHNlbGVjdGlvbiBzdGFydGVkXG4gICAqL1xuICBnZXQgaXNDcm9zc0Jsb2NrU2VsZWN0aW9uU3RhcnRlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayAmJiAhIXRoaXMubGFzdFNlbGVjdGVkQmxvY2s7XG4gIH1cbiAgLyoqXG4gICAqIENoYW5nZSBzZWxlY3Rpb24gc3RhdGUgb2YgdGhlIG5leHQgQmxvY2tcbiAgICogVXNlZCBmb3IgQ0JTIHZpYSBTaGlmdCArIGFycm93IGtleXNcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBuZXh0IC0gaWYgdHJ1ZSwgdG9nZ2xlIG5leHQgYmxvY2suIFByZXZpb3VzIG90aGVyd2lzZVxuICAgKi9cbiAgdG9nZ2xlQmxvY2tTZWxlY3RlZFN0YXRlKGUgPSAhMCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBCbG9ja1NlbGVjdGlvbjogbyB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdGhpcy5sYXN0U2VsZWN0ZWRCbG9jayB8fCAodGhpcy5sYXN0U2VsZWN0ZWRCbG9jayA9IHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrID0gdC5jdXJyZW50QmxvY2spLCB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayA9PT0gdGhpcy5sYXN0U2VsZWN0ZWRCbG9jayAmJiAodGhpcy5maXJzdFNlbGVjdGVkQmxvY2suc2VsZWN0ZWQgPSAhMCwgby5jbGVhckNhY2hlKCksIG0uZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCkpO1xuICAgIGNvbnN0IGkgPSB0LmJsb2Nrcy5pbmRleE9mKHRoaXMubGFzdFNlbGVjdGVkQmxvY2spICsgKGUgPyAxIDogLTEpLCBuID0gdC5ibG9ja3NbaV07XG4gICAgbiAmJiAodGhpcy5sYXN0U2VsZWN0ZWRCbG9jay5zZWxlY3RlZCAhPT0gbi5zZWxlY3RlZCA/IChuLnNlbGVjdGVkID0gITAsIG8uY2xlYXJDYWNoZSgpKSA6ICh0aGlzLmxhc3RTZWxlY3RlZEJsb2NrLnNlbGVjdGVkID0gITEsIG8uY2xlYXJDYWNoZSgpKSwgdGhpcy5sYXN0U2VsZWN0ZWRCbG9jayA9IG4sIHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKSwgbi5ob2xkZXIuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgYmxvY2s6IFwibmVhcmVzdFwiXG4gICAgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhciBzYXZlZCBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSByZWFzb24gLSBldmVudCBjYXVzZWQgY2xlYXIgb2Ygc2VsZWN0aW9uXG4gICAqL1xuICBjbGVhcihlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIEJsb2NrU2VsZWN0aW9uOiBvLCBDYXJldDogaSB9ID0gdGhpcy5FZGl0b3IsIG4gPSB0LmJsb2Nrcy5pbmRleE9mKHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrKSwgciA9IHQuYmxvY2tzLmluZGV4T2YodGhpcy5sYXN0U2VsZWN0ZWRCbG9jayk7XG4gICAgaWYgKG8uYW55QmxvY2tTZWxlY3RlZCAmJiBuID4gLTEgJiYgciA+IC0xKVxuICAgICAgaWYgKGUgJiYgZSBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQpXG4gICAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgICAgY2FzZSBCLkRPV046XG4gICAgICAgICAgY2FzZSBCLlJJR0hUOlxuICAgICAgICAgICAgaS5zZXRUb0Jsb2NrKHQuYmxvY2tzW01hdGgubWF4KG4sIHIpXSwgaS5wb3NpdGlvbnMuRU5EKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQi5VUDpcbiAgICAgICAgICBjYXNlIEIuTEVGVDpcbiAgICAgICAgICAgIGkuc2V0VG9CbG9jayh0LmJsb2Nrc1tNYXRoLm1pbihuLCByKV0sIGkucG9zaXRpb25zLlNUQVJUKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpLnNldFRvQmxvY2sodC5ibG9ja3NbTWF0aC5tYXgobiwgcildLCBpLnBvc2l0aW9ucy5FTkQpO1xuICAgICAgICB9XG4gICAgICBlbHNlXG4gICAgICAgIGkuc2V0VG9CbG9jayh0LmJsb2Nrc1tNYXRoLm1heChuLCByKV0sIGkucG9zaXRpb25zLkVORCk7XG4gICAgdGhpcy5maXJzdFNlbGVjdGVkQmxvY2sgPSB0aGlzLmxhc3RTZWxlY3RlZEJsb2NrID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlcyBDcm9zcyBCbG9jayBTZWxlY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAtIG1vdXNlIGRvd24gZXZlbnRcbiAgICovXG4gIGVuYWJsZUNyb3NzQmxvY2tTZWxlY3Rpb24oZSkge1xuICAgIGNvbnN0IHsgVUk6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIG0uaXNDb2xsYXBzZWQgfHwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSksIHQubm9kZXMucmVkYWN0b3IuY29udGFpbnMoZS50YXJnZXQpID8gdGhpcy53YXRjaFNlbGVjdGlvbihlKSA6IHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKGUpO1xuICB9XG4gIC8qKlxuICAgKiBDaGFuZ2UgYmxvY2tzIHNlbGVjdGlvbiBzdGF0ZSBiZXR3ZWVuIHBhc3NlZCB0d28gYmxvY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2NrfSBmaXJzdEJsb2NrIC0gZmlyc3QgYmxvY2sgaW4gcmFuZ2VcbiAgICogQHBhcmFtIHtCbG9ja30gbGFzdEJsb2NrIC0gbGFzdCBibG9jayBpbiByYW5nZVxuICAgKi9cbiAgdG9nZ2xlQmxvY2tzU2VsZWN0ZWRTdGF0ZShlLCB0KSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IG8sIEJsb2NrU2VsZWN0aW9uOiBpIH0gPSB0aGlzLkVkaXRvciwgbiA9IG8uYmxvY2tzLmluZGV4T2YoZSksIHIgPSBvLmJsb2Nrcy5pbmRleE9mKHQpLCBhID0gZS5zZWxlY3RlZCAhPT0gdC5zZWxlY3RlZDtcbiAgICBmb3IgKGxldCBsID0gTWF0aC5taW4obiwgcik7IGwgPD0gTWF0aC5tYXgobiwgcik7IGwrKykge1xuICAgICAgY29uc3QgYyA9IG8uYmxvY2tzW2xdO1xuICAgICAgYyAhPT0gdGhpcy5maXJzdFNlbGVjdGVkQmxvY2sgJiYgYyAhPT0gKGEgPyBlIDogdCkgJiYgKG8uYmxvY2tzW2xdLnNlbGVjdGVkID0gIW8uYmxvY2tzW2xdLnNlbGVjdGVkLCBpLmNsZWFyQ2FjaGUoKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBabyBleHRlbmRzIFMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLmlzU3RhcnRlZEF0RWRpdG9yID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSByZWFkLW9ubHkgc3RhdGVcbiAgICpcbiAgICogaWYgc3RhdGUgaXMgdHJ1ZTpcbiAgICogIC0gZGlzYWJsZSBhbGwgZHJhZy1uLWRyb3AgZXZlbnQgaGFuZGxlcnNcbiAgICpcbiAgICogaWYgc3RhdGUgaXMgZmFsc2U6XG4gICAqICAtIHJlc3RvcmUgZHJhZy1uLWRyb3AgZXZlbnQgaGFuZGxlcnNcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSByZWFkT25seUVuYWJsZWQgLSBcInJlYWQgb25seVwiIHN0YXRlXG4gICAqL1xuICB0b2dnbGVSZWFkT25seShlKSB7XG4gICAgZSA/IHRoaXMuZGlzYWJsZU1vZHVsZUJpbmRpbmdzKCkgOiB0aGlzLmVuYWJsZU1vZHVsZUJpbmRpbmdzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBkcmFnIGV2ZW50cyBsaXN0ZW5lcnMgdG8gZWRpdG9yIHpvbmVcbiAgICovXG4gIGVuYWJsZU1vZHVsZUJpbmRpbmdzKCkge1xuICAgIGNvbnN0IHsgVUk6IGUgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUubm9kZXMuaG9sZGVyLCBcImRyb3BcIiwgYXN5bmMgKHQpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc0Ryb3AodCk7XG4gICAgfSwgITApLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihlLm5vZGVzLmhvbGRlciwgXCJkcmFnc3RhcnRcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzRHJhZ1N0YXJ0KCk7XG4gICAgfSksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUubm9kZXMuaG9sZGVyLCBcImRyYWdvdmVyXCIsICh0KSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NEcmFnT3Zlcih0KTtcbiAgICB9LCAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIFVuYmluZCBkcmFnLW4tZHJvcCBldmVudCBoYW5kbGVyc1xuICAgKi9cbiAgZGlzYWJsZU1vZHVsZUJpbmRpbmdzKCkge1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLmNsZWFyQWxsKCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBkcm9wIGV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBkcm9wRXZlbnQgLSBkcm9wIGV2ZW50XG4gICAqL1xuICBhc3luYyBwcm9jZXNzRHJvcChlKSB7XG4gICAgY29uc3Qge1xuICAgICAgQmxvY2tNYW5hZ2VyOiB0LFxuICAgICAgQ2FyZXQ6IG8sXG4gICAgICBQYXN0ZTogaVxuICAgIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBlLnByZXZlbnREZWZhdWx0KCksIHQuYmxvY2tzLmZvckVhY2goKHIpID0+IHtcbiAgICAgIHIuZHJvcFRhcmdldCA9ICExO1xuICAgIH0pLCBtLmlzQXRFZGl0b3IgJiYgIW0uaXNDb2xsYXBzZWQgJiYgdGhpcy5pc1N0YXJ0ZWRBdEVkaXRvciAmJiBkb2N1bWVudC5leGVjQ29tbWFuZChcImRlbGV0ZVwiKSwgdGhpcy5pc1N0YXJ0ZWRBdEVkaXRvciA9ICExO1xuICAgIGNvbnN0IG4gPSB0LnNldEN1cnJlbnRCbG9ja0J5Q2hpbGROb2RlKGUudGFyZ2V0KTtcbiAgICBpZiAobilcbiAgICAgIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sobiwgby5wb3NpdGlvbnMuRU5EKTtcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IHIgPSB0LnNldEN1cnJlbnRCbG9ja0J5Q2hpbGROb2RlKHQubGFzdEJsb2NrLmhvbGRlcik7XG4gICAgICB0aGlzLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHIsIG8ucG9zaXRpb25zLkVORCk7XG4gICAgfVxuICAgIGF3YWl0IGkucHJvY2Vzc0RhdGFUcmFuc2ZlcihlLmRhdGFUcmFuc2ZlciwgITApO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgZHJhZyBzdGFydCBldmVudFxuICAgKi9cbiAgcHJvY2Vzc0RyYWdTdGFydCgpIHtcbiAgICBtLmlzQXRFZGl0b3IgJiYgIW0uaXNDb2xsYXBzZWQgJiYgKHRoaXMuaXNTdGFydGVkQXRFZGl0b3IgPSAhMCksIHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtEcmFnRXZlbnR9IGRyYWdFdmVudCAtIGRyYWcgZXZlbnRcbiAgICovXG4gIHByb2Nlc3NEcmFnT3ZlcihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59XG5jbGFzcyBHbyBleHRlbmRzIFMge1xuICAvKipcbiAgICogUHJlcGFyZSB0aGUgbW9kdWxlXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gb3B0aW9ucyB1c2VkIGJ5IHRoZSBtb2RpZmljYXRpb24gb2JzZXJ2ZXIgbW9kdWxlXG4gICAqIEBwYXJhbSBvcHRpb25zLmNvbmZpZyAtIEVkaXRvciBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgKiBAcGFyYW0gb3B0aW9ucy5ldmVudHNEaXNwYXRjaGVyIC0gY29tbW9uIEVkaXRvciBldmVudCBidXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBjb25maWc6IGUsXG4gICAgICBldmVudHNEaXNwYXRjaGVyOiB0XG4gICAgfSksIHRoaXMuZGlzYWJsZWQgPSAhMSwgdGhpcy5iYXRjaGluZ1RpbWVvdXQgPSBudWxsLCB0aGlzLmJhdGNoaW5nT25DaGFuZ2VRdWV1ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIHRoaXMuYmF0Y2hUaW1lID0gNDAwLCB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobykgPT4ge1xuICAgICAgdGhpcy5yZWRhY3RvckNoYW5nZWQobyk7XG4gICAgfSksIHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5vbihsdCwgKG8pID0+IHtcbiAgICAgIHRoaXMucGFydGljdWxhckJsb2NrQ2hhbmdlZChvLmV2ZW50KTtcbiAgICB9KSwgdGhpcy5ldmVudHNEaXNwYXRjaGVyLm9uKGN0LCAoKSA9PiB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9KSwgdGhpcy5ldmVudHNEaXNwYXRjaGVyLm9uKGR0LCAoKSA9PiB7XG4gICAgICB0aGlzLmVuYWJsZSgpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGVzIG9uQ2hhbmdlIGV2ZW50XG4gICAqL1xuICBlbmFibGUoKSB7XG4gICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUoXG4gICAgICB0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3RvcixcbiAgICAgIHtcbiAgICAgICAgY2hpbGRMaXN0OiAhMCxcbiAgICAgICAgc3VidHJlZTogITAsXG4gICAgICAgIGNoYXJhY3RlckRhdGE6ICEwLFxuICAgICAgICBhdHRyaWJ1dGVzOiAhMFxuICAgICAgfVxuICAgICksIHRoaXMuZGlzYWJsZWQgPSAhMTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgb25DaGFuZ2UgZXZlbnRcbiAgICovXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKSwgdGhpcy5kaXNhYmxlZCA9ICEwO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIG9uQ2hhbmdlIGV2ZW50IHBhc3NlZCB0byBFZGl0b3IuanMgY29uZmlndXJhdGlvblxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgLSBzb21lIG9mIG91ciBjdXN0b20gY2hhbmdlIGV2ZW50c1xuICAgKi9cbiAgcGFydGljdWxhckJsb2NrQ2hhbmdlZChlKSB7XG4gICAgdGhpcy5kaXNhYmxlZCB8fCAhRCh0aGlzLmNvbmZpZy5vbkNoYW5nZSkgfHwgKHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlLnNldChgYmxvY2s6JHtlLmRldGFpbC50YXJnZXQuaWR9OmV2ZW50OiR7ZS50eXBlfWAsIGUpLCB0aGlzLmJhdGNoaW5nVGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy5iYXRjaGluZ1RpbWVvdXQpLCB0aGlzLmJhdGNoaW5nVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbGV0IHQ7XG4gICAgICB0aGlzLmJhdGNoaW5nT25DaGFuZ2VRdWV1ZS5zaXplID09PSAxID8gdCA9IHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlLnZhbHVlcygpLm5leHQoKS52YWx1ZSA6IHQgPSBBcnJheS5mcm9tKHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlLnZhbHVlcygpKSwgdGhpcy5jb25maWcub25DaGFuZ2UgJiYgdGhpcy5jb25maWcub25DaGFuZ2UodGhpcy5FZGl0b3IuQVBJLm1ldGhvZHMsIHQpLCB0aGlzLmJhdGNoaW5nT25DaGFuZ2VRdWV1ZS5jbGVhcigpO1xuICAgIH0sIHRoaXMuYmF0Y2hUaW1lKSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpcmVkIG9uIGV2ZXJ5IGJsb2NrcyB3cmFwcGVyIGRvbSBjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIG11dGF0aW9ucyAtIG11dGF0aW9ucyBoYXBwZW5lZFxuICAgKi9cbiAgcmVkYWN0b3JDaGFuZ2VkKGUpIHtcbiAgICB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdChNZSwge1xuICAgICAgbXV0YXRpb25zOiBlXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IHh0ID0gY2xhc3MgZXh0ZW5kcyBTIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5NSU1FX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtZWRpdG9yLWpzXCIsIHRoaXMudG9vbHNUYWdzID0ge30sIHRoaXMudGFnc0J5VG9vbCA9IHt9LCB0aGlzLnRvb2xzUGF0dGVybnMgPSBbXSwgdGhpcy50b29sc0ZpbGVzID0ge30sIHRoaXMuZXhjZXB0aW9uTGlzdCA9IFtdLCB0aGlzLnByb2Nlc3NUb29sID0gKHMpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGUgPSBzLmNyZWF0ZSh7fSwge30sICExKTtcbiAgICAgICAgaWYgKHMucGFzdGVDb25maWcgPT09ICExKSB7XG4gICAgICAgICAgdGhpcy5leGNlcHRpb25MaXN0LnB1c2gocy5uYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFEKGUub25QYXN0ZSkpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmdldFRhZ3NDb25maWcocyksIHRoaXMuZ2V0RmlsZXNDb25maWcocyksIHRoaXMuZ2V0UGF0dGVybnNDb25maWcocyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIFQoXG4gICAgICAgICAgYFBhc3RlIGhhbmRsaW5nIGZvciBcdTAwQUIke3MubmFtZX1cdTAwQkIgVG9vbCBoYXNuJ3QgYmVlbiBzZXQgdXAgYmVjYXVzZSBvZiB0aGUgZXJyb3JgLFxuICAgICAgICAgIFwid2FyblwiLFxuICAgICAgICAgIGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmhhbmRsZVBhc3RlRXZlbnQgPSBhc3luYyAocykgPT4ge1xuICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGUsIFRvb2xiYXI6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgICAgIWUuY3VycmVudEJsb2NrIHx8IHRoaXMuaXNOYXRpdmVCZWhhdmlvdXIocy50YXJnZXQpICYmICFzLmNsaXBib2FyZERhdGEudHlwZXMuaW5jbHVkZXMoXCJGaWxlc1wiKSB8fCBlLmN1cnJlbnRCbG9jayAmJiB0aGlzLmV4Y2VwdGlvbkxpc3QuaW5jbHVkZXMoZS5jdXJyZW50QmxvY2submFtZSkgfHwgKHMucHJldmVudERlZmF1bHQoKSwgdGhpcy5wcm9jZXNzRGF0YVRyYW5zZmVyKHMuY2xpcGJvYXJkRGF0YSksIGUuY2xlYXJGb2N1c2VkKCksIHQuY2xvc2UoKSk7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2V0IG9uUGFzdGUgY2FsbGJhY2sgYW5kIGNvbGxlY3QgdG9vbHNgIHBhc3RlIGNvbmZpZ3VyYXRpb25zXG4gICAqL1xuICBhc3luYyBwcmVwYXJlKCkge1xuICAgIHRoaXMucHJvY2Vzc1Rvb2xzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCByZWFkLW9ubHkgc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSByZWFkT25seUVuYWJsZWQgLSByZWFkIG9ubHkgZmxhZyB2YWx1ZVxuICAgKi9cbiAgdG9nZ2xlUmVhZE9ubHkocykge1xuICAgIHMgPyB0aGlzLnVuc2V0Q2FsbGJhY2soKSA6IHRoaXMuc2V0Q2FsbGJhY2soKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHBhc3RlZCBvciBkcm9wcGVkIGRhdGEgdHJhbnNmZXIgb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7RGF0YVRyYW5zZmVyfSBkYXRhVHJhbnNmZXIgLSBwYXN0ZWQgb3IgZHJvcHBlZCBkYXRhIHRyYW5zZmVyIG9iamVjdFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRHJhZ05Ecm9wIC0gdHJ1ZSBpZiBkYXRhIHRyYW5zZmVyIGNvbWVzIGZyb20gZHJhZyduJ2Ryb3AgZXZlbnRzXG4gICAqL1xuICBhc3luYyBwcm9jZXNzRGF0YVRyYW5zZmVyKHMsIGUgPSAhMSkge1xuICAgIGNvbnN0IHsgVG9vbHM6IHQgfSA9IHRoaXMuRWRpdG9yLCBvID0gcy50eXBlcztcbiAgICBpZiAoKG8uaW5jbHVkZXMgPyBvLmluY2x1ZGVzKFwiRmlsZXNcIikgOiBvLmNvbnRhaW5zKFwiRmlsZXNcIikpICYmICFWKHRoaXMudG9vbHNGaWxlcykpIHtcbiAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc0ZpbGVzKHMuZmlsZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuID0gcy5nZXREYXRhKHRoaXMuTUlNRV9UWVBFKSwgciA9IHMuZ2V0RGF0YShcInRleHQvcGxhaW5cIik7XG4gICAgbGV0IGEgPSBzLmdldERhdGEoXCJ0ZXh0L2h0bWxcIik7XG4gICAgaWYgKG4pXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmluc2VydEVkaXRvckpTRGF0YShKU09OLnBhcnNlKG4pKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICB9XG4gICAgZSAmJiByLnRyaW0oKSAmJiBhLnRyaW0oKSAmJiAoYSA9IFwiPHA+XCIgKyAoYS50cmltKCkgPyBhIDogcikgKyBcIjwvcD5cIik7XG4gICAgY29uc3QgbCA9IE9iamVjdC5rZXlzKHRoaXMudG9vbHNUYWdzKS5yZWR1Y2UoKGgsIGYpID0+IChoW2YudG9Mb3dlckNhc2UoKV0gPSB0aGlzLnRvb2xzVGFnc1tmXS5zYW5pdGl6YXRpb25Db25maWcgPz8ge30sIGgpLCB7fSksIGMgPSBPYmplY3QuYXNzaWduKHt9LCBsLCB0LmdldEFsbElubGluZVRvb2xzU2FuaXRpemVDb25maWcoKSwgeyBicjoge30gfSksIHUgPSBaKGEsIGMpO1xuICAgICF1LnRyaW0oKSB8fCB1LnRyaW0oKSA9PT0gciB8fCAhZC5pc0hUTUxTdHJpbmcodSkgPyBhd2FpdCB0aGlzLnByb2Nlc3NUZXh0KHIpIDogYXdhaXQgdGhpcy5wcm9jZXNzVGV4dCh1LCAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3MgcGFzdGVkIHRleHQgYW5kIGRpdmlkZSB0aGVtIGludG8gQmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIC0gdGV4dCB0byBwcm9jZXNzLiBDYW4gYmUgSFRNTCBvciBwbGFpbi5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc0hUTUwgLSBpZiBwYXNzZWQgc3RyaW5nIGlzIEhUTUwsIHRoaXMgcGFyYW1ldGVyIHNob3VsZCBiZSB0cnVlXG4gICAqL1xuICBhc3luYyBwcm9jZXNzVGV4dChzLCBlID0gITEpIHtcbiAgICBjb25zdCB7IENhcmV0OiB0LCBCbG9ja01hbmFnZXI6IG8gfSA9IHRoaXMuRWRpdG9yLCBpID0gZSA/IHRoaXMucHJvY2Vzc0hUTUwocykgOiB0aGlzLnByb2Nlc3NQbGFpbihzKTtcbiAgICBpZiAoIWkubGVuZ3RoKVxuICAgICAgcmV0dXJuO1xuICAgIGlmIChpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaVswXS5pc0Jsb2NrID8gdGhpcy5wcm9jZXNzU2luZ2xlQmxvY2soaS5wb3AoKSkgOiB0aGlzLnByb2Nlc3NJbmxpbmVQYXN0ZShpLnBvcCgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgciA9IG8uY3VycmVudEJsb2NrICYmIG8uY3VycmVudEJsb2NrLnRvb2wuaXNEZWZhdWx0ICYmIG8uY3VycmVudEJsb2NrLmlzRW1wdHk7XG4gICAgaS5tYXAoXG4gICAgICBhc3luYyAoYSwgbCkgPT4gdGhpcy5pbnNlcnRCbG9jayhhLCBsID09PSAwICYmIHIpXG4gICAgKSwgby5jdXJyZW50QmxvY2sgJiYgdC5zZXRUb0Jsb2NrKG8uY3VycmVudEJsb2NrLCB0LnBvc2l0aW9ucy5FTkQpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgb25QYXN0ZSBjYWxsYmFjayBoYW5kbGVyXG4gICAqL1xuICBzZXRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5vbih0aGlzLkVkaXRvci5VSS5ub2Rlcy5ob2xkZXIsIFwicGFzdGVcIiwgdGhpcy5oYW5kbGVQYXN0ZUV2ZW50KTtcbiAgfVxuICAvKipcbiAgICogVW5zZXQgb25QYXN0ZSBjYWxsYmFjayBoYW5kbGVyXG4gICAqL1xuICB1bnNldENhbGxiYWNrKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm9mZih0aGlzLkVkaXRvci5VSS5ub2Rlcy5ob2xkZXIsIFwicGFzdGVcIiwgdGhpcy5oYW5kbGVQYXN0ZUV2ZW50KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFuZCBwcm9jZXNzIHRvb2xgcyBwYXN0ZSBjb25maWdzXG4gICAqL1xuICBwcm9jZXNzVG9vbHMoKSB7XG4gICAgY29uc3QgcyA9IHRoaXMuRWRpdG9yLlRvb2xzLmJsb2NrVG9vbHM7XG4gICAgQXJyYXkuZnJvbShzLnZhbHVlcygpKS5mb3JFYWNoKHRoaXMucHJvY2Vzc1Rvb2wpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGFncyBuYW1lIGxpc3QgZnJvbSBlaXRoZXIgdGFnIG5hbWUgb3Igc2FuaXRpemF0aW9uIGNvbmZpZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBvYmplY3R9IHRhZ09yU2FuaXRpemVDb25maWcgLSB0YWcgbmFtZSBvciBzYW5pdGl6ZSBjb25maWcgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119IGFycmF5IG9mIHRhZ3MuXG4gICAqL1xuICBjb2xsZWN0VGFnTmFtZXMocykge1xuICAgIHJldHVybiBKKHMpID8gW3NdIDogaihzKSA/IE9iamVjdC5rZXlzKHMpIDogW107XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0YWdzIHRvIHN1YnN0aXR1dGUgYnkgVG9vbFxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCAtIEJsb2NrVG9vbCBvYmplY3RcbiAgICovXG4gIGdldFRhZ3NDb25maWcocykge1xuICAgIGlmIChzLnBhc3RlQ29uZmlnID09PSAhMSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBlID0gcy5wYXN0ZUNvbmZpZy50YWdzIHx8IFtdLCB0ID0gW107XG4gICAgZS5mb3JFYWNoKChvKSA9PiB7XG4gICAgICBjb25zdCBpID0gdGhpcy5jb2xsZWN0VGFnTmFtZXMobyk7XG4gICAgICB0LnB1c2goLi4uaSksIGkuZm9yRWFjaCgobikgPT4ge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMudG9vbHNUYWdzLCBuKSkge1xuICAgICAgICAgIFQoXG4gICAgICAgICAgICBgUGFzdGUgaGFuZGxlciBmb3IgXHUwMEFCJHtzLm5hbWV9XHUwMEJCIFRvb2wgb24gXHUwMEFCJHtufVx1MDBCQiB0YWcgaXMgc2tpcHBlZCBiZWNhdXNlIGl0IGlzIGFscmVhZHkgdXNlZCBieSBcdTAwQUIke3RoaXMudG9vbHNUYWdzW25dLnRvb2wubmFtZX1cdTAwQkIgVG9vbC5gLFxuICAgICAgICAgICAgXCJ3YXJuXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByID0gaihvKSA/IG9bbl0gOiBudWxsO1xuICAgICAgICB0aGlzLnRvb2xzVGFnc1tuLnRvVXBwZXJDYXNlKCldID0ge1xuICAgICAgICAgIHRvb2w6IHMsXG4gICAgICAgICAgc2FuaXRpemF0aW9uQ29uZmlnOiByXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KSwgdGhpcy50YWdzQnlUb29sW3MubmFtZV0gPSB0Lm1hcCgobykgPT4gby50b1VwcGVyQ2FzZSgpKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGZpbGVzYCB0eXBlcyBhbmQgZXh0ZW5zaW9ucyB0byBzdWJzdGl0dXRlIGJ5IFRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSBCbG9ja1Rvb2wgb2JqZWN0XG4gICAqL1xuICBnZXRGaWxlc0NvbmZpZyhzKSB7XG4gICAgaWYgKHMucGFzdGVDb25maWcgPT09ICExKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHsgZmlsZXM6IGUgPSB7fSB9ID0gcy5wYXN0ZUNvbmZpZztcbiAgICBsZXQgeyBleHRlbnNpb25zOiB0LCBtaW1lVHlwZXM6IG8gfSA9IGU7XG4gICAgIXQgJiYgIW8gfHwgKHQgJiYgIUFycmF5LmlzQXJyYXkodCkgJiYgKFQoYFx1MDBBQmV4dGVuc2lvbnNcdTAwQkIgcHJvcGVydHkgb2YgdGhlIG9uRHJvcCBjb25maWcgZm9yIFx1MDBBQiR7cy5uYW1lfVx1MDBCQiBUb29sIHNob3VsZCBiZSBhbiBhcnJheWApLCB0ID0gW10pLCBvICYmICFBcnJheS5pc0FycmF5KG8pICYmIChUKGBcdTAwQUJtaW1lVHlwZXNcdTAwQkIgcHJvcGVydHkgb2YgdGhlIG9uRHJvcCBjb25maWcgZm9yIFx1MDBBQiR7cy5uYW1lfVx1MDBCQiBUb29sIHNob3VsZCBiZSBhbiBhcnJheWApLCBvID0gW10pLCBvICYmIChvID0gby5maWx0ZXIoKGkpID0+IER0KGkpID8gITAgOiAoVChgTUlNRSB0eXBlIHZhbHVlIFx1MDBBQiR7aX1cdTAwQkIgZm9yIHRoZSBcdTAwQUIke3MubmFtZX1cdTAwQkIgVG9vbCBpcyBub3QgYSB2YWxpZCBNSU1FIHR5cGVgLCBcIndhcm5cIiksICExKSkpLCB0aGlzLnRvb2xzRmlsZXNbcy5uYW1lXSA9IHtcbiAgICAgIGV4dGVuc2lvbnM6IHQgfHwgW10sXG4gICAgICBtaW1lVHlwZXM6IG8gfHwgW11cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0IFJlZ0V4cCBwYXR0ZXJucyB0byBzdWJzdGl0dXRlIGJ5IFRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSBCbG9ja1Rvb2wgb2JqZWN0XG4gICAqL1xuICBnZXRQYXR0ZXJuc0NvbmZpZyhzKSB7XG4gICAgcy5wYXN0ZUNvbmZpZyA9PT0gITEgfHwgIXMucGFzdGVDb25maWcucGF0dGVybnMgfHwgVihzLnBhc3RlQ29uZmlnLnBhdHRlcm5zKSB8fCBPYmplY3QuZW50cmllcyhzLnBhc3RlQ29uZmlnLnBhdHRlcm5zKS5mb3JFYWNoKChbZSwgdF0pID0+IHtcbiAgICAgIHQgaW5zdGFuY2VvZiBSZWdFeHAgfHwgVChcbiAgICAgICAgYFBhdHRlcm4gJHt0fSBmb3IgXHUwMEFCJHtzLm5hbWV9XHUwMEJCIFRvb2wgaXMgc2tpcHBlZCBiZWNhdXNlIGl0IHNob3VsZCBiZSBhIFJlZ2V4cCBpbnN0YW5jZS5gLFxuICAgICAgICBcIndhcm5cIlxuICAgICAgKSwgdGhpcy50b29sc1BhdHRlcm5zLnB1c2goe1xuICAgICAgICBrZXk6IGUsXG4gICAgICAgIHBhdHRlcm46IHQsXG4gICAgICAgIHRvb2w6IHNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBicm93c2VyIGJlaGF2aW9yIHN1aXRzIGJldHRlclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gZWxlbWVudCB3aGVyZSBjb250ZW50IGhhcyBiZWVuIHBhc3RlZFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzTmF0aXZlQmVoYXZpb3VyKHMpIHtcbiAgICByZXR1cm4gZC5pc05hdGl2ZUlucHV0KHMpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZmlsZXMgZnJvbSBkYXRhIHRyYW5zZmVyIG9iamVjdCBhbmQgaW5zZXJ0IHJlbGF0ZWQgVG9vbHNcbiAgICpcbiAgICogQHBhcmFtIHtGaWxlTGlzdH0gaXRlbXMgLSBwYXN0ZWQgb3IgZHJvcHBlZCBpdGVtc1xuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc0ZpbGVzKHMpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgbGV0IHQ7XG4gICAgdCA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgQXJyYXkuZnJvbShzKS5tYXAoKG4pID0+IHRoaXMucHJvY2Vzc0ZpbGUobikpXG4gICAgKSwgdCA9IHQuZmlsdGVyKChuKSA9PiAhIW4pO1xuICAgIGNvbnN0IGkgPSBlLmN1cnJlbnRCbG9jay50b29sLmlzRGVmYXVsdCAmJiBlLmN1cnJlbnRCbG9jay5pc0VtcHR5O1xuICAgIHQuZm9yRWFjaChcbiAgICAgIChuLCByKSA9PiB7XG4gICAgICAgIGUucGFzdGUobi50eXBlLCBuLmV2ZW50LCByID09PSAwICYmIGkpO1xuICAgICAgfVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBmaWxlIGFuZCBmaW5kIFRvb2wgdG8gaGFuZGxlIGl0XG4gICAqXG4gICAqIEBwYXJhbSB7RmlsZX0gZmlsZSAtIGZpbGUgdG8gcHJvY2Vzc1xuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc0ZpbGUocykge1xuICAgIGNvbnN0IGUgPSBSdChzKSwgdCA9IE9iamVjdC5lbnRyaWVzKHRoaXMudG9vbHNGaWxlcykuZmluZCgoW24sIHsgbWltZVR5cGVzOiByLCBleHRlbnNpb25zOiBhIH1dKSA9PiB7XG4gICAgICBjb25zdCBbbCwgY10gPSBzLnR5cGUuc3BsaXQoXCIvXCIpLCB1ID0gYS5maW5kKChmKSA9PiBmLnRvTG93ZXJDYXNlKCkgPT09IGUudG9Mb3dlckNhc2UoKSksIGggPSByLmZpbmQoKGYpID0+IHtcbiAgICAgICAgY29uc3QgW3YsIHBdID0gZi5zcGxpdChcIi9cIik7XG4gICAgICAgIHJldHVybiB2ID09PSBsICYmIChwID09PSBjIHx8IHAgPT09IFwiKlwiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhdSB8fCAhIWg7XG4gICAgfSk7XG4gICAgaWYgKCF0KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IFtvXSA9IHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50OiB0aGlzLmNvbXBvc2VQYXN0ZUV2ZW50KFwiZmlsZVwiLCB7XG4gICAgICAgIGZpbGU6IHNcbiAgICAgIH0pLFxuICAgICAgdHlwZTogb1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNwbGl0IEhUTUwgc3RyaW5nIHRvIGJsb2NrcyBhbmQgcmV0dXJuIGl0IGFzIGFycmF5IG9mIEJsb2NrIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlubmVySFRNTCAtIGh0bWwgc3RyaW5nIHRvIHByb2Nlc3NcbiAgICogQHJldHVybnMge1Bhc3RlRGF0YVtdfVxuICAgKi9cbiAgcHJvY2Vzc0hUTUwocykge1xuICAgIGNvbnN0IHsgVG9vbHM6IGUgfSA9IHRoaXMuRWRpdG9yLCB0ID0gZC5tYWtlKFwiRElWXCIpO1xuICAgIHJldHVybiB0LmlubmVySFRNTCA9IHMsIHRoaXMuZ2V0Tm9kZXModCkubWFwKChpKSA9PiB7XG4gICAgICBsZXQgbiwgciA9IGUuZGVmYXVsdFRvb2wsIGEgPSAhMTtcbiAgICAgIHN3aXRjaCAoaS5ub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICAgICAgICBuID0gZC5tYWtlKFwiZGl2XCIpLCBuLmFwcGVuZENoaWxkKGkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICAgIG4gPSBpLCBhID0gITAsIHRoaXMudG9vbHNUYWdzW24udGFnTmFtZV0gJiYgKHIgPSB0aGlzLnRvb2xzVGFnc1tuLnRhZ05hbWVdLnRvb2wpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgeyB0YWdzOiBsIH0gPSByLnBhc3RlQ29uZmlnIHx8IHsgdGFnczogW10gfSwgYyA9IGwucmVkdWNlKChmLCB2KSA9PiAodGhpcy5jb2xsZWN0VGFnTmFtZXModikuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgICBjb25zdCBfID0gaih2KSA/IHZba10gOiBudWxsO1xuICAgICAgICBmW2sudG9Mb3dlckNhc2UoKV0gPSBfIHx8IHt9O1xuICAgICAgfSksIGYpLCB7fSksIHUgPSBPYmplY3QuYXNzaWduKHt9LCBjLCByLmJhc2VTYW5pdGl6ZUNvbmZpZyk7XG4gICAgICBpZiAobi50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidGFibGVcIikge1xuICAgICAgICBjb25zdCBmID0gWihuLm91dGVySFRNTCwgdSk7XG4gICAgICAgIG4gPSBkLm1ha2UoXCJkaXZcIiwgdm9pZCAwLCB7XG4gICAgICAgICAgaW5uZXJIVE1MOiBmXG4gICAgICAgIH0pLmZpcnN0Q2hpbGQ7XG4gICAgICB9IGVsc2VcbiAgICAgICAgbi5pbm5lckhUTUwgPSBaKG4uaW5uZXJIVE1MLCB1KTtcbiAgICAgIGNvbnN0IGggPSB0aGlzLmNvbXBvc2VQYXN0ZUV2ZW50KFwidGFnXCIsIHtcbiAgICAgICAgZGF0YTogblxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBuLFxuICAgICAgICBpc0Jsb2NrOiBhLFxuICAgICAgICB0b29sOiByLm5hbWUsXG4gICAgICAgIGV2ZW50OiBoXG4gICAgICB9O1xuICAgIH0pLmZpbHRlcigoaSkgPT4ge1xuICAgICAgY29uc3QgbiA9IGQuaXNFbXB0eShpLmNvbnRlbnQpLCByID0gZC5pc1NpbmdsZVRhZyhpLmNvbnRlbnQpO1xuICAgICAgcmV0dXJuICFuIHx8IHI7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNwbGl0IHBsYWluIHRleHQgYnkgbmV3IGxpbmUgc3ltYm9scyBhbmQgcmV0dXJuIGl0IGFzIGFycmF5IG9mIEJsb2NrIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBsYWluIC0gc3RyaW5nIHRvIHByb2Nlc3NcbiAgICogQHJldHVybnMge1Bhc3RlRGF0YVtdfVxuICAgKi9cbiAgcHJvY2Vzc1BsYWluKHMpIHtcbiAgICBjb25zdCB7IGRlZmF1bHRCbG9jazogZSB9ID0gdGhpcy5jb25maWc7XG4gICAgaWYgKCFzKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHQgPSBlO1xuICAgIHJldHVybiBzLnNwbGl0KC9cXHI/XFxuLykuZmlsdGVyKChvKSA9PiBvLnRyaW0oKSkubWFwKChvKSA9PiB7XG4gICAgICBjb25zdCBpID0gZC5tYWtlKFwiZGl2XCIpO1xuICAgICAgaS50ZXh0Q29udGVudCA9IG87XG4gICAgICBjb25zdCBuID0gdGhpcy5jb21wb3NlUGFzdGVFdmVudChcInRhZ1wiLCB7XG4gICAgICAgIGRhdGE6IGlcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogaSxcbiAgICAgICAgdG9vbDogdCxcbiAgICAgICAgaXNCbG9jazogITEsXG4gICAgICAgIGV2ZW50OiBuXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIHBhc3RlIG9mIHNpbmdsZSBCbG9jayB0b29sIGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtQYXN0ZURhdGF9IGRhdGFUb0luc2VydCAtIGRhdGEgb2YgQmxvY2sgdG8gaW5zZXJ0XG4gICAqL1xuICBhc3luYyBwcm9jZXNzU2luZ2xlQmxvY2socykge1xuICAgIGNvbnN0IHsgQ2FyZXQ6IGUsIEJsb2NrTWFuYWdlcjogdCB9ID0gdGhpcy5FZGl0b3IsIHsgY3VycmVudEJsb2NrOiBvIH0gPSB0O1xuICAgIGlmICghbyB8fCBzLnRvb2wgIT09IG8ubmFtZSB8fCAhZC5jb250YWluc09ubHlJbmxpbmVFbGVtZW50cyhzLmNvbnRlbnQuaW5uZXJIVE1MKSkge1xuICAgICAgdGhpcy5pbnNlcnRCbG9jayhzLCAobyA9PSBudWxsID8gdm9pZCAwIDogby50b29sLmlzRGVmYXVsdCkgJiYgby5pc0VtcHR5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5pbnNlcnRDb250ZW50QXRDYXJldFBvc2l0aW9uKHMuY29udGVudC5pbm5lckhUTUwpO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIHBhc3RlIHRvIHNpbmdsZSBCbG9jazpcbiAgICogMS4gRmluZCBwYXR0ZXJuc2AgbWF0Y2hlc1xuICAgKiAyLiBJbnNlcnQgbmV3IGJsb2NrIGlmIGl0IGlzIG5vdCB0aGUgc2FtZSB0eXBlIGFzIGN1cnJlbnQgb25lXG4gICAqIDMuIEp1c3QgaW5zZXJ0IHRleHQgaWYgdGhlcmUgaXMgbm8gc3Vic3RpdHV0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0ge1Bhc3RlRGF0YX0gZGF0YVRvSW5zZXJ0IC0gZGF0YSBvZiBCbG9jayB0byBpbnNlcnRcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NJbmxpbmVQYXN0ZShzKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGUsIENhcmV0OiB0IH0gPSB0aGlzLkVkaXRvciwgeyBjb250ZW50OiBvIH0gPSBzO1xuICAgIGlmIChlLmN1cnJlbnRCbG9jayAmJiBlLmN1cnJlbnRCbG9jay50b29sLmlzRGVmYXVsdCAmJiBvLnRleHRDb250ZW50Lmxlbmd0aCA8IHh0LlBBVFRFUk5fUFJPQ0VTU0lOR19NQVhfTEVOR1RIKSB7XG4gICAgICBjb25zdCBuID0gYXdhaXQgdGhpcy5wcm9jZXNzUGF0dGVybihvLnRleHRDb250ZW50KTtcbiAgICAgIGlmIChuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBlLmN1cnJlbnRCbG9jayAmJiBlLmN1cnJlbnRCbG9jay50b29sLmlzRGVmYXVsdCAmJiBlLmN1cnJlbnRCbG9jay5pc0VtcHR5LCBhID0gZS5wYXN0ZShuLnRvb2wsIG4uZXZlbnQsIHIpO1xuICAgICAgICB0LnNldFRvQmxvY2soYSwgdC5wb3NpdGlvbnMuRU5EKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5jdXJyZW50QmxvY2sgJiYgZS5jdXJyZW50QmxvY2suY3VycmVudElucHV0KSB7XG4gICAgICBjb25zdCBuID0gZS5jdXJyZW50QmxvY2sudG9vbC5iYXNlU2FuaXRpemVDb25maWc7XG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcbiAgICAgICAgXCJpbnNlcnRIVE1MXCIsXG4gICAgICAgICExLFxuICAgICAgICBaKG8uaW5uZXJIVE1MLCBuKVxuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMuaW5zZXJ0QmxvY2socyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBwYXR0ZXJuc2AgbWF0Y2hlc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRleHQgdG8gcHJvY2Vzc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7ZXZlbnQ6IFBhc3RlRXZlbnQsIHRvb2w6IHN0cmluZ30+fVxuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc1BhdHRlcm4ocykge1xuICAgIGNvbnN0IGUgPSB0aGlzLnRvb2xzUGF0dGVybnMuZmluZCgobykgPT4ge1xuICAgICAgY29uc3QgaSA9IG8ucGF0dGVybi5leGVjKHMpO1xuICAgICAgcmV0dXJuIGkgPyBzID09PSBpLnNoaWZ0KCkgOiAhMTtcbiAgICB9KTtcbiAgICByZXR1cm4gZSA/IHtcbiAgICAgIGV2ZW50OiB0aGlzLmNvbXBvc2VQYXN0ZUV2ZW50KFwicGF0dGVyblwiLCB7XG4gICAgICAgIGtleTogZS5rZXksXG4gICAgICAgIGRhdGE6IHNcbiAgICAgIH0pLFxuICAgICAgdG9vbDogZS50b29sLm5hbWVcbiAgICB9IDogdm9pZCAwO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgcGFzdGVkIEJsb2NrIGNvbnRlbnQgdG8gRWRpdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7UGFzdGVEYXRhfSBkYXRhIC0gZGF0YSB0byBpbnNlcnRcbiAgICogQHBhcmFtIHtib29sZWFufSBjYW5SZXBsYWNlQ3VycmVudEJsb2NrIC0gaWYgdHJ1ZSBhbmQgaXMgY3VycmVudCBCbG9jayBpcyBlbXB0eSwgd2lsbCByZXBsYWNlIGN1cnJlbnQgQmxvY2tcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBpbnNlcnRCbG9jayhzLCBlID0gITEpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgQ2FyZXQ6IG8gfSA9IHRoaXMuRWRpdG9yLCB7IGN1cnJlbnRCbG9jazogaSB9ID0gdDtcbiAgICBsZXQgbjtcbiAgICBpZiAoZSAmJiBpICYmIGkuaXNFbXB0eSkge1xuICAgICAgbiA9IHQucGFzdGUocy50b29sLCBzLmV2ZW50LCAhMCksIG8uc2V0VG9CbG9jayhuLCBvLnBvc2l0aW9ucy5FTkQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuID0gdC5wYXN0ZShzLnRvb2wsIHMuZXZlbnQpLCBvLnNldFRvQmxvY2sobiwgby5wb3NpdGlvbnMuRU5EKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGRhdGEgcGFzc2VkIGFzIGFwcGxpY2F0aW9uL3gtZWRpdG9yLWpzIEpTT05cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYmxvY2tzIFx1MjAxNCBCbG9ja3MnIGRhdGEgdG8gaW5zZXJ0XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgaW5zZXJ0RWRpdG9ySlNEYXRhKHMpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSwgQ2FyZXQ6IHQsIFRvb2xzOiBvIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBodChcbiAgICAgIHMsXG4gICAgICAobikgPT4gby5ibG9ja1Rvb2xzLmdldChuKS5zYW5pdGl6ZUNvbmZpZ1xuICAgICkuZm9yRWFjaCgoeyB0b29sOiBuLCBkYXRhOiByIH0sIGEpID0+IHtcbiAgICAgIGxldCBsID0gITE7XG4gICAgICBhID09PSAwICYmIChsID0gZS5jdXJyZW50QmxvY2sgJiYgZS5jdXJyZW50QmxvY2sudG9vbC5pc0RlZmF1bHQgJiYgZS5jdXJyZW50QmxvY2suaXNFbXB0eSk7XG4gICAgICBjb25zdCBjID0gZS5pbnNlcnQoe1xuICAgICAgICB0b29sOiBuLFxuICAgICAgICBkYXRhOiByLFxuICAgICAgICByZXBsYWNlOiBsXG4gICAgICB9KTtcbiAgICAgIHQuc2V0VG9CbG9jayhjLCB0LnBvc2l0aW9ucy5FTkQpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBGZXRjaCBub2RlcyBmcm9tIEVsZW1lbnQgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBjdXJyZW50IG5vZGVcbiAgICogQHBhcmFtIHtOb2RlW119IG5vZGVzIC0gcHJvY2Vzc2VkIG5vZGVzXG4gICAqIEBwYXJhbSB7Tm9kZX0gZGVzdE5vZGUgLSBkZXN0aW5hdGlvbiBub2RlXG4gICAqL1xuICBwcm9jZXNzRWxlbWVudE5vZGUocywgZSwgdCkge1xuICAgIGNvbnN0IG8gPSBPYmplY3Qua2V5cyh0aGlzLnRvb2xzVGFncyksIGkgPSBzLCB7IHRvb2w6IG4gfSA9IHRoaXMudG9vbHNUYWdzW2kudGFnTmFtZV0gfHwge30sIHIgPSB0aGlzLnRhZ3NCeVRvb2xbbiA9PSBudWxsID8gdm9pZCAwIDogbi5uYW1lXSB8fCBbXSwgYSA9IG8uaW5jbHVkZXMoaS50YWdOYW1lKSwgbCA9IGQuYmxvY2tFbGVtZW50cy5pbmNsdWRlcyhpLnRhZ05hbWUudG9Mb3dlckNhc2UoKSksIGMgPSBBcnJheS5mcm9tKGkuY2hpbGRyZW4pLnNvbWUoXG4gICAgICAoeyB0YWdOYW1lOiBoIH0pID0+IG8uaW5jbHVkZXMoaCkgJiYgIXIuaW5jbHVkZXMoaClcbiAgICApLCB1ID0gQXJyYXkuZnJvbShpLmNoaWxkcmVuKS5zb21lKFxuICAgICAgKHsgdGFnTmFtZTogaCB9KSA9PiBkLmJsb2NrRWxlbWVudHMuaW5jbHVkZXMoaC50b0xvd2VyQ2FzZSgpKVxuICAgICk7XG4gICAgaWYgKCFsICYmICFhICYmICFjKVxuICAgICAgcmV0dXJuIHQuYXBwZW5kQ2hpbGQoaSksIFsuLi5lLCB0XTtcbiAgICBpZiAoYSAmJiAhYyB8fCBsICYmICF1ICYmICFjKVxuICAgICAgcmV0dXJuIFsuLi5lLCB0LCBpXTtcbiAgfVxuICAvKipcbiAgICogUmVjdXJzaXZlbHkgZGl2aWRlIEhUTUwgc3RyaW5nIHRvIHR3byB0eXBlcyBvZiBub2RlczpcbiAgICogMS4gQmxvY2sgZWxlbWVudFxuICAgKiAyLiBEb2N1bWVudCBGcmFnbWVudHMgY29udGFpbmVkIHRleHQgYW5kIG1hcmt1cCB0YWdzIGxpa2UgYSwgYiwgaSBldGMuXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gd3JhcHBlciAtIHdyYXBwZXIgb2YgcGFzdGVyIEhUTUwgY29udGVudFxuICAgKiBAcmV0dXJucyB7Tm9kZVtdfVxuICAgKi9cbiAgZ2V0Tm9kZXMocykge1xuICAgIGNvbnN0IGUgPSBBcnJheS5mcm9tKHMuY2hpbGROb2Rlcyk7XG4gICAgbGV0IHQ7XG4gICAgY29uc3QgbyA9IChpLCBuKSA9PiB7XG4gICAgICBpZiAoZC5pc0VtcHR5KG4pICYmICFkLmlzU2luZ2xlVGFnKG4pKVxuICAgICAgICByZXR1cm4gaTtcbiAgICAgIGNvbnN0IHIgPSBpW2kubGVuZ3RoIC0gMV07XG4gICAgICBsZXQgYSA9IG5ldyBEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBzd2l0Y2ggKHIgJiYgZC5pc0ZyYWdtZW50KHIpICYmIChhID0gaS5wb3AoKSksIG4ubm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICBpZiAodCA9IHRoaXMucHJvY2Vzc0VsZW1lbnROb2RlKG4sIGksIGEpLCB0KVxuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgICAgcmV0dXJuIGEuYXBwZW5kQ2hpbGQobiksIFsuLi5pLCBhXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gWy4uLmksIGFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFsuLi5pLCAuLi5BcnJheS5mcm9tKG4uY2hpbGROb2RlcykucmVkdWNlKG8sIFtdKV07XG4gICAgfTtcbiAgICByZXR1cm4gZS5yZWR1Y2UobywgW10pO1xuICB9XG4gIC8qKlxuICAgKiBDb21wb3NlIHBhc3RlIGV2ZW50IHdpdGggcGFzc2VkIHR5cGUgYW5kIGRldGFpbFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtIHtQYXN0ZUV2ZW50RGV0YWlsfSBkZXRhaWwgLSBldmVudCBkZXRhaWxcbiAgICovXG4gIGNvbXBvc2VQYXN0ZUV2ZW50KHMsIGUpIHtcbiAgICByZXR1cm4gbmV3IEN1c3RvbUV2ZW50KHMsIHtcbiAgICAgIGRldGFpbDogZVxuICAgIH0pO1xuICB9XG59O1xubGV0IHd0ID0geHQ7XG53dC5QQVRURVJOX1BST0NFU1NJTkdfTUFYX0xFTkdUSCA9IDQ1MDtcbmNsYXNzIHFvIGV4dGVuZHMgUyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMudG9vbHNEb250U3VwcG9ydFJlYWRPbmx5ID0gW10sIHRoaXMucmVhZE9ubHlFbmFibGVkID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc3RhdGUgb2YgcmVhZCBvbmx5IG1vZGVcbiAgICovXG4gIGdldCBpc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZE9ubHlFbmFibGVkO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgaW5pdGlhbCBzdGF0ZVxuICAgKi9cbiAgYXN5bmMgcHJlcGFyZSgpIHtcbiAgICBjb25zdCB7IFRvb2xzOiBlIH0gPSB0aGlzLkVkaXRvciwgeyBibG9ja1Rvb2xzOiB0IH0gPSBlLCBvID0gW107XG4gICAgQXJyYXkuZnJvbSh0LmVudHJpZXMoKSkuZm9yRWFjaCgoW2ksIG5dKSA9PiB7XG4gICAgICBuLmlzUmVhZE9ubHlTdXBwb3J0ZWQgfHwgby5wdXNoKGkpO1xuICAgIH0pLCB0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seSA9IG8sIHRoaXMuY29uZmlnLnJlYWRPbmx5ICYmIG8ubGVuZ3RoID4gMCAmJiB0aGlzLnRocm93Q3JpdGljYWxFcnJvcigpLCB0aGlzLnRvZ2dsZSh0aGlzLmNvbmZpZy5yZWFkT25seSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCByZWFkLW9ubHkgbW9kZSBvciB0b2dnbGUgY3VycmVudCBzdGF0ZVxuICAgKiBDYWxsIGFsbCBNb2R1bGVzIGB0b2dnbGVSZWFkT25seWAgbWV0aG9kIGFuZCByZS1yZW5kZXIgRWRpdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgLSAob3B0aW9uYWwpIHJlYWQtb25seSBzdGF0ZSBvciB0b2dnbGVcbiAgICovXG4gIGFzeW5jIHRvZ2dsZShlID0gIXRoaXMucmVhZE9ubHlFbmFibGVkKSB7XG4gICAgZSAmJiB0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seS5sZW5ndGggPiAwICYmIHRoaXMudGhyb3dDcml0aWNhbEVycm9yKCk7XG4gICAgY29uc3QgdCA9IHRoaXMucmVhZE9ubHlFbmFibGVkO1xuICAgIHRoaXMucmVhZE9ubHlFbmFibGVkID0gZTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5FZGl0b3IpXG4gICAgICB0aGlzLkVkaXRvcltpXS50b2dnbGVSZWFkT25seSAmJiB0aGlzLkVkaXRvcltpXS50b2dnbGVSZWFkT25seShlKTtcbiAgICBpZiAodCA9PT0gZSlcbiAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5RW5hYmxlZDtcbiAgICBjb25zdCBvID0gYXdhaXQgdGhpcy5FZGl0b3IuU2F2ZXIuc2F2ZSgpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY2xlYXIoKSwgYXdhaXQgdGhpcy5FZGl0b3IuUmVuZGVyZXIucmVuZGVyKG8uYmxvY2tzKSwgdGhpcy5yZWFkT25seUVuYWJsZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvciBhYm91dCB0b29scyB3aGljaCBkb24ndCBzdXBwb3J0IHJlYWQtb25seSBtb2RlXG4gICAqL1xuICB0aHJvd0NyaXRpY2FsRXJyb3IoKSB7XG4gICAgdGhyb3cgbmV3IGF0KFxuICAgICAgYFRvIGVuYWJsZSByZWFkLW9ubHkgbW9kZSBhbGwgY29ubmVjdGVkIHRvb2xzIHNob3VsZCBzdXBwb3J0IGl0LiBUb29scyAke3RoaXMudG9vbHNEb250U3VwcG9ydFJlYWRPbmx5LmpvaW4oXCIsIFwiKX0gZG9uJ3Qgc3VwcG9ydCByZWFkLW9ubHkgbW9kZS5gXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgcGUgZXh0ZW5kcyBTIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5pc1JlY3RTZWxlY3Rpb25BY3RpdmF0ZWQgPSAhMSwgdGhpcy5TQ1JPTExfU1BFRUQgPSAzLCB0aGlzLkhFSUdIVF9PRl9TQ1JPTExfWk9ORSA9IDQwLCB0aGlzLkJPVFRPTV9TQ1JPTExfWk9ORSA9IDEsIHRoaXMuVE9QX1NDUk9MTF9aT05FID0gMiwgdGhpcy5NQUlOX01PVVNFX0JVVFRPTiA9IDAsIHRoaXMubW91c2Vkb3duID0gITEsIHRoaXMuaXNTY3JvbGxpbmcgPSAhMSwgdGhpcy5pblNjcm9sbFpvbmUgPSBudWxsLCB0aGlzLnN0YXJ0WCA9IDAsIHRoaXMuc3RhcnRZID0gMCwgdGhpcy5tb3VzZVggPSAwLCB0aGlzLm1vdXNlWSA9IDAsIHRoaXMuc3RhY2tPZlNlbGVjdGVkID0gW10sIHRoaXMubGlzdGVuZXJJZHMgPSBbXTtcbiAgfVxuICAvKipcbiAgICogQ1NTIGNsYXNzZXMgZm9yIHRoZSBCbG9ja1xuICAgKlxuICAgKiBAcmV0dXJucyB7e3dyYXBwZXI6IHN0cmluZywgY29udGVudDogc3RyaW5nfX1cbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvdmVybGF5OiBcImNvZGV4LWVkaXRvci1vdmVybGF5XCIsXG4gICAgICBvdmVybGF5Q29udGFpbmVyOiBcImNvZGV4LWVkaXRvci1vdmVybGF5X19jb250YWluZXJcIixcbiAgICAgIHJlY3Q6IFwiY29kZXgtZWRpdG9yLW92ZXJsYXlfX3JlY3RhbmdsZVwiLFxuICAgICAgdG9wU2Nyb2xsWm9uZTogXCJjb2RleC1lZGl0b3Itb3ZlcmxheV9fc2Nyb2xsLXpvbmUtLXRvcFwiLFxuICAgICAgYm90dG9tU2Nyb2xsWm9uZTogXCJjb2RleC1lZGl0b3Itb3ZlcmxheV9fc2Nyb2xsLXpvbmUtLWJvdHRvbVwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIFByZXBhcmF0aW9uXG4gICAqIENyZWF0aW5nIHJlY3QgYW5kIGhhbmcgaGFuZGxlcnNcbiAgICovXG4gIHByZXBhcmUoKSB7XG4gICAgdGhpcy5lbmFibGVNb2R1bGVCaW5kaW5ncygpO1xuICB9XG4gIC8qKlxuICAgKiBJbml0IHJlY3QgcGFyYW1zXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlWCAtIFggY29vcmQgb2YgbW91c2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2VZIC0gWSBjb29yZCBvZiBtb3VzZVxuICAgKi9cbiAgc3RhcnRTZWxlY3Rpb24oZSwgdCkge1xuICAgIGNvbnN0IG8gPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KGUgLSB3aW5kb3cucGFnZVhPZmZzZXQsIHQgLSB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgIG8uY2xvc2VzdChgLiR7dGhpcy5FZGl0b3IuVG9vbGJhci5DU1MudG9vbGJhcn1gKSB8fCAodGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uYWxsQmxvY2tzU2VsZWN0ZWQgPSAhMSwgdGhpcy5jbGVhclNlbGVjdGlvbigpLCB0aGlzLnN0YWNrT2ZTZWxlY3RlZCA9IFtdKTtcbiAgICBjb25zdCBuID0gW1xuICAgICAgYC4ke0YuQ1NTLmNvbnRlbnR9YCxcbiAgICAgIGAuJHt0aGlzLkVkaXRvci5Ub29sYmFyLkNTUy50b29sYmFyfWAsXG4gICAgICBgLiR7dGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5DU1MuaW5saW5lVG9vbGJhcn1gXG4gICAgXSwgciA9IG8uY2xvc2VzdChcIi5cIiArIHRoaXMuRWRpdG9yLlVJLkNTUy5lZGl0b3JXcmFwcGVyKSwgYSA9IG4uc29tZSgobCkgPT4gISFvLmNsb3Nlc3QobCkpO1xuICAgICFyIHx8IGEgfHwgKHRoaXMubW91c2Vkb3duID0gITAsIHRoaXMuc3RhcnRYID0gZSwgdGhpcy5zdGFydFkgPSB0KTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgYWxsIHBhcmFtcyB0byBlbmQgc2VsZWN0aW9uXG4gICAqL1xuICBlbmRTZWxlY3Rpb24oKSB7XG4gICAgdGhpcy5tb3VzZWRvd24gPSAhMSwgdGhpcy5zdGFydFggPSAwLCB0aGlzLnN0YXJ0WSA9IDAsIHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIH1cbiAgLyoqXG4gICAqIGlzIFJlY3RTZWxlY3Rpb24gQWN0aXZhdGVkXG4gICAqL1xuICBpc1JlY3RBY3RpdmF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNSZWN0U2VsZWN0aW9uQWN0aXZhdGVkO1xuICB9XG4gIC8qKlxuICAgKiBNYXJrIHRoYXQgc2VsZWN0aW9uIGlzIGVuZFxuICAgKi9cbiAgY2xlYXJTZWxlY3Rpb24oKSB7XG4gICAgdGhpcy5pc1JlY3RTZWxlY3Rpb25BY3RpdmF0ZWQgPSAhMTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBNb2R1bGUgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICBjb25zdCB7IGNvbnRhaW5lcjogZSB9ID0gdGhpcy5nZW5IVE1MKCk7XG4gICAgdGhpcy5saXN0ZW5lcnMub24oZSwgXCJtb3VzZWRvd25cIiwgKHQpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc01vdXNlRG93bih0KTtcbiAgICB9LCAhMSksIHRoaXMubGlzdGVuZXJzLm9uKGRvY3VtZW50LmJvZHksIFwibW91c2Vtb3ZlXCIsIFRlKCh0KSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NNb3VzZU1vdmUodCk7XG4gICAgfSwgMTApLCB7XG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pLCB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudC5ib2R5LCBcIm1vdXNlbGVhdmVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzTW91c2VMZWF2ZSgpO1xuICAgIH0pLCB0aGlzLmxpc3RlbmVycy5vbih3aW5kb3csIFwic2Nyb2xsXCIsIFRlKCh0KSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NTY3JvbGwodCk7XG4gICAgfSwgMTApLCB7XG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pLCB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudC5ib2R5LCBcIm1vdXNldXBcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzTW91c2VVcCgpO1xuICAgIH0sICExKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIG1vdXNlIGRvd24gZXZlbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gbW91c2VFdmVudCAtIG1vdXNlIGV2ZW50IHBheWxvYWRcbiAgICovXG4gIHByb2Nlc3NNb3VzZURvd24oZSkge1xuICAgIGlmIChlLmJ1dHRvbiAhPT0gdGhpcy5NQUlOX01PVVNFX0JVVFRPTilcbiAgICAgIHJldHVybjtcbiAgICBlLnRhcmdldC5jbG9zZXN0KGQuYWxsSW5wdXRzU2VsZWN0b3IpICE9PSBudWxsIHx8IHRoaXMuc3RhcnRTZWxlY3Rpb24oZS5wYWdlWCwgZS5wYWdlWSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSBtb3ZlIGV2ZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IG1vdXNlRXZlbnQgLSBtb3VzZSBldmVudCBwYXlsb2FkXG4gICAqL1xuICBwcm9jZXNzTW91c2VNb3ZlKGUpIHtcbiAgICB0aGlzLmNoYW5naW5nUmVjdGFuZ2xlKGUpLCB0aGlzLnNjcm9sbEJ5Wm9uZXMoZS5jbGllbnRZKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIG1vdXNlIGxlYXZlXG4gICAqL1xuICBwcm9jZXNzTW91c2VMZWF2ZSgpIHtcbiAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCksIHRoaXMuZW5kU2VsZWN0aW9uKCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gbW91c2VFdmVudCAtIG1vdXNlIGV2ZW50IHBheWxvYWRcbiAgICovXG4gIHByb2Nlc3NTY3JvbGwoZSkge1xuICAgIHRoaXMuY2hhbmdpbmdSZWN0YW5nbGUoZSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSB1cFxuICAgKi9cbiAgcHJvY2Vzc01vdXNlVXAoKSB7XG4gICAgdGhpcy5jbGVhclNlbGVjdGlvbigpLCB0aGlzLmVuZFNlbGVjdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBTY3JvbGwgSWYgbW91c2UgaW4gc2Nyb2xsIHpvbmVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFkgLSBZIGNvb3JkIG9mIG1vdXNlXG4gICAqL1xuICBzY3JvbGxCeVpvbmVzKGUpIHtcbiAgICBpZiAodGhpcy5pblNjcm9sbFpvbmUgPSBudWxsLCBlIDw9IHRoaXMuSEVJR0hUX09GX1NDUk9MTF9aT05FICYmICh0aGlzLmluU2Nyb2xsWm9uZSA9IHRoaXMuVE9QX1NDUk9MTF9aT05FKSwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCAtIGUgPD0gdGhpcy5IRUlHSFRfT0ZfU0NST0xMX1pPTkUgJiYgKHRoaXMuaW5TY3JvbGxab25lID0gdGhpcy5CT1RUT01fU0NST0xMX1pPTkUpLCAhdGhpcy5pblNjcm9sbFpvbmUpIHtcbiAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSAhMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc1Njcm9sbGluZyB8fCAodGhpcy5zY3JvbGxWZXJ0aWNhbCh0aGlzLmluU2Nyb2xsWm9uZSA9PT0gdGhpcy5UT1BfU0NST0xMX1pPTkUgPyAtdGhpcy5TQ1JPTExfU1BFRUQgOiB0aGlzLlNDUk9MTF9TUEVFRCksIHRoaXMuaXNTY3JvbGxpbmcgPSAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyByZXF1aXJlZCBIVE1MIGVsZW1lbnRzXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBFbGVtZW50Pn1cbiAgICovXG4gIGdlbkhUTUwoKSB7XG4gICAgY29uc3QgeyBVSTogZSB9ID0gdGhpcy5FZGl0b3IsIHQgPSBlLm5vZGVzLmhvbGRlci5xdWVyeVNlbGVjdG9yKFwiLlwiICsgZS5DU1MuZWRpdG9yV3JhcHBlciksIG8gPSBkLm1ha2UoXCJkaXZcIiwgcGUuQ1NTLm92ZXJsYXksIHt9KSwgaSA9IGQubWFrZShcImRpdlwiLCBwZS5DU1Mub3ZlcmxheUNvbnRhaW5lciwge30pLCBuID0gZC5tYWtlKFwiZGl2XCIsIHBlLkNTUy5yZWN0LCB7fSk7XG4gICAgcmV0dXJuIGkuYXBwZW5kQ2hpbGQobiksIG8uYXBwZW5kQ2hpbGQoaSksIHQuYXBwZW5kQ2hpbGQobyksIHRoaXMub3ZlcmxheVJlY3RhbmdsZSA9IG4sIHtcbiAgICAgIGNvbnRhaW5lcjogdCxcbiAgICAgIG92ZXJsYXk6IG9cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgc2Nyb2xsaW5nIGlmIGJsb2NrU2VsZWN0aW9uIGlzIGFjdGl2ZSBhbmQgbW91c2UgaXMgaW4gc2Nyb2xsIHpvbmVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkIC0gc3BlZWQgb2Ygc2Nyb2xsaW5nXG4gICAqL1xuICBzY3JvbGxWZXJ0aWNhbChlKSB7XG4gICAgaWYgKCEodGhpcy5pblNjcm9sbFpvbmUgJiYgdGhpcy5tb3VzZWRvd24pKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgd2luZG93LnNjcm9sbEJ5KDAsIGUpLCB0aGlzLm1vdXNlWSArPSB3aW5kb3cucGFnZVlPZmZzZXQgLSB0LCBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2Nyb2xsVmVydGljYWwoZSk7XG4gICAgfSwgMCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGNoYW5nZSBpbiB0aGUgcmVjdGFuZ2xlIGFuZCBpdHMgZWZmZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBtb3VzZSBldmVudFxuICAgKi9cbiAgY2hhbmdpbmdSZWN0YW5nbGUoZSkge1xuICAgIGlmICghdGhpcy5tb3VzZWRvd24pXG4gICAgICByZXR1cm47XG4gICAgZS5wYWdlWSAhPT0gdm9pZCAwICYmICh0aGlzLm1vdXNlWCA9IGUucGFnZVgsIHRoaXMubW91c2VZID0gZS5wYWdlWSk7XG4gICAgY29uc3QgeyByaWdodFBvczogdCwgbGVmdFBvczogbywgaW5kZXg6IGkgfSA9IHRoaXMuZ2VuSW5mb0Zvck1vdXNlU2VsZWN0aW9uKCksIG4gPSB0aGlzLnN0YXJ0WCA+IHQgJiYgdGhpcy5tb3VzZVggPiB0LCByID0gdGhpcy5zdGFydFggPCBvICYmIHRoaXMubW91c2VYIDwgbztcbiAgICB0aGlzLnJlY3RDcm9zc2VzQmxvY2tzID0gIShuIHx8IHIpLCB0aGlzLmlzUmVjdFNlbGVjdGlvbkFjdGl2YXRlZCB8fCAodGhpcy5yZWN0Q3Jvc3Nlc0Jsb2NrcyA9ICExLCB0aGlzLmlzUmVjdFNlbGVjdGlvbkFjdGl2YXRlZCA9ICEwLCB0aGlzLnNocmlua1JlY3RhbmdsZVRvUG9pbnQoKSwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCIpLCB0aGlzLnVwZGF0ZVJlY3RhbmdsZVNpemUoKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpLCBpICE9PSB2b2lkIDAgJiYgKHRoaXMudHJ5U2VsZWN0TmV4dEJsb2NrKGkpLCB0aGlzLmludmVyc2VTZWxlY3Rpb24oKSwgbS5nZXQoKS5yZW1vdmVBbGxSYW5nZXMoKSk7XG4gIH1cbiAgLyoqXG4gICAqIFNocmluayByZWN0IHRvIHNpbmd1bGFyIHBvaW50XG4gICAqL1xuICBzaHJpbmtSZWN0YW5nbGVUb1BvaW50KCkge1xuICAgIHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5sZWZ0ID0gYCR7dGhpcy5zdGFydFggLSB3aW5kb3cucGFnZVhPZmZzZXR9cHhgLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUudG9wID0gYCR7dGhpcy5zdGFydFkgLSB3aW5kb3cucGFnZVlPZmZzZXR9cHhgLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUuYm90dG9tID0gYGNhbGMoMTAwJSAtICR7dGhpcy5zdGFydFkgLSB3aW5kb3cucGFnZVlPZmZzZXR9cHhgLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUucmlnaHQgPSBgY2FsYygxMDAlIC0gJHt0aGlzLnN0YXJ0WCAtIHdpbmRvdy5wYWdlWE9mZnNldH1weGA7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdCBvciB1bnNlbGVjdCBhbGwgb2YgYmxvY2tzIGluIGFycmF5IGlmIHJlY3QgaXMgb3V0IG9yIGluIHNlbGVjdGFibGUgYXJlYVxuICAgKi9cbiAgaW52ZXJzZVNlbGVjdGlvbigpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlJbmRleCh0aGlzLnN0YWNrT2ZTZWxlY3RlZFswXSkuc2VsZWN0ZWQ7XG4gICAgaWYgKHRoaXMucmVjdENyb3NzZXNCbG9ja3MgJiYgIXQpXG4gICAgICBmb3IgKGNvbnN0IG8gb2YgdGhpcy5zdGFja09mU2VsZWN0ZWQpXG4gICAgICAgIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLnNlbGVjdEJsb2NrQnlJbmRleChvKTtcbiAgICBpZiAoIXRoaXMucmVjdENyb3NzZXNCbG9ja3MgJiYgdClcbiAgICAgIGZvciAoY29uc3QgbyBvZiB0aGlzLnN0YWNrT2ZTZWxlY3RlZClcbiAgICAgICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24udW5TZWxlY3RCbG9ja0J5SW5kZXgobyk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgc2l6ZSBvZiByZWN0YW5nbGVcbiAgICovXG4gIHVwZGF0ZVJlY3RhbmdsZVNpemUoKSB7XG4gICAgdGhpcy5tb3VzZVkgPj0gdGhpcy5zdGFydFkgPyAodGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnRvcCA9IGAke3RoaXMuc3RhcnRZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmJvdHRvbSA9IGBjYWxjKDEwMCUgLSAke3RoaXMubW91c2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCkgOiAodGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmJvdHRvbSA9IGBjYWxjKDEwMCUgLSAke3RoaXMuc3RhcnRZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnRvcCA9IGAke3RoaXMubW91c2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCksIHRoaXMubW91c2VYID49IHRoaXMuc3RhcnRYID8gKHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5sZWZ0ID0gYCR7dGhpcy5zdGFydFggLSB3aW5kb3cucGFnZVhPZmZzZXR9cHhgLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUucmlnaHQgPSBgY2FsYygxMDAlIC0gJHt0aGlzLm1vdXNlWCAtIHdpbmRvdy5wYWdlWE9mZnNldH1weGApIDogKHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5yaWdodCA9IGBjYWxjKDEwMCUgLSAke3RoaXMuc3RhcnRYIC0gd2luZG93LnBhZ2VYT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmxlZnQgPSBgJHt0aGlzLm1vdXNlWCAtIHdpbmRvdy5wYWdlWE9mZnNldH1weGApO1xuICB9XG4gIC8qKlxuICAgKiBDb2xsZWN0cyBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gZGV0ZXJtaW5lIHRoZSBiZWhhdmlvciBvZiB0aGUgcmVjdGFuZ2xlXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IGluZGV4IC0gaW5kZXggbmV4dCBCbG9jaywgbGVmdFBvcyAtIHN0YXJ0IG9mIGxlZnQgYm9yZGVyIG9mIEJsb2NrLCByaWdodFBvcyAtIHJpZ2h0IGJvcmRlclxuICAgKi9cbiAgZ2VuSW5mb0Zvck1vdXNlU2VsZWN0aW9uKCkge1xuICAgIGNvbnN0IHQgPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC8gMiwgbyA9IHRoaXMubW91c2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0LCBpID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0LCBvKSwgbiA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKGkpO1xuICAgIGxldCByO1xuICAgIG4gIT09IHZvaWQgMCAmJiAociA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3MuZmluZEluZGV4KChoKSA9PiBoLmhvbGRlciA9PT0gbi5ob2xkZXIpKTtcbiAgICBjb25zdCBhID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmxhc3RCbG9jay5ob2xkZXIucXVlcnlTZWxlY3RvcihcIi5cIiArIEYuQ1NTLmNvbnRlbnQpLCBsID0gTnVtYmVyLnBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGEpLndpZHRoLCAxMCkgLyAyLCBjID0gdCAtIGwsIHUgPSB0ICsgbDtcbiAgICByZXR1cm4ge1xuICAgICAgaW5kZXg6IHIsXG4gICAgICBsZWZ0UG9zOiBjLFxuICAgICAgcmlnaHRQb3M6IHVcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3QgYmxvY2sgd2l0aCBpbmRleCBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0gaW5kZXggLSBpbmRleCBvZiBibG9jayBpbiByZWRhY3RvclxuICAgKi9cbiAgYWRkQmxvY2tJblNlbGVjdGlvbihlKSB7XG4gICAgdGhpcy5yZWN0Q3Jvc3Nlc0Jsb2NrcyAmJiB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5zZWxlY3RCbG9ja0J5SW5kZXgoZSksIHRoaXMuc3RhY2tPZlNlbGVjdGVkLnB1c2goZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBibG9jayB0byB0aGUgc2VsZWN0aW9uIGFuZCBkZXRlcm1pbmVzIHdoaWNoIGJsb2NrcyBzaG91bGQgYmUgc2VsZWN0ZWRcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGluZGV4IC0gaW5kZXggb2YgbmV3IGJsb2NrIGluIHRoZSByZWFjdG9yXG4gICAqL1xuICB0cnlTZWxlY3ROZXh0QmxvY2soZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLnN0YWNrT2ZTZWxlY3RlZFt0aGlzLnN0YWNrT2ZTZWxlY3RlZC5sZW5ndGggLSAxXSA9PT0gZSwgbyA9IHRoaXMuc3RhY2tPZlNlbGVjdGVkLmxlbmd0aCwgaSA9IDEsIG4gPSAtMSwgciA9IDA7XG4gICAgaWYgKHQpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgYSA9IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSAtIHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAyXSA+IDA7XG4gICAgbGV0IGwgPSByO1xuICAgIG8gPiAxICYmIChsID0gYSA/IGkgOiBuKTtcbiAgICBjb25zdCBjID0gZSA+IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSAmJiBsID09PSBpLCB1ID0gZSA8IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSAmJiBsID09PSBuLCBmID0gIShjIHx8IHUgfHwgbCA9PT0gcik7XG4gICAgaWYgKCFmICYmIChlID4gdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdIHx8IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSA9PT0gdm9pZCAwKSkge1xuICAgICAgbGV0IGsgPSB0aGlzLnN0YWNrT2ZTZWxlY3RlZFtvIC0gMV0gKyAxIHx8IGU7XG4gICAgICBmb3IgKGs7IGsgPD0gZTsgaysrKVxuICAgICAgICB0aGlzLmFkZEJsb2NrSW5TZWxlY3Rpb24oayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZiAmJiBlIDwgdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdKSB7XG4gICAgICBmb3IgKGxldCBrID0gdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdIC0gMTsgayA+PSBlOyBrLS0pXG4gICAgICAgIHRoaXMuYWRkQmxvY2tJblNlbGVjdGlvbihrKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFmKVxuICAgICAgcmV0dXJuO1xuICAgIGxldCB2ID0gbyAtIDEsIHA7XG4gICAgZm9yIChlID4gdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdID8gcCA9ICgpID0+IGUgPiB0aGlzLnN0YWNrT2ZTZWxlY3RlZFt2XSA6IHAgPSAoKSA9PiBlIDwgdGhpcy5zdGFja09mU2VsZWN0ZWRbdl07IHAoKTsgKVxuICAgICAgdGhpcy5yZWN0Q3Jvc3Nlc0Jsb2NrcyAmJiB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi51blNlbGVjdEJsb2NrQnlJbmRleCh0aGlzLnN0YWNrT2ZTZWxlY3RlZFt2XSksIHRoaXMuc3RhY2tPZlNlbGVjdGVkLnBvcCgpLCB2LS07XG4gIH1cbn1cbmNsYXNzIEpvIGV4dGVuZHMgUyB7XG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBSZW5kZXJlckJsb2Nrc1xuICAgKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSAtIHRvb2wgbmFtZVxuICAgKiBAcHJvcGVydHkge29iamVjdH0gZGF0YSAtIHRvb2wgZGF0YVxuICAgKi9cbiAgLyoqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGJsb2NrczogW1xuICAgKiAgIHtcbiAgICogICAgIGlkICAgOiAnb0RlLUVWckdXQScsXG4gICAqICAgICB0eXBlIDogJ3BhcmFncmFwaCcsXG4gICAqICAgICBkYXRhIDoge1xuICAgKiAgICAgICB0ZXh0IDogJ0hlbGxvIGZyb20gQ29kZXghJ1xuICAgKiAgICAgfVxuICAgKiAgIH0sXG4gICAqICAge1xuICAgKiAgICAgaWQgICA6ICdMZDVCSmpKQ0hzJyxcbiAgICogICAgIHR5cGUgOiAncGFyYWdyYXBoJyxcbiAgICogICAgIGRhdGEgOiB7XG4gICAqICAgICAgIHRleHQgOiAnTGVhdmUgZmVlZGJhY2sgaWYgeW91IGxpa2UgaXQhJ1xuICAgKiAgICAgfVxuICAgKiAgIH0sXG4gICAqIF1cbiAgICovXG4gIC8qKlxuICAgKiBNYWtlIHBsdWdpbiBibG9ja3MgZnJvbSBhcnJheSBvZiBwbHVnaW5gcyBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7T3V0cHV0QmxvY2tEYXRhW119IGJsb2NrcyAtIGJsb2NrcyB0byByZW5kZXJcbiAgICovXG4gIGFzeW5jIHJlbmRlcihlKSB7XG4gICAgY29uc3QgdCA9IGUubWFwKChpKSA9PiAoeyBmdW5jdGlvbjogKCkgPT4gdGhpcy5pbnNlcnRCbG9jayhpKSB9KSk7XG4gICAgdGhpcy5FZGl0b3IuTW9kaWZpY2F0aW9uc09ic2VydmVyLmRpc2FibGUoKTtcbiAgICBjb25zdCBvID0gYXdhaXQgb3QodCk7XG4gICAgcmV0dXJuIHRoaXMuRWRpdG9yLk1vZGlmaWNhdGlvbnNPYnNlcnZlci5lbmFibGUoKSwgdGhpcy5FZGl0b3IuVUkuY2hlY2tFbXB0aW5lc3MoKSwgbztcbiAgfVxuICAvKipcbiAgICogR2V0IHBsdWdpbiBpbnN0YW5jZVxuICAgKiBBZGQgcGx1Z2luIGluc3RhbmNlIHRvIEJsb2NrTWFuYWdlclxuICAgKiBJbnNlcnQgYmxvY2sgdG8gd29ya2luZyB6b25lXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtIC0gQmxvY2sgZGF0YSB0byBpbnNlcnRcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBhc3luYyBpbnNlcnRCbG9jayhlKSB7XG4gICAgdmFyIGw7XG4gICAgY29uc3QgeyBUb29sczogdCwgQmxvY2tNYW5hZ2VyOiBvIH0gPSB0aGlzLkVkaXRvciwgeyB0eXBlOiBpLCBkYXRhOiBuLCB0dW5lczogciwgaWQ6IGEgfSA9IGU7XG4gICAgaWYgKHQuYXZhaWxhYmxlLmhhcyhpKSlcbiAgICAgIHRyeSB7XG4gICAgICAgIG8uaW5zZXJ0KHtcbiAgICAgICAgICBpZDogYSxcbiAgICAgICAgICB0b29sOiBpLFxuICAgICAgICAgIGRhdGE6IG4sXG4gICAgICAgICAgdHVuZXM6IHJcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChjKSB7XG4gICAgICAgIHRocm93IFQoYEJsb2NrIFx1MDBBQiR7aX1cdTAwQkIgc2tpcHBlZCBiZWNhdXNlIG9mIHBsdWdpbnMgZXJyb3JgLCBcIndhcm5cIiwge1xuICAgICAgICAgIGRhdGE6IG4sXG4gICAgICAgICAgZXJyb3I6IGNcbiAgICAgICAgfSksIEVycm9yKGMpO1xuICAgICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgYyA9IHtcbiAgICAgICAgc2F2ZWREYXRhOiB7XG4gICAgICAgICAgaWQ6IGEsXG4gICAgICAgICAgdHlwZTogaSxcbiAgICAgICAgICBkYXRhOiBuXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiBpXG4gICAgICB9O1xuICAgICAgaWYgKHQudW5hdmFpbGFibGUuaGFzKGkpKSB7XG4gICAgICAgIGNvbnN0IGYgPSAobCA9IHQudW5hdmFpbGFibGUuZ2V0KGkpLnRvb2xib3hbMF0pID09IG51bGwgPyB2b2lkIDAgOiBsLnRpdGxlO1xuICAgICAgICBjLnRpdGxlID0gZiB8fCBjLnRpdGxlO1xuICAgICAgfVxuICAgICAgY29uc3QgdSA9IG8uaW5zZXJ0KHtcbiAgICAgICAgaWQ6IGEsXG4gICAgICAgIHRvb2w6IHQuc3R1YlRvb2wsXG4gICAgICAgIGRhdGE6IGNcbiAgICAgIH0pO1xuICAgICAgdS5zdHJldGNoZWQgPSAhMCwgVChgVG9vbCBcdTAwQUIke2l9XHUwMEJCIGlzIG5vdCBmb3VuZC4gQ2hlY2sgJ3Rvb2xzJyBwcm9wZXJ0eSBhdCB5b3VyIGluaXRpYWwgRWRpdG9yLmpzIGNvbmZpZy5gLCBcIndhcm5cIik7XG4gICAgfVxuICB9XG59XG5jbGFzcyBRbyBleHRlbmRzIFMge1xuICAvKipcbiAgICogQ29tcG9zZXMgbmV3IGNoYWluIG9mIFByb21pc2VzIHRvIGZpcmUgdGhlbSBhbHRlcm5hdGVsbHlcbiAgICpcbiAgICogQHJldHVybnMge091dHB1dERhdGF9XG4gICAqL1xuICBhc3luYyBzYXZlKCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBlLCBUb29sczogdCB9ID0gdGhpcy5FZGl0b3IsIG8gPSBlLmJsb2NrcywgaSA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBvLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgaS5wdXNoKHRoaXMuZ2V0U2F2ZWREYXRhKGEpKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbiA9IGF3YWl0IFByb21pc2UuYWxsKGkpLCByID0gYXdhaXQgaHQobiwgKGEpID0+IHQuYmxvY2tUb29scy5nZXQoYSkuc2FuaXRpemVDb25maWcpO1xuICAgICAgcmV0dXJuIHRoaXMubWFrZU91dHB1dChyKTtcbiAgICB9IGNhdGNoIChuKSB7XG4gICAgICBLKFwiU2F2aW5nIGZhaWxlZCBkdWUgdG8gdGhlIEVycm9yICVvXCIsIFwiZXJyb3JcIiwgbik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTYXZlcyBhbmQgdmFsaWRhdGVzXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIC0gRWRpdG9yJ3MgVG9vbFxuICAgKiBAcmV0dXJucyB7VmFsaWRhdGVkRGF0YX0gLSBUb29sJ3MgdmFsaWRhdGVkIGRhdGFcbiAgICovXG4gIGFzeW5jIGdldFNhdmVkRGF0YShlKSB7XG4gICAgY29uc3QgdCA9IGF3YWl0IGUuc2F2ZSgpLCBvID0gdCAmJiBhd2FpdCBlLnZhbGlkYXRlKHQuZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnQsXG4gICAgICBpc1ZhbGlkOiBvXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBvdXRwdXQgb2JqZWN0IHdpdGggc2F2ZWQgZGF0YSwgdGltZSBhbmQgdmVyc2lvbiBvZiBlZGl0b3JcbiAgICpcbiAgICogQHBhcmFtIHtWYWxpZGF0ZWREYXRhfSBhbGxFeHRyYWN0ZWREYXRhIC0gZGF0YSBleHRyYWN0ZWQgZnJvbSBCbG9ja3NcbiAgICogQHJldHVybnMge091dHB1dERhdGF9XG4gICAqL1xuICBtYWtlT3V0cHV0KGUpIHtcbiAgICBsZXQgdCA9IDA7XG4gICAgY29uc3QgbyA9IFtdO1xuICAgIHJldHVybiBUKFwiW0VkaXRvci5qcyBzYXZpbmddOlwiLCBcImdyb3VwQ29sbGFwc2VkXCIpLCBlLmZvckVhY2goKHsgaWQ6IGksIHRvb2w6IG4sIGRhdGE6IHIsIHR1bmVzOiBhLCB0aW1lOiBsLCBpc1ZhbGlkOiBjIH0pID0+IHtcbiAgICAgIGlmICh0ICs9IGwsIFQoYCR7bi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG4uc2xpY2UoMSl9YCwgXCJncm91cFwiKSwgYylcbiAgICAgICAgVChyKSwgVCh2b2lkIDAsIFwiZ3JvdXBFbmRcIik7XG4gICAgICBlbHNlIHtcbiAgICAgICAgVChgQmxvY2sgXHUwMEFCJHtufVx1MDBCQiBza2lwcGVkIGJlY2F1c2Ugc2F2ZWQgZGF0YSBpcyBpbnZhbGlkYCksIFQodm9pZCAwLCBcImdyb3VwRW5kXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAobiA9PT0gdGhpcy5FZGl0b3IuVG9vbHMuc3R1YlRvb2wpIHtcbiAgICAgICAgby5wdXNoKHIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB1ID0ge1xuICAgICAgICBpZDogaSxcbiAgICAgICAgdHlwZTogbixcbiAgICAgICAgZGF0YTogcixcbiAgICAgICAgLi4uIVYoYSkgJiYge1xuICAgICAgICAgIHR1bmVzOiBhXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBvLnB1c2godSk7XG4gICAgfSksIFQoXCJUb3RhbFwiLCBcImxvZ1wiLCB0KSwgVCh2b2lkIDAsIFwiZ3JvdXBFbmRcIiksIHtcbiAgICAgIHRpbWU6ICsvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSxcbiAgICAgIGJsb2NrczogbyxcbiAgICAgIHZlcnNpb246IFwiMi4yNy4wXCJcbiAgICB9O1xuICB9XG59XG52YXIgTmUgPSB7fSwgZWkgPSB7XG4gIGdldCBleHBvcnRzKCkge1xuICAgIHJldHVybiBOZTtcbiAgfSxcbiAgc2V0IGV4cG9ydHMocykge1xuICAgIE5lID0gcztcbiAgfVxufTtcbihmdW5jdGlvbihzLCBlKSB7XG4gIChmdW5jdGlvbih0LCBvKSB7XG4gICAgcy5leHBvcnRzID0gbygpO1xuICB9KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgbyA9IHt9O1xuICAgICAgZnVuY3Rpb24gaShuKSB7XG4gICAgICAgIGlmIChvW25dKVxuICAgICAgICAgIHJldHVybiBvW25dLmV4cG9ydHM7XG4gICAgICAgIHZhciByID0gb1tuXSA9IHsgaTogbiwgbDogITEsIGV4cG9ydHM6IHt9IH07XG4gICAgICAgIHJldHVybiB0W25dLmNhbGwoci5leHBvcnRzLCByLCByLmV4cG9ydHMsIGkpLCByLmwgPSAhMCwgci5leHBvcnRzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGkubSA9IHQsIGkuYyA9IG8sIGkuZCA9IGZ1bmN0aW9uKG4sIHIsIGEpIHtcbiAgICAgICAgaS5vKG4sIHIpIHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCByLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGEgfSk7XG4gICAgICB9LCBpLnIgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHR5cGVvZiBTeW1ib2wgPCBcInVcIiAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KTtcbiAgICAgIH0sIGkudCA9IGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgaWYgKDEgJiByICYmIChuID0gaShuKSksIDggJiByIHx8IDQgJiByICYmIHR5cGVvZiBuID09IFwib2JqZWN0XCIgJiYgbiAmJiBuLl9fZXNNb2R1bGUpXG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIHZhciBhID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGlmIChpLnIoYSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiAhMCwgdmFsdWU6IG4gfSksIDIgJiByICYmIHR5cGVvZiBuICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgZm9yICh2YXIgbCBpbiBuKVxuICAgICAgICAgICAgaS5kKGEsIGwsIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5bY107XG4gICAgICAgICAgICB9LmJpbmQobnVsbCwgbCkpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0sIGkubiA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdmFyIHIgPSBuICYmIG4uX19lc01vZHVsZSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBuLmRlZmF1bHQ7XG4gICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGkuZChyLCBcImFcIiwgciksIHI7XG4gICAgICB9LCBpLm8gPSBmdW5jdGlvbihuLCByKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobiwgcik7XG4gICAgICB9LCBpLnAgPSBcIi9cIiwgaShpLnMgPSA0KTtcbiAgICB9KFtmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICB2YXIgbiA9IGkoMSksIHIgPSBpKDIpO1xuICAgICAgdHlwZW9mIChyID0gci5fX2VzTW9kdWxlID8gci5kZWZhdWx0IDogcikgPT0gXCJzdHJpbmdcIiAmJiAociA9IFtbdC5pLCByLCBcIlwiXV0pO1xuICAgICAgdmFyIGEgPSB7IGluc2VydDogXCJoZWFkXCIsIHNpbmdsZXRvbjogITEgfTtcbiAgICAgIG4ociwgYSksIHQuZXhwb3J0cyA9IHIubG9jYWxzIHx8IHt9O1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgIHZhciBuLCByID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuID09PSB2b2lkIDAgJiYgKG4gPSAhISh3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYikpLCBuO1xuICAgICAgfSwgYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgeSA9IHt9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgICAgIGlmICh5W3hdID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHZhciB3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih4KTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgdyBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudClcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB3ID0gdy5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgdyA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlbeF0gPSB3O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geVt4XTtcbiAgICAgICAgfTtcbiAgICAgIH0oKSwgbCA9IFtdO1xuICAgICAgZnVuY3Rpb24gYyh5KSB7XG4gICAgICAgIGZvciAodmFyIHggPSAtMSwgdyA9IDA7IHcgPCBsLmxlbmd0aDsgdysrKVxuICAgICAgICAgIGlmIChsW3ddLmlkZW50aWZpZXIgPT09IHkpIHtcbiAgICAgICAgICAgIHggPSB3O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHUoeSwgeCkge1xuICAgICAgICBmb3IgKHZhciB3ID0ge30sIE0gPSBbXSwgTiA9IDA7IE4gPCB5Lmxlbmd0aDsgTisrKSB7XG4gICAgICAgICAgdmFyIGIgPSB5W05dLCBnID0geC5iYXNlID8gYlswXSArIHguYmFzZSA6IGJbMF0sIEUgPSB3W2ddIHx8IDAsIEMgPSBcIlwiLmNvbmNhdChnLCBcIiBcIikuY29uY2F0KEUpO1xuICAgICAgICAgIHdbZ10gPSBFICsgMTtcbiAgICAgICAgICB2YXIgTyA9IGMoQyksIEkgPSB7IGNzczogYlsxXSwgbWVkaWE6IGJbMl0sIHNvdXJjZU1hcDogYlszXSB9O1xuICAgICAgICAgIE8gIT09IC0xID8gKGxbT10ucmVmZXJlbmNlcysrLCBsW09dLnVwZGF0ZXIoSSkpIDogbC5wdXNoKHsgaWRlbnRpZmllcjogQywgdXBkYXRlcjogUihJLCB4KSwgcmVmZXJlbmNlczogMSB9KSwgTS5wdXNoKEMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaCh5KSB7XG4gICAgICAgIHZhciB4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLCB3ID0geS5hdHRyaWJ1dGVzIHx8IHt9O1xuICAgICAgICBpZiAody5ub25jZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgdmFyIE0gPSBpLm5jO1xuICAgICAgICAgIE0gJiYgKHcubm9uY2UgPSBNKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmtleXModykuZm9yRWFjaChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgeC5zZXRBdHRyaWJ1dGUoYiwgd1tiXSk7XG4gICAgICAgIH0pLCB0eXBlb2YgeS5pbnNlcnQgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgIHkuaW5zZXJ0KHgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgTiA9IGEoeS5pbnNlcnQgfHwgXCJoZWFkXCIpO1xuICAgICAgICAgIGlmICghTilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgICAgICAgTi5hcHBlbmRDaGlsZCh4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICAgIHZhciBmLCB2ID0gKGYgPSBbXSwgZnVuY3Rpb24oeSwgeCkge1xuICAgICAgICByZXR1cm4gZlt5XSA9IHgsIGYuZmlsdGVyKEJvb2xlYW4pLmpvaW4oYFxuYCk7XG4gICAgICB9KTtcbiAgICAgIGZ1bmN0aW9uIHAoeSwgeCwgdywgTSkge1xuICAgICAgICB2YXIgTiA9IHcgPyBcIlwiIDogTS5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChNLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChNLmNzcywgXCJ9XCIpIDogTS5jc3M7XG4gICAgICAgIGlmICh5LnN0eWxlU2hlZXQpXG4gICAgICAgICAgeS5zdHlsZVNoZWV0LmNzc1RleHQgPSB2KHgsIE4pO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKE4pLCBnID0geS5jaGlsZE5vZGVzO1xuICAgICAgICAgIGdbeF0gJiYgeS5yZW1vdmVDaGlsZChnW3hdKSwgZy5sZW5ndGggPyB5Lmluc2VydEJlZm9yZShiLCBnW3hdKSA6IHkuYXBwZW5kQ2hpbGQoYik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGsoeSwgeCwgdykge1xuICAgICAgICB2YXIgTSA9IHcuY3NzLCBOID0gdy5tZWRpYSwgYiA9IHcuc291cmNlTWFwO1xuICAgICAgICBpZiAoTiA/IHkuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgTikgOiB5LnJlbW92ZUF0dHJpYnV0ZShcIm1lZGlhXCIpLCBiICYmIGJ0b2EgJiYgKE0gKz0gYFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxgLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShiKSkpKSwgXCIgKi9cIikpLCB5LnN0eWxlU2hlZXQpXG4gICAgICAgICAgeS5zdHlsZVNoZWV0LmNzc1RleHQgPSBNO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmb3IgKDsgeS5maXJzdENoaWxkOyApXG4gICAgICAgICAgICB5LnJlbW92ZUNoaWxkKHkuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgeS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShNKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBfID0gbnVsbCwgQSA9IDA7XG4gICAgICBmdW5jdGlvbiBSKHksIHgpIHtcbiAgICAgICAgdmFyIHcsIE0sIE47XG4gICAgICAgIGlmICh4LnNpbmdsZXRvbikge1xuICAgICAgICAgIHZhciBiID0gQSsrO1xuICAgICAgICAgIHcgPSBfIHx8IChfID0gaCh4KSksIE0gPSBwLmJpbmQobnVsbCwgdywgYiwgITEpLCBOID0gcC5iaW5kKG51bGwsIHcsIGIsICEwKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgdyA9IGgoeCksIE0gPSBrLmJpbmQobnVsbCwgdywgeCksIE4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIChmdW5jdGlvbihnKSB7XG4gICAgICAgICAgICAgIGlmIChnLnBhcmVudE5vZGUgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgICBnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk7XG4gICAgICAgICAgICB9KSh3KTtcbiAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4gTSh5KSwgZnVuY3Rpb24oZykge1xuICAgICAgICAgIGlmIChnKSB7XG4gICAgICAgICAgICBpZiAoZy5jc3MgPT09IHkuY3NzICYmIGcubWVkaWEgPT09IHkubWVkaWEgJiYgZy5zb3VyY2VNYXAgPT09IHkuc291cmNlTWFwKVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBNKHkgPSBnKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIE4oKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKHksIHgpIHtcbiAgICAgICAgKHggPSB4IHx8IHt9KS5zaW5nbGV0b24gfHwgdHlwZW9mIHguc2luZ2xldG9uID09IFwiYm9vbGVhblwiIHx8ICh4LnNpbmdsZXRvbiA9IHIoKSk7XG4gICAgICAgIHZhciB3ID0gdSh5ID0geSB8fCBbXSwgeCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihNKSB7XG4gICAgICAgICAgaWYgKE0gPSBNIHx8IFtdLCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoTSkgPT09IFwiW29iamVjdCBBcnJheV1cIikge1xuICAgICAgICAgICAgZm9yICh2YXIgTiA9IDA7IE4gPCB3Lmxlbmd0aDsgTisrKSB7XG4gICAgICAgICAgICAgIHZhciBiID0gYyh3W05dKTtcbiAgICAgICAgICAgICAgbFtiXS5yZWZlcmVuY2VzLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBnID0gdShNLCB4KSwgRSA9IDA7IEUgPCB3Lmxlbmd0aDsgRSsrKSB7XG4gICAgICAgICAgICAgIHZhciBDID0gYyh3W0VdKTtcbiAgICAgICAgICAgICAgbFtDXS5yZWZlcmVuY2VzID09PSAwICYmIChsW0NdLnVwZGF0ZXIoKSwgbC5zcGxpY2UoQywgMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdyA9IGc7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9LCBmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICAobyA9IGkoMykoITEpKS5wdXNoKFt0LmksIGAuY2UtcGFyYWdyYXBoIHtcbiAgICBsaW5lLWhlaWdodDogMS42ZW07XG4gICAgb3V0bGluZTogbm9uZTtcbn1cblxuLmNlLXBhcmFncmFwaFtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTo6YmVmb3Jle1xuICBjb250ZW50OiBhdHRyKGRhdGEtcGxhY2Vob2xkZXIpO1xuICBjb2xvcjogIzcwNzY4NDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgb3BhY2l0eTogMDtcbn1cblxuLyoqIFNob3cgcGxhY2Vob2xkZXIgYXQgdGhlIGZpcnN0IHBhcmFncmFwaCBpZiBFZGl0b3IgaXMgZW1wdHkgKi9cbi5jb2RleC1lZGl0b3ItLWVtcHR5IC5jZS1ibG9jazpmaXJzdC1jaGlsZCAuY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OjpiZWZvcmUge1xuICBvcGFjaXR5OiAxO1xufVxuXG4uY29kZXgtZWRpdG9yLS10b29sYm94LW9wZW5lZCAuY2UtYmxvY2s6Zmlyc3QtY2hpbGQgLmNlLXBhcmFncmFwaFtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTo6YmVmb3JlLFxuLmNvZGV4LWVkaXRvci0tZW1wdHkgLmNlLWJsb2NrOmZpcnN0LWNoaWxkIC5jZS1wYXJhZ3JhcGhbZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6Zm9jdXM6OmJlZm9yZSB7XG4gIG9wYWNpdHk6IDA7XG59XG5cbi5jZS1wYXJhZ3JhcGggcDpmaXJzdC1vZi10eXBle1xuICAgIG1hcmdpbi10b3A6IDA7XG59XG5cbi5jZS1wYXJhZ3JhcGggcDpsYXN0LW9mLXR5cGV7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbn1cbmAsIFwiXCJdKSwgdC5leHBvcnRzID0gbztcbiAgICB9LCBmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHZhciByID0gW107XG4gICAgICAgIHJldHVybiByLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHZhciBsID0gZnVuY3Rpb24oYywgdSkge1xuICAgICAgICAgICAgICB2YXIgaCA9IGNbMV0gfHwgXCJcIiwgZiA9IGNbM107XG4gICAgICAgICAgICAgIGlmICghZilcbiAgICAgICAgICAgICAgICByZXR1cm4gaDtcbiAgICAgICAgICAgICAgaWYgKHUgJiYgdHlwZW9mIGJ0b2EgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSAoayA9IGYsIF8gPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShrKSkpKSwgQSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KF8pLCBcIi8qIyBcIi5jb25jYXQoQSwgXCIgKi9cIikpLCBwID0gZi5zb3VyY2VzLm1hcChmdW5jdGlvbihSKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChmLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KFIsIFwiICovXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbaF0uY29uY2F0KHApLmNvbmNhdChbdl0pLmpvaW4oYFxuYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGssIF8sIEE7XG4gICAgICAgICAgICAgIHJldHVybiBbaF0uam9pbihgXG5gKTtcbiAgICAgICAgICAgIH0oYSwgbik7XG4gICAgICAgICAgICByZXR1cm4gYVsyXSA/IFwiQG1lZGlhIFwiLmNvbmNhdChhWzJdLCBcIiB7XCIpLmNvbmNhdChsLCBcIn1cIikgOiBsO1xuICAgICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICAgIH0sIHIuaSA9IGZ1bmN0aW9uKGEsIGwsIGMpIHtcbiAgICAgICAgICB0eXBlb2YgYSA9PSBcInN0cmluZ1wiICYmIChhID0gW1tudWxsLCBhLCBcIlwiXV0pO1xuICAgICAgICAgIHZhciB1ID0ge307XG4gICAgICAgICAgaWYgKGMpXG4gICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IHRoaXMubGVuZ3RoOyBoKyspIHtcbiAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzW2hdWzBdO1xuICAgICAgICAgICAgICBmICE9IG51bGwgJiYgKHVbZl0gPSAhMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBhLmxlbmd0aDsgdisrKSB7XG4gICAgICAgICAgICB2YXIgcCA9IFtdLmNvbmNhdChhW3ZdKTtcbiAgICAgICAgICAgIGMgJiYgdVtwWzBdXSB8fCAobCAmJiAocFsyXSA/IHBbMl0gPSBcIlwiLmNvbmNhdChsLCBcIiBhbmQgXCIpLmNvbmNhdChwWzJdKSA6IHBbMl0gPSBsKSwgci5wdXNoKHApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHI7XG4gICAgICB9O1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgIGkucihvKSwgaS5kKG8sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9KSwgaSgwKTtcbiAgICAgIGZ1bmN0aW9uIG4obCwgYykge1xuICAgICAgICBmb3IgKHZhciB1ID0gMDsgdSA8IGMubGVuZ3RoOyB1KyspIHtcbiAgICAgICAgICB2YXIgaCA9IGNbdV07XG4gICAgICAgICAgaC5lbnVtZXJhYmxlID0gaC5lbnVtZXJhYmxlIHx8ICExLCBoLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gaCAmJiAoaC53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGwsIGgua2V5LCBoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcihsLCBjLCB1KSB7XG4gICAgICAgIHJldHVybiBjICYmIG4obC5wcm90b3R5cGUsIGMpLCB1ICYmIG4obCwgdSksIGw7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEJhc2UgUGFyYWdyYXBoIEJsb2NrIGZvciB0aGUgRWRpdG9yLmpzLlxuICAgICAgICogUmVwcmVzZW50cyBzaW1wbGUgcGFyYWdyYXBoXG4gICAgICAgKlxuICAgICAgICogQGF1dGhvciBDb2RlWCAodGVhbUBjb2RleC5zbylcbiAgICAgICAqIEBjb3B5cmlnaHQgQ29kZVggMjAxOFxuICAgICAgICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gICAgICAgKi9cbiAgICAgIHZhciBhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmN0aW9uIGwoYykge1xuICAgICAgICAgIHZhciB1ID0gYy5kYXRhLCBoID0gYy5jb25maWcsIGYgPSBjLmFwaSwgdiA9IGMucmVhZE9ubHk7XG4gICAgICAgICAgKGZ1bmN0aW9uKHAsIGspIHtcbiAgICAgICAgICAgIGlmICghKHAgaW5zdGFuY2VvZiBrKSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgICB9KSh0aGlzLCBsKSwgdGhpcy5hcGkgPSBmLCB0aGlzLnJlYWRPbmx5ID0gdiwgdGhpcy5fQ1NTID0geyBibG9jazogdGhpcy5hcGkuc3R5bGVzLmJsb2NrLCB3cmFwcGVyOiBcImNlLXBhcmFncmFwaFwiIH0sIHRoaXMucmVhZE9ubHkgfHwgKHRoaXMub25LZXlVcCA9IHRoaXMub25LZXlVcC5iaW5kKHRoaXMpKSwgdGhpcy5fcGxhY2Vob2xkZXIgPSBoLnBsYWNlaG9sZGVyID8gaC5wbGFjZWhvbGRlciA6IGwuREVGQVVMVF9QTEFDRUhPTERFUiwgdGhpcy5fZGF0YSA9IHt9LCB0aGlzLl9lbGVtZW50ID0gdGhpcy5kcmF3VmlldygpLCB0aGlzLl9wcmVzZXJ2ZUJsYW5rID0gaC5wcmVzZXJ2ZUJsYW5rICE9PSB2b2lkIDAgJiYgaC5wcmVzZXJ2ZUJsYW5rLCB0aGlzLmRhdGEgPSB1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByKGwsIG51bGwsIFt7IGtleTogXCJERUZBVUxUX1BMQUNFSE9MREVSXCIsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH0gfV0pLCByKGwsIFt7IGtleTogXCJvbktleVVwXCIsIHZhbHVlOiBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgYy5jb2RlICE9PSBcIkJhY2tzcGFjZVwiICYmIGMuY29kZSAhPT0gXCJEZWxldGVcIiB8fCB0aGlzLl9lbGVtZW50LnRleHRDb250ZW50ID09PSBcIlwiICYmICh0aGlzLl9lbGVtZW50LmlubmVySFRNTCA9IFwiXCIpO1xuICAgICAgICB9IH0sIHsga2V5OiBcImRyYXdWaWV3XCIsIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7XG4gICAgICAgICAgcmV0dXJuIGMuY2xhc3NMaXN0LmFkZCh0aGlzLl9DU1Mud3JhcHBlciwgdGhpcy5fQ1NTLmJsb2NrKSwgYy5jb250ZW50RWRpdGFibGUgPSAhMSwgYy5kYXRhc2V0LnBsYWNlaG9sZGVyID0gdGhpcy5hcGkuaTE4bi50KHRoaXMuX3BsYWNlaG9sZGVyKSwgdGhpcy5yZWFkT25seSB8fCAoYy5jb250ZW50RWRpdGFibGUgPSAhMCwgYy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5vbktleVVwKSksIGM7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwicmVuZGVyXCIsIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICAgICAgfSB9LCB7IGtleTogXCJtZXJnZVwiLCB2YWx1ZTogZnVuY3Rpb24oYykge1xuICAgICAgICAgIHZhciB1ID0geyB0ZXh0OiB0aGlzLmRhdGEudGV4dCArIGMudGV4dCB9O1xuICAgICAgICAgIHRoaXMuZGF0YSA9IHU7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwidmFsaWRhdGVcIiwgdmFsdWU6IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICByZXR1cm4gIShjLnRleHQudHJpbSgpID09PSBcIlwiICYmICF0aGlzLl9wcmVzZXJ2ZUJsYW5rKTtcbiAgICAgICAgfSB9LCB7IGtleTogXCJzYXZlXCIsIHZhbHVlOiBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdGV4dDogYy5pbm5lckhUTUwgfTtcbiAgICAgICAgfSB9LCB7IGtleTogXCJvblBhc3RlXCIsIHZhbHVlOiBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgdmFyIHUgPSB7IHRleHQ6IGMuZGV0YWlsLmRhdGEuaW5uZXJIVE1MIH07XG4gICAgICAgICAgdGhpcy5kYXRhID0gdTtcbiAgICAgICAgfSB9LCB7IGtleTogXCJkYXRhXCIsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGMgPSB0aGlzLl9lbGVtZW50LmlubmVySFRNTDtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS50ZXh0ID0gYywgdGhpcy5fZGF0YTtcbiAgICAgICAgfSwgc2V0OiBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgdGhpcy5fZGF0YSA9IGMgfHwge30sIHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fZGF0YS50ZXh0IHx8IFwiXCI7XG4gICAgICAgIH0gfV0sIFt7IGtleTogXCJjb252ZXJzaW9uQ29uZmlnXCIsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZXhwb3J0OiBcInRleHRcIiwgaW1wb3J0OiBcInRleHRcIiB9O1xuICAgICAgICB9IH0sIHsga2V5OiBcInNhbml0aXplXCIsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdGV4dDogeyBicjogITAgfSB9O1xuICAgICAgICB9IH0sIHsga2V5OiBcImlzUmVhZE9ubHlTdXBwb3J0ZWRcIiwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwicGFzdGVDb25maWdcIiwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4geyB0YWdzOiBbXCJQXCJdIH07XG4gICAgICAgIH0gfSwgeyBrZXk6IFwidG9vbGJveFwiLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB7IGljb246ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOCA5VjcuMkM4IDcuMDg5NTQgOC4wODk1NCA3IDguMiA3TDEyIDdNMTYgOVY3LjJDMTYgNy4wODk1NCAxNS45MTA1IDcgMTUuOCA3TDEyIDdNMTIgN0wxMiAxN00xMiAxN0gxME0xMiAxN0gxNFwiLz48L3N2Zz4nLCB0aXRsZTogXCJUZXh0XCIgfTtcbiAgICAgICAgfSB9XSksIGw7XG4gICAgICB9KCk7XG4gICAgfV0pLmRlZmF1bHQ7XG4gIH0pO1xufSkoZWkpO1xuY29uc3QgdGkgPSAvKiBAX19QVVJFX18gKi8geGUoTmUpO1xuY2xhc3MgJGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbW1hbmROYW1lID0gXCJib2xkXCIsIHRoaXMuQ1NTID0ge1xuICAgICAgYnV0dG9uOiBcImNlLWlubGluZS10b29sXCIsXG4gICAgICBidXR0b25BY3RpdmU6IFwiY2UtaW5saW5lLXRvb2wtLWFjdGl2ZVwiLFxuICAgICAgYnV0dG9uTW9kaWZpZXI6IFwiY2UtaW5saW5lLXRvb2wtLWJvbGRcIlxuICAgIH0sIHRoaXMubm9kZXMgPSB7XG4gICAgICBidXR0b246IHZvaWQgMFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNhbml0aXplciBSdWxlXG4gICAqIExlYXZlIDxiPiB0YWdzXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHNhbml0aXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICBiOiB7fVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBidXR0b24gZm9yIElubGluZSBUb29sYmFyXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSwgdGhpcy5ub2Rlcy5idXR0b24udHlwZSA9IFwiYnV0dG9uXCIsIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uLCB0aGlzLkNTUy5idXR0b25Nb2RpZmllciksIHRoaXMubm9kZXMuYnV0dG9uLmlubmVySFRNTCA9IEVvLCB0aGlzLm5vZGVzLmJ1dHRvbjtcbiAgfVxuICAvKipcbiAgICogV3JhcCByYW5nZSB3aXRoIDxiPiB0YWdcbiAgICovXG4gIHN1cnJvdW5kKCkge1xuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuY29tbWFuZE5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBzZWxlY3Rpb24gYW5kIHNldCBhY3RpdmF0ZWQgc3RhdGUgdG8gYnV0dG9uIGlmIHRoZXJlIGFyZSA8Yj4gdGFnXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY2hlY2tTdGF0ZSgpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUodGhpcy5jb21tYW5kTmFtZSk7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC50b2dnbGUodGhpcy5DU1MuYnV0dG9uQWN0aXZlLCBlKSwgZTtcbiAgfVxuICAvKipcbiAgICogU2V0IGEgc2hvcnRjdXRcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgc2hvcnRjdXQoKSB7XG4gICAgcmV0dXJuIFwiQ01EK0JcIjtcbiAgfVxufVxuJGUuaXNJbmxpbmUgPSAhMDtcbiRlLnRpdGxlID0gXCJCb2xkXCI7XG5jbGFzcyBXZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29tbWFuZE5hbWUgPSBcIml0YWxpY1wiLCB0aGlzLkNTUyA9IHtcbiAgICAgIGJ1dHRvbjogXCJjZS1pbmxpbmUtdG9vbFwiLFxuICAgICAgYnV0dG9uQWN0aXZlOiBcImNlLWlubGluZS10b29sLS1hY3RpdmVcIixcbiAgICAgIGJ1dHRvbk1vZGlmaWVyOiBcImNlLWlubGluZS10b29sLS1pdGFsaWNcIlxuICAgIH0sIHRoaXMubm9kZXMgPSB7XG4gICAgICBidXR0b246IG51bGxcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTYW5pdGl6ZXIgUnVsZVxuICAgKiBMZWF2ZSA8aT4gdGFnc1xuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBzYW5pdGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaToge31cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYnV0dG9uIGZvciBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksIHRoaXMubm9kZXMuYnV0dG9uLnR5cGUgPSBcImJ1dHRvblwiLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmJ1dHRvbiwgdGhpcy5DU1MuYnV0dG9uTW9kaWZpZXIpLCB0aGlzLm5vZGVzLmJ1dHRvbi5pbm5lckhUTUwgPSBTbywgdGhpcy5ub2Rlcy5idXR0b247XG4gIH1cbiAgLyoqXG4gICAqIFdyYXAgcmFuZ2Ugd2l0aCA8aT4gdGFnXG4gICAqL1xuICBzdXJyb3VuZCgpIHtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmROYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgc2VsZWN0aW9uIGFuZCBzZXQgYWN0aXZhdGVkIHN0YXRlIHRvIGJ1dHRvbiBpZiB0aGVyZSBhcmUgPGk+IHRhZ1xuICAgKi9cbiAgY2hlY2tTdGF0ZSgpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUodGhpcy5jb21tYW5kTmFtZSk7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC50b2dnbGUodGhpcy5DU1MuYnV0dG9uQWN0aXZlLCBlKSwgZTtcbiAgfVxuICAvKipcbiAgICogU2V0IGEgc2hvcnRjdXRcbiAgICovXG4gIGdldCBzaG9ydGN1dCgpIHtcbiAgICByZXR1cm4gXCJDTUQrSVwiO1xuICB9XG59XG5XZS5pc0lubGluZSA9ICEwO1xuV2UudGl0bGUgPSBcIkl0YWxpY1wiO1xuY2xhc3MgWWUge1xuICAvKipcbiAgICogQHBhcmFtIGFwaSAtIEVkaXRvci5qcyBBUElcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgYXBpOiBlIH0pIHtcbiAgICB0aGlzLmNvbW1hbmRMaW5rID0gXCJjcmVhdGVMaW5rXCIsIHRoaXMuY29tbWFuZFVubGluayA9IFwidW5saW5rXCIsIHRoaXMuRU5URVJfS0VZID0gMTMsIHRoaXMuQ1NTID0ge1xuICAgICAgYnV0dG9uOiBcImNlLWlubGluZS10b29sXCIsXG4gICAgICBidXR0b25BY3RpdmU6IFwiY2UtaW5saW5lLXRvb2wtLWFjdGl2ZVwiLFxuICAgICAgYnV0dG9uTW9kaWZpZXI6IFwiY2UtaW5saW5lLXRvb2wtLWxpbmtcIixcbiAgICAgIGJ1dHRvblVubGluazogXCJjZS1pbmxpbmUtdG9vbC0tdW5saW5rXCIsXG4gICAgICBpbnB1dDogXCJjZS1pbmxpbmUtdG9vbC1pbnB1dFwiLFxuICAgICAgaW5wdXRTaG93ZWQ6IFwiY2UtaW5saW5lLXRvb2wtaW5wdXQtLXNob3dlZFwiXG4gICAgfSwgdGhpcy5ub2RlcyA9IHtcbiAgICAgIGJ1dHRvbjogbnVsbCxcbiAgICAgIGlucHV0OiBudWxsXG4gICAgfSwgdGhpcy5pbnB1dE9wZW5lZCA9ICExLCB0aGlzLnRvb2xiYXIgPSBlLnRvb2xiYXIsIHRoaXMuaW5saW5lVG9vbGJhciA9IGUuaW5saW5lVG9vbGJhciwgdGhpcy5ub3RpZmllciA9IGUubm90aWZpZXIsIHRoaXMuaTE4biA9IGUuaTE4biwgdGhpcy5zZWxlY3Rpb24gPSBuZXcgbSgpO1xuICB9XG4gIC8qKlxuICAgKiBTYW5pdGl6ZXIgUnVsZVxuICAgKiBMZWF2ZSA8YT4gdGFnc1xuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBzYW5pdGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYToge1xuICAgICAgICBocmVmOiAhMCxcbiAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICByZWw6IFwibm9mb2xsb3dcIlxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBidXR0b24gZm9yIElubGluZSBUb29sYmFyXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSwgdGhpcy5ub2Rlcy5idXR0b24udHlwZSA9IFwiYnV0dG9uXCIsIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uLCB0aGlzLkNTUy5idXR0b25Nb2RpZmllciksIHRoaXMubm9kZXMuYnV0dG9uLmlubmVySFRNTCA9IHFlLCB0aGlzLm5vZGVzLmJ1dHRvbjtcbiAgfVxuICAvKipcbiAgICogSW5wdXQgZm9yIHRoZSBsaW5rXG4gICAqL1xuICByZW5kZXJBY3Rpb25zKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLCB0aGlzLm5vZGVzLmlucHV0LnBsYWNlaG9sZGVyID0gdGhpcy5pMThuLnQoXCJBZGQgYSBsaW5rXCIpLCB0aGlzLm5vZGVzLmlucHV0LmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuaW5wdXQpLCB0aGlzLm5vZGVzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XG4gICAgICBlLmtleUNvZGUgPT09IHRoaXMuRU5URVJfS0VZICYmIHRoaXMuZW50ZXJQcmVzc2VkKGUpO1xuICAgIH0pLCB0aGlzLm5vZGVzLmlucHV0O1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgY2xpY2tzIG9uIHRoZSBJbmxpbmUgVG9vbGJhciBpY29uXG4gICAqXG4gICAqIEBwYXJhbSB7UmFuZ2V9IHJhbmdlIC0gcmFuZ2UgdG8gd3JhcCB3aXRoIGxpbmtcbiAgICovXG4gIHN1cnJvdW5kKGUpIHtcbiAgICBpZiAoZSkge1xuICAgICAgdGhpcy5pbnB1dE9wZW5lZCA/ICh0aGlzLnNlbGVjdGlvbi5yZXN0b3JlKCksIHRoaXMuc2VsZWN0aW9uLnJlbW92ZUZha2VCYWNrZ3JvdW5kKCkpIDogKHRoaXMuc2VsZWN0aW9uLnNldEZha2VCYWNrZ3JvdW5kKCksIHRoaXMuc2VsZWN0aW9uLnNhdmUoKSk7XG4gICAgICBjb25zdCB0ID0gdGhpcy5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyhcIkFcIik7XG4gICAgICBpZiAodCkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbi5leHBhbmRUb1RhZyh0KSwgdGhpcy51bmxpbmsoKSwgdGhpcy5jbG9zZUFjdGlvbnMoKSwgdGhpcy5jaGVja1N0YXRlKCksIHRoaXMudG9vbGJhci5jbG9zZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudG9nZ2xlQWN0aW9ucygpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBzZWxlY3Rpb24gYW5kIHNldCBhY3RpdmF0ZWQgc3RhdGUgdG8gYnV0dG9uIGlmIHRoZXJlIGFyZSA8YT4gdGFnXG4gICAqL1xuICBjaGVja1N0YXRlKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLnNlbGVjdGlvbi5maW5kUGFyZW50VGFnKFwiQVwiKTtcbiAgICBpZiAoZSkge1xuICAgICAgdGhpcy5ub2Rlcy5idXR0b24uaW5uZXJIVE1MID0gT28sIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uVW5saW5rKSwgdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5idXR0b25BY3RpdmUpLCB0aGlzLm9wZW5BY3Rpb25zKCk7XG4gICAgICBjb25zdCB0ID0gZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgdGhpcy5ub2Rlcy5pbnB1dC52YWx1ZSA9IHQgIT09IFwibnVsbFwiID8gdCA6IFwiXCIsIHRoaXMuc2VsZWN0aW9uLnNhdmUoKTtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMubm9kZXMuYnV0dG9uLmlubmVySFRNTCA9IHFlLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmJ1dHRvblVubGluayksIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1MuYnV0dG9uQWN0aXZlKTtcbiAgICByZXR1cm4gISFlO1xuICB9XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBjYWxsZWQgd2l0aCBJbmxpbmUgVG9vbGJhciBjbG9zaW5nXG4gICAqL1xuICBjbGVhcigpIHtcbiAgICB0aGlzLmNsb3NlQWN0aW9ucygpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgYSBzaG9ydGN1dFxuICAgKi9cbiAgZ2V0IHNob3J0Y3V0KCkge1xuICAgIHJldHVybiBcIkNNRCtLXCI7XG4gIH1cbiAgLyoqXG4gICAqIFNob3cvY2xvc2UgbGluayBpbnB1dFxuICAgKi9cbiAgdG9nZ2xlQWN0aW9ucygpIHtcbiAgICB0aGlzLmlucHV0T3BlbmVkID8gdGhpcy5jbG9zZUFjdGlvbnMoITEpIDogdGhpcy5vcGVuQWN0aW9ucyghMCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbmVlZEZvY3VzIC0gb24gbGluayBjcmVhdGlvbiB3ZSBuZWVkIHRvIGZvY3VzIGlucHV0LiBPbiBlZGl0aW5nIC0gbm9wZS5cbiAgICovXG4gIG9wZW5BY3Rpb25zKGUgPSAhMSkge1xuICAgIHRoaXMubm9kZXMuaW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5pbnB1dFNob3dlZCksIGUgJiYgdGhpcy5ub2Rlcy5pbnB1dC5mb2N1cygpLCB0aGlzLmlucHV0T3BlbmVkID0gITA7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlIGlucHV0XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xlYXJTYXZlZFNlbGVjdGlvbiBcdTIwMTQgd2UgZG9uJ3QgbmVlZCB0byBjbGVhciBzYXZlZCBzZWxlY3Rpb25cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gdG9nZ2xlLWNsaWNrcyBvbiB0aGUgaWNvbiBvZiBvcGVuZWQgVG9vbGJhclxuICAgKi9cbiAgY2xvc2VBY3Rpb25zKGUgPSAhMCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbi5pc0Zha2VCYWNrZ3JvdW5kRW5hYmxlZCkge1xuICAgICAgY29uc3QgdCA9IG5ldyBtKCk7XG4gICAgICB0LnNhdmUoKSwgdGhpcy5zZWxlY3Rpb24ucmVzdG9yZSgpLCB0aGlzLnNlbGVjdGlvbi5yZW1vdmVGYWtlQmFja2dyb3VuZCgpLCB0LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgdGhpcy5ub2Rlcy5pbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmlucHV0U2hvd2VkKSwgdGhpcy5ub2Rlcy5pbnB1dC52YWx1ZSA9IFwiXCIsIGUgJiYgdGhpcy5zZWxlY3Rpb24uY2xlYXJTYXZlZCgpLCB0aGlzLmlucHV0T3BlbmVkID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIEVudGVyIHByZXNzZWQgb24gaW5wdXRcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGVudGVyIGtleWRvd24gZXZlbnRcbiAgICovXG4gIGVudGVyUHJlc3NlZChlKSB7XG4gICAgbGV0IHQgPSB0aGlzLm5vZGVzLmlucHV0LnZhbHVlIHx8IFwiXCI7XG4gICAgaWYgKCF0LnRyaW0oKSkge1xuICAgICAgdGhpcy5zZWxlY3Rpb24ucmVzdG9yZSgpLCB0aGlzLnVubGluaygpLCBlLnByZXZlbnREZWZhdWx0KCksIHRoaXMuY2xvc2VBY3Rpb25zKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy52YWxpZGF0ZVVSTCh0KSkge1xuICAgICAgdGhpcy5ub3RpZmllci5zaG93KHtcbiAgICAgICAgbWVzc2FnZTogXCJQYXN0ZWQgbGluayBpcyBub3QgdmFsaWQuXCIsXG4gICAgICAgIHN0eWxlOiBcImVycm9yXCJcbiAgICAgIH0pLCBUKFwiSW5jb3JyZWN0IExpbmsgcGFzdGVkXCIsIFwid2FyblwiLCB0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdCA9IHRoaXMucHJlcGFyZUxpbmsodCksIHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSwgdGhpcy5zZWxlY3Rpb24ucmVtb3ZlRmFrZUJhY2tncm91bmQoKSwgdGhpcy5pbnNlcnRMaW5rKHQpLCBlLnByZXZlbnREZWZhdWx0KCksIGUuc3RvcFByb3BhZ2F0aW9uKCksIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIHRoaXMuc2VsZWN0aW9uLmNvbGxhcHNlVG9FbmQoKSwgdGhpcy5pbmxpbmVUb29sYmFyLmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIERldGVjdHMgaWYgcGFzc2VkIHN0cmluZyBpcyBVUkxcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIHN0cmluZyB0byB2YWxpZGF0ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHZhbGlkYXRlVVJMKGUpIHtcbiAgICByZXR1cm4gIS9cXHMvLnRlc3QoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3MgbGluayBiZWZvcmUgaW5qZWN0aW9uXG4gICAqIC0gc2FuaXRpemVcbiAgICogLSBhZGQgcHJvdG9jb2wgZm9yIGxpbmtzIGxpa2UgJ2dvb2dsZS5jb20nXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0gcmF3IHVzZXIgaW5wdXRcbiAgICovXG4gIHByZXBhcmVMaW5rKGUpIHtcbiAgICByZXR1cm4gZSA9IGUudHJpbSgpLCBlID0gdGhpcy5hZGRQcm90b2NvbChlKSwgZTtcbiAgfVxuICAvKipcbiAgICogQWRkICdodHRwJyBwcm90b2NvbCB0byB0aGUgbGlua3MgbGlrZSAndmMucnUnLCAnZ29vZ2xlLmNvbSdcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxpbmsgLSBzdHJpbmcgdG8gcHJvY2Vzc1xuICAgKi9cbiAgYWRkUHJvdG9jb2woZSkge1xuICAgIGlmICgvXihcXHcrKTooXFwvXFwvKT8vLnRlc3QoZSkpXG4gICAgICByZXR1cm4gZTtcbiAgICBjb25zdCB0ID0gL15cXC9bXi9cXHNdLy50ZXN0KGUpLCBvID0gZS5zdWJzdHJpbmcoMCwgMSkgPT09IFwiI1wiLCBpID0gL15cXC9cXC9bXi9cXHNdLy50ZXN0KGUpO1xuICAgIHJldHVybiAhdCAmJiAhbyAmJiAhaSAmJiAoZSA9IFwiaHR0cDovL1wiICsgZSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydHMgPGE+IHRhZyB3aXRoIFwiaHJlZlwiXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0gXCJocmVmXCIgdmFsdWVcbiAgICovXG4gIGluc2VydExpbmsoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLnNlbGVjdGlvbi5maW5kUGFyZW50VGFnKFwiQVwiKTtcbiAgICB0ICYmIHRoaXMuc2VsZWN0aW9uLmV4cGFuZFRvVGFnKHQpLCBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmRMaW5rLCAhMSwgZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgPGE+IHRhZ1xuICAgKi9cbiAgdW5saW5rKCkge1xuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuY29tbWFuZFVubGluayk7XG4gIH1cbn1cblllLmlzSW5saW5lID0gITA7XG5ZZS50aXRsZSA9IFwiTGlua1wiO1xuY2xhc3MgeXQge1xuICAvKipcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBjb25zdHJ1Y3RvciBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmRhdGEgLSBzdHViIHRvb2wgZGF0YVxuICAgKiBAcGFyYW0gb3B0aW9ucy5hcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGRhdGE6IGUsIGFwaTogdCB9KSB7XG4gICAgdGhpcy5DU1MgPSB7XG4gICAgICB3cmFwcGVyOiBcImNlLXN0dWJcIixcbiAgICAgIGluZm86IFwiY2Utc3R1Yl9faW5mb1wiLFxuICAgICAgdGl0bGU6IFwiY2Utc3R1Yl9fdGl0bGVcIixcbiAgICAgIHN1YnRpdGxlOiBcImNlLXN0dWJfX3N1YnRpdGxlXCJcbiAgICB9LCB0aGlzLmFwaSA9IHQsIHRoaXMudGl0bGUgPSBlLnRpdGxlIHx8IHRoaXMuYXBpLmkxOG4udChcIkVycm9yXCIpLCB0aGlzLnN1YnRpdGxlID0gdGhpcy5hcGkuaTE4bi50KFwiVGhlIGJsb2NrIGNhbiBub3QgYmUgZGlzcGxheWVkIGNvcnJlY3RseS5cIiksIHRoaXMuc2F2ZWREYXRhID0gZS5zYXZlZERhdGEsIHRoaXMud3JhcHBlciA9IHRoaXMubWFrZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHN0dWIgaG9sZGVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy53cmFwcGVyO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gb3JpZ2luYWwgVG9vbCBkYXRhXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja1Rvb2xEYXRhfVxuICAgKi9cbiAgc2F2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlZERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBUb29sIGh0bWwgbWFya3VwXG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIG1ha2UoKSB7XG4gICAgY29uc3QgZSA9IGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy53cmFwcGVyKSwgdCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjUyXCIgaGVpZ2h0PVwiNTJcIiB2aWV3Qm94PVwiMCAwIDUyIDUyXCI+PHBhdGggZmlsbD1cIiNENzZCNkJcIiBmaWxsLXJ1bGU9XCJub256ZXJvXCIgZD1cIk0yNiA1MkMxMS42NCA1MiAwIDQwLjM2IDAgMjZTMTEuNjQgMCAyNiAwczI2IDExLjY0IDI2IDI2LTExLjY0IDI2LTI2IDI2em0wLTMuMjVjMTIuNTY0IDAgMjIuNzUtMTAuMTg2IDIyLjc1LTIyLjc1UzM4LjU2NCAzLjI1IDI2IDMuMjUgMy4yNSAxMy40MzYgMy4yNSAyNiAxMy40MzYgNDguNzUgMjYgNDguNzV6TTE1LjcwOCAzMy4wNDJhMi4xNjcgMi4xNjcgMCAxIDEgMC00LjMzNCAyLjE2NyAyLjE2NyAwIDAgMSAwIDQuMzM0em0yMy44MzQgMGEyLjE2NyAyLjE2NyAwIDEgMSAwLTQuMzM0IDIuMTY3IDIuMTY3IDAgMCAxIDAgNC4zMzR6bS0xNS44NzUgNS40NTJhMS4wODMgMS4wODMgMCAxIDEtMS44MzQtMS4xNTVjMS4zMzEtMi4xMTQgMy40OS0zLjE3OSA2LjMzNC0zLjE3OSAyLjg0NCAwIDUuMDAyIDEuMDY1IDYuMzMzIDMuMThhMS4wODMgMS4wODMgMCAxIDEtMS44MzMgMS4xNTRjLS45MTMtMS40NS0yLjM2Ni0yLjE2Ny00LjUtMi4xNjdzLTMuNTg3LjcxNy00LjUgMi4xNjd6XCIvPjwvc3ZnPicsIG8gPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MuaW5mbyksIGkgPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MudGl0bGUsIHtcbiAgICAgIHRleHRDb250ZW50OiB0aGlzLnRpdGxlXG4gICAgfSksIG4gPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1Muc3VidGl0bGUsIHtcbiAgICAgIHRleHRDb250ZW50OiB0aGlzLnN1YnRpdGxlXG4gICAgfSk7XG4gICAgcmV0dXJuIGUuaW5uZXJIVE1MID0gdCwgby5hcHBlbmRDaGlsZChpKSwgby5hcHBlbmRDaGlsZChuKSwgZS5hcHBlbmRDaGlsZChvKSwgZTtcbiAgfVxufVxueXQuaXNSZWFkT25seVN1cHBvcnRlZCA9ICEwO1xuY2xhc3Mgb2kgZXh0ZW5kcyBVZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMudHlwZSA9IHllLklubGluZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aXRsZSBmb3IgSW5saW5lIFRvb2wgaWYgc3BlY2lmaWVkIGJ5IHVzZXJcbiAgICovXG4gIGdldCB0aXRsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlW2plLlRpdGxlXTtcbiAgfVxuICAvKipcbiAgICogQ29uc3RydWN0cyBuZXcgSW5saW5lVG9vbCBpbnN0YW5jZSBmcm9tIGNvbnN0cnVjdGFibGVcbiAgICovXG4gIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0YWJsZSh7XG4gICAgICBhcGk6IHRoaXMuYXBpLmdldE1ldGhvZHNGb3JUb29sKHRoaXMpLFxuICAgICAgY29uZmlnOiB0aGlzLnNldHRpbmdzXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIGlpIGV4dGVuZHMgVWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnR5cGUgPSB5ZS5UdW5lO1xuICB9XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIG5ldyBCbG9ja1R1bmUgaW5zdGFuY2UgZnJvbSBjb25zdHJ1Y3RhYmxlXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gVHVuZSBkYXRhXG4gICAqIEBwYXJhbSBibG9jayAtIEJsb2NrIEFQSSBvYmplY3RcbiAgICovXG4gIGNyZWF0ZShlLCB0KSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdGFibGUoe1xuICAgICAgYXBpOiB0aGlzLmFwaS5nZXRNZXRob2RzRm9yVG9vbCh0aGlzKSxcbiAgICAgIGNvbmZpZzogdGhpcy5zZXR0aW5ncyxcbiAgICAgIGJsb2NrOiB0LFxuICAgICAgZGF0YTogZVxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBVIGV4dGVuZHMgTWFwIHtcbiAgLyoqXG4gICAqIFJldHVybnMgQmxvY2sgVG9vbHMgY29sbGVjdGlvblxuICAgKi9cbiAgZ2V0IGJsb2NrVG9vbHMoKSB7XG4gICAgY29uc3QgZSA9IEFycmF5LmZyb20odGhpcy5lbnRyaWVzKCkpLmZpbHRlcigoWywgdF0pID0+IHQuaXNCbG9jaygpKTtcbiAgICByZXR1cm4gbmV3IFUoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgSW5saW5lIFRvb2xzIGNvbGxlY3Rpb25cbiAgICovXG4gIGdldCBpbmxpbmVUb29scygpIHtcbiAgICBjb25zdCBlID0gQXJyYXkuZnJvbSh0aGlzLmVudHJpZXMoKSkuZmlsdGVyKChbLCB0XSkgPT4gdC5pc0lubGluZSgpKTtcbiAgICByZXR1cm4gbmV3IFUoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgQmxvY2sgVHVuZXMgY29sbGVjdGlvblxuICAgKi9cbiAgZ2V0IGJsb2NrVHVuZXMoKSB7XG4gICAgY29uc3QgZSA9IEFycmF5LmZyb20odGhpcy5lbnRyaWVzKCkpLmZpbHRlcigoWywgdF0pID0+IHQuaXNUdW5lKCkpO1xuICAgIHJldHVybiBuZXcgVShlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpbnRlcm5hbCBUb29scyBjb2xsZWN0aW9uXG4gICAqL1xuICBnZXQgaW50ZXJuYWxUb29scygpIHtcbiAgICBjb25zdCBlID0gQXJyYXkuZnJvbSh0aGlzLmVudHJpZXMoKSkuZmlsdGVyKChbLCB0XSkgPT4gdC5pc0ludGVybmFsKTtcbiAgICByZXR1cm4gbmV3IFUoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgVG9vbHMgY29sbGVjdGlvbiBwcm92aWRlZCBieSB1c2VyXG4gICAqL1xuICBnZXQgZXh0ZXJuYWxUb29scygpIHtcbiAgICBjb25zdCBlID0gQXJyYXkuZnJvbSh0aGlzLmVudHJpZXMoKSkuZmlsdGVyKChbLCB0XSkgPT4gIXQuaXNJbnRlcm5hbCk7XG4gICAgcmV0dXJuIG5ldyBVKGUpO1xuICB9XG59XG52YXIgbmkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNpID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgRXQgPSAocywgZSwgdCwgbykgPT4ge1xuICBmb3IgKHZhciBpID0gbyA+IDEgPyB2b2lkIDAgOiBvID8gc2koZSwgdCkgOiBlLCBuID0gcy5sZW5ndGggLSAxLCByOyBuID49IDA7IG4tLSlcbiAgICAociA9IHNbbl0pICYmIChpID0gKG8gPyByKGUsIHQsIGkpIDogcihpKSkgfHwgaSk7XG4gIHJldHVybiBvICYmIGkgJiYgbmkoZSwgdCwgaSksIGk7XG59O1xuY2xhc3MgS2UgZXh0ZW5kcyBVZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMudHlwZSA9IHllLkJsb2NrLCB0aGlzLmlubGluZVRvb2xzID0gbmV3IFUoKSwgdGhpcy50dW5lcyA9IG5ldyBVKCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgbmV3IFRvb2wgaW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBUb29sIGRhdGFcbiAgICogQHBhcmFtIGJsb2NrIC0gQmxvY2tBUEkgZm9yIGN1cnJlbnQgQmxvY2tcbiAgICogQHBhcmFtIHJlYWRPbmx5IC0gVHJ1ZSBpZiBFZGl0b3IgaXMgaW4gcmVhZC1vbmx5IG1vZGVcbiAgICovXG4gIGNyZWF0ZShlLCB0LCBvKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdGFibGUoe1xuICAgICAgZGF0YTogZSxcbiAgICAgIGJsb2NrOiB0LFxuICAgICAgcmVhZE9ubHk6IG8sXG4gICAgICBhcGk6IHRoaXMuYXBpLmdldE1ldGhvZHNGb3JUb29sKHRoaXMpLFxuICAgICAgY29uZmlnOiB0aGlzLnNldHRpbmdzXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiByZWFkLW9ubHkgbW9kZSBpcyBzdXBwb3J0ZWQgYnkgVG9vbFxuICAgKi9cbiAgZ2V0IGlzUmVhZE9ubHlTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZVtzZS5Jc1JlYWRPbmx5U3VwcG9ydGVkXSA9PT0gITA7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBUb29sIHN1cHBvcnRzIGxpbmVicmVha3NcbiAgICovXG4gIGdldCBpc0xpbmVCcmVha3NFbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdGFibGVbc2UuSXNFbmFibGVkTGluZUJyZWFrc107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgVG9vbCB0b29sYm94IGNvbmZpZ3VyYXRpb24gKGludGVybmFsIG9yIHVzZXItc3BlY2lmaWVkKS5cbiAgICpcbiAgICogTWVyZ2VzIGludGVybmFsIGFuZCB1c2VyLWRlZmluZWQgdG9vbGJveCBjb25maWdzIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgcnVsZXM6XG4gICAqXG4gICAqIC0gSWYgYm90aCBpbnRlcm5hbCBhbmQgdXNlci1kZWZpbmVkIHRvb2xib3ggY29uZmlncyBhcmUgYXJyYXlzIHRoZWlyIGl0ZW1zIGFyZSBtZXJnZWQuXG4gICAqIExlbmd0aCBvZiB0aGUgc2Vjb25kIG9uZSBpcyBrZXB0LlxuICAgKlxuICAgKiAtIElmIGJvdGggYXJlIG9iamVjdHMgdGhlaXIgcHJvcGVydGllcyBhcmUgbWVyZ2VkLlxuICAgKlxuICAgKiAtIElmIG9uZSBpcyBhbiBvYmplY3QgYW5kIGFub3RoZXIgaXMgYW4gYXJyYXkgdGhhbiBpbnRlcm5hbCBjb25maWcgaXMgcmVwbGFjZWQgd2l0aCB1c2VyLWRlZmluZWRcbiAgICogY29uZmlnLiBUaGlzIGlzIG1hZGUgdG8gYWxsb3cgdXNlciB0byBvdmVycmlkZSBkZWZhdWx0IHRvb2wncyB0b29sYm94IHJlcHJlc2VudGF0aW9uIChzaW5nbGUvbXVsdGlwbGUgZW50cmllcylcbiAgICovXG4gIGdldCB0b29sYm94KCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmNvbnN0cnVjdGFibGVbc2UuVG9vbGJveF0sIHQgPSB0aGlzLmNvbmZpZ1ttZS5Ub29sYm94XTtcbiAgICBpZiAoIVYoZSkgJiYgdCAhPT0gITEpXG4gICAgICByZXR1cm4gdCA/IEFycmF5LmlzQXJyYXkoZSkgPyBBcnJheS5pc0FycmF5KHQpID8gdC5tYXAoKG8sIGkpID0+IHtcbiAgICAgICAgY29uc3QgbiA9IGVbaV07XG4gICAgICAgIHJldHVybiBuID8ge1xuICAgICAgICAgIC4uLm4sXG4gICAgICAgICAgLi4ub1xuICAgICAgICB9IDogbztcbiAgICAgIH0pIDogW3RdIDogQXJyYXkuaXNBcnJheSh0KSA/IHQgOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5lLFxuICAgICAgICAgIC4uLnRcbiAgICAgICAgfVxuICAgICAgXSA6IEFycmF5LmlzQXJyYXkoZSkgPyBlIDogW2VdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRvb2wgY29udmVyc2lvbiBjb25maWd1cmF0aW9uXG4gICAqL1xuICBnZXQgY29udmVyc2lvbkNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlW3NlLkNvbnZlcnNpb25Db25maWddO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGVuYWJsZWQgaW5saW5lIHRvb2xzIGZvciBUb29sXG4gICAqL1xuICBnZXQgZW5hYmxlZElubGluZVRvb2xzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ1ttZS5FbmFibGVkSW5saW5lVG9vbHNdIHx8ICExO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGVuYWJsZWQgdHVuZXMgZm9yIFRvb2xcbiAgICovXG4gIGdldCBlbmFibGVkQmxvY2tUdW5lcygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWdbbWUuRW5hYmxlZEJsb2NrVHVuZXNdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRvb2wgcGFzdGUgY29uZmlndXJhdGlvblxuICAgKi9cbiAgZ2V0IHBhc3RlQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdGFibGVbc2UuUGFzdGVDb25maWddID8/IHt9O1xuICB9XG4gIGdldCBzYW5pdGl6ZUNvbmZpZygpIHtcbiAgICBjb25zdCBlID0gc3VwZXIuc2FuaXRpemVDb25maWcsIHQgPSB0aGlzLmJhc2VTYW5pdGl6ZUNvbmZpZztcbiAgICBpZiAoVihlKSlcbiAgICAgIHJldHVybiB0O1xuICAgIGNvbnN0IG8gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gZSlcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgaSkpIHtcbiAgICAgICAgY29uc3QgbiA9IGVbaV07XG4gICAgICAgIGoobikgPyBvW2ldID0gT2JqZWN0LmFzc2lnbih7fSwgdCwgbikgOiBvW2ldID0gbjtcbiAgICAgIH1cbiAgICByZXR1cm4gbztcbiAgfVxuICBnZXQgYmFzZVNhbml0aXplQ29uZmlnKCkge1xuICAgIGNvbnN0IGUgPSB7fTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmlubGluZVRvb2xzLnZhbHVlcygpKS5mb3JFYWNoKCh0KSA9PiBPYmplY3QuYXNzaWduKGUsIHQuc2FuaXRpemVDb25maWcpKSwgQXJyYXkuZnJvbSh0aGlzLnR1bmVzLnZhbHVlcygpKS5mb3JFYWNoKCh0KSA9PiBPYmplY3QuYXNzaWduKGUsIHQuc2FuaXRpemVDb25maWcpKSwgZTtcbiAgfVxufVxuRXQoW1xuICBhZVxuXSwgS2UucHJvdG90eXBlLCBcInNhbml0aXplQ29uZmlnXCIsIDEpO1xuRXQoW1xuICBhZVxuXSwgS2UucHJvdG90eXBlLCBcImJhc2VTYW5pdGl6ZUNvbmZpZ1wiLCAxKTtcbmNsYXNzIHJpIHtcbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0gY29uZmlnIC0gdG9vbHMgY29uZmlnXG4gICAqIEBwYXJhbSBlZGl0b3JDb25maWcgLSBFZGl0b3JKUyBjb25maWdcbiAgICogQHBhcmFtIGFwaSAtIEVkaXRvckpTIEFQSSBtb2R1bGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHQsIG8pIHtcbiAgICB0aGlzLmFwaSA9IG8sIHRoaXMuY29uZmlnID0gZSwgdGhpcy5lZGl0b3JDb25maWcgPSB0O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRvb2wgb2JqZWN0IGJhc2VkIG9uIGl0J3MgdHlwZVxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSAtIHRvb2wgbmFtZVxuICAgKi9cbiAgZ2V0KGUpIHtcbiAgICBjb25zdCB7IGNsYXNzOiB0LCBpc0ludGVybmFsOiBvID0gITEsIC4uLmkgfSA9IHRoaXMuY29uZmlnW2VdLCBuID0gdGhpcy5nZXRDb25zdHJ1Y3Rvcih0KTtcbiAgICByZXR1cm4gbmV3IG4oe1xuICAgICAgbmFtZTogZSxcbiAgICAgIGNvbnN0cnVjdGFibGU6IHQsXG4gICAgICBjb25maWc6IGksXG4gICAgICBhcGk6IHRoaXMuYXBpLFxuICAgICAgaXNEZWZhdWx0OiBlID09PSB0aGlzLmVkaXRvckNvbmZpZy5kZWZhdWx0QmxvY2ssXG4gICAgICBkZWZhdWx0UGxhY2Vob2xkZXI6IHRoaXMuZWRpdG9yQ29uZmlnLnBsYWNlaG9sZGVyLFxuICAgICAgaXNJbnRlcm5hbDogb1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kIGFwcHJvcHJpYXRlIFRvb2wgb2JqZWN0IGNvbnN0cnVjdG9yIGZvciBUb29sIGNvbnN0cnVjdGFibGVcbiAgICpcbiAgICogQHBhcmFtIGNvbnN0cnVjdGFibGUgLSBUb29scyBjb25zdHJ1Y3RhYmxlXG4gICAqL1xuICBnZXRDb25zdHJ1Y3RvcihlKSB7XG4gICAgc3dpdGNoICghMCkge1xuICAgICAgY2FzZSBlW2plLklzSW5saW5lXTpcbiAgICAgICAgcmV0dXJuIG9pO1xuICAgICAgY2FzZSBlW3Z0LklzVHVuZV06XG4gICAgICAgIHJldHVybiBpaTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBLZTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEJ0IHtcbiAgLyoqXG4gICAqIE1vdmVEb3duVHVuZSBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge0FQSX0gYXBpIFx1MjAxNCBFZGl0b3IncyBBUElcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgYXBpOiBlIH0pIHtcbiAgICB0aGlzLkNTUyA9IHtcbiAgICAgIGFuaW1hdGlvbjogXCJ3b2JibGVcIlxuICAgIH0sIHRoaXMuYXBpID0gZTtcbiAgfVxuICAvKipcbiAgICogVHVuZSdzIGFwcGVhcmFuY2UgaW4gYmxvY2sgc2V0dGluZ3MgbWVudVxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uOiBwdCxcbiAgICAgIHRpdGxlOiB0aGlzLmFwaS5pMThuLnQoXCJNb3ZlIGRvd25cIiksXG4gICAgICBvbkFjdGl2YXRlOiAoKSA9PiB0aGlzLmhhbmRsZUNsaWNrKCksXG4gICAgICBuYW1lOiBcIm1vdmUtZG93blwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGNsaWNrcyBvbiAnbW92ZSBkb3duJyBidXR0b25cbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmFwaS5ibG9ja3MuZ2V0Q3VycmVudEJsb2NrSW5kZXgoKSwgdCA9IHRoaXMuYXBpLmJsb2Nrcy5nZXRCbG9ja0J5SW5kZXgoZSArIDEpO1xuICAgIGlmICghdClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBtb3ZlIEJsb2NrIGRvd24gc2luY2UgaXQgaXMgYWxyZWFkeSB0aGUgbGFzdFwiKTtcbiAgICBjb25zdCBvID0gdC5ob2xkZXIsIGkgPSBvLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBuID0gTWF0aC5hYnMod2luZG93LmlubmVySGVpZ2h0IC0gby5vZmZzZXRIZWlnaHQpO1xuICAgIGkudG9wIDwgd2luZG93LmlubmVySGVpZ2h0ICYmIChuID0gd2luZG93LnNjcm9sbFkgKyBvLm9mZnNldEhlaWdodCksIHdpbmRvdy5zY3JvbGxUbygwLCBuKSwgdGhpcy5hcGkuYmxvY2tzLm1vdmUoZSArIDEpLCB0aGlzLmFwaS50b29sYmFyLnRvZ2dsZUJsb2NrU2V0dGluZ3MoITApO1xuICB9XG59XG5CdC5pc1R1bmUgPSAhMDtcbmNsYXNzIEN0IHtcbiAgLyoqXG4gICAqIERlbGV0ZVR1bmUgY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtBUEl9IGFwaSAtIEVkaXRvcidzIEFQSVxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBhcGk6IGUgfSkge1xuICAgIHRoaXMuYXBpID0gZTtcbiAgfVxuICAvKipcbiAgICogVHVuZSdzIGFwcGVhcmFuY2UgaW4gYmxvY2sgc2V0dGluZ3MgbWVudVxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uOiBDbyxcbiAgICAgIHRpdGxlOiB0aGlzLmFwaS5pMThuLnQoXCJEZWxldGVcIiksXG4gICAgICBuYW1lOiBcImRlbGV0ZVwiLFxuICAgICAgY29uZmlybWF0aW9uOiB7XG4gICAgICAgIHRpdGxlOiB0aGlzLmFwaS5pMThuLnQoXCJDbGljayB0byBkZWxldGVcIiksXG4gICAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHRoaXMuaGFuZGxlQ2xpY2soKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBibG9jayBjb25kaXRpb25zIHBhc3NlZFxuICAgKi9cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgdGhpcy5hcGkuYmxvY2tzLmRlbGV0ZSgpO1xuICB9XG59XG5DdC5pc1R1bmUgPSAhMDtcbmNsYXNzIFR0IHtcbiAgLyoqXG4gICAqIE1vdmVVcFR1bmUgY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtBUEl9IGFwaSAtIEVkaXRvcidzIEFQSVxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBhcGk6IGUgfSkge1xuICAgIHRoaXMuQ1NTID0ge1xuICAgICAgYW5pbWF0aW9uOiBcIndvYmJsZVwiXG4gICAgfSwgdGhpcy5hcGkgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBUdW5lJ3MgYXBwZWFyYW5jZSBpbiBibG9jayBzZXR0aW5ncyBtZW51XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IEJvLFxuICAgICAgdGl0bGU6IHRoaXMuYXBpLmkxOG4udChcIk1vdmUgdXBcIiksXG4gICAgICBvbkFjdGl2YXRlOiAoKSA9PiB0aGlzLmhhbmRsZUNsaWNrKCksXG4gICAgICBuYW1lOiBcIm1vdmUtdXBcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgY3VycmVudCBibG9jayB1cFxuICAgKi9cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuYXBpLmJsb2Nrcy5nZXRDdXJyZW50QmxvY2tJbmRleCgpLCB0ID0gdGhpcy5hcGkuYmxvY2tzLmdldEJsb2NrQnlJbmRleChlKSwgbyA9IHRoaXMuYXBpLmJsb2Nrcy5nZXRCbG9ja0J5SW5kZXgoZSAtIDEpO1xuICAgIGlmIChlID09PSAwIHx8ICF0IHx8ICFvKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIG1vdmUgQmxvY2sgdXAgc2luY2UgaXQgaXMgYWxyZWFkeSB0aGUgZmlyc3RcIik7XG4gICAgY29uc3QgaSA9IHQuaG9sZGVyLCBuID0gby5ob2xkZXIsIHIgPSBpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBhID0gbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgbDtcbiAgICBhLnRvcCA+IDAgPyBsID0gTWF0aC5hYnMoci50b3ApIC0gTWF0aC5hYnMoYS50b3ApIDogbCA9IE1hdGguYWJzKHIudG9wKSArIGEuaGVpZ2h0LCB3aW5kb3cuc2Nyb2xsQnkoMCwgLTEgKiBsKSwgdGhpcy5hcGkuYmxvY2tzLm1vdmUoZSAtIDEpLCB0aGlzLmFwaS50b29sYmFyLnRvZ2dsZUJsb2NrU2V0dGluZ3MoITApO1xuICB9XG59XG5UdC5pc1R1bmUgPSAhMDtcbnZhciBhaSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgbGkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLCBjaSA9IChzLCBlLCB0LCBvKSA9PiB7XG4gIGZvciAodmFyIGkgPSBvID4gMSA/IHZvaWQgMCA6IG8gPyBsaShlLCB0KSA6IGUsIG4gPSBzLmxlbmd0aCAtIDEsIHI7IG4gPj0gMDsgbi0tKVxuICAgIChyID0gc1tuXSkgJiYgKGkgPSAobyA/IHIoZSwgdCwgaSkgOiByKGkpKSB8fCBpKTtcbiAgcmV0dXJuIG8gJiYgaSAmJiBhaShlLCB0LCBpKSwgaTtcbn07XG5jbGFzcyBTdCBleHRlbmRzIFMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnN0dWJUb29sID0gXCJzdHViXCIsIHRoaXMudG9vbHNBdmFpbGFibGUgPSBuZXcgVSgpLCB0aGlzLnRvb2xzVW5hdmFpbGFibGUgPSBuZXcgVSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGF2YWlsYWJsZSBUb29sc1xuICAgKi9cbiAgZ2V0IGF2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sc0F2YWlsYWJsZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB1bmF2YWlsYWJsZSBUb29sc1xuICAgKi9cbiAgZ2V0IHVuYXZhaWxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnRvb2xzVW5hdmFpbGFibGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBUb29scyBmb3IgdGhlIElubGluZSBUb29sYmFyXG4gICAqL1xuICBnZXQgaW5saW5lVG9vbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlLmlubGluZVRvb2xzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gZWRpdG9yIGJsb2NrIHRvb2xzXG4gICAqL1xuICBnZXQgYmxvY2tUb29scygpIHtcbiAgICByZXR1cm4gdGhpcy5hdmFpbGFibGUuYmxvY2tUb29scztcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGF2YWlsYWJsZSBCbG9jayBUdW5lc1xuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSAtIG9iamVjdCBvZiBJbmxpbmUgVG9vbCdzIGNsYXNzZXNcbiAgICovXG4gIGdldCBibG9ja1R1bmVzKCkge1xuICAgIHJldHVybiB0aGlzLmF2YWlsYWJsZS5ibG9ja1R1bmVzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGRlZmF1bHQgVG9vbCBvYmplY3RcbiAgICovXG4gIGdldCBkZWZhdWx0VG9vbCgpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja1Rvb2xzLmdldCh0aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2spO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGludGVybmFsIHRvb2xzXG4gICAqL1xuICBnZXQgaW50ZXJuYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlLmludGVybmFsVG9vbHM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgaW5zdGFuY2VzIHZpYSBwYXNzZWQgb3IgZGVmYXVsdCBjb25maWd1cmF0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgcHJlcGFyZSgpIHtcbiAgICBpZiAodGhpcy52YWxpZGF0ZVRvb2xzKCksIHRoaXMuY29uZmlnLnRvb2xzID0gU2Uoe30sIHRoaXMuaW50ZXJuYWxUb29scywgdGhpcy5jb25maWcudG9vbHMpLCAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29uZmlnLCBcInRvb2xzXCIpIHx8IE9iamVjdC5rZXlzKHRoaXMuY29uZmlnLnRvb2xzKS5sZW5ndGggPT09IDApXG4gICAgICB0aHJvdyBFcnJvcihcIkNhbid0IHN0YXJ0IHdpdGhvdXQgdG9vbHNcIik7XG4gICAgY29uc3QgZSA9IHRoaXMucHJlcGFyZUNvbmZpZygpO1xuICAgIHRoaXMuZmFjdG9yeSA9IG5ldyByaShlLCB0aGlzLmNvbmZpZywgdGhpcy5FZGl0b3IuQVBJKTtcbiAgICBjb25zdCB0ID0gdGhpcy5nZXRMaXN0T2ZQcmVwYXJlRnVuY3Rpb25zKGUpO1xuICAgIGlmICh0Lmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBhd2FpdCBvdCh0LCAobykgPT4ge1xuICAgICAgdGhpcy50b29sUHJlcGFyZU1ldGhvZFN1Y2Nlc3Mobyk7XG4gICAgfSwgKG8pID0+IHtcbiAgICAgIHRoaXMudG9vbFByZXBhcmVNZXRob2RGYWxsYmFjayhvKTtcbiAgICB9KSwgdGhpcy5wcmVwYXJlQmxvY2tUb29scygpO1xuICB9XG4gIGdldEFsbElubGluZVRvb2xzU2FuaXRpemVDb25maWcoKSB7XG4gICAgY29uc3QgZSA9IHt9O1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuaW5saW5lVG9vbHMudmFsdWVzKCkpLmZvckVhY2goKHQpID0+IHtcbiAgICAgIE9iamVjdC5hc3NpZ24oZSwgdC5zYW5pdGl6ZUNvbmZpZyk7XG4gICAgfSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxzIGVhY2ggVG9vbCByZXNldCBtZXRob2QgdG8gY2xlYW4gdXAgYW55dGhpbmcgc2V0IGJ5IFRvb2xcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLmF2YWlsYWJsZSkuZm9yRWFjaChhc3luYyAoZSkgPT4ge1xuICAgICAgRChlLnJlc2V0KSAmJiBhd2FpdCBlLnJlc2V0KCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgaW50ZXJuYWwgdG9vbHNcbiAgICogSW5jbHVkZXMgQm9sZCwgSXRhbGljLCBMaW5rIGFuZCBQYXJhZ3JhcGhcbiAgICovXG4gIGdldCBpbnRlcm5hbFRvb2xzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBib2xkOiB7XG4gICAgICAgIGNsYXNzOiAkZSxcbiAgICAgICAgaXNJbnRlcm5hbDogITBcbiAgICAgIH0sXG4gICAgICBpdGFsaWM6IHtcbiAgICAgICAgY2xhc3M6IFdlLFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIGxpbms6IHtcbiAgICAgICAgY2xhc3M6IFllLFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICBjbGFzczogdGksXG4gICAgICAgIGlubGluZVRvb2xiYXI6ICEwLFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIHN0dWI6IHtcbiAgICAgICAgY2xhc3M6IHl0LFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIG1vdmVVcDoge1xuICAgICAgICBjbGFzczogVHQsXG4gICAgICAgIGlzSW50ZXJuYWw6ICEwXG4gICAgICB9LFxuICAgICAgZGVsZXRlOiB7XG4gICAgICAgIGNsYXNzOiBDdCxcbiAgICAgICAgaXNJbnRlcm5hbDogITBcbiAgICAgIH0sXG4gICAgICBtb3ZlRG93bjoge1xuICAgICAgICBjbGFzczogQnQsXG4gICAgICAgIGlzSW50ZXJuYWw6ICEwXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogVG9vbCBwcmVwYXJlIG1ldGhvZCBzdWNjZXNzIGNhbGxiYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gYXBwZW5kIHRvb2wgdG8gYXZhaWxhYmxlIGxpc3RcbiAgICovXG4gIHRvb2xQcmVwYXJlTWV0aG9kU3VjY2VzcyhlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuZmFjdG9yeS5nZXQoZS50b29sTmFtZSk7XG4gICAgaWYgKHQuaXNJbmxpbmUoKSkge1xuICAgICAgY29uc3QgaSA9IFtcInJlbmRlclwiLCBcInN1cnJvdW5kXCIsIFwiY2hlY2tTdGF0ZVwiXS5maWx0ZXIoKG4pID0+ICF0LmNyZWF0ZSgpW25dKTtcbiAgICAgIGlmIChpLmxlbmd0aCkge1xuICAgICAgICBUKFxuICAgICAgICAgIGBJbmNvcnJlY3QgSW5saW5lIFRvb2w6ICR7dC5uYW1lfS4gU29tZSBvZiByZXF1aXJlZCBtZXRob2RzIGlzIG5vdCBpbXBsZW1lbnRlZCAlb2AsXG4gICAgICAgICAgXCJ3YXJuXCIsXG4gICAgICAgICAgaVxuICAgICAgICApLCB0aGlzLnRvb2xzVW5hdmFpbGFibGUuc2V0KHQubmFtZSwgdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50b29sc0F2YWlsYWJsZS5zZXQodC5uYW1lLCB0KTtcbiAgfVxuICAvKipcbiAgICogVG9vbCBwcmVwYXJlIG1ldGhvZCBmYWlsIGNhbGxiYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gYXBwZW5kIHRvb2wgdG8gdW5hdmFpbGFibGUgbGlzdFxuICAgKi9cbiAgdG9vbFByZXBhcmVNZXRob2RGYWxsYmFjayhlKSB7XG4gICAgdGhpcy50b29sc1VuYXZhaWxhYmxlLnNldChlLnRvb2xOYW1lLCB0aGlzLmZhY3RvcnkuZ2V0KGUudG9vbE5hbWUpKTtcbiAgfVxuICAvKipcbiAgICogQmluZHMgcHJlcGFyZSBmdW5jdGlvbiBvZiBwbHVnaW5zIHdpdGggdXNlciBvciBkZWZhdWx0IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGxpc3Qgb2YgZnVuY3Rpb25zIHRoYXQgbmVlZHMgdG8gYmUgZmlyZWQgc2VxdWVudGlhbGx5XG4gICAqIEBwYXJhbSBjb25maWcgLSB0b29scyBjb25maWdcbiAgICovXG4gIGdldExpc3RPZlByZXBhcmVGdW5jdGlvbnMoZSkge1xuICAgIGNvbnN0IHQgPSBbXTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoW28sIGldKSA9PiB7XG4gICAgICB0LnB1c2goe1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgICAgIGZ1bmN0aW9uOiBEKGkuY2xhc3MucHJlcGFyZSkgPyBpLmNsYXNzLnByZXBhcmUgOiAoKSA9PiB7XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB0b29sTmFtZTogbyxcbiAgICAgICAgICBjb25maWc6IGkuY29uZmlnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pLCB0O1xuICB9XG4gIC8qKlxuICAgKiBBc3NpZ24gZW5hYmxlZCBJbmxpbmUgVG9vbHMgYW5kIEJsb2NrIFR1bmVzIGZvciBCbG9jayBUb29sXG4gICAqL1xuICBwcmVwYXJlQmxvY2tUb29scygpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuYmxvY2tUb29scy52YWx1ZXMoKSkuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgdGhpcy5hc3NpZ25JbmxpbmVUb29sc1RvQmxvY2tUb29sKGUpLCB0aGlzLmFzc2lnbkJsb2NrVHVuZXNUb0Jsb2NrVG9vbChlKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQXNzaWduIGVuYWJsZWQgSW5saW5lIFRvb2xzIGZvciBCbG9jayBUb29sXG4gICAqXG4gICAqIEBwYXJhbSB0b29sIC0gQmxvY2sgVG9vbFxuICAgKi9cbiAgYXNzaWduSW5saW5lVG9vbHNUb0Jsb2NrVG9vbChlKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmlubGluZVRvb2xiYXIgIT09ICExKSB7XG4gICAgICBpZiAoZS5lbmFibGVkSW5saW5lVG9vbHMgPT09ICEwKSB7XG4gICAgICAgIGUuaW5saW5lVG9vbHMgPSBuZXcgVShcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLmlubGluZVRvb2xiYXIpID8gdGhpcy5jb25maWcuaW5saW5lVG9vbGJhci5tYXAoKHQpID0+IFt0LCB0aGlzLmlubGluZVRvb2xzLmdldCh0KV0pIDogQXJyYXkuZnJvbSh0aGlzLmlubGluZVRvb2xzLmVudHJpZXMoKSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgQXJyYXkuaXNBcnJheShlLmVuYWJsZWRJbmxpbmVUb29scykgJiYgKGUuaW5saW5lVG9vbHMgPSBuZXcgVShcbiAgICAgICAgZS5lbmFibGVkSW5saW5lVG9vbHMubWFwKCh0KSA9PiBbdCwgdGhpcy5pbmxpbmVUb29scy5nZXQodCldKVxuICAgICAgKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBc3NpZ24gZW5hYmxlZCBCbG9jayBUdW5lcyBmb3IgQmxvY2sgVG9vbFxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCBcdTIwMTQgQmxvY2sgVG9vbFxuICAgKi9cbiAgYXNzaWduQmxvY2tUdW5lc1RvQmxvY2tUb29sKGUpIHtcbiAgICBpZiAoZS5lbmFibGVkQmxvY2tUdW5lcyAhPT0gITEpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGUuZW5hYmxlZEJsb2NrVHVuZXMpKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgVShcbiAgICAgICAgICBlLmVuYWJsZWRCbG9ja1R1bmVzLm1hcCgobykgPT4gW28sIHRoaXMuYmxvY2tUdW5lcy5nZXQobyldKVxuICAgICAgICApO1xuICAgICAgICBlLnR1bmVzID0gbmV3IFUoWy4uLnQsIC4uLnRoaXMuYmxvY2tUdW5lcy5pbnRlcm5hbFRvb2xzXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLnR1bmVzKSkge1xuICAgICAgICBjb25zdCB0ID0gbmV3IFUoXG4gICAgICAgICAgdGhpcy5jb25maWcudHVuZXMubWFwKChvKSA9PiBbbywgdGhpcy5ibG9ja1R1bmVzLmdldChvKV0pXG4gICAgICAgICk7XG4gICAgICAgIGUudHVuZXMgPSBuZXcgVShbLi4udCwgLi4udGhpcy5ibG9ja1R1bmVzLmludGVybmFsVG9vbHNdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZS50dW5lcyA9IHRoaXMuYmxvY2tUdW5lcy5pbnRlcm5hbFRvb2xzO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVmFsaWRhdGUgVG9vbHMgY29uZmlndXJhdGlvbiBvYmplY3RzIGFuZCB0aHJvdyBFcnJvciBmb3IgdXNlciBpZiBpdCBpcyBpbnZhbGlkXG4gICAqL1xuICB2YWxpZGF0ZVRvb2xzKCkge1xuICAgIGZvciAoY29uc3QgZSBpbiB0aGlzLmNvbmZpZy50b29scylcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb25maWcudG9vbHMsIGUpKSB7XG4gICAgICAgIGlmIChlIGluIHRoaXMuaW50ZXJuYWxUb29scylcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNvbmZpZy50b29sc1tlXTtcbiAgICAgICAgaWYgKCFEKHQpICYmICFEKHQuY2xhc3MpKVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgYFRvb2wgXHUwMEFCJHtlfVx1MDBCQiBtdXN0IGJlIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IHdpdGggZnVuY3Rpb24gaW4gdGhlIFx1MDBBQmNsYXNzXHUwMEJCIHByb3BlcnR5YFxuICAgICAgICAgICk7XG4gICAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVuaWZ5IHRvb2xzIGNvbmZpZ1xuICAgKi9cbiAgcHJlcGFyZUNvbmZpZygpIHtcbiAgICBjb25zdCBlID0ge307XG4gICAgZm9yIChjb25zdCB0IGluIHRoaXMuY29uZmlnLnRvb2xzKVxuICAgICAgaih0aGlzLmNvbmZpZy50b29sc1t0XSkgPyBlW3RdID0gdGhpcy5jb25maWcudG9vbHNbdF0gOiBlW3RdID0geyBjbGFzczogdGhpcy5jb25maWcudG9vbHNbdF0gfTtcbiAgICByZXR1cm4gZTtcbiAgfVxufVxuY2koW1xuICBhZVxuXSwgU3QucHJvdG90eXBlLCBcImdldEFsbElubGluZVRvb2xzU2FuaXRpemVDb25maWdcIiwgMSk7XG5jb25zdCBkaSA9IGA6cm9vdHstLXNlbGVjdGlvbkNvbG9yOiAjZTFmMmZmOy0taW5saW5lU2VsZWN0aW9uQ29sb3I6ICNkNGVjZmY7LS1iZy1saWdodDogI2VmZjJmNTstLWdyYXlUZXh0OiAjNzA3Njg0Oy0tY29sb3ItZGFyazogIzFEMjAyQjstLWNvbG9yLWFjdGl2ZS1pY29uOiAjMzg4QUU1Oy0tY29sb3ItZ3JheS1ib3JkZXI6IHJnYmEoMjAxLCAyMDEsIDIwNCwgLjQ4KTstLWNvbnRlbnQtd2lkdGg6IDY1MHB4Oy0tbmFycm93LW1vZGUtcmlnaHQtcGFkZGluZzogNTBweDstLXRvb2xib3gtYnV0dG9ucy1zaXplOiAyNnB4Oy0tdG9vbGJveC1idXR0b25zLXNpemUtLW1vYmlsZTogMzZweDstLWljb24tc2l6ZTogMjBweDstLWljb24tc2l6ZS0tbW9iaWxlOiAyOHB4Oy0tYmxvY2stcGFkZGluZy12ZXJ0aWNhbDogLjRlbTstLWNvbG9yLWxpbmUtZ3JheTogI0VGRjBGMSB9LmNvZGV4LWVkaXRvcntwb3NpdGlvbjpyZWxhdGl2ZTstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7ei1pbmRleDoxfS5jb2RleC1lZGl0b3IgLmhpZGUsLmNvZGV4LWVkaXRvcl9fcmVkYWN0b3ItLWhpZGRlbntkaXNwbGF5Om5vbmV9LmNvZGV4LWVkaXRvcl9fcmVkYWN0b3IgW2NvbnRlbnRlZGl0YWJsZV06ZW1wdHk6YWZ0ZXJ7Y29udGVudDpcIlxcXFxmZWZmXCJ9QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cgLmNvZGV4LWVkaXRvcl9fcmVkYWN0b3J7bWFyZ2luLXJpZ2h0OjUwcHh9fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93LmNvZGV4LWVkaXRvci0tcnRsIC5jb2RleC1lZGl0b3JfX3JlZGFjdG9ye21hcmdpbi1sZWZ0OjUwcHg7bWFyZ2luLXJpZ2h0OjB9fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93IC5jZS10b29sYmFyX19hY3Rpb25ze3JpZ2h0Oi01cHh9fS5jb2RleC1lZGl0b3JfX2xvYWRlcntwb3NpdGlvbjpyZWxhdGl2ZTtoZWlnaHQ6MzB2aH0uY29kZXgtZWRpdG9yX19sb2FkZXI6YmVmb3Jle2NvbnRlbnQ6XCJcIjtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7bWFyZ2luLXRvcDotMTVweDttYXJnaW4tbGVmdDotMTVweDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXI6MnB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTtib3JkZXItdG9wLWNvbG9yOnRyYW5zcGFyZW50Oy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDstd2Via2l0LWFuaW1hdGlvbjplZGl0b3ItbG9hZGVyLXNwaW4gLjhzIGluZmluaXRlIGxpbmVhcjthbmltYXRpb246ZWRpdG9yLWxvYWRlci1zcGluIC44cyBpbmZpbml0ZSBsaW5lYXI7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfS5jb2RleC1lZGl0b3ItY29weWFibGV7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjFweDt3aWR0aDoxcHg7dG9wOi00MDAlO29wYWNpdHk6LjAwMX0uY29kZXgtZWRpdG9yLW92ZXJsYXl7cG9zaXRpb246Zml4ZWQ7dG9wOjBweDtsZWZ0OjBweDtyaWdodDowcHg7Ym90dG9tOjBweDt6LWluZGV4Ojk5OTtwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93OmhpZGRlbn0uY29kZXgtZWRpdG9yLW92ZXJsYXlfX2NvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZTtwb2ludGVyLWV2ZW50czphdXRvO3otaW5kZXg6MH0uY29kZXgtZWRpdG9yLW92ZXJsYXlfX3JlY3RhbmdsZXtwb3NpdGlvbjphYnNvbHV0ZTtwb2ludGVyLWV2ZW50czpub25lO2JhY2tncm91bmQtY29sb3I6IzJlYWFkYzMzO2JvcmRlcjoxcHggc29saWQgdHJhbnNwYXJlbnR9LmNvZGV4LWVkaXRvciBzdmd7bWF4LWhlaWdodDoxMDAlfS5jb2RleC1lZGl0b3IgcGF0aHtzdHJva2U6Y3VycmVudENvbG9yfTo6LW1vei1zZWxlY3Rpb257YmFja2dyb3VuZC1jb2xvcjojZDRlY2ZmfTo6c2VsZWN0aW9ue2JhY2tncm91bmQtY29sb3I6I2Q0ZWNmZn0uY29kZXgtZWRpdG9yLS10b29sYm94LW9wZW5lZCBbY29udGVudEVkaXRhYmxlPXRydWVdW2RhdGEtcGxhY2Vob2xkZXJdOmZvY3VzOmJlZm9yZXtvcGFjaXR5OjAhaW1wb3J0YW50fUAtd2Via2l0LWtleWZyYW1lcyBlZGl0b3ItbG9hZGVyLXNwaW57MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMCl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIGVkaXRvci1sb2FkZXItc3BpbnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fS5jZS1zY3JvbGwtbG9ja2Vke292ZXJmbG93OmhpZGRlbn0uY2Utc2Nyb2xsLWxvY2tlZC0taGFyZHtvdmVyZmxvdzpoaWRkZW47dG9wOmNhbGMoLTEgKiB2YXIoLS13aW5kb3ctc2Nyb2xsLW9mZnNldCkpO3Bvc2l0aW9uOmZpeGVkO3dpZHRoOjEwMCV9LmNlLXRvb2xiYXJ7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3JpZ2h0OjA7dG9wOjA7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjFzIGVhc2U7dHJhbnNpdGlvbjpvcGFjaXR5IC4xcyBlYXNlO3dpbGwtY2hhbmdlOm9wYWNpdHksdG9wO2Rpc3BsYXk6bm9uZX0uY2UtdG9vbGJhci0tb3BlbmVke2Rpc3BsYXk6YmxvY2t9LmNlLXRvb2xiYXJfX2NvbnRlbnR7bWF4LXdpZHRoOjY1MHB4O21hcmdpbjowIGF1dG87cG9zaXRpb246cmVsYXRpdmV9LmNlLXRvb2xiYXJfX3BsdXN7Y29sb3I6IzFkMjAyYjtjdXJzb3I6cG9pbnRlcjt3aWR0aDoyNnB4O2hlaWdodDoyNnB4O2JvcmRlci1yYWRpdXM6N3B4O2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXRvb2xiYXJfX3BsdXN7d2lkdGg6MzZweDtoZWlnaHQ6MzZweH19QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZS10b29sYmFyX19wbHVzOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX19LmNlLXRvb2xiYXJfX3BsdXMtLWFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNlZmYyZjU7LXdlYmtpdC1hbmltYXRpb246Ym91bmNlSW4gLjc1cyAxO2FuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9LmNlLXRvb2xiYXJfX3BsdXMtc2hvcnRjdXR7b3BhY2l0eTouNjt3b3JkLXNwYWNpbmc6LTJweDttYXJnaW4tdG9wOjVweH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS10b29sYmFyX19wbHVze3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNFOEU4RUI7LXdlYmtpdC1ib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCByZ2JhKDEzLDIwLDMzLC4xMyk7Ym94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggIzBkMTQyMTIxO2JvcmRlci1yYWRpdXM6NnB4O3otaW5kZXg6Mjtwb3NpdGlvbjpzdGF0aWN9LmNlLXRvb2xiYXJfX3BsdXMtLWxlZnQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6MTVweDttYXJnaW4tbGVmdDowfS5jZS10b29sYmFyX19wbHVzLS1yaWdodC1vcmllbnRlZDpiZWZvcmV7bGVmdDphdXRvO3JpZ2h0OjE1cHg7bWFyZ2luLWxlZnQ6MH19LmNlLXRvb2xiYXJfX2FjdGlvbnN7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MTAwJTtvcGFjaXR5OjA7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwYWRkaW5nLXJpZ2h0OjVweH0uY2UtdG9vbGJhcl9fYWN0aW9ucy0tb3BlbmVke29wYWNpdHk6MX1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS10b29sYmFyX19hY3Rpb25ze3JpZ2h0OmF1dG99fS5jZS10b29sYmFyX19zZXR0aW5ncy1idG57Y29sb3I6IzFkMjAyYjt3aWR0aDoyNnB4O2hlaWdodDoyNnB4O2JvcmRlci1yYWRpdXM6N3B4O2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO21hcmdpbi1sZWZ0OjNweDtjdXJzb3I6cG9pbnRlcjt1c2VyLXNlbGVjdDpub25lfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bnt3aWR0aDozNnB4O2hlaWdodDozNnB4fX1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNlZmYyZjV9fS5jZS10b29sYmFyX19zZXR0aW5ncy1idG4tLWFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNlZmYyZjU7LXdlYmtpdC1hbmltYXRpb246Ym91bmNlSW4gLjc1cyAxO2FuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRue3dpZHRoOjI0cHh9fS5jZS10b29sYmFyX19zZXR0aW5ncy1idG4tLWhpZGRlbntkaXNwbGF5Om5vbmV9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRue3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNFOEU4RUI7LXdlYmtpdC1ib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCByZ2JhKDEzLDIwLDMzLC4xMyk7Ym94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggIzBkMTQyMTIxO2JvcmRlci1yYWRpdXM6NnB4O3otaW5kZXg6Mjtwb3NpdGlvbjpzdGF0aWN9LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bi0tbGVmdC1vcmllbnRlZDpiZWZvcmV7bGVmdDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bi0tcmlnaHQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6YXV0bztyaWdodDoxNXB4O21hcmdpbi1sZWZ0OjB9fS5jZS10b29sYmFyX19wbHVzIHN2ZywuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRuIHN2Z3t3aWR0aDoyNHB4O2hlaWdodDoyNHB4fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93IC5jZS10b29sYmFyX19wbHVze2xlZnQ6NXB4fX1AbWVkaWEgKG1pbi13aWR0aDogNjUxcHgpey5jb2RleC1lZGl0b3ItLW5hcnJvdyAuY2UtdG9vbGJveCAuY2UtcG9wb3ZlcntyaWdodDowO2xlZnQ6YXV0bztsZWZ0OmluaXRpYWx9fS5jZS1pbmxpbmUtdG9vbGJhcnstLXktb2Zmc2V0OiA4cHg7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI0U4RThFQjstd2Via2l0LWJveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHJnYmEoMTMsMjAsMzMsLjEzKTtib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCAjMGQxNDIxMjE7Ym9yZGVyLXJhZGl1czo2cHg7ei1pbmRleDoyOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSg4cHgpIHNjYWxlKC45NCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlKSB0cmFuc2xhdGVZKDhweCkgc2NhbGUoLjk0KTtvcGFjaXR5OjA7dmlzaWJpbGl0eTpoaWRkZW47LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjI1cyBlYXNlLC13ZWJraXQtdHJhbnNmb3JtIC4xNXMgZWFzZTt0cmFuc2l0aW9uOm9wYWNpdHkgLjI1cyBlYXNlLC13ZWJraXQtdHJhbnNmb3JtIC4xNXMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMTVzIGVhc2Usb3BhY2l0eSAuMjVzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjE1cyBlYXNlLG9wYWNpdHkgLjI1cyBlYXNlLC13ZWJraXQtdHJhbnNmb3JtIC4xNXMgZWFzZTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sb3BhY2l0eTt0b3A6MDtsZWZ0OjA7ei1pbmRleDozfS5jZS1pbmxpbmUtdG9vbGJhci0tbGVmdC1vcmllbnRlZDpiZWZvcmV7bGVmdDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLWlubGluZS10b29sYmFyLS1yaWdodC1vcmllbnRlZDpiZWZvcmV7bGVmdDphdXRvO3JpZ2h0OjE1cHg7bWFyZ2luLWxlZnQ6MH0uY2UtaW5saW5lLXRvb2xiYXItLXNob3dlZHtvcGFjaXR5OjE7dmlzaWJpbGl0eTp2aXNpYmxlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlKX0uY2UtaW5saW5lLXRvb2xiYXItLWxlZnQtb3JpZW50ZWR7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjNweCkgdHJhbnNsYXRlWSg4cHgpIHNjYWxlKC45NCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtMjNweCkgdHJhbnNsYXRlWSg4cHgpIHNjYWxlKC45NCl9LmNlLWlubGluZS10b29sYmFyLS1sZWZ0LW9yaWVudGVkLmNlLWlubGluZS10b29sYmFyLS1zaG93ZWR7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjNweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtMjNweCl9LmNlLWlubGluZS10b29sYmFyLS1yaWdodC1vcmllbnRlZHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKSB0cmFuc2xhdGVZKDhweCkgc2NhbGUoLjk0KTt0cmFuc2Zvcm06dHJhbnNsYXRlKC0xMDAlKSB0cmFuc2xhdGVZKDhweCkgc2NhbGUoLjk0KTttYXJnaW4tbGVmdDoyM3B4fS5jZS1pbmxpbmUtdG9vbGJhci0tcmlnaHQtb3JpZW50ZWQuY2UtaW5saW5lLXRvb2xiYXItLXNob3dlZHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlKC0xMDAlKX0uY2UtaW5saW5lLXRvb2xiYXIgW2hpZGRlbl17ZGlzcGxheTpub25lIWltcG9ydGFudH0uY2UtaW5saW5lLXRvb2xiYXJfX3RvZ2dsZXItYW5kLWJ1dHRvbi13cmFwcGVye2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTtwYWRkaW5nOjAgNnB4fS5jZS1pbmxpbmUtdG9vbGJhcl9fYnV0dG9uc3tkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4fS5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd257ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwYWRkaW5nOjZweDttYXJnaW46MCA2cHggMCAtNnB4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2N1cnNvcjpwb2ludGVyO2JvcmRlci1yaWdodDoxcHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLWlubGluZS10b29sYmFyX19kcm9wZG93bjpob3ZlcntiYWNrZ3JvdW5kOiNlZmYyZjV9fS5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tLWhpZGRlbntkaXNwbGF5Om5vbmV9LmNlLWlubGluZS10b29sYmFyX19kcm9wZG93bi1jb250ZW50LC5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tYXJyb3d7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0uY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLWNvbnRlbnQgc3ZnLC5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tYXJyb3cgc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9LmNlLWlubGluZS10b29sYmFyX19zaG9ydGN1dHtvcGFjaXR5Oi42O3dvcmQtc3BhY2luZzotM3B4O21hcmdpbi10b3A6M3B4fS5jZS1pbmxpbmUtdG9vbHtkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZzo2cHggMXB4O2N1cnNvcjpwb2ludGVyO2JvcmRlcjowO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3ZlcnRpY2FsLWFsaWduOmJvdHRvbTtjb2xvcjppbmhlcml0O21hcmdpbjowO2JvcmRlci1yYWRpdXM6MDtsaW5lLWhlaWdodDpub3JtYWx9LmNlLWlubGluZS10b29sIHN2Z3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4fUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLWlubGluZS10b29sIHN2Z3t3aWR0aDoyOHB4O2hlaWdodDoyOHB4fX1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLWlubGluZS10b29sOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX19LmNlLWlubGluZS10b29sLS1hY3RpdmV7Y29sb3I6IzM4OGFlNX0uY2UtaW5saW5lLXRvb2wtLWZvY3VzZWR7YmFja2dyb3VuZDpyZ2JhKDM0LDE4NiwyNTUsLjA4KSFpbXBvcnRhbnR9LmNlLWlubGluZS10b29sLS1mb2N1c2Vkey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgMHB4IDFweCByZ2JhKDcsMTYxLDIyNywuMDgpO2JveC1zaGFkb3c6aW5zZXQgMCAwIDAgMXB4ICMwN2ExZTMxNH0uY2UtaW5saW5lLXRvb2wtLWZvY3VzZWQtYW5pbWF0ZWR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkO2FuaW1hdGlvbi1uYW1lOmJ1dHRvbkNsaWNrZWQ7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjI1czthbmltYXRpb24tZHVyYXRpb246LjI1c30uY2UtaW5saW5lLXRvb2wtLWxpbmsgLmljb24tLXVubGluaywuY2UtaW5saW5lLXRvb2wtLXVubGluayAuaWNvbi0tbGlua3tkaXNwbGF5Om5vbmV9LmNlLWlubGluZS10b29sLS11bmxpbmsgLmljb24tLXVubGlua3tkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tYm90dG9tOi0xcHh9LmNlLWlubGluZS10b29sLWlucHV0e291dGxpbmU6bm9uZTtib3JkZXI6MDtib3JkZXItcmFkaXVzOjAgMCA0cHggNHB4O21hcmdpbjowO2ZvbnQtc2l6ZToxM3B4O3BhZGRpbmc6MTBweDt3aWR0aDoxMDAlOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5Om5vbmU7Zm9udC13ZWlnaHQ6NTAwO2JvcmRlci10b3A6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTtmb250LWZhbWlseTppbmhlcml0fUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLWlubGluZS10b29sLWlucHV0e2ZvbnQtc2l6ZToxNXB4O2ZvbnQtd2VpZ2h0OjUwMH19LmNlLWlubGluZS10b29sLWlucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODR9LmNlLWlubGluZS10b29sLWlucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODR9LmNlLWlubGluZS10b29sLWlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODR9LmNlLWlubGluZS10b29sLWlucHV0OjpwbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dC0tc2hvd2Vke2Rpc3BsYXk6YmxvY2t9LmNlLWNvbnZlcnNpb24tdG9vbGJhcntwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjRThFOEVCOy13ZWJraXQtYm94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggcmdiYSgxMywyMCwzMywuMTMpO2JveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4ICMwZDE0MjEyMTtib3JkZXItcmFkaXVzOjZweDt6LWluZGV4OjI7b3BhY2l0eTowO3Zpc2liaWxpdHk6aGlkZGVuO3dpbGwtY2hhbmdlOnRyYW5zZm9ybSxvcGFjaXR5Oy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4xcyBlYXNlLC13ZWJraXQtdHJhbnNmb3JtIC4xcyBlYXNlO3RyYW5zaXRpb246b3BhY2l0eSAuMXMgZWFzZSwtd2Via2l0LXRyYW5zZm9ybSAuMXMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMXMgZWFzZSxvcGFjaXR5IC4xcyBlYXNlO3RyYW5zaXRpb246dHJhbnNmb3JtIC4xcyBlYXNlLG9wYWNpdHkgLjFzIGVhc2UsLXdlYmtpdC10cmFuc2Zvcm0gLjFzIGVhc2U7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtOHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtOHB4KTtsZWZ0Oi0xcHg7d2lkdGg6MTUwcHg7bWFyZ2luLXRvcDo1cHg7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3h9LmNlLWNvbnZlcnNpb24tdG9vbGJhci0tbGVmdC1vcmllbnRlZDpiZWZvcmV7bGVmdDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLWNvbnZlcnNpb24tdG9vbGJhci0tcmlnaHQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6YXV0bztyaWdodDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLWNvbnZlcnNpb24tdG9vbGJhci0tc2hvd2Vke29wYWNpdHk6MTt2aXNpYmlsaXR5OnZpc2libGU7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX0uY2UtY29udmVyc2lvbi10b29sYmFyIFtoaWRkZW5de2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmNlLWNvbnZlcnNpb24tdG9vbGJhcl9fYnV0dG9uc3tkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4fS5jZS1jb252ZXJzaW9uLXRvb2xiYXJfX2xhYmVse2NvbG9yOiM3MDc2ODQ7Zm9udC1zaXplOjExcHg7Zm9udC13ZWlnaHQ6NTAwO2xldHRlci1zcGFjaW5nOi4zM3B4O3BhZGRpbmc6MTBweCAxMHB4IDVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmNlLWNvbnZlcnNpb24tdG9vbHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3BhZGRpbmc6NXB4IDEwcHg7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjBweDtmb250LXdlaWdodDo1MDA7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmNlLWNvbnZlcnNpb24tdG9vbC0taGlkZGVue2Rpc3BsYXk6bm9uZX0uY2UtY29udmVyc2lvbi10b29sLS1mb2N1c2Vke2JhY2tncm91bmQ6cmdiYSgzNCwxODYsMjU1LC4wOCkhaW1wb3J0YW50fS5jZS1jb252ZXJzaW9uLXRvb2wtLWZvY3VzZWR7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMCAwcHggMXB4IHJnYmEoNywxNjEsMjI3LC4wOCk7Ym94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggIzA3YTFlMzE0fS5jZS1jb252ZXJzaW9uLXRvb2wtLWZvY3VzZWQtYW5pbWF0ZWR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkO2FuaW1hdGlvbi1uYW1lOmJ1dHRvbkNsaWNrZWQ7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjI1czthbmltYXRpb24tZHVyYXRpb246LjI1c30uY2UtY29udmVyc2lvbi10b29sOmhvdmVye2JhY2tncm91bmQ6I2VmZjJmNX0uY2UtY29udmVyc2lvbi10b29sX19pY29ue2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7d2lkdGg6MjZweDtoZWlnaHQ6MjZweDstd2Via2l0LWJveC1zaGFkb3c6MCAwIDAgMXB4IHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTtib3gtc2hhZG93OjAgMCAwIDFweCAjYzljOWNjN2E7Ym9yZGVyLXJhZGl1czo1cHg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kOiNmZmY7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowO21hcmdpbi1yaWdodDoxMHB4fS5jZS1jb252ZXJzaW9uLXRvb2xfX2ljb24gc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtY29udmVyc2lvbi10b29sX19pY29ue3dpZHRoOjM2cHg7aGVpZ2h0OjM2cHg7Ym9yZGVyLXJhZGl1czo4cHh9LmNlLWNvbnZlcnNpb24tdG9vbF9faWNvbiBzdmd7d2lkdGg6MjhweDtoZWlnaHQ6MjhweH19LmNlLWNvbnZlcnNpb24tdG9vbC0tbGFzdHttYXJnaW4tcmlnaHQ6MCFpbXBvcnRhbnR9LmNlLWNvbnZlcnNpb24tdG9vbC0tYWN0aXZle2NvbG9yOiMzODhhZTUhaW1wb3J0YW50fS5jZS1jb252ZXJzaW9uLXRvb2wtLWFjdGl2ZXstd2Via2l0LWFuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7YW5pbWF0aW9uOmJvdW5jZUluIC43NXMgMTstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkc30uY2Utc2V0dGluZ3NfX2J1dHRvbntkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZzo2cHggMXB4O2JvcmRlci1yYWRpdXM6M3B4O2N1cnNvcjpwb2ludGVyO2JvcmRlcjowO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3ZlcnRpY2FsLWFsaWduOmJvdHRvbTtjb2xvcjppbmhlcml0O21hcmdpbjowO2xpbmUtaGVpZ2h0OjMycHh9LmNlLXNldHRpbmdzX19idXR0b24gc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2Utc2V0dGluZ3NfX2J1dHRvbiBzdmd7d2lkdGg6MjhweDtoZWlnaHQ6MjhweH19QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZS1zZXR0aW5nc19fYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX19LmNlLXNldHRpbmdzX19idXR0b24tLWFjdGl2ZXtjb2xvcjojMzg4YWU1fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1mb2N1c2Vke2JhY2tncm91bmQ6cmdiYSgzNCwxODYsMjU1LC4wOCkhaW1wb3J0YW50fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1mb2N1c2Vkey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgMHB4IDFweCByZ2JhKDcsMTYxLDIyNywuMDgpO2JveC1zaGFkb3c6aW5zZXQgMCAwIDAgMXB4ICMwN2ExZTMxNH0uY2Utc2V0dGluZ3NfX2J1dHRvbi0tZm9jdXNlZC1hbmltYXRlZHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJ1dHRvbkNsaWNrZWQ7YW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjouMjVzO2FuaW1hdGlvbi1kdXJhdGlvbjouMjVzfS5jZS1zZXR0aW5nc19fYnV0dG9uOm5vdCg6bnRoLWNoaWxkKDNuKzMpKXttYXJnaW4tcmlnaHQ6M3B4fS5jZS1zZXR0aW5nc19fYnV0dG9uOm50aC1jaGlsZChuKzQpe21hcmdpbi10b3A6M3B4fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1kaXNhYmxlZHtjdXJzb3I6bm90LWFsbG93ZWQhaW1wb3J0YW50fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1kaXNhYmxlZHtvcGFjaXR5Oi4zfS5jZS1zZXR0aW5nc19fYnV0dG9uLS1zZWxlY3RlZHtjb2xvcjojMzg4YWU1fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93IC5jZS1zZXR0aW5ncyAuY2UtcG9wb3ZlcntyaWdodDowO2xlZnQ6YXV0bztsZWZ0OmluaXRpYWx9fUAtd2Via2l0LWtleWZyYW1lcyBmYWRlLWluezAle29wYWNpdHk6MH10b3tvcGFjaXR5OjF9fUBrZXlmcmFtZXMgZmFkZS1pbnswJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX0uY2UtYmxvY2t7LXdlYmtpdC1hbmltYXRpb246ZmFkZS1pbiAuM3MgZWFzZTthbmltYXRpb246ZmFkZS1pbiAuM3MgZWFzZTstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6bm9uZTthbmltYXRpb24tZmlsbC1tb2RlOm5vbmU7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmluaXRpYWw7YW5pbWF0aW9uLWZpbGwtbW9kZTppbml0aWFsfS5jZS1ibG9jazpmaXJzdC1vZi10eXBle21hcmdpbi10b3A6MH0uY2UtYmxvY2stLXNlbGVjdGVkIC5jZS1ibG9ja19fY29udGVudHtiYWNrZ3JvdW5kOiNlMWYyZmZ9LmNlLWJsb2NrLS1zZWxlY3RlZCAuY2UtYmxvY2tfX2NvbnRlbnQgW2NvbnRlbnRlZGl0YWJsZV17LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5jZS1ibG9jay0tc2VsZWN0ZWQgLmNlLWJsb2NrX19jb250ZW50IGltZywuY2UtYmxvY2stLXNlbGVjdGVkIC5jZS1ibG9ja19fY29udGVudCAuY2Utc3R1YntvcGFjaXR5Oi41NX0uY2UtYmxvY2stLXN0cmV0Y2hlZCAuY2UtYmxvY2tfX2NvbnRlbnR7bWF4LXdpZHRoOm5vbmV9LmNlLWJsb2NrX19jb250ZW50e3Bvc2l0aW9uOnJlbGF0aXZlO21heC13aWR0aDo2NTBweDttYXJnaW46MCBhdXRvOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZTt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjE1cyBlYXNlfS5jZS1ibG9jay0tZHJvcC10YXJnZXQgLmNlLWJsb2NrX19jb250ZW50OmJlZm9yZXtjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7bGVmdDotMjBweDttYXJnaW4tdG9wOi0xcHg7aGVpZ2h0OjhweDt3aWR0aDo4cHg7Ym9yZGVyOnNvbGlkICMzODhBRTU7Ym9yZGVyLXdpZHRoOjFweCAxcHggMCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0Oy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9LmNlLWJsb2NrLS1kcm9wLXRhcmdldCAuY2UtYmxvY2tfX2NvbnRlbnQ6YWZ0ZXJ7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2hlaWdodDoxcHg7d2lkdGg6MTAwJTtjb2xvcjojMzg4YWU1O2JhY2tncm91bmQ6cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg5MGRlZywjMzg4QUU1LCMzODhBRTUgMXB4LCNmZmYgMXB4LCNmZmYgNnB4KX0uY2UtYmxvY2sgYXtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX0uY2UtYmxvY2sgYntmb250LXdlaWdodDo3MDB9LmNlLWJsb2NrIGl7Zm9udC1zdHlsZTppdGFsaWN9QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cgLmNlLWJsb2NrLS1mb2N1c2Vke21hcmdpbi1yaWdodDotNTBweDtwYWRkaW5nLXJpZ2h0OjUwcHh9fUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2VJbnswJSwyMCUsNDAlLDYwJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSl9MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguOSwuOSwuOSk7dHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpfTIwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDMsMS4wMywxLjAzKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAzLDEuMDMsMS4wMyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMSwxLDEpO3RyYW5zZm9ybTpzY2FsZVooMSl9fUBrZXlmcmFtZXMgYm91bmNlSW57MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpO3RyYW5zZm9ybTpzY2FsZTNkKC45LC45LC45KX0yMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAzLDEuMDMsMS4wMyk7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMywxLjAzLDEuMDMpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTt0cmFuc2Zvcm06c2NhbGVaKDEpfX1ALXdlYmtpdC1rZXlmcmFtZXMgc2VsZWN0aW9uQm91bmNlezAlLDIwJSw0MCUsNjAlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAxLDEuMDEsMS4wMSk7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMSwxLjAxLDEuMDEpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTt0cmFuc2Zvcm06c2NhbGVaKDEpfX1Aa2V5ZnJhbWVzIHNlbGVjdGlvbkJvdW5jZXswJSwyMCUsNDAlLDYwJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSl9NTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4wMSwxLjAxLDEuMDEpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMDEsMS4wMSwxLjAxKX03MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSk7dHJhbnNmb3JtOnNjYWxlWigxKX19QC13ZWJraXQta2V5ZnJhbWVzIGJ1dHRvbkNsaWNrZWR7MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjk1LC45NSwuOTUpO3RyYW5zZm9ybTpzY2FsZTNkKC45NSwuOTUsLjk1KX02MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAyLDEuMDIsMS4wMik7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMiwxLjAyLDEuMDIpfTgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTt0cmFuc2Zvcm06c2NhbGVaKDEpfX1Aa2V5ZnJhbWVzIGJ1dHRvbkNsaWNrZWR7MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjk1LC45NSwuOTUpO3RyYW5zZm9ybTpzY2FsZTNkKC45NSwuOTUsLjk1KX02MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAyLDEuMDIsMS4wMik7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMiwxLjAyLDEuMDIpfTgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTt0cmFuc2Zvcm06c2NhbGVaKDEpfX0uY2R4LWJsb2Nre3BhZGRpbmc6LjRlbSAwfS5jZHgtYmxvY2s6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7bGluZS1oZWlnaHQ6bm9ybWFsIWltcG9ydGFudH0uY2R4LWlucHV0e2JvcmRlcjoxcHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpOy13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDFweCAycHggMCByZ2JhKDM1LDQ0LDcyLC4wNik7Ym94LXNoYWRvdzppbnNldCAwIDFweCAycHggIzIzMmM0ODBmO2JvcmRlci1yYWRpdXM6M3B4O3BhZGRpbmc6MTBweCAxMnB4O291dGxpbmU6bm9uZTt3aWR0aDoxMDAlOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH0uY2R4LWlucHV0W2RhdGEtcGxhY2Vob2xkZXJdOmJlZm9yZXtwb3NpdGlvbjpzdGF0aWMhaW1wb3J0YW50fS5jZHgtaW5wdXRbZGF0YS1wbGFjZWhvbGRlcl06YmVmb3Jle2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjA7d2hpdGUtc3BhY2U6bm93cmFwO3BvaW50ZXItZXZlbnRzOm5vbmV9LmNkeC1zZXR0aW5ncy1idXR0b257ZGlzcGxheTotd2Via2l0LWlubGluZS1ib3g7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmc6NnB4IDFweDtib3JkZXItcmFkaXVzOjNweDtjdXJzb3I6cG9pbnRlcjtib3JkZXI6MDtvdXRsaW5lOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDt2ZXJ0aWNhbC1hbGlnbjpib3R0b207Y29sb3I6aW5oZXJpdDttYXJnaW46MDttaW4td2lkdGg6MjZweDttaW4taGVpZ2h0OjI2cHh9LmNkeC1zZXR0aW5ncy1idXR0b24gc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2R4LXNldHRpbmdzLWJ1dHRvbiBzdmd7d2lkdGg6MjhweDtoZWlnaHQ6MjhweH19QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZHgtc2V0dGluZ3MtYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX19LmNkeC1zZXR0aW5ncy1idXR0b24tLWZvY3VzZWR7YmFja2dyb3VuZDpyZ2JhKDM0LDE4NiwyNTUsLjA4KSFpbXBvcnRhbnR9LmNkeC1zZXR0aW5ncy1idXR0b24tLWZvY3VzZWR7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMCAwcHggMXB4IHJnYmEoNywxNjEsMjI3LC4wOCk7Ym94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggIzA3YTFlMzE0fS5jZHgtc2V0dGluZ3MtYnV0dG9uLS1mb2N1c2VkLWFuaW1hdGVkey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDthbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4yNXM7YW5pbWF0aW9uLWR1cmF0aW9uOi4yNXN9LmNkeC1zZXR0aW5ncy1idXR0b24tLWFjdGl2ZXtjb2xvcjojMzg4YWU1fS5jZHgtc2V0dGluZ3MtYnV0dG9uIHN2Z3t3aWR0aDphdXRvO2hlaWdodDphdXRvfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNkeC1zZXR0aW5ncy1idXR0b257d2lkdGg6MzZweDtoZWlnaHQ6MzZweDtib3JkZXItcmFkaXVzOjhweH19LmNkeC1sb2FkZXJ7cG9zaXRpb246cmVsYXRpdmU7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDIwMSwyMDEsMjA0LC40OCl9LmNkeC1sb2FkZXI6YmVmb3Jle2NvbnRlbnQ6XCJcIjtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3dpZHRoOjE4cHg7aGVpZ2h0OjE4cHg7bWFyZ2luOi0xMXB4IDAgMCAtMTFweDtib3JkZXI6MnB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTtib3JkZXItbGVmdC1jb2xvcjojMzg4YWU1O2JvcmRlci1yYWRpdXM6NTAlOy13ZWJraXQtYW5pbWF0aW9uOmNkeFJvdGF0aW9uIDEuMnMgaW5maW5pdGUgbGluZWFyO2FuaW1hdGlvbjpjZHhSb3RhdGlvbiAxLjJzIGluZmluaXRlIGxpbmVhcn1ALXdlYmtpdC1rZXlmcmFtZXMgY2R4Um90YXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMCl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIGNkeFJvdGF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19LmNkeC1idXR0b257cGFkZGluZzoxM3B4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpO2ZvbnQtc2l6ZToxNC45cHg7YmFja2dyb3VuZDojZmZmOy13ZWJraXQtYm94LXNoYWRvdzowIDJweCAycHggMCByZ2JhKDE4LDMwLDU3LC4wNCk7Ym94LXNoYWRvdzowIDJweCAycHggIzEyMWUzOTBhO2NvbG9yOiM3MDc2ODQ7dGV4dC1hbGlnbjpjZW50ZXI7Y3Vyc29yOnBvaW50ZXJ9QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZHgtYnV0dG9uOmhvdmVye2JhY2tncm91bmQ6I0ZCRkNGRTstd2Via2l0LWJveC1zaGFkb3c6MCAxcHggM3B4IDAgcmdiYSgxOCwzMCw1NywuMDgpO2JveC1zaGFkb3c6MCAxcHggM3B4ICMxMjFlMzkxNH19LmNkeC1idXR0b24gc3Zne2hlaWdodDoyMHB4O21hcmdpbi1yaWdodDouMmVtO21hcmdpbi10b3A6LTJweH0uY2Utc3R1YntkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtwYWRkaW5nOjMuNWVtIDA7bWFyZ2luOjE3cHggMDtib3JkZXItcmFkaXVzOjNweDtiYWNrZ3JvdW5kOiNmY2Y3Zjc7Y29sb3I6I2I0NjI2Mn0uY2Utc3R1Yl9faW5mb3ttYXJnaW4tbGVmdDoyMHB4fS5jZS1zdHViX190aXRsZXttYXJnaW4tYm90dG9tOjNweDtmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjE4cHg7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZX0uY2Utc3R1Yl9fc3VidGl0bGV7Zm9udC1zaXplOjE2cHh9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bHtkaXJlY3Rpb246cnRsfS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNkeC1saXN0e3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6NDBweH0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS10b29sYmFyX19wbHVze3JpZ2h0Oi0yNnB4O2xlZnQ6YXV0b30uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS10b29sYmFyX19hY3Rpb25ze3JpZ2h0OmF1dG87bGVmdDotMjZweH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXRvb2xiYXJfX2FjdGlvbnN7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6YXV0bztwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy1sZWZ0OjEwcHh9fS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXNldHRpbmdze2xlZnQ6NXB4O3JpZ2h0OmF1dG99LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2Utc2V0dGluZ3M6YmVmb3Jle3JpZ2h0OmF1dG87bGVmdDoyNXB4fS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXNldHRpbmdzX19idXR0b246bm90KDpudGgtY2hpbGQoM24rMykpe21hcmdpbi1sZWZ0OjNweDttYXJnaW4tcmlnaHQ6MH0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS1jb252ZXJzaW9uLXRvb2xfX2ljb257bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLWxlZnQ6MTBweH0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd257Ym9yZGVyLXJpZ2h0OjBweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdDoxcHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpO21hcmdpbjowIC02cHggMCA2cHh9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duIC5pY29uLS10b2dnbGVyLWRvd257bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6NHB4fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93LmNvZGV4LWVkaXRvci0tcnRsIC5jZS10b29sYmFyX19wbHVze2xlZnQ6MHB4O3JpZ2h0OjVweH19QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXRvb2xiYXJfX2FjdGlvbnN7bGVmdDotNXB4fX0uY2R4LXNlYXJjaC1maWVsZHstLWljb24tbWFyZ2luLXJpZ2h0OiAxMHB4O2JhY2tncm91bmQ6cmdiYSgyMzIsMjMyLDIzNSwuNDkpO2JvcmRlcjoxcHggc29saWQgcmdiYSgyMjYsMjI2LDIyOSwuMik7Ym9yZGVyLXJhZGl1czo2cHg7cGFkZGluZzoycHg7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczphdXRvIGF1dG8gMWZyO2dyaWQtdGVtcGxhdGUtcm93czphdXRvfS5jZHgtc2VhcmNoLWZpZWxkX19pY29ue3dpZHRoOjI2cHg7aGVpZ2h0OjI2cHg7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbi1yaWdodDp2YXIoLS1pY29uLW1hcmdpbi1yaWdodCl9LmNkeC1zZWFyY2gtZmllbGRfX2ljb24gc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7Y29sb3I6IzcwNzY4NH0uY2R4LXNlYXJjaC1maWVsZF9faW5wdXR7Zm9udC1zaXplOjE0cHg7b3V0bGluZTpub25lO2ZvbnQtd2VpZ2h0OjUwMDtmb250LWZhbWlseTppbmhlcml0O2JvcmRlcjowO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7bWFyZ2luOjA7cGFkZGluZzowO2xpbmUtaGVpZ2h0OjIycHg7bWluLXdpZHRoOmNhbGMoMTAwJSAtIDI2cHggLSB2YXIoLS1pY29uLW1hcmdpbi1yaWdodCkpfS5jZHgtc2VhcmNoLWZpZWxkX19pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0O2ZvbnQtd2VpZ2h0OjUwMH0uY2R4LXNlYXJjaC1maWVsZF9faW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NDtmb250LXdlaWdodDo1MDB9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0O2ZvbnQtd2VpZ2h0OjUwMH0uY2R4LXNlYXJjaC1maWVsZF9faW5wdXQ6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0O2ZvbnQtd2VpZ2h0OjUwMH0uY2R4LXNlYXJjaC1maWVsZF9faW5wdXQ6OnBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODQ7Zm9udC13ZWlnaHQ6NTAwfS5jZS1wb3BvdmVyey0tYm9yZGVyLXJhZGl1czogNnB4Oy0td2lkdGg6IDIwMHB4Oy0tbWF4LWhlaWdodDogMjcwcHg7LS1wYWRkaW5nOiA2cHg7LS1vZmZzZXQtZnJvbS10YXJnZXQ6IDhweDstLWNvbG9yLWJvcmRlcjogI2U4ZThlYjstLWNvbG9yLXNoYWRvdzogcmdiYSgxMywyMCwzMywuMTMpOy0tY29sb3ItYmFja2dyb3VuZDogd2hpdGU7LS1jb2xvci10ZXh0LXByaW1hcnk6IGJsYWNrOy0tY29sb3ItdGV4dC1zZWNvbmRhcnk6ICM3MDc2ODQ7LS1jb2xvci1ib3JkZXItaWNvbjogcmdiYSgyMDEsIDIwMSwgMjA0LCAuNDgpOy0tY29sb3ItYm9yZGVyLWljb24tZGlzYWJsZWQ6ICNFRkYwRjE7LS1jb2xvci10ZXh0LWljb24tYWN0aXZlOiAjMzg4QUU1Oy0tY29sb3ItYmFja2dyb3VuZC1pY29uLWFjdGl2ZTogcmdiYSg1NiwgMTM4LCAyMjksIC4xKTstLWNvbG9yLWJhY2tncm91bmQtaXRlbS1mb2N1czogcmdiYSgzNCwgMTg2LCAyNTUsIC4wOCk7LS1jb2xvci1zaGFkb3ctaXRlbS1mb2N1czogcmdiYSg3LCAxNjEsIDIyNywgLjA4KTstLWNvbG9yLWJhY2tncm91bmQtaXRlbS1ob3ZlcjogI2VmZjJmNTstLWNvbG9yLWJhY2tncm91bmQtaXRlbS1jb25maXJtOiAjRTI0QTRBOy0tY29sb3ItYmFja2dyb3VuZC1pdGVtLWNvbmZpcm0taG92ZXI6ICNDRTQzNDM7bWluLXdpZHRoOnZhcigtLXdpZHRoKTt3aWR0aDp2YXIoLS13aWR0aCk7bWF4LWhlaWdodDp2YXIoLS1tYXgtaGVpZ2h0KTtib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO292ZXJmbG93OmhpZGRlbjstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7LXdlYmtpdC1ib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCB2YXIoLS1jb2xvci1zaGFkb3cpO2JveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHZhcigtLWNvbG9yLXNoYWRvdyk7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDpjYWxjKDEwMCUgKyB2YXIoLS1vZmZzZXQtZnJvbS10YXJnZXQpKTtiYWNrZ3JvdW5kOnZhcigtLWNvbG9yLWJhY2tncm91bmQpO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47ei1pbmRleDo0O29wYWNpdHk6MDttYXgtaGVpZ2h0OjA7cG9pbnRlci1ldmVudHM6bm9uZTtwYWRkaW5nOjA7Ym9yZGVyOm5vbmV9LmNlLXBvcG92ZXItLW9wZW5lZHtvcGFjaXR5OjE7cGFkZGluZzp2YXIoLS1wYWRkaW5nKTttYXgtaGVpZ2h0OnZhcigtLW1heC1oZWlnaHQpO3BvaW50ZXItZXZlbnRzOmF1dG87LXdlYmtpdC1hbmltYXRpb246cGFuZWxTaG93aW5nIC4xcyBlYXNlO2FuaW1hdGlvbjpwYW5lbFNob3dpbmcgLjFzIGVhc2U7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1jb2xvci1ib3JkZXIpfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXItLW9wZW5lZHstd2Via2l0LWFuaW1hdGlvbjpwYW5lbFNob3dpbmdNb2JpbGUgLjI1cyBlYXNlO2FuaW1hdGlvbjpwYW5lbFNob3dpbmdNb2JpbGUgLjI1cyBlYXNlfX0uY2UtcG9wb3Zlcl9faXRlbXN7b3ZlcmZsb3cteTphdXRvOy1tcy1zY3JvbGwtY2hhaW5pbmc6bm9uZTtvdmVyc2Nyb2xsLWJlaGF2aW9yOmNvbnRhaW59QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3Zlcl9fb3ZlcmxheXtwb3NpdGlvbjpmaXhlZDt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kOiMxRDIwMkI7ei1pbmRleDozO29wYWNpdHk6LjU7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjEycyBlYXNlLWluO3RyYW5zaXRpb246b3BhY2l0eSAuMTJzIGVhc2UtaW47d2lsbC1jaGFuZ2U6b3BhY2l0eTt2aXNpYmlsaXR5OnZpc2libGV9fS5jZS1wb3BvdmVyX19vdmVybGF5LS1oaWRkZW57ZGlzcGxheTpub25lfS5jZS1wb3BvdmVyLS1vcGVuLXRvcHt0b3A6Y2FsYygtMSAqICh2YXIoLS1vZmZzZXQtZnJvbS10YXJnZXQpICsgdmFyKC0tcG9wb3Zlci1oZWlnaHQpKSl9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3ZlcnstLW9mZnNldDogNXB4O3Bvc2l0aW9uOmZpeGVkO21heC13aWR0aDpub25lO21pbi13aWR0aDpjYWxjKDEwMCUgLSB2YXIoLS1vZmZzZXQpICogMik7bGVmdDp2YXIoLS1vZmZzZXQpO3JpZ2h0OnZhcigtLW9mZnNldCk7Ym90dG9tOmNhbGModmFyKC0tb2Zmc2V0KSArIGVudihzYWZlLWFyZWEtaW5zZXQtYm90dG9tKSk7dG9wOmF1dG87Ym9yZGVyLXJhZGl1czoxMHB4fS5jZS1wb3BvdmVyIC5jZS1wb3BvdmVyX19zZWFyY2h7ZGlzcGxheTpub25lfX0uY2UtcG9wb3Zlcl9fc2VhcmNoLC5jZS1wb3BvdmVyX19jdXN0b20tY29udGVudDpub3QoOmVtcHR5KXttYXJnaW4tYm90dG9tOjVweH0uY2UtcG9wb3Zlcl9fbm90aGluZy1mb3VuZC1tZXNzYWdle2NvbG9yOiM3MDc2ODQ7ZGlzcGxheTpub25lO2N1cnNvcjpkZWZhdWx0O3BhZGRpbmc6M3B4O2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjIwcHg7Zm9udC13ZWlnaHQ6NTAwO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uY2UtcG9wb3Zlcl9fbm90aGluZy1mb3VuZC1tZXNzYWdlLS1kaXNwbGF5ZWR7ZGlzcGxheTpibG9ja30uY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnQ6bm90KDplbXB0eSl7cGFkZGluZzo0cHh9QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnQ6bm90KDplbXB0eSl7cGFkZGluZzowfX0uY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnQtLWhpZGRlbntkaXNwbGF5Om5vbmV9LmNlLXBvcG92ZXItaXRlbXstLWJvcmRlci1yYWRpdXM6IDZweDstLWljb24tc2l6ZTogMjBweDstLWljb24tc2l6ZS1tb2JpbGU6IDI4cHg7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6M3B4O2NvbG9yOnZhcigtLWNvbG9yLXRleHQtcHJpbWFyeSk7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXItaXRlbXtwYWRkaW5nOjRweH19LmNlLXBvcG92ZXItaXRlbTpub3QoOmxhc3Qtb2YtdHlwZSl7bWFyZ2luLWJvdHRvbToxcHh9LmNlLXBvcG92ZXItaXRlbV9faWNvbntib3JkZXItcmFkaXVzOjVweDt3aWR0aDoyNnB4O2hlaWdodDoyNnB4Oy13ZWJraXQtYm94LXNoYWRvdzowIDAgMCAxcHggdmFyKC0tY29sb3ItYm9yZGVyLWljb24pO2JveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLWNvbG9yLWJvcmRlci1pY29uKTtiYWNrZ3JvdW5kOiNmZmY7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbi1yaWdodDoxMHB4fS5jZS1wb3BvdmVyLWl0ZW1fX2ljb24gc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3Zlci1pdGVtX19pY29ue3dpZHRoOjM2cHg7aGVpZ2h0OjM2cHg7Ym9yZGVyLXJhZGl1czo4cHh9LmNlLXBvcG92ZXItaXRlbV9faWNvbiBzdmd7d2lkdGg6dmFyKC0taWNvbi1zaXplLW1vYmlsZSk7aGVpZ2h0OnZhcigtLWljb24tc2l6ZS1tb2JpbGUpfX0uY2UtcG9wb3Zlci1pdGVtX190aXRsZXtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyMHB4O2ZvbnQtd2VpZ2h0OjUwMDtvdmVyZmxvdzpoaWRkZW47d2hpdGUtc3BhY2U6bm93cmFwO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3Zlci1pdGVtX190aXRsZXtmb250LXNpemU6MTZweH19LmNlLXBvcG92ZXItaXRlbV9fc2Vjb25kYXJ5LXRpdGxle2NvbG9yOnZhcigtLWNvbG9yLXRleHQtc2Vjb25kYXJ5KTtmb250LXNpemU6MTJweDttYXJnaW4tbGVmdDphdXRvO3doaXRlLXNwYWNlOm5vd3JhcDtsZXR0ZXItc3BhY2luZzotLjFlbTtwYWRkaW5nLXJpZ2h0OjVweDttYXJnaW4tYm90dG9tOi0ycHg7b3BhY2l0eTouNn1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1wb3BvdmVyLWl0ZW1fX3NlY29uZGFyeS10aXRsZXtkaXNwbGF5Om5vbmV9fS5jZS1wb3BvdmVyLWl0ZW0tLWFjdGl2ZXtiYWNrZ3JvdW5kOnZhcigtLWNvbG9yLWJhY2tncm91bmQtaWNvbi1hY3RpdmUpO2NvbG9yOnZhcigtLWNvbG9yLXRleHQtaWNvbi1hY3RpdmUpfS5jZS1wb3BvdmVyLWl0ZW0tLWFjdGl2ZSAuY2UtcG9wb3Zlci1pdGVtX19pY29uey13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZX0uY2UtcG9wb3Zlci1pdGVtLS1kaXNhYmxlZHtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LXNlY29uZGFyeSk7Y3Vyc29yOmRlZmF1bHQ7cG9pbnRlci1ldmVudHM6bm9uZX0uY2UtcG9wb3Zlci1pdGVtLS1kaXNhYmxlZCAuY2UtcG9wb3Zlci1pdGVtX19pY29uey13ZWJraXQtYm94LXNoYWRvdzowIDAgMCAxcHggdmFyKC0tY29sb3ItYm9yZGVyLWljb24tZGlzYWJsZWQpO2JveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLWNvbG9yLWJvcmRlci1pY29uLWRpc2FibGVkKX0uY2UtcG9wb3Zlci1pdGVtLS1mb2N1c2VkOm5vdCguY2UtcG9wb3Zlci1pdGVtLS1uby1mb2N1cyl7YmFja2dyb3VuZDp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0tZm9jdXMpIWltcG9ydGFudH0uY2UtcG9wb3Zlci1pdGVtLS1mb2N1c2VkOm5vdCguY2UtcG9wb3Zlci1pdGVtLS1uby1mb2N1cyl7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMCAwcHggMXB4IHZhcigtLWNvbG9yLXNoYWRvdy1pdGVtLWZvY3VzKTtib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCB2YXIoLS1jb2xvci1zaGFkb3ctaXRlbS1mb2N1cyl9LmNlLXBvcG92ZXItaXRlbS0taGlkZGVue2Rpc3BsYXk6bm9uZX1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLXBvcG92ZXItaXRlbTpob3ZlcntjdXJzb3I6cG9pbnRlcn0uY2UtcG9wb3Zlci1pdGVtOmhvdmVyOm5vdCguY2UtcG9wb3Zlci1pdGVtLS1uby1ob3Zlcil7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0taG92ZXIpfS5jZS1wb3BvdmVyLWl0ZW06aG92ZXIgLmNlLXBvcG92ZXItaXRlbV9faWNvbnstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmV9fS5jZS1wb3BvdmVyLWl0ZW0tLWNvbmZpcm1hdGlvbntiYWNrZ3JvdW5kOnZhcigtLWNvbG9yLWJhY2tncm91bmQtaXRlbS1jb25maXJtKX0uY2UtcG9wb3Zlci1pdGVtLS1jb25maXJtYXRpb24gLmNlLXBvcG92ZXItaXRlbV9faWNvbntjb2xvcjp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0tY29uZmlybSl9LmNlLXBvcG92ZXItaXRlbS0tY29uZmlybWF0aW9uIC5jZS1wb3BvdmVyLWl0ZW1fX3RpdGxle2NvbG9yOiNmZmZ9QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZS1wb3BvdmVyLWl0ZW0tLWNvbmZpcm1hdGlvbjpub3QoLmNlLXBvcG92ZXItaXRlbS0tbm8taG92ZXIpOmhvdmVye2JhY2tncm91bmQ6dmFyKC0tY29sb3ItYmFja2dyb3VuZC1pdGVtLWNvbmZpcm0taG92ZXIpfX0uY2UtcG9wb3Zlci1pdGVtLS1jb25maXJtYXRpb246bm90KC5jZS1wb3BvdmVyLWl0ZW0tLW5vLWZvY3VzKS5jZS1wb3BvdmVyLWl0ZW0tLWZvY3VzZWR7YmFja2dyb3VuZDp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0tY29uZmlybS1ob3ZlcikhaW1wb3J0YW50fS5jZS1wb3BvdmVyLWl0ZW0tLWNvbmZpcm1hdGlvbiAuY2UtcG9wb3Zlci1pdGVtX19pY29uLC5jZS1wb3BvdmVyLWl0ZW0tLWFjdGl2ZSAuY2UtcG9wb3Zlci1pdGVtX19pY29uLC5jZS1wb3BvdmVyLWl0ZW0tLWZvY3VzZWQgLmNlLXBvcG92ZXItaXRlbV9faWNvbnstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmV9QC13ZWJraXQta2V5ZnJhbWVzIHBhbmVsU2hvd2luZ3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtOHB4KSBzY2FsZSguOSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCkgc2NhbGUoLjkpfTcwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCl9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QGtleWZyYW1lcyBwYW5lbFNob3dpbmd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCkgc2NhbGUoLjkpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC04cHgpIHNjYWxlKC45KX03MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUAtd2Via2l0LWtleWZyYW1lcyBwYW5lbFNob3dpbmdNb2JpbGV7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTRweCkgc2NhbGUoLjk4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxNHB4KSBzY2FsZSguOTgpfTcwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtNHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNHB4KX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIHBhbmVsU2hvd2luZ01vYmlsZXswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxNHB4KSBzY2FsZSguOTgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDE0cHgpIHNjYWxlKC45OCl9NzAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC00cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC00cHgpfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fS53b2JibGV7LXdlYmtpdC1hbmltYXRpb24tbmFtZTp3b2JibGU7YW5pbWF0aW9uLW5hbWU6d29iYmxlOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi40czthbmltYXRpb24tZHVyYXRpb246LjRzfUAtd2Via2l0LWtleWZyYW1lcyB3b2JibGV7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtOSUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTklLDAsMCl9MzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDklLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDklLDAsMCl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC00JSwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNCUsMCwwKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoNCUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoNCUsMCwwKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTElLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xJSwwLDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX19QGtleWZyYW1lcyB3b2JibGV7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtOSUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTklLDAsMCl9MzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDklLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDklLDAsMCl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC00JSwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNCUsMCwwKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoNCUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoNCUsMCwwKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTElLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xJSwwLDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX19XG5gO1xuY2xhc3MgaGkgZXh0ZW5kcyBTIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5pc01vYmlsZSA9ICExLCB0aGlzLmNvbnRlbnRSZWN0Q2FjaGUgPSB2b2lkIDAsIHRoaXMucmVzaXplRGVib3VuY2VyID0gUHQoKCkgPT4ge1xuICAgICAgdGhpcy53aW5kb3dSZXNpemUoKTtcbiAgICB9LCAyMDApO1xuICB9XG4gIC8qKlxuICAgKiBFZGl0b3IuanMgVUkgQ1NTIGNsYXNzIG5hbWVzXG4gICAqXG4gICAqIEByZXR1cm5zIHt7ZWRpdG9yV3JhcHBlcjogc3RyaW5nLCBlZGl0b3Jab25lOiBzdHJpbmd9fVxuICAgKi9cbiAgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZWRpdG9yV3JhcHBlcjogXCJjb2RleC1lZGl0b3JcIixcbiAgICAgIGVkaXRvcldyYXBwZXJOYXJyb3c6IFwiY29kZXgtZWRpdG9yLS1uYXJyb3dcIixcbiAgICAgIGVkaXRvclpvbmU6IFwiY29kZXgtZWRpdG9yX19yZWRhY3RvclwiLFxuICAgICAgZWRpdG9yWm9uZUhpZGRlbjogXCJjb2RleC1lZGl0b3JfX3JlZGFjdG9yLS1oaWRkZW5cIixcbiAgICAgIGVkaXRvckxvYWRlcjogXCJjb2RleC1lZGl0b3JfX2xvYWRlclwiLFxuICAgICAgZWRpdG9yRW1wdHk6IFwiY29kZXgtZWRpdG9yLS1lbXB0eVwiLFxuICAgICAgZWRpdG9yUnRsRml4OiBcImNvZGV4LWVkaXRvci0tcnRsXCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gV2lkdGggb2YgY2VudGVyIGNvbHVtbiBvZiBFZGl0b3JcbiAgICpcbiAgICogQHJldHVybnMge0RPTVJlY3R9XG4gICAqL1xuICBnZXQgY29udGVudFJlY3QoKSB7XG4gICAgaWYgKHRoaXMuY29udGVudFJlY3RDYWNoZSlcbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRSZWN0Q2FjaGU7XG4gICAgY29uc3QgZSA9IHRoaXMubm9kZXMud3JhcHBlci5xdWVyeVNlbGVjdG9yKGAuJHtGLkNTUy5jb250ZW50fWApO1xuICAgIHJldHVybiBlID8gKHRoaXMuY29udGVudFJlY3RDYWNoZSA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHRoaXMuY29udGVudFJlY3RDYWNoZSkgOiB7XG4gICAgICB3aWR0aDogNjUwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBsb2FkZXIgdG8gZWRpdG9yIHdoaWxlIGNvbnRlbnQgaXMgbm90IHJlYWR5XG4gICAqL1xuICBhZGRMb2FkZXIoKSB7XG4gICAgdGhpcy5ub2Rlcy5sb2FkZXIgPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MuZWRpdG9yTG9hZGVyKSwgdGhpcy5ub2Rlcy53cmFwcGVyLnByZXBlbmQodGhpcy5ub2Rlcy5sb2FkZXIpLCB0aGlzLm5vZGVzLnJlZGFjdG9yLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuZWRpdG9yWm9uZUhpZGRlbik7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgbG9hZGVyIHdoZW4gY29udGVudCBoYXMgbG9hZGVkXG4gICAqL1xuICByZW1vdmVMb2FkZXIoKSB7XG4gICAgdGhpcy5ub2Rlcy5sb2FkZXIucmVtb3ZlKCksIHRoaXMubm9kZXMucmVkYWN0b3IuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5lZGl0b3Jab25lSGlkZGVuKTtcbiAgfVxuICAvKipcbiAgICogTWFraW5nIG1haW4gaW50ZXJmYWNlXG4gICAqL1xuICBhc3luYyBwcmVwYXJlKCkge1xuICAgIHRoaXMuY2hlY2tJc01vYmlsZSgpLCB0aGlzLm1ha2UoKSwgdGhpcy5hZGRMb2FkZXIoKSwgdGhpcy5sb2FkU3R5bGVzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSByZWFkLW9ubHkgc3RhdGVcbiAgICpcbiAgICogSWYgcmVhZE9ubHkgaXMgdHJ1ZTpcbiAgICogIC0gcmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gbWFpbiBVSSBtb2R1bGUgZWxlbWVudHNcbiAgICpcbiAgICogaWYgcmVhZE9ubHkgaXMgZmFsc2U6XG4gICAqICAtIGVuYWJsZXMgYWxsIGxpc3RlbmVycyB0byBVSSBtb2R1bGUgZWxlbWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSByZWFkT25seUVuYWJsZWQgLSBcInJlYWQgb25seVwiIHN0YXRlXG4gICAqL1xuICB0b2dnbGVSZWFkT25seShlKSB7XG4gICAgZSA/IHRoaXMuZGlzYWJsZU1vZHVsZUJpbmRpbmdzKCkgOiB0aGlzLmVuYWJsZU1vZHVsZUJpbmRpbmdzKCk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIEVkaXRvciBpcyBlbXB0eSBhbmQgc2V0IENTUyBjbGFzcyB0byB3cmFwcGVyXG4gICAqL1xuICBjaGVja0VtcHRpbmVzcygpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC50b2dnbGUodGhpcy5DU1MuZWRpdG9yRW1wdHksIGUuaXNFZGl0b3JFbXB0eSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIG9uZSBvZiBUb29sYmFyIGlzIG9wZW5lZFxuICAgKiBVc2VkIHRvIHByZXZlbnQgZ2xvYmFsIGtleWRvd25zIChmb3IgZXhhbXBsZSwgRW50ZXIpIGNvbmZsaWN0cyB3aXRoIEVudGVyLW9uLXRvb2xiYXJcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgc29tZVRvb2xiYXJPcGVuZWQoKSB7XG4gICAgY29uc3QgeyBUb29sYmFyOiBlLCBCbG9ja1NldHRpbmdzOiB0LCBJbmxpbmVUb29sYmFyOiBvLCBDb252ZXJzaW9uVG9vbGJhcjogaSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgcmV0dXJuIHQub3BlbmVkIHx8IG8ub3BlbmVkIHx8IGkub3BlbmVkIHx8IGUudG9vbGJveC5vcGVuZWQ7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGZvciBzb21lIEZsaXBwZXItYnV0dG9ucyBpcyB1bmRlciBmb2N1c1xuICAgKi9cbiAgZ2V0IHNvbWVGbGlwcGVyQnV0dG9uRm9jdXNlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94Lmhhc0ZvY3VzKCkgPyAhMCA6IE9iamVjdC5lbnRyaWVzKHRoaXMuRWRpdG9yKS5maWx0ZXIoKFtlLCB0XSkgPT4gdC5mbGlwcGVyIGluc3RhbmNlb2YgRykuc29tZSgoW2UsIHRdKSA9PiB0LmZsaXBwZXIuaGFzRm9jdXMoKSk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFuIGVkaXRvcmBzIFVJXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMubm9kZXMuaG9sZGVyLmlubmVySFRNTCA9IFwiXCI7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlIGFsbCBFZGl0b3IncyB0b29sYmFyc1xuICAgKi9cbiAgY2xvc2VBbGxUb29sYmFycygpIHtcbiAgICBjb25zdCB7IFRvb2xiYXI6IGUsIEJsb2NrU2V0dGluZ3M6IHQsIElubGluZVRvb2xiYXI6IG8sIENvbnZlcnNpb25Ub29sYmFyOiBpIH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0LmNsb3NlKCksIG8uY2xvc2UoKSwgaS5jbG9zZSgpLCBlLnRvb2xib3guY2xvc2UoKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgZm9yIG1vYmlsZSBtb2RlIGFuZCBjYWNoZSBhIHJlc3VsdFxuICAgKi9cbiAgY2hlY2tJc01vYmlsZSgpIHtcbiAgICB0aGlzLmlzTW9iaWxlID0gd2luZG93LmlubmVyV2lkdGggPCBzdDtcbiAgfVxuICAvKipcbiAgICogTWFrZXMgRWRpdG9yLmpzIGludGVyZmFjZVxuICAgKi9cbiAgbWFrZSgpIHtcbiAgICB0aGlzLm5vZGVzLmhvbGRlciA9IGQuZ2V0SG9sZGVyKHRoaXMuY29uZmlnLmhvbGRlciksIHRoaXMubm9kZXMud3JhcHBlciA9IGQubWFrZShcImRpdlwiLCBbXG4gICAgICB0aGlzLkNTUy5lZGl0b3JXcmFwcGVyLFxuICAgICAgLi4udGhpcy5pc1J0bCA/IFt0aGlzLkNTUy5lZGl0b3JSdGxGaXhdIDogW11cbiAgICBdKSwgdGhpcy5ub2Rlcy5yZWRhY3RvciA9IGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy5lZGl0b3Jab25lKSwgdGhpcy5ub2Rlcy5ob2xkZXIub2Zmc2V0V2lkdGggPCB0aGlzLmNvbnRlbnRSZWN0LndpZHRoICYmIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmVkaXRvcldyYXBwZXJOYXJyb3cpLCB0aGlzLm5vZGVzLnJlZGFjdG9yLnN0eWxlLnBhZGRpbmdCb3R0b20gPSB0aGlzLmNvbmZpZy5taW5IZWlnaHQgKyBcInB4XCIsIHRoaXMubm9kZXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLnJlZGFjdG9yKSwgdGhpcy5ub2Rlcy5ob2xkZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy53cmFwcGVyKTtcbiAgfVxuICAvKipcbiAgICogQXBwZW5kcyBDU1NcbiAgICovXG4gIGxvYWRTdHlsZXMoKSB7XG4gICAgY29uc3QgZSA9IFwiZWRpdG9yLWpzLXN0eWxlc1wiO1xuICAgIGlmIChkLmdldChlKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB0ID0gZC5tYWtlKFwic3R5bGVcIiwgbnVsbCwge1xuICAgICAgaWQ6IGUsXG4gICAgICB0ZXh0Q29udGVudDogZGkudG9TdHJpbmcoKVxuICAgIH0pO1xuICAgIGQucHJlcGVuZChkb2N1bWVudC5oZWFkLCB0KTtcbiAgfVxuICAvKipcbiAgICogQmluZCBldmVudHMgb24gdGhlIEVkaXRvci5qcyBpbnRlcmZhY2VcbiAgICovXG4gIGVuYWJsZU1vZHVsZUJpbmRpbmdzKCkge1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucmVkYWN0b3IsIFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMucmVkYWN0b3JDbGlja2VkKGUpO1xuICAgIH0sICExKSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24odGhpcy5ub2Rlcy5yZWRhY3RvciwgXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuZG9jdW1lbnRUb3VjaGVkKGUpO1xuICAgIH0sICEwKSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24odGhpcy5ub2Rlcy5yZWRhY3RvciwgXCJ0b3VjaHN0YXJ0XCIsIChlKSA9PiB7XG4gICAgICB0aGlzLmRvY3VtZW50VG91Y2hlZChlKTtcbiAgICB9LCAhMCksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGRvY3VtZW50LCBcImtleWRvd25cIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuZG9jdW1lbnRLZXlkb3duKGUpO1xuICAgIH0sICEwKSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZG9jdW1lbnQsIFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLmRvY3VtZW50Q2xpY2tlZChlKTtcbiAgICB9LCAhMCksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGRvY3VtZW50LCBcInNlbGVjdGlvbmNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICB9LCAhMCksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHdpbmRvdywgXCJyZXNpemVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5yZXNpemVEZWJvdW5jZXIoKTtcbiAgICB9LCB7XG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pLCB0aGlzLndhdGNoQmxvY2tIb3ZlcmVkRXZlbnRzKCk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3RlbiByZWRhY3RvciBtb3VzZW1vdmUgdG8gZW1pdCAnYmxvY2staG92ZXJlZCcgZXZlbnRcbiAgICovXG4gIHdhdGNoQmxvY2tIb3ZlcmVkRXZlbnRzKCkge1xuICAgIGxldCBlO1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucmVkYWN0b3IsIFwibW91c2Vtb3ZlXCIsIFRlKCh0KSA9PiB7XG4gICAgICBjb25zdCBvID0gdC50YXJnZXQuY2xvc2VzdChcIi5jZS1ibG9ja1wiKTtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmFueUJsb2NrU2VsZWN0ZWQgfHwgbyAmJiBlICE9PSBvICYmIChlID0gbywgdGhpcy5ldmVudHNEaXNwYXRjaGVyLmVtaXQobXQsIHtcbiAgICAgICAgYmxvY2s6IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKG8pXG4gICAgICB9KSk7XG4gICAgfSwgMjApLCB7XG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBVbmJpbmQgZXZlbnRzIG9uIHRoZSBFZGl0b3IuanMgaW50ZXJmYWNlXG4gICAqL1xuICBkaXNhYmxlTW9kdWxlQmluZGluZ3MoKSB7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMuY2xlYXJBbGwoKTtcbiAgfVxuICAvKipcbiAgICogUmVzaXplIHdpbmRvdyBoYW5kbGVyXG4gICAqL1xuICB3aW5kb3dSZXNpemUoKSB7XG4gICAgdGhpcy5jb250ZW50UmVjdENhY2hlID0gbnVsbCwgdGhpcy5jaGVja0lzTW9iaWxlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEFsbCBrZXlkb3ducyBvbiBkb2N1bWVudFxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGRvY3VtZW50S2V5ZG93bihlKSB7XG4gICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgIGNhc2UgQi5FTlRFUjpcbiAgICAgICAgdGhpcy5lbnRlclByZXNzZWQoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBCLkJBQ0tTUEFDRTpcbiAgICAgICAgdGhpcy5iYWNrc3BhY2VQcmVzc2VkKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQi5FU0M6XG4gICAgICAgIHRoaXMuZXNjYXBlUHJlc3NlZChlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmRlZmF1bHRCZWhhdmlvdXIoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSWdub3JlIGFsbCBvdGhlciBkb2N1bWVudCdzIGtleWRvd24gZXZlbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgZGVmYXVsdEJlaGF2aW91cihlKSB7XG4gICAgY29uc3QgeyBjdXJyZW50QmxvY2s6IHQgfSA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlciwgbyA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3RoaXMuQ1NTLmVkaXRvcldyYXBwZXJ9YCksIGkgPSBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUuc2hpZnRLZXk7XG4gICAgaWYgKHQgIT09IHZvaWQgMCAmJiBvID09PSBudWxsKSB7XG4gICAgICB0aGlzLkVkaXRvci5CbG9ja0V2ZW50cy5rZXlkb3duKGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvIHx8IHQgJiYgaSB8fCAodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmRyb3BQb2ludGVyKCksIHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgYmFja3NwYWNlUHJlc3NlZChlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIEJsb2NrU2VsZWN0aW9uOiBvLCBDYXJldDogaSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgaWYgKG8uYW55QmxvY2tTZWxlY3RlZCAmJiAhbS5pc1NlbGVjdGlvbkV4aXN0cykge1xuICAgICAgY29uc3QgbiA9IHQucmVtb3ZlU2VsZWN0ZWRCbG9ja3MoKTtcbiAgICAgIGkuc2V0VG9CbG9jayh0Lmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgobiwgITApLCBpLnBvc2l0aW9ucy5TVEFSVCksIG8uY2xlYXJTZWxlY3Rpb24oZSksIGUucHJldmVudERlZmF1bHQoKSwgZS5zdG9wUHJvcGFnYXRpb24oKSwgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEVzY2FwZSBwcmVzc2VkXG4gICAqIElmIHNvbWUgb2YgVG9vbGJhciBjb21wb25lbnRzIGFyZSBvcGVuZWQsIHRoZW4gY2xvc2UgaXQgb3RoZXJ3aXNlIGNsb3NlIFRvb2xiYXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBlc2NhcGUga2V5ZG93biBldmVudFxuICAgKi9cbiAgZXNjYXBlUHJlc3NlZChlKSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSksIHRoaXMuRWRpdG9yLlRvb2xiYXIudG9vbGJveC5vcGVuZWQgPyAodGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94LmNsb3NlKCksIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jaykpIDogdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuZWQgPyB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCkgOiB0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5vcGVuZWQgPyB0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5jbG9zZSgpIDogdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5vcGVuZWQgPyB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCkgOiB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEVudGVyIHByZXNzZWQgb24gZG9jdW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWJvYXJkIGV2ZW50XG4gICAqL1xuICBlbnRlclByZXNzZWQoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBCbG9ja1NlbGVjdGlvbjogbyB9ID0gdGhpcy5FZGl0b3IsIGkgPSB0LmN1cnJlbnRCbG9ja0luZGV4ID49IDA7XG4gICAgaWYgKG8uYW55QmxvY2tTZWxlY3RlZCAmJiAhbS5pc1NlbGVjdGlvbkV4aXN0cykge1xuICAgICAgby5jbGVhclNlbGVjdGlvbihlKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc29tZVRvb2xiYXJPcGVuZWQgJiYgaSAmJiBlLnRhcmdldC50YWdOYW1lID09PSBcIkJPRFlcIikge1xuICAgICAgY29uc3QgbiA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5pbnNlcnQoKTtcbiAgICAgIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sobiksIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5oaWdobGlnaHRDdXJyZW50Tm9kZSgpLCB0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmVBbmRPcGVuKG4pO1xuICAgIH1cbiAgICB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKTtcbiAgfVxuICAvKipcbiAgICogQWxsIGNsaWNrcyBvbiBkb2N1bWVudFxuICAgKlxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50IC0gQ2xpY2sgZXZlbnRcbiAgICovXG4gIGRvY3VtZW50Q2xpY2tlZChlKSB7XG4gICAgaWYgKCFlLmlzVHJ1c3RlZClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB0ID0gZS50YXJnZXQ7XG4gICAgdGhpcy5ub2Rlcy5ob2xkZXIuY29udGFpbnModCkgfHwgbS5pc0F0RWRpdG9yIHx8ICh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZHJvcFBvaW50ZXIoKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpKTtcbiAgICBjb25zdCBpID0gdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5ub2Rlcy53cmFwcGVyLmNvbnRhaW5zKHQpLCBuID0gdGhpcy5FZGl0b3IuVG9vbGJhci5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIuY29udGFpbnModCksIHIgPSBpIHx8IG47XG4gICAgaWYgKHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkICYmICFyKSB7XG4gICAgICB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCk7XG4gICAgICBjb25zdCBhID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlDaGlsZE5vZGUodCk7XG4gICAgICB0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmVBbmRPcGVuKGEpO1xuICAgIH1cbiAgICB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKTtcbiAgfVxuICAvKipcbiAgICogRmlyc3QgdG91Y2ggb24gZWRpdG9yXG4gICAqIEZpcmVkIGJlZm9yZSBjbGlja1xuICAgKlxuICAgKiBVc2VkIHRvIGNoYW5nZSBjdXJyZW50IGJsb2NrIFx1MjAxNCB3ZSBuZWVkIHRvIGRvIGl0IGJlZm9yZSAnc2VsZWN0aW9uQ2hhbmdlJyBldmVudC5cbiAgICogQWxzbzpcbiAgICogLSBNb3ZlIGFuZCBzaG93IHRoZSBUb29sYmFyXG4gICAqIC0gU2V0IGEgQ2FyZXRcbiAgICpcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50IHwgVG91Y2hFdmVudH0gZXZlbnQgLSB0b3VjaCBvciBtb3VzZSBldmVudFxuICAgKi9cbiAgZG9jdW1lbnRUb3VjaGVkKGUpIHtcbiAgICBsZXQgdCA9IGUudGFyZ2V0O1xuICAgIGlmICh0ID09PSB0aGlzLm5vZGVzLnJlZGFjdG9yKSB7XG4gICAgICBjb25zdCBvID0gZSBpbnN0YW5jZW9mIE1vdXNlRXZlbnQgPyBlLmNsaWVudFggOiBlLnRvdWNoZXNbMF0uY2xpZW50WCwgaSA9IGUgaW5zdGFuY2VvZiBNb3VzZUV2ZW50ID8gZS5jbGllbnRZIDogZS50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICB0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChvLCBpKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5zZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZSh0KSwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmhpZ2hsaWdodEN1cnJlbnROb2RlKCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aGlzLkVkaXRvci5SZWN0YW5nbGVTZWxlY3Rpb24uaXNSZWN0QWN0aXZhdGVkKCkgfHwgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9UaGVMYXN0QmxvY2soKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbigpO1xuICB9XG4gIC8qKlxuICAgKiBBbGwgY2xpY2tzIG9uIHRoZSByZWRhY3RvciB6b25lXG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBjbGljayBldmVudFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogLSBCeSBjbGlja3Mgb24gdGhlIEVkaXRvcidzIGJvdHRvbSB6b25lOlxuICAgKiAgICAgIC0gaWYgbGFzdCBCbG9jayBpcyBlbXB0eSwgc2V0IGEgQ2FyZXQgdG8gdGhpc1xuICAgKiAgICAgIC0gb3RoZXJ3aXNlLCBhZGQgYSBuZXcgZW1wdHkgQmxvY2sgYW5kIHNldCBhIENhcmV0IHRvIHRoYXRcbiAgICovXG4gIHJlZGFjdG9yQ2xpY2tlZChlKSB7XG4gICAgY29uc3QgeyBCbG9ja1NlbGVjdGlvbjogdCB9ID0gdGhpcy5FZGl0b3I7XG4gICAgaWYgKCFtLmlzQ29sbGFwc2VkKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IG8gPSAoKSA9PiB7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0sIGkgPSBlLnRhcmdldCwgbiA9IGUubWV0YUtleSB8fCBlLmN0cmxLZXk7XG4gICAgaWYgKGQuaXNBbmNob3IoaSkgJiYgbikge1xuICAgICAgbygpO1xuICAgICAgY29uc3QgdSA9IGkuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSwgaCA9IEh0KHUpO1xuICAgICAganQoaCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHIgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUluZGV4KC0xKSwgYSA9IGQub2Zmc2V0KHIuaG9sZGVyKS5ib3R0b20sIGwgPSBlLnBhZ2VZO1xuICAgIGlmIChlLnRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgZS50YXJnZXQuaXNFcXVhbE5vZGUodGhpcy5ub2Rlcy5yZWRhY3RvcikgJiYgLyoqXG4gICAgKiBJZiB0aGVyZSBpcyBjcm9zcyBibG9jayBzZWxlY3Rpb24gc3RhcnRlZCwgdGFyZ2V0IHdpbGwgYmUgZXF1YWwgdG8gcmVkYWN0b3Igc28gd2UgbmVlZCBhZGRpdGlvbmFsIGNoZWNrXG4gICAgKi9cbiAgICAhdC5hbnlCbG9ja1NlbGVjdGVkICYmIC8qKlxuICAgICogUHJldmVudCBjYXJldCBqdW1waW5nICh0byBsYXN0IGJsb2NrKSB3aGVuIGNsaWNraW5nIGJldHdlZW4gYmxvY2tzXG4gICAgKi9cbiAgICBhIDwgbCkge1xuICAgICAgbygpO1xuICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHUsIENhcmV0OiBoLCBUb29sYmFyOiBmIH0gPSB0aGlzLkVkaXRvcjtcbiAgICAgICghdS5sYXN0QmxvY2sudG9vbC5pc0RlZmF1bHQgfHwgIXUubGFzdEJsb2NrLmlzRW1wdHkpICYmIHUuaW5zZXJ0QXRFbmQoKSwgaC5zZXRUb1RoZUxhc3RCbG9jaygpLCBmLm1vdmVBbmRPcGVuKHUubGFzdEJsb2NrKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBzZWxlY3Rpb24gY2hhbmdlcyBvbiBtb2JpbGUgZGV2aWNlc1xuICAgKiBVc2VzIGZvciBzaG93aW5nIHRoZSBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgc2VsZWN0aW9uQ2hhbmdlZCgpIHtcbiAgICBjb25zdCB7IENyb3NzQmxvY2tTZWxlY3Rpb246IGUsIEJsb2NrU2VsZWN0aW9uOiB0IH0gPSB0aGlzLkVkaXRvciwgbyA9IG0uYW5jaG9yRWxlbWVudDtcbiAgICBpZiAoZS5pc0Nyb3NzQmxvY2tTZWxlY3Rpb25TdGFydGVkICYmIHQuYW55QmxvY2tTZWxlY3RlZCAmJiBtLmdldCgpLnJlbW92ZUFsbFJhbmdlcygpLCAhbykge1xuICAgICAgbS5yYW5nZSB8fCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGkgPSBvLmNsb3Nlc3QoYC4ke0YuQ1NTLmNvbnRlbnR9YCkgPT09IG51bGw7XG4gICAgaWYgKGkgJiYgKHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY29udGFpbnNOb2RlKG8pIHx8IHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKSwgIShvLmRhdGFzZXQuaW5saW5lVG9vbGJhciA9PT0gXCJ0cnVlXCIpKSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrIHx8IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5zZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZShvKTtcbiAgICBjb25zdCBuID0gaSAhPT0gITA7XG4gICAgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci50cnlUb1Nob3coITAsIG4pO1xuICB9XG59XG5jb25zdCB1aSA9IHtcbiAgLy8gQVBJIE1vZHVsZXNcbiAgQmxvY2tzQVBJOiBadCxcbiAgQ2FyZXRBUEk6IEd0LFxuICBFdmVudHNBUEk6IHF0LFxuICBJMThuQVBJOiBEZSxcbiAgQVBJOiBKdCxcbiAgSW5saW5lVG9vbGJhckFQSTogUXQsXG4gIExpc3RlbmVyc0FQSTogZW8sXG4gIE5vdGlmaWVyQVBJOiBubyxcbiAgUmVhZE9ubHlBUEk6IHNvLFxuICBTYW5pdGl6ZXJBUEk6IHBvLFxuICBTYXZlckFQSTogZm8sXG4gIFNlbGVjdGlvbkFQSTogZ28sXG4gIFN0eWxlc0FQSTogYm8sXG4gIFRvb2xiYXJBUEk6IG1vLFxuICBUb29sdGlwQVBJOiB4byxcbiAgVWlBUEk6IHdvLFxuICAvLyBUb29sYmFyIE1vZHVsZXNcbiAgQmxvY2tTZXR0aW5nczogUm8sXG4gIENvbnZlcnNpb25Ub29sYmFyOiBZLFxuICBUb29sYmFyOiBqbyxcbiAgSW5saW5lVG9vbGJhcjogVW8sXG4gIC8vIE1vZHVsZXNcbiAgQmxvY2tFdmVudHM6ICRvLFxuICBCbG9ja01hbmFnZXI6IEtvLFxuICBCbG9ja1NlbGVjdGlvbjogWG8sXG4gIENhcmV0OiB2ZSxcbiAgQ3Jvc3NCbG9ja1NlbGVjdGlvbjogVm8sXG4gIERyYWdORHJvcDogWm8sXG4gIE1vZGlmaWNhdGlvbnNPYnNlcnZlcjogR28sXG4gIFBhc3RlOiB3dCxcbiAgUmVhZE9ubHk6IHFvLFxuICBSZWN0YW5nbGVTZWxlY3Rpb246IHBlLFxuICBSZW5kZXJlcjogSm8sXG4gIFNhdmVyOiBRbyxcbiAgVG9vbHM6IFN0LFxuICBVSTogaGlcbn07XG5jbGFzcyBwaSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0VkaXRvckNvbmZpZ30gY29uZmlnIC0gdXNlciBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5tb2R1bGVJbnN0YW5jZXMgPSB7fSwgdGhpcy5ldmVudHNEaXNwYXRjaGVyID0gbmV3IHdlKCk7XG4gICAgbGV0IHQsIG87XG4gICAgdGhpcy5pc1JlYWR5ID0gbmV3IFByb21pc2UoKGksIG4pID0+IHtcbiAgICAgIHQgPSBpLCBvID0gbjtcbiAgICB9KSwgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBlLCBhd2FpdCB0aGlzLnZhbGlkYXRlKCksIGF3YWl0IHRoaXMuaW5pdCgpLCBhd2FpdCB0aGlzLnN0YXJ0KCksIEsoXCJJJ20gcmVhZHkhIChcdUZGODlcdTI1RDVcdTMwRUVcdTI1RDUpXHVGRjg5KjpcdUZGNjVcdUZGOUZcdTI3MjdcIiwgXCJsb2dcIiwgXCJcIiwgXCJjb2xvcjogI0UyNEE3NVwiKSwgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnJlbmRlcigpLCB0aGlzLmNvbmZpZ3VyYXRpb24uYXV0b2ZvY3VzKSB7XG4gICAgICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGksIENhcmV0OiBuIH0gPSB0aGlzLm1vZHVsZUluc3RhbmNlcztcbiAgICAgICAgICBuLnNldFRvQmxvY2soaS5ibG9ja3NbMF0sIG4ucG9zaXRpb25zLlNUQVJUKSwgaS5oaWdobGlnaHRDdXJyZW50Tm9kZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kdWxlSW5zdGFuY2VzLlVJLnJlbW92ZUxvYWRlcigpLCB0KCk7XG4gICAgICB9LCA1MDApO1xuICAgIH0pLmNhdGNoKChpKSA9PiB7XG4gICAgICBUKGBFZGl0b3IuanMgaXMgbm90IHJlYWR5IGJlY2F1c2Ugb2YgJHtpfWAsIFwiZXJyb3JcIiksIG8oaSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHRpbmcgZm9yIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtFZGl0b3JDb25maWd8c3RyaW5nfSBjb25maWcgLSBFZGl0b3IncyBjb25maWcgdG8gc2V0XG4gICAqL1xuICBzZXQgY29uZmlndXJhdGlvbihlKSB7XG4gICAgdmFyIG8sIGk7XG4gICAgaihlKSA/IHRoaXMuY29uZmlnID0ge1xuICAgICAgLi4uZVxuICAgIH0gOiB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIGhvbGRlcjogZVxuICAgIH0sIEllKCEhdGhpcy5jb25maWcuaG9sZGVySWQsIFwiY29uZmlnLmhvbGRlcklkXCIsIFwiY29uZmlnLmhvbGRlclwiKSwgdGhpcy5jb25maWcuaG9sZGVySWQgJiYgIXRoaXMuY29uZmlnLmhvbGRlciAmJiAodGhpcy5jb25maWcuaG9sZGVyID0gdGhpcy5jb25maWcuaG9sZGVySWQsIHRoaXMuY29uZmlnLmhvbGRlcklkID0gbnVsbCksIHRoaXMuY29uZmlnLmhvbGRlciA9PSBudWxsICYmICh0aGlzLmNvbmZpZy5ob2xkZXIgPSBcImVkaXRvcmpzXCIpLCB0aGlzLmNvbmZpZy5sb2dMZXZlbCB8fCAodGhpcy5jb25maWcubG9nTGV2ZWwgPSBldC5WRVJCT1NFKSwgQXQodGhpcy5jb25maWcubG9nTGV2ZWwpLCBJZSghIXRoaXMuY29uZmlnLmluaXRpYWxCbG9jaywgXCJjb25maWcuaW5pdGlhbEJsb2NrXCIsIFwiY29uZmlnLmRlZmF1bHRCbG9ja1wiKSwgdGhpcy5jb25maWcuZGVmYXVsdEJsb2NrID0gdGhpcy5jb25maWcuZGVmYXVsdEJsb2NrIHx8IHRoaXMuY29uZmlnLmluaXRpYWxCbG9jayB8fCBcInBhcmFncmFwaFwiLCB0aGlzLmNvbmZpZy5taW5IZWlnaHQgPSB0aGlzLmNvbmZpZy5taW5IZWlnaHQgIT09IHZvaWQgMCA/IHRoaXMuY29uZmlnLm1pbkhlaWdodCA6IDMwMDtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgdHlwZTogdGhpcy5jb25maWcuZGVmYXVsdEJsb2NrLFxuICAgICAgZGF0YToge31cbiAgICB9O1xuICAgIHRoaXMuY29uZmlnLnBsYWNlaG9sZGVyID0gdGhpcy5jb25maWcucGxhY2Vob2xkZXIgfHwgITEsIHRoaXMuY29uZmlnLnNhbml0aXplciA9IHRoaXMuY29uZmlnLnNhbml0aXplciB8fCB7XG4gICAgICBwOiAhMCxcbiAgICAgIGI6ICEwLFxuICAgICAgYTogITBcbiAgICB9LCB0aGlzLmNvbmZpZy5oaWRlVG9vbGJhciA9IHRoaXMuY29uZmlnLmhpZGVUb29sYmFyID8gdGhpcy5jb25maWcuaGlkZVRvb2xiYXIgOiAhMSwgdGhpcy5jb25maWcudG9vbHMgPSB0aGlzLmNvbmZpZy50b29scyB8fCB7fSwgdGhpcy5jb25maWcuaTE4biA9IHRoaXMuY29uZmlnLmkxOG4gfHwge30sIHRoaXMuY29uZmlnLmRhdGEgPSB0aGlzLmNvbmZpZy5kYXRhIHx8IHsgYmxvY2tzOiBbXSB9LCB0aGlzLmNvbmZpZy5vblJlYWR5ID0gdGhpcy5jb25maWcub25SZWFkeSB8fCAoKCkgPT4ge1xuICAgIH0pLCB0aGlzLmNvbmZpZy5vbkNoYW5nZSA9IHRoaXMuY29uZmlnLm9uQ2hhbmdlIHx8ICgoKSA9PiB7XG4gICAgfSksIHRoaXMuY29uZmlnLmlubGluZVRvb2xiYXIgPSB0aGlzLmNvbmZpZy5pbmxpbmVUb29sYmFyICE9PSB2b2lkIDAgPyB0aGlzLmNvbmZpZy5pbmxpbmVUb29sYmFyIDogITAsIChWKHRoaXMuY29uZmlnLmRhdGEpIHx8ICF0aGlzLmNvbmZpZy5kYXRhLmJsb2NrcyB8fCB0aGlzLmNvbmZpZy5kYXRhLmJsb2Nrcy5sZW5ndGggPT09IDApICYmICh0aGlzLmNvbmZpZy5kYXRhID0geyBibG9ja3M6IFt0XSB9KSwgdGhpcy5jb25maWcucmVhZE9ubHkgPSB0aGlzLmNvbmZpZy5yZWFkT25seSB8fCAhMSwgKG8gPSB0aGlzLmNvbmZpZy5pMThuKSAhPSBudWxsICYmIG8ubWVzc2FnZXMgJiYgJC5zZXREaWN0aW9uYXJ5KHRoaXMuY29uZmlnLmkxOG4ubWVzc2FnZXMpLCB0aGlzLmNvbmZpZy5pMThuLmRpcmVjdGlvbiA9ICgoaSA9IHRoaXMuY29uZmlnLmkxOG4pID09IG51bGwgPyB2b2lkIDAgOiBpLmRpcmVjdGlvbikgfHwgXCJsdHJcIjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBwcml2YXRlIHByb3BlcnR5XG4gICAqXG4gICAqIEByZXR1cm5zIHtFZGl0b3JDb25maWd9XG4gICAqL1xuICBnZXQgY29uZmlndXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBmb3IgcmVxdWlyZWQgZmllbGRzIGluIEVkaXRvcidzIGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGFzeW5jIHZhbGlkYXRlKCkge1xuICAgIGNvbnN0IHsgaG9sZGVySWQ6IGUsIGhvbGRlcjogdCB9ID0gdGhpcy5jb25maWc7XG4gICAgaWYgKGUgJiYgdClcbiAgICAgIHRocm93IEVycm9yKFwiXHUwMEFCaG9sZGVySWRcdTAwQkIgYW5kIFx1MDBBQmhvbGRlclx1MDBCQiBwYXJhbSBjYW4ndCBhc3NpZ24gYXQgdGhlIHNhbWUgdGltZS5cIik7XG4gICAgaWYgKEoodCkgJiYgIWQuZ2V0KHQpKVxuICAgICAgdGhyb3cgRXJyb3IoYGVsZW1lbnQgd2l0aCBJRCBcdTAwQUIke3R9XHUwMEJCIGlzIG1pc3NpbmcuIFBhc3MgY29ycmVjdCBob2xkZXIncyBJRC5gKTtcbiAgICBpZiAodCAmJiBqKHQpICYmICFkLmlzRWxlbWVudCh0KSlcbiAgICAgIHRocm93IEVycm9yKFwiXHUwMEFCaG9sZGVyXHUwMEJCIHZhbHVlIG11c3QgYmUgYW4gRWxlbWVudCBub2RlXCIpO1xuICB9XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBtb2R1bGVzOlxuICAgKiAgLSBtYWtlIGFuZCBzYXZlIGluc3RhbmNlc1xuICAgKiAgLSBjb25maWd1cmVcbiAgICovXG4gIGluaXQoKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3RNb2R1bGVzKCksIHRoaXMuY29uZmlndXJlTW9kdWxlcygpO1xuICB9XG4gIC8qKlxuICAgKiBTdGFydCBFZGl0b3IhXG4gICAqXG4gICAqIEdldCBsaXN0IG9mIG1vZHVsZXMgdGhhdCBuZWVkcyB0byBiZSBwcmVwYXJlZCBhbmQgcmV0dXJuIGEgc2VxdWVuY2UgKFByb21pc2UpXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgc3RhcnQoKSB7XG4gICAgYXdhaXQgW1xuICAgICAgXCJUb29sc1wiLFxuICAgICAgXCJVSVwiLFxuICAgICAgXCJCbG9ja01hbmFnZXJcIixcbiAgICAgIFwiUGFzdGVcIixcbiAgICAgIFwiQmxvY2tTZWxlY3Rpb25cIixcbiAgICAgIFwiUmVjdGFuZ2xlU2VsZWN0aW9uXCIsXG4gICAgICBcIkNyb3NzQmxvY2tTZWxlY3Rpb25cIixcbiAgICAgIFwiUmVhZE9ubHlcIlxuICAgIF0ucmVkdWNlKFxuICAgICAgKHQsIG8pID0+IHQudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5tb2R1bGVJbnN0YW5jZXNbb10ucHJlcGFyZSgpO1xuICAgICAgICB9IGNhdGNoIChpKSB7XG4gICAgICAgICAgaWYgKGkgaW5zdGFuY2VvZiBhdClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihpLm1lc3NhZ2UpO1xuICAgICAgICAgIFQoYE1vZHVsZSAke299IHdhcyBza2lwcGVkIGJlY2F1c2Ugb2YgJW9gLCBcIndhcm5cIiwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgUHJvbWlzZS5yZXNvbHZlKClcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBSZW5kZXIgaW5pdGlhbCBkYXRhXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kdWxlSW5zdGFuY2VzLlJlbmRlcmVyLnJlbmRlcih0aGlzLmNvbmZpZy5kYXRhLmJsb2Nrcyk7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2UgbW9kdWxlcyBpbnN0YW5jZXMgYW5kIHNhdmUgaXQgdG8gdGhlIEBwcm9wZXJ0eSB0aGlzLm1vZHVsZUluc3RhbmNlc1xuICAgKi9cbiAgY29uc3RydWN0TW9kdWxlcygpIHtcbiAgICBPYmplY3QuZW50cmllcyh1aSkuZm9yRWFjaCgoW2UsIHRdKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLm1vZHVsZUluc3RhbmNlc1tlXSA9IG5ldyB0KHtcbiAgICAgICAgICBjb25maWc6IHRoaXMuY29uZmlndXJhdGlvbixcbiAgICAgICAgICBldmVudHNEaXNwYXRjaGVyOiB0aGlzLmV2ZW50c0Rpc3BhdGNoZXJcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChvKSB7XG4gICAgICAgIFQoXCJbY29uc3RydWN0TW9kdWxlc11cIiwgYE1vZHVsZSAke2V9IHNraXBwZWQgYmVjYXVzZWAsIFwiZXJyb3JcIiwgbyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIE1vZHVsZXMgaW5zdGFuY2VzIGNvbmZpZ3VyYXRpb246XG4gICAqICAtIHBhc3Mgb3RoZXIgbW9kdWxlcyB0byB0aGUgJ3N0YXRlJyBwcm9wZXJ0eVxuICAgKiAgLSAuLi5cbiAgICovXG4gIGNvbmZpZ3VyZU1vZHVsZXMoKSB7XG4gICAgZm9yIChjb25zdCBlIGluIHRoaXMubW9kdWxlSW5zdGFuY2VzKVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMubW9kdWxlSW5zdGFuY2VzLCBlKSAmJiAodGhpcy5tb2R1bGVJbnN0YW5jZXNbZV0uc3RhdGUgPSB0aGlzLmdldE1vZHVsZXNEaWZmKGUpKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIG1vZHVsZXMgd2l0aG91dCBwYXNzZWQgbmFtZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIG1vZHVsZSBmb3Igd2l0Y2ggbW9kdWxlcyBkaWZmZXJlbmNlIHNob3VsZCBiZSBjYWxjdWxhdGVkXG4gICAqL1xuICBnZXRNb2R1bGVzRGlmZihlKSB7XG4gICAgY29uc3QgdCA9IHt9O1xuICAgIGZvciAoY29uc3QgbyBpbiB0aGlzLm1vZHVsZUluc3RhbmNlcylcbiAgICAgIG8gIT09IGUgJiYgKHRbb10gPSB0aGlzLm1vZHVsZUluc3RhbmNlc1tvXSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbn1cbi8qKlxuICogRWRpdG9yLmpzXG4gKlxuICogQGxpY2Vuc2UgQXBhY2hlLTIuMFxuICogQHNlZSBFZGl0b3IuanMgPGh0dHBzOi8vZWRpdG9yanMuaW8+XG4gKiBAYXV0aG9yIENvZGVYIFRlYW0gPGh0dHBzOi8vY29kZXguc28+XG4gKi9cbmNsYXNzIGZpIHtcbiAgLyoqIEVkaXRvciB2ZXJzaW9uICovXG4gIHN0YXRpYyBnZXQgdmVyc2lvbigpIHtcbiAgICByZXR1cm4gXCIyLjI3LjBcIjtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtFZGl0b3JDb25maWd8c3RyaW5nfHVuZGVmaW5lZH0gW2NvbmZpZ3VyYXRpb25dIC0gdXNlciBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgbGV0IHQgPSAoKSA9PiB7XG4gICAgfTtcbiAgICBqKGUpICYmIEQoZS5vblJlYWR5KSAmJiAodCA9IGUub25SZWFkeSk7XG4gICAgY29uc3QgbyA9IG5ldyBwaShlKTtcbiAgICB0aGlzLmlzUmVhZHkgPSBvLmlzUmVhZHkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmV4cG9ydEFQSShvKSwgdCgpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFeHBvcnQgZXh0ZXJuYWwgQVBJIG1ldGhvZHNcbiAgICpcbiAgICogQHBhcmFtIHtDb3JlfSBlZGl0b3IgXHUyMDE0IEVkaXRvcidzIGluc3RhbmNlXG4gICAqL1xuICBleHBvcnRBUEkoZSkge1xuICAgIGNvbnN0IHQgPSBbXCJjb25maWd1cmF0aW9uXCJdLCBvID0gKCkgPT4ge1xuICAgICAgT2JqZWN0LnZhbHVlcyhlLm1vZHVsZUluc3RhbmNlcykuZm9yRWFjaCgobikgPT4ge1xuICAgICAgICBEKG4uZGVzdHJveSkgJiYgbi5kZXN0cm95KCksIG4ubGlzdGVuZXJzLnJlbW92ZUFsbCgpO1xuICAgICAgfSksIGUgPSBudWxsO1xuICAgICAgZm9yIChjb25zdCBuIGluIHRoaXMpXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCBuKSAmJiBkZWxldGUgdGhpc1tuXTtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBudWxsKTtcbiAgICB9O1xuICAgIHQuZm9yRWFjaCgobikgPT4ge1xuICAgICAgdGhpc1tuXSA9IGVbbl07XG4gICAgfSksIHRoaXMuZGVzdHJveSA9IG8sIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBlLm1vZHVsZUluc3RhbmNlcy5BUEkubWV0aG9kcyksIGRlbGV0ZSB0aGlzLmV4cG9ydEFQSSwgT2JqZWN0LmVudHJpZXMoe1xuICAgICAgYmxvY2tzOiB7XG4gICAgICAgIGNsZWFyOiBcImNsZWFyXCIsXG4gICAgICAgIHJlbmRlcjogXCJyZW5kZXJcIlxuICAgICAgfSxcbiAgICAgIGNhcmV0OiB7XG4gICAgICAgIGZvY3VzOiBcImZvY3VzXCJcbiAgICAgIH0sXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgb246IFwib25cIixcbiAgICAgICAgb2ZmOiBcIm9mZlwiLFxuICAgICAgICBlbWl0OiBcImVtaXRcIlxuICAgICAgfSxcbiAgICAgIHNhdmVyOiB7XG4gICAgICAgIHNhdmU6IFwic2F2ZVwiXG4gICAgICB9XG4gICAgfSkuZm9yRWFjaCgoW24sIHJdKSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhyKS5mb3JFYWNoKChbYSwgbF0pID0+IHtcbiAgICAgICAgdGhpc1tsXSA9IGUubW9kdWxlSW5zdGFuY2VzLkFQSS5tZXRob2RzW25dW2FdO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIGZpIGFzIGRlZmF1bHRcbn07XG4iLCAiaW1wb3J0IEVkaXRvckpTIGZyb20gJ0BlZGl0b3Jqcy9lZGl0b3Jqcyc7XG5pbXBvcnQgVW5kbyBmcm9tICdlZGl0b3Jqcy11bmRvJztcblxuaW1wb3J0IHsgYmxvY2tzIGFzIGd1aWd1QmxvY2tzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vLi4vZ3VpZ3UvZ3VpZ3UvcHVibGljL2pzL2V4dGVuZHMvcGF0Y2hlcy93b3Jrc3BhY2UvY29uZmlnRGlhbG9ncyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb3Jrc3BhY2UgZXh0ZW5kcyBmcmFwcGUudmlld3MuV29ya3NwYWNlIHtcblx0Y29uc3RydWN0b3Iod3JhcHBlciwgb3JnYW5pemF0aW9uX25hbWUpIHtcblx0XHRzdXBlcih3cmFwcGVyKTtcblx0XHR0aGlzLndyYXBwZXIgPSAkKHdyYXBwZXIpO1xuXHRcdHRoaXMucGFnZSA9IHdyYXBwZXIucGFnZTtcblx0XHR0aGlzLmJsb2NrcyA9IGZyYXBwZS53b3Jrc3BhY2VfYmxvY2suYmxvY2tzO1xuXHRcdHRoaXMuaXNfcmVhZF9vbmx5ID0gdHJ1ZTtcblx0XHR0aGlzLnBhZ2VzID0ge307XG5cdFx0dGhpcy5zb3J0ZWRfcHVibGljX2l0ZW1zID0gW107XG5cdFx0dGhpcy5zb3J0ZWRfcHJpdmF0ZV9pdGVtcyA9IFtdO1xuXHRcdHRoaXMuY3VycmVudF9wYWdlID0ge307XG5cdFx0dGhpcy5zaWRlYmFyX2l0ZW1zID0ge1xuXHRcdFx0cHVibGljOiB7fSxcblx0XHRcdHByaXZhdGU6IHt9LFxuXHRcdH07XG5cdFx0dGhpcy5vcmdhbml6YXRpb25fbmFtZSA9IG9yZ2FuaXphdGlvbl9uYW1lO1xuXHRcdHRoaXMuc2lkZWJhcl9jYXRlZ29yaWVzID0gWydNeSBXb3Jrc3BhY2VzJywgJ1B1YmxpYyddO1xuXG5cdFx0dGhpcy5wcmVwYXJlX2NvbnRhaW5lcigpO1xuXHRcdHRoaXMuc2V0dXBfcGFnZXMoKTtcblx0XHR0aGlzLnJlZ2lzdGVyX2F3ZXNvbWViYXJfc2hvcnRjdXQoKTtcblx0fVxuXG5cdHByZXBhcmVfY29udGFpbmVyKCkge1xuXHRcdGlmICghdGhpcy5vcmdhbml6YXRpb25fbmFtZSl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGxldCBsaXN0X3NpZGViYXIgPSAkKGBcblx0XHRcdDxkaXYgY2xhc3M9XCJsaXN0LXNpZGViYXIgb3ZlcmxheS1zaWRlYmFyIGhpZGRlbi14cyBoaWRkZW4tc21cIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImRlc2stc2lkZWJhciBsaXN0LXVuc3R5bGVkIHNpZGViYXItbWVudVwiPjwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0YCkuYXBwZW5kVG8odGhpcy53cmFwcGVyLmZpbmQoJy5sYXlvdXQtc2lkZS1zZWN0aW9uJykpO1xuXHRcdHRoaXMuc2lkZWJhciA9IGxpc3Rfc2lkZWJhci5maW5kKCcuZGVzay1zaWRlYmFyJyk7XG5cdFx0dGhpcy5ib2R5ID0gdGhpcy53cmFwcGVyLmZpbmQoJy5sYXlvdXQtbWFpbi1zZWN0aW9uJyk7XG5cdH1cblxuXHRhc3luYyBzZXR1cF9wYWdlcyhyZWxvYWQpIHtcblx0XHRpZiAoIXRoaXMub3JnYW5pemF0aW9uX25hbWUpe1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQhdGhpcy5kaXNjYXJkICYmIHRoaXMuY3JlYXRlX3BhZ2Vfc2tlbGV0b24oKTtcblx0XHQhdGhpcy5kaXNjYXJkICYmIHRoaXMuY3JlYXRlX3NpZGViYXJfc2tlbGV0b24oKTtcblx0XHR0aGlzLnNpZGViYXJfcGFnZXMgPSB0aGlzLmRpc2NhcmQgPyB0aGlzLnNpZGViYXJfcGFnZXMgOiBhd2FpdCB0aGlzLmdldF9wYWdlcygpO1xuXHRcdHRoaXMuY2FjaGVkX3BhZ2VzID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuc2lkZWJhcl9wYWdlcyk7XG5cdFx0dGhpcy5hbGxfcGFnZXMgPSB0aGlzLnNpZGViYXJfcGFnZXMucGFnZXM7XG5cdFx0dGhpcy5oYXNfYWNjZXNzID0gdGhpcy5zaWRlYmFyX3BhZ2VzLmhhc19hY2Nlc3M7XG5cblx0XHRmb3IgKGNvbnN0IHBhZ2Ugb2YgdGhpcy5hbGxfcGFnZXMpIHtcblx0XHRcdHBhZ2UuaXNfZWRpdGFibGUgPSAhcGFnZS5wdWJsaWMgfHwgdGhpcy5oYXNfYWNjZXNzO1xuXHRcdH1cblxuXHRcdHRoaXMucHVibGljX3BhZ2VzID0gdGhpcy5hbGxfcGFnZXMuZmlsdGVyKHBhZ2UgPT4gcGFnZS5wdWJsaWMpO1xuXHRcdHRoaXMucHJpdmF0ZV9wYWdlcyA9IHRoaXMuYWxsX3BhZ2VzLmZpbHRlcihwYWdlID0+ICFwYWdlLnB1YmxpYyk7XG5cblx0XHRpZiAodGhpcy5hbGxfcGFnZXMpIHtcblx0XHRcdGZyYXBwZS53b3Jrc3BhY2VzID0ge307XG5cdFx0XHRmb3IgKGxldCBwYWdlIG9mIHRoaXMuYWxsX3BhZ2VzKSB7XG5cdFx0XHRcdGZyYXBwZS53b3Jrc3BhY2VzW2ZyYXBwZS5yb3V0ZXIuc2x1ZyhwYWdlLm5hbWUpXSA9IHtcblx0XHRcdFx0XHR0aXRsZTogcGFnZS50aXRsZSxcblx0XHRcdFx0XHRwdWJsaWM6IHBhZ2UucHVibGljLFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5tYWtlX3NpZGViYXIoKTtcblx0XHRcdHJlbG9hZCAmJiB0aGlzLnNob3coKTtcblx0XHR9XG5cdH1cblxuXHRnZXRfcGFnZXMoKSB7XG5cdFx0cmV0dXJuIGZyYXBwZS54Y2FsbCgndGlhbmp5X29yZ2FuaXphdGlvbi50aWFuanlfb3JnYW5pemF0aW9uLnBhZ2UudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcuZ2V0X3dvcmtzcGFjZV9zaWRlYmFyX2l0ZW1zJywge1xuXHRcdFx0b3JnYW5pemF0aW9uX25hbWU6IHRoaXMub3JnYW5pemF0aW9uX25hbWUsXG5cdFx0fSk7XG5cdH1cblxuXHRzaWRlYmFyX2l0ZW1fY29udGFpbmVyKGl0ZW0pIHtcblx0XHRyZXR1cm4gJChgXG5cdFx0XHQ8ZGl2XG5cdFx0XHRcdGNsYXNzPVwic2lkZWJhci1pdGVtLWNvbnRhaW5lciAke2l0ZW0uaXNfZWRpdGFibGUgPyAnaXMtZHJhZ2dhYmxlJyA6ICcnfVwiXG5cdFx0XHRcdGl0ZW0tcGFyZW50PVwiJHtpdGVtLnBhcmVudF9wYWdlfVwiXG5cdFx0XHRcdGl0ZW0tbmFtZT1cIiR7aXRlbS50aXRsZX1cIlxuXHRcdFx0XHRpdGVtLXB1YmxpYz1cIiR7aXRlbS5wdWJsaWMgfHwgMH1cIlxuXHRcdFx0XHRpdGVtLWlzLWhpZGRlbj1cIiR7aXRlbS5pc19oaWRkZW4gfHwgMH1cIlxuXHRcdFx0PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZGVzay1zaWRlYmFyLWl0ZW0gc3RhbmRhcmQtc2lkZWJhci1pdGVtICR7aXRlbS5zZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnJ31cIj5cblx0XHRcdFx0XHQ8YVxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJpdGVtLWFuY2hvciAke2l0ZW0uaXNfZWRpdGFibGUgPyAnJyA6ICdibG9jay1jbGljayd9IGl0ZW0tYVwiIHRpdGxlPVwiJHtfXyhpdGVtLnRpdGxlKX1cIlxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwic2lkZWJhci1pdGVtLWljb25cIiBpdGVtLWljb249JHtpdGVtLmljb24gfHwgJ2ZvbGRlci1ub3JtYWwnfT4ke2ZyYXBwZS51dGlscy5pY29uKFxuXHRpdGVtLmljb24gfHwgJ2ZvbGRlci1ub3JtYWwnLFxuXHQnbWQnLFxuKX08L3NwYW4+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cInNpZGViYXItaXRlbS1sYWJlbFwiPiR7X18oaXRlbS50aXRsZS5yZXBsYWNlQWxsKC97eyhbXn1dKyl9fS9nLCAnJykpfTxzcGFuPlxuXHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwic2lkZWJhci1pdGVtLWNvbnRyb2xcIj48L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJzaWRlYmFyLWNoaWxkLWl0ZW0gbmVzdGVkLWNvbnRhaW5lclwiPjwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0YCk7XG5cdH1cblxuXHRtYWtlX3NpZGViYXIoKSB7XG5cdFx0aWYgKHRoaXMuc2lkZWJhci5maW5kKCcuc3RhbmRhcmQtc2lkZWJhci1zZWN0aW9uJylbMF0pIHtcblx0XHRcdHRoaXMuc2lkZWJhci5maW5kKCcuc3RhbmRhcmQtc2lkZWJhci1zZWN0aW9uJykucmVtb3ZlKCk7XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBjYXRlZ29yeSBvZiB0aGlzLnNpZGViYXJfY2F0ZWdvcmllcykge1xuXHRcdFx0aWYgKGNhdGVnb3J5ICE9ICdQdWJsaWMnKXsgY29udGludWU7IH1cblx0XHRcdGxldCByb290X3BhZ2VzID0gdGhpcy5wdWJsaWNfcGFnZXMuZmlsdGVyKFxuXHRcdFx0XHRwYWdlID0+IHBhZ2UucGFyZW50X3BhZ2UgPT0gJycgfHwgcGFnZS5wYXJlbnRfcGFnZSA9PSBudWxsLFxuXHRcdFx0KTtcblx0XHRcdGlmIChjYXRlZ29yeSAhPSAnUHVibGljJykge1xuXHRcdFx0XHRyb290X3BhZ2VzID0gdGhpcy5wcml2YXRlX3BhZ2VzLmZpbHRlcihcblx0XHRcdFx0XHRwYWdlID0+IHBhZ2UucGFyZW50X3BhZ2UgPT0gJycgfHwgcGFnZS5wYXJlbnRfcGFnZSA9PSBudWxsLFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0cm9vdF9wYWdlcyA9IHJvb3RfcGFnZXMudW5pcUJ5KGQgPT4gZC50aXRsZSk7XG5cdFx0XHR0aGlzLmJ1aWxkX3NpZGViYXJfc2VjdGlvbihjYXRlZ29yeSwgcm9vdF9wYWdlcyk7XG5cdFx0fVxuXG5cdFx0Ly8gU2Nyb2xsIHNpZGViYXIgdG8gc2VsZWN0ZWQgcGFnZSBpZiBpdCBpcyBub3QgaW4gdmlld3BvcnQuXG5cdFx0dGhpcy5zaWRlYmFyLmZpbmQoJy5zZWxlY3RlZCcpLmxlbmd0aCAmJlxuXHRcdFx0IWZyYXBwZS5kb20uaXNfZWxlbWVudF9pbl92aWV3cG9ydCh0aGlzLnNpZGViYXIuZmluZCgnLnNlbGVjdGVkJykpICYmXG5cdFx0XHR0aGlzLnNpZGViYXIuZmluZCgnLnNlbGVjdGVkJylbMF0uc2Nyb2xsSW50b1ZpZXcoKTtcblxuXHRcdHRoaXMucmVtb3ZlX3NpZGViYXJfc2tlbGV0b24oKTtcblx0fVxuXG5cdGJ1aWxkX3NpZGViYXJfc2VjdGlvbih0aXRsZSwgcm9vdF9wYWdlcykge1xuXHRcdGxldCBzaWRlYmFyX3NlY3Rpb24gPSAkKFxuXHRcdFx0YDxkaXYgY2xhc3M9XCJzdGFuZGFyZC1zaWRlYmFyLXNlY3Rpb24gbmVzdGVkLWNvbnRhaW5lclwiIGRhdGEtdGl0bGU9XCIke3RpdGxlfVwiPjwvZGl2PmAsXG5cdFx0KTtcblxuXHRcdGxldCAkdGl0bGUgPSAkKGA8ZGl2IGNsYXNzPVwic3RhbmRhcmQtc2lkZWJhci1sYWJlbFwiPlxuXHRcdFx0PHNwYW4+JHtmcmFwcGUudXRpbHMuaWNvbignc21hbGwtZG93bicsICd4cycpfTwvc3Bhbj5cblx0XHRcdDxzcGFuIGNsYXNzPVwic2VjdGlvbi10aXRsZVwiPiR7X18odGl0bGUpfTxzcGFuPlxuXHRcdDwvZGl2PmApLmFwcGVuZFRvKHNpZGViYXJfc2VjdGlvbik7XG5cdFx0dGhpcy5wcmVwYXJlX3NpZGViYXIocm9vdF9wYWdlcywgc2lkZWJhcl9zZWN0aW9uLCB0aGlzLnNpZGViYXIpO1xuXG5cdFx0JHRpdGxlLm9uKCdjbGljaycsIGUgPT4ge1xuXHRcdFx0bGV0IGljb24gPVxuXHRcdFx0XHQkKGUudGFyZ2V0KS5maW5kKCdzcGFuIHVzZScpLmF0dHIoJ2hyZWYnKSA9PT0gJyNpY29uLXNtYWxsLWRvd24nXG5cdFx0XHRcdFx0PyAnI2ljb24tcmlnaHQnXG5cdFx0XHRcdFx0OiAnI2ljb24tc21hbGwtZG93bic7XG5cdFx0XHQkKGUudGFyZ2V0KS5maW5kKCdzcGFuIHVzZScpLmF0dHIoJ2hyZWYnLCBpY29uKTtcblx0XHRcdCQoZS50YXJnZXQpLnBhcmVudCgpLmZpbmQoJy5zaWRlYmFyLWl0ZW0tY29udGFpbmVyJylcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdoaWRkZW4nKTtcblx0XHR9KTtcblxuXHRcdGlmIChPYmplY3Qua2V5cyhyb290X3BhZ2VzKS5sZW5ndGggPT09IDApIHtcblx0XHRcdHNpZGViYXJfc2VjdGlvbi5hZGRDbGFzcygnaGlkZGVuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKFxuXHRcdFx0c2lkZWJhcl9zZWN0aW9uLmZpbmQoJy5zaWRlYmFyLWl0ZW0tY29udGFpbmVyJykubGVuZ3RoICYmXG5cdFx0XHRzaWRlYmFyX3NlY3Rpb24uZmluZChcIj4gW2l0ZW0taXMtaGlkZGVuPScwJ11cIikubGVuZ3RoID09IDBcblx0XHQpIHtcblx0XHRcdHNpZGViYXJfc2VjdGlvbi5hZGRDbGFzcygnaGlkZGVuIHNob3ctaW4tZWRpdC1tb2RlJyk7XG5cdFx0fVxuXHR9XG5cblx0cHJlcGFyZV9zaWRlYmFyKGl0ZW1zLCBjaGlsZF9jb250YWluZXIsIGl0ZW1fY29udGFpbmVyKSB7XG5cdFx0Zm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7IHRoaXMuYXBwZW5kX2l0ZW0oaXRlbSwgY2hpbGRfY29udGFpbmVyKTsgfVxuXHRcdGNoaWxkX2NvbnRhaW5lci5hcHBlbmRUbyhpdGVtX2NvbnRhaW5lcik7XG5cdH1cblxuXHRhcHBlbmRfaXRlbShpdGVtLCBjb250YWluZXIpIHtcblx0XHRsZXQgaXNfY3VycmVudF9wYWdlID1cblx0XHRcdGZyYXBwZS5yb3V0ZXIuc2x1ZyhpdGVtLnRpdGxlKSA9PSBmcmFwcGUucm91dGVyLnNsdWcodGhpcy5nZXRfcGFnZV90b19zaG93KCkubmFtZSkgJiZcblx0XHRcdGl0ZW0ucHVibGljID09IHRoaXMuZ2V0X3BhZ2VfdG9fc2hvdygpLnB1YmxpYztcblx0XHRpdGVtLnNlbGVjdGVkID0gaXNfY3VycmVudF9wYWdlO1xuXHRcdGlmIChpc19jdXJyZW50X3BhZ2UpIHtcblx0XHRcdHRoaXMuY3VycmVudF9wYWdlID0geyBuYW1lOiBpdGVtLnRpdGxlLCBwdWJsaWM6IGl0ZW0ucHVibGljIH07XG5cdFx0fVxuXG5cdFx0bGV0ICRpdGVtX2NvbnRhaW5lciA9IHRoaXMuc2lkZWJhcl9pdGVtX2NvbnRhaW5lcihpdGVtKTtcblx0XHQvLyBUT0RPIFx1OEJCRVx1N0Y2RVx1NUY1M1x1NTI0RHdvcmtzcGFjZVxuXHRcdCRpdGVtX2NvbnRhaW5lci5maW5kKCcuaXRlbS1hJykub24oJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0dGhpcy51cGRhdGVfc2VsZWN0ZWRfc2lkZWJhcih0aGlzLmN1cnJlbnRfcGFnZSwgZmFsc2UpO1xuXHRcdFx0dGhpcy5jdXJyZW50X3BhZ2U9e1xuXHRcdFx0XHRuYW1lOml0ZW0udGl0bGUsXG5cdFx0XHRcdHB1YmxpYzogaXRlbS5wdWJsaWMsXG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5zaG93KCk7XG5cdFx0fSk7XG5cblx0XHRsZXQgc2lkZWJhcl9jb250cm9sID0gJGl0ZW1fY29udGFpbmVyLmZpbmQoJy5zaWRlYmFyLWl0ZW0tY29udHJvbCcpO1xuXG5cdFx0dGhpcy5hZGRfc2lkZWJhcl9hY3Rpb25zKGl0ZW0sIHNpZGViYXJfY29udHJvbCk7XG5cdFx0bGV0IHBhZ2VzID0gaXRlbS5wdWJsaWMgPyB0aGlzLnB1YmxpY19wYWdlcyA6IHRoaXMucHJpdmF0ZV9wYWdlcztcblxuXHRcdC8vIFx1ODNCN1x1NTNENlx1NjI0MFx1NjcwOVx1NUI1MFx1N0VBN1x1RkYwQ1x1NTIyNFx1NjVBRFx1NUI1MFx1N0VBN1x1OTFDQ1x1OTc2Mlx1NjcwOVx1NkNBMVx1NjcwOVx1NUY1M1x1NTI0RFx1OTg3NVx1OTc2Mlx1RkYwQ1x1NjcwOVx1NUY1M1x1NTI0RFx1OTg3NVx1OTc2Mlx1NUMzMVx1NEUwRFx1OEJCRVx1N0Y2RWhpZGRlblx1RkYwQ1x1NEU1Rlx1NUMzMVx1NjYyRlx1NUM1NVx1NUYwMFx1NzJCNlx1NjAwMVxuXHRcdGxldCBkZXNjZW5kYW50PVtdO1xuXHRcdGZ1bmN0aW9uIGdldERlc2NlbmRhbnQocGFnZXMsIHRpdGxlKSB7XG5cdFx0XHRjb25zdCBjaGlsZHJlbiA9IHBhZ2VzLmZpbHRlcihwYWdlID0+IHBhZ2UucGFyZW50X3BhZ2UgPT0gdGl0bGUpO1xuXHRcdFx0ZGVzY2VuZGFudCA9IFsuLi5kZXNjZW5kYW50LCAuLi5jaGlsZHJlbl07XG5cdFx0XHRmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG5cdFx0XHRcdGdldERlc2NlbmRhbnQocGFnZXMsIGNoaWxkLnRpdGxlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Z2V0RGVzY2VuZGFudChwYWdlcywgaXRlbS50aXRsZSk7XG5cdFx0Y29uc3QgaXNDdXJyZW50UGFyZW50ID0gZGVzY2VuZGFudC5zb21lKHBhZ2U9PnBhZ2UubmFtZT09PSB0aGlzLmdldF9wYWdlX3RvX3Nob3coKS5uYW1lJiZcblx0XHRcdHBhZ2UucHVibGljID09PSB0aGlzLmdldF9wYWdlX3RvX3Nob3coKS5wdWJsaWMpO1xuXG5cdFx0bGV0IGNoaWxkX2l0ZW1zID0gcGFnZXMuZmlsdGVyKHBhZ2UgPT4gcGFnZS5wYXJlbnRfcGFnZSA9PSBpdGVtLnRpdGxlKTtcblx0XHRpZiAoY2hpbGRfaXRlbXMubGVuZ3RoID4gMCkge1xuXHRcdFx0bGV0IGNoaWxkX2NvbnRhaW5lciA9ICRpdGVtX2NvbnRhaW5lci5maW5kKCcuc2lkZWJhci1jaGlsZC1pdGVtJyk7XG5cdFx0XHQvLyBcdTU5ODJcdTY3OUNcdTY2MkZcdTRFMERcdTY2MkZcdTVGNTNcdTUyNERcdTk4NzVcdTk3NjJcdTc2ODRcdTc5NTZcdTUxNDhcdUZGMENcdTYyNERcdThCQkVcdTdGNkVcdTRFMERcdTY2M0VcdTc5M0FcdTVCNTBcdTdFQTdcblx0XHRcdGlmICghaXNDdXJyZW50UGFyZW50KSB7XG5cdFx0XHRcdGNoaWxkX2NvbnRhaW5lci5hZGRDbGFzcygnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnByZXBhcmVfc2lkZWJhcihjaGlsZF9pdGVtcywgY2hpbGRfY29udGFpbmVyLCAkaXRlbV9jb250YWluZXIpO1xuXHRcdH1cblxuXHRcdCRpdGVtX2NvbnRhaW5lci5hcHBlbmRUbyhjb250YWluZXIpO1xuXHRcdHRoaXMuc2lkZWJhcl9pdGVtc1tpdGVtLnB1YmxpYyA/ICdwdWJsaWMnIDogJ3ByaXZhdGUnXVtpdGVtLnRpdGxlXSA9ICRpdGVtX2NvbnRhaW5lcjtcblx0XHRjb25zdCBwYXJlbnRzID0gJGl0ZW1fY29udGFpbmVyLnBhcmVudHMoKTtcblx0XHQvLyBcdTU5ODJcdTY3OUNcdTY2MkZcdTVGNTNcdTUyNERcdTk4NzVcdTk3NjJcdUZGMENcdTYyOEFcdTVCODNcdTc2ODRcdTcyMzZcdTdFQTdcdTkwRkRcdTY2M0VcdTc5M0FcdTUxRkFcdTY3NjVcblx0XHRpZiAoaXNfY3VycmVudF9wYWdlKXtcblx0XHRcdHBhcmVudHMuZWFjaChwYXJlbnQ9Pntcblx0XHRcdFx0aWYgKCQocGFyZW50KS5oYXNDbGFzcygnaGlkZGVuJykpIHtcblx0XHRcdFx0XHRwYXJlbnQudG9nZ2xlQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gaWYgKCRpdGVtX2NvbnRhaW5lci5wYXJlbnQoKS5oYXNDbGFzcyhcImhpZGRlblwiKSAmJiBpc19jdXJyZW50X3BhZ2UpIHtcblx0XHQvLyBcdCRpdGVtX2NvbnRhaW5lci5wYXJlbnQoKS50b2dnbGVDbGFzcyhcImhpZGRlblwiKTtcblx0XHQvLyB9XG5cblx0XHR0aGlzLmFkZF9kcm9wX2ljb24oaXRlbSwgc2lkZWJhcl9jb250cm9sLCAkaXRlbV9jb250YWluZXIpO1xuXG5cdFx0aWYgKGNoaWxkX2l0ZW1zLmxlbmd0aCA+IDApIHtcblx0XHRcdCRpdGVtX2NvbnRhaW5lci5maW5kKCcuZHJvcC1pY29uJykuZmlyc3QoKS5hZGRDbGFzcygnc2hvdy1pbi1lZGl0LW1vZGUnKTtcblx0XHR9XG5cblx0XHRjb25zdCB7IG9yZ2FuaXphdGlvbiB9ID0gaXRlbTtcblx0XHRpZiAoIXRoaXMub3JnYW5pemF0aW9uX25hbWUpIHsgcmV0dXJuOyB9XG5cdFx0aWYgKCFvcmdhbml6YXRpb24pe1xuXHRcdFx0JGl0ZW1fY29udGFpbmVyLmhpZGUoKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMub3JnYW5pemF0aW9uX25hbWUgPT09IG9yZ2FuaXphdGlvbikgeyByZXR1cm47IH1cblx0XHQkaXRlbV9jb250YWluZXIuaGlkZSgpO1xuXHR9XG5cblx0YWRkX2Ryb3BfaWNvbihpdGVtLCBzaWRlYmFyX2NvbnRyb2wsIGl0ZW1fY29udGFpbmVyKSB7XG5cdFx0bGV0IGRyb3BfaWNvbiA9ICdzbWFsbC1kb3duJztcblx0XHRpZiAoaXRlbV9jb250YWluZXIuZmluZChgW2l0ZW0tbmFtZT1cIiR7dGhpcy5jdXJyZW50X3BhZ2UubmFtZX1cIl1gKS5sZW5ndGgpIHtcblx0XHRcdGRyb3BfaWNvbiA9ICdzbWFsbC11cCc7XG5cdFx0fVxuXHRcdC8vIFx1NEZFRVx1NjUzOVx1NkU5MFx1NzgwMVx1RkYwQ1x1OEZEOVx1OTFDQ1x1NTNFQVx1NUM1NVx1NUYwMFx1NTIzMFx1NUI1MFx1N0VBN1x1RkYwQ1x1ODAwQ1x1NEUwRFx1NjYyRlx1NjdFNVx1NjI3RVx1NjI0MFx1NjcwOVx1NTQwRVx1NEVFM1xuXHRcdGxldCAkY2hpbGRfaXRlbV9zZWN0aW9uID0gaXRlbV9jb250YWluZXIuY2hpbGRyZW4oJy5zaWRlYmFyLWNoaWxkLWl0ZW0nKTtcblx0XHRsZXQgJGRyb3BfaWNvbiA9ICQoXG5cdFx0XHRgPHNwYW4gY2xhc3M9XCJkcm9wLWljb24gaGlkZGVuXCI+JHtmcmFwcGUudXRpbHMuaWNvbihkcm9wX2ljb24sICdzbScpfTwvc3Bhbj5gLFxuXHRcdCkuYXBwZW5kVG8oc2lkZWJhcl9jb250cm9sKTtcblx0XHRsZXQgcGFnZXMgPSBpdGVtLnB1YmxpYyA/IHRoaXMucHVibGljX3BhZ2VzIDogdGhpcy5wcml2YXRlX3BhZ2VzO1xuXHRcdGlmIChcblx0XHRcdHBhZ2VzLnNvbWUoXG5cdFx0XHRcdGUgPT4gZS5wYXJlbnRfcGFnZSA9PSBpdGVtLnRpdGxlICYmIChlLmlzX2hpZGRlbiA9PSAwIHx8ICF0aGlzLmlzX3JlYWRfb25seSksXG5cdFx0XHQpXG5cdFx0KSB7XG5cdFx0XHQkZHJvcF9pY29uLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblx0XHR9XG5cdFx0JGRyb3BfaWNvbi5vbignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHRsZXQgaWNvbiA9XG5cdFx0XHRcdCRkcm9wX2ljb24uZmluZCgndXNlJykuYXR0cignaHJlZicpID09PSAnI2ljb24tc21hbGwtZG93bidcblx0XHRcdFx0XHQ/ICcjaWNvbi1zbWFsbC11cCdcblx0XHRcdFx0XHQ6ICcjaWNvbi1zbWFsbC1kb3duJztcblx0XHRcdCRkcm9wX2ljb24uZmluZCgndXNlJykuYXR0cignaHJlZicsIGljb24pO1xuXHRcdFx0JGNoaWxkX2l0ZW1fc2VjdGlvbi50b2dnbGVDbGFzcygnaGlkZGVuJyk7XG5cdFx0fSk7XG5cdH1cblxuXHRzaG93KCkge1xuXHRcdGlmICghdGhpcy5hbGxfcGFnZXMpIHtcblx0XHRcdC8vIHBhZ2VzIG5vdCB5ZXQgbG9hZGVkLCBjYWxsIGFnYWluIGFmdGVyIGEgYml0XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2hvdygpLCAxMDApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGxldCBwYWdlID0gdGhpcy5nZXRfcGFnZV90b19zaG93KCk7XG5cdFx0dGhpcy5wYWdlLnNldF90aXRsZShfXyhwYWdlLm5hbWUpKTtcblxuXHRcdHRoaXMudXBkYXRlX3NlbGVjdGVkX3NpZGViYXIodGhpcy5jdXJyZW50X3BhZ2UsIGZhbHNlKTsgLy9yZW1vdmUgc2VsZWN0ZWQgZnJvbSBvbGQgcGFnZVxuXHRcdHRoaXMudXBkYXRlX3NlbGVjdGVkX3NpZGViYXIocGFnZSwgdHJ1ZSk7IC8vYWRkIHNlbGVjdGVkIG9uIG5ldyBwYWdlXG5cblx0XHR0aGlzLnNob3dfcGFnZShwYWdlKTtcblx0fVxuXG5cdHVwZGF0ZV9zZWxlY3RlZF9zaWRlYmFyKHBhZ2UsIGFkZCkge1xuXHRcdGxldCBzZWN0aW9uID0gcGFnZS5wdWJsaWMgPyAncHVibGljJyA6ICdwcml2YXRlJztcblx0XHRpZiAoXG5cdFx0XHR0aGlzLnNpZGViYXIgJiZcblx0XHRcdHRoaXMuc2lkZWJhcl9pdGVtc1tzZWN0aW9uXSAmJlxuXHRcdFx0dGhpcy5zaWRlYmFyX2l0ZW1zW3NlY3Rpb25dW3BhZ2UubmFtZV1cblx0XHQpIHtcblx0XHRcdGxldCAkc2lkZWJhciA9IHRoaXMuc2lkZWJhcl9pdGVtc1tzZWN0aW9uXVtwYWdlLm5hbWVdO1xuXHRcdFx0bGV0IHBhZ2VzID0gcGFnZS5wdWJsaWMgPyB0aGlzLnB1YmxpY19wYWdlcyA6IHRoaXMucHJpdmF0ZV9wYWdlcztcblx0XHRcdGxldCBzaWRlYmFyX3BhZ2UgPSBwYWdlcy5maW5kKHAgPT4gcC50aXRsZSA9PSBwYWdlLm5hbWUpO1xuXG5cdFx0XHRpZiAoYWRkKSB7XG5cdFx0XHRcdCRzaWRlYmFyWzBdLmZpcnN0RWxlbWVudENoaWxkLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG5cdFx0XHRcdGlmIChzaWRlYmFyX3BhZ2UpIHsgc2lkZWJhcl9wYWdlLnNlbGVjdGVkID0gdHJ1ZTsgfVxuXG5cdFx0XHRcdC8vIG9wZW4gY2hpbGQgc2lkZWJhciBzZWN0aW9uIGlmIGNsb3NlZFxuXHRcdFx0XHQkc2lkZWJhci5wYXJlbnQoKS5oYXNDbGFzcygnc2lkZWJhci1jaGlsZC1pdGVtJykgJiZcblx0XHRcdFx0XHQkc2lkZWJhci5wYXJlbnQoKS5oYXNDbGFzcygnaGlkZGVuJykgJiZcblx0XHRcdFx0XHQkc2lkZWJhci5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG5cblx0XHRcdFx0dGhpcy5jdXJyZW50X3BhZ2UgPSB7IG5hbWU6IHBhZ2UubmFtZSwgcHVibGljOiBwYWdlLnB1YmxpYyB9O1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2UuY3VycmVudF9wYWdlID0gcGFnZS5uYW1lO1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2UuaXNfY3VycmVudF9wYWdlX3B1YmxpYyA9IHBhZ2UucHVibGljO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JHNpZGViYXJbMF0uZmlyc3RFbGVtZW50Q2hpbGQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcblx0XHRcdFx0aWYgKHNpZGViYXJfcGFnZSkgeyBzaWRlYmFyX3BhZ2Uuc2VsZWN0ZWQgPSBmYWxzZTsgfVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldF9kYXRhKHBhZ2UpIHtcblx0XHRyZXR1cm4gZnJhcHBlXG5cdFx0XHQuY2FsbCgnZnJhcHBlLmRlc2suZGVza3RvcC5nZXRfZGVza3RvcF9wYWdlJywge1xuXHRcdFx0XHRwYWdlOiBwYWdlLFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKGRhdGEgPT4ge1xuXHRcdFx0XHR0aGlzLnBhZ2VfZGF0YSA9IGRhdGEubWVzc2FnZTtcblxuXHRcdFx0XHQvLyBjYWNoaW5nIHBhZ2UgZGF0YVxuXHRcdFx0XHR0aGlzLnBhZ2VzW3BhZ2UubmFtZV0gJiYgZGVsZXRlIHRoaXMucGFnZXNbcGFnZS5uYW1lXTtcblx0XHRcdFx0dGhpcy5wYWdlc1twYWdlLm5hbWVdID0gZGF0YS5tZXNzYWdlO1xuXG5cdFx0XHRcdGlmICghdGhpcy5wYWdlX2RhdGEgfHwgT2JqZWN0LmtleXModGhpcy5wYWdlX2RhdGEpLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cblx0XHRcdFx0aWYgKHRoaXMucGFnZV9kYXRhLmNoYXJ0cyAmJiB0aGlzLnBhZ2VfZGF0YS5jaGFydHMuaXRlbXMubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG5cdFx0XHRcdHJldHVybiBmcmFwcGUuZGFzaGJvYXJkX3V0aWxzLmdldF9kYXNoYm9hcmRfc2V0dGluZ3MoKS50aGVuKHNldHRpbmdzID0+IHtcblx0XHRcdFx0XHRpZiAoc2V0dGluZ3MpIHtcblx0XHRcdFx0XHRcdGxldCBjaGFydF9jb25maWcgPSBzZXR0aW5ncy5jaGFydF9jb25maWdcblx0XHRcdFx0XHRcdFx0PyBKU09OLnBhcnNlKHNldHRpbmdzLmNoYXJ0X2NvbmZpZylcblx0XHRcdFx0XHRcdFx0OiB7fTtcblx0XHRcdFx0XHRcdHRoaXMucGFnZV9kYXRhLmNoYXJ0cy5pdGVtcy5tYXAoY2hhcnQgPT4ge1xuXHRcdFx0XHRcdFx0XHRjaGFydC5jaGFydF9zZXR0aW5ncyA9IGNoYXJ0X2NvbmZpZ1tjaGFydC5jaGFydF9uYW1lXSB8fCB7fTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0dGhpcy5wYWdlc1twYWdlLm5hbWVdID0gdGhpcy5wYWdlX2RhdGE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHR9XG5cblx0Z2V0X3BhZ2VfdG9fc2hvdygpIHtcblx0XHRsZXQgZGVmYXVsdF9wYWdlO1xuXHRcdGNvbnN0IGZpcnN0T3JnYW5pemF0aW9uUGFnZSA9IHRoaXMuYWxsX3BhZ2VzPy5maW5kKGl0ZW09Pml0ZW0ub3JnYW5pemF0aW9uID09PSB0aGlzLm9yZ2FuaXphdGlvbl9uYW1lKTtcblx0XHRjb25zdCBkZWZhdWx0T3JnYW5pemF0aW9uUGFnZSA9IHRoaXMuYWxsX3BhZ2VzPy5maW5kKGl0ZW09Pml0ZW0ub3JnYW5pemF0aW9uID09PSB0aGlzLm9yZ2FuaXphdGlvbl9uYW1lJiZpdGVtLmRlZmF1bHQ9PT0xKTtcblxuXHRcdGlmIChkZWZhdWx0T3JnYW5pemF0aW9uUGFnZSkge1xuXHRcdFx0ZGVmYXVsdF9wYWdlID0geyBuYW1lOiBkZWZhdWx0T3JnYW5pemF0aW9uUGFnZS50aXRsZSwgcHVibGljOiBkZWZhdWx0T3JnYW5pemF0aW9uUGFnZS5wdWJsaWMgfTtcblx0XHR9IGVsc2UgaWYgKGZpcnN0T3JnYW5pemF0aW9uUGFnZSl7XG5cdFx0XHRkZWZhdWx0X3BhZ2UgPSB7IG5hbWU6IGZpcnN0T3JnYW5pemF0aW9uUGFnZS50aXRsZSwgcHVibGljOiBmaXJzdE9yZ2FuaXphdGlvblBhZ2UucHVibGljIH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlZmF1bHRfcGFnZSA9IHsgbmFtZTogJ0J1aWxkJywgcHVibGljOiB0cnVlIH07XG5cdFx0fVxuXG5cdFx0bGV0IHBhZ2UgPSB0aGlzLmN1cnJlbnRfcGFnZS5uYW1lIHx8XG5cdFx0XHRkZWZhdWx0X3BhZ2UubmFtZTtcblx0XHRsZXQgaXNfcHVibGljID0gdGhpcy5jdXJyZW50X3BhZ2UubmFtZT8gdGhpcy5jdXJyZW50X3BhZ2UucHVibGljOiBkZWZhdWx0X3BhZ2UucHVibGljO1xuXHRcdHJldHVybiB7IG5hbWU6IHBhZ2UsIHB1YmxpYzogaXNfcHVibGljIH07XG5cdH1cblxuXHRhc3luYyBzaG93X3BhZ2UocGFnZSkge1xuXHRcdGlmICghdGhpcy5ib2R5LmZpbmQoJyNlZGl0b3JqcycpWzBdKSB7XG5cdFx0XHR0aGlzLiRwYWdlID0gJChgXG5cdFx0XHRcdDxkaXYgaWQ9XCJlZGl0b3Jqc1wiIGNsYXNzPVwiZGVzay1wYWdlIHBhZ2UtbWFpbi1jb250ZW50XCI+PC9kaXY+XG5cdFx0XHRgKS5hcHBlbmRUbyh0aGlzLmJvZHkpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmFsbF9wYWdlcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMuY3JlYXRlX3BhZ2Vfc2tlbGV0b24oKTtcblxuXHRcdFx0bGV0IHBhZ2VzID1cblx0XHRcdFx0cGFnZS5wdWJsaWMgJiYgdGhpcy5wdWJsaWNfcGFnZXMubGVuZ3RoID8gdGhpcy5wdWJsaWNfcGFnZXMgOiB0aGlzLnByaXZhdGVfcGFnZXM7XG5cdFx0XHRsZXQgY3VycmVudF9wYWdlID0gcGFnZXMuZmluZChwID0+IHAudGl0bGUgPT0gcGFnZS5uYW1lKTtcblx0XHRcdHRoaXMuY29udGVudCA9IGN1cnJlbnRfcGFnZSAmJiBKU09OLnBhcnNlKGN1cnJlbnRfcGFnZS5jb250ZW50KTtcblxuXHRcdFx0dGhpcy5jb250ZW50ICYmIHRoaXMuYWRkX2N1c3RvbV9jYXJkc19pbl9jb250ZW50KCk7XG5cblx0XHRcdCQoJy5pdGVtLWFuY2hvcicpLmFkZENsYXNzKCdkaXNhYmxlLWNsaWNrJyk7XG5cblx0XHRcdGlmICh0aGlzLnBhZ2VzICYmIHRoaXMucGFnZXNbY3VycmVudF9wYWdlLm5hbWVdKSB7XG5cdFx0XHRcdHRoaXMucGFnZV9kYXRhID0gdGhpcy5wYWdlc1tjdXJyZW50X3BhZ2UubmFtZV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhd2FpdCBmcmFwcGUuYWZ0ZXJfYWpheCgoKSA9PiB0aGlzLmdldF9kYXRhKGN1cnJlbnRfcGFnZSkpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNldHVwX2FjdGlvbnMocGFnZSk7XG5cblx0XHRcdHRoaXMucHJlcGFyZV9lZGl0b3JqcygpO1xuXHRcdFx0JCgnLml0ZW0tYW5jaG9yJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGUtY2xpY2snKTtcblxuXHRcdFx0dGhpcy5yZW1vdmVfcGFnZV9za2VsZXRvbigpO1xuXHRcdH1cblx0fVxuXG5cdGFkZF9jdXN0b21fY2FyZHNfaW5fY29udGVudCgpIHtcblx0XHRsZXQgaW5kZXggPSAtMTtcblx0XHR0aGlzLmNvbnRlbnQuZmluZCgoaXRlbSwgaSkgPT4ge1xuXHRcdFx0aWYgKGl0ZW0udHlwZSA9PSAnY2FyZCcpIHsgaW5kZXggPSBpOyB9XG5cdFx0fSk7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0dGhpcy5jb250ZW50LnNwbGljZShpbmRleCArIDEsIDAsIHtcblx0XHRcdFx0dHlwZTogJ2NhcmQnLFxuXHRcdFx0XHRkYXRhOiB7IGNhcmRfbmFtZTogJ0N1c3RvbSBEb2N1bWVudHMnLCBjb2w6IDQgfSxcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5jb250ZW50LnNwbGljZShpbmRleCArIDIsIDAsIHtcblx0XHRcdFx0dHlwZTogJ2NhcmQnLFxuXHRcdFx0XHRkYXRhOiB7IGNhcmRfbmFtZTogJ0N1c3RvbSBSZXBvcnRzJywgY29sOiA0IH0sXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRwcmVwYXJlX2VkaXRvcmpzKCkge1xuXHRcdGlmICh0aGlzLmVkaXRvcikge1xuXHRcdFx0dGhpcy5lZGl0b3IuaXNSZWFkeS50aGVuKCgpID0+IHtcblx0XHRcdFx0dGhpcy5lZGl0b3IuY29uZmlndXJhdGlvbi50b29scy5jaGFydC5jb25maWcucGFnZV9kYXRhID0gdGhpcy5wYWdlX2RhdGE7XG5cdFx0XHRcdHRoaXMuZWRpdG9yLmNvbmZpZ3VyYXRpb24udG9vbHMuc2hvcnRjdXQuY29uZmlnLnBhZ2VfZGF0YSA9IHRoaXMucGFnZV9kYXRhO1xuXHRcdFx0XHR0aGlzLmVkaXRvci5jb25maWd1cmF0aW9uLnRvb2xzLmNhcmQuY29uZmlnLnBhZ2VfZGF0YSA9IHRoaXMucGFnZV9kYXRhO1xuXHRcdFx0XHR0aGlzLmVkaXRvci5jb25maWd1cmF0aW9uLnRvb2xzLm9uYm9hcmRpbmcuY29uZmlnLnBhZ2VfZGF0YSA9IHRoaXMucGFnZV9kYXRhO1xuXHRcdFx0XHR0aGlzLmVkaXRvci5jb25maWd1cmF0aW9uLnRvb2xzLnF1aWNrX2xpc3QuY29uZmlnLnBhZ2VfZGF0YSA9IHRoaXMucGFnZV9kYXRhO1xuXHRcdFx0XHR0aGlzLmVkaXRvci5jb25maWd1cmF0aW9uLnRvb2xzLm51bWJlcl9jYXJkLmNvbmZpZy5wYWdlX2RhdGEgPSB0aGlzLnBhZ2VfZGF0YTtcblx0XHRcdFx0dGhpcy5lZGl0b3IuY29uZmlndXJhdGlvbi50b29scy5jdXN0b21fYmxvY2suY29uZmlnLnBhZ2VfZGF0YSA9IHRoaXMucGFnZV9kYXRhO1xuXHRcdFx0XHR0aGlzLmVkaXRvci5yZW5kZXIoeyBibG9ja3M6IHRoaXMuY29udGVudCB8fCBbXSB9KTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVfZWRpdG9yanModGhpcy5jb250ZW50KTtcblx0XHR9XG5cdH1cblxuXHRzZXR1cF9hY3Rpb25zKHBhZ2UpIHtcblx0XHRsZXQgcGFnZXMgPSBwYWdlLnB1YmxpYyA/IHRoaXMucHVibGljX3BhZ2VzIDogdGhpcy5wcml2YXRlX3BhZ2VzO1xuXHRcdGxldCBjdXJyZW50X3BhZ2UgPSBwYWdlcy5maW5kKHAgPT4gcC50aXRsZSA9PSBwYWdlLm5hbWUpO1xuXG5cdFx0aWYgKCF0aGlzLmlzX3JlYWRfb25seSkge1xuXHRcdFx0dGhpcy5zZXR1cF9jdXN0b21pemF0aW9uX2J1dHRvbnMoY3VycmVudF9wYWdlKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmNsZWFyX3BhZ2VfYWN0aW9ucygpO1xuXG5cdFx0dGhpcy5wYWdlLnNldF9zZWNvbmRhcnlfYWN0aW9uKF9fKCdFZGl0JyksIGFzeW5jICgpID0+IHtcblx0XHRcdGlmICghdGhpcy5lZGl0b3IgfHwgIXRoaXMuZWRpdG9yLnJlYWRPbmx5KSB7IHJldHVybjsgfVxuXHRcdFx0dGhpcy5pc19yZWFkX29ubHkgPSBmYWxzZTtcblx0XHRcdHRoaXMudG9nZ2xlX2hpZGRlbl93b3Jrc3BhY2VzKHRydWUpO1xuXHRcdFx0YXdhaXQgdGhpcy5lZGl0b3IucmVhZE9ubHkudG9nZ2xlKCk7XG5cdFx0XHR0aGlzLmVkaXRvci5pc1JlYWR5LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmluaXRpYWxpemVfZWRpdG9yanNfdW5kbygpO1xuXHRcdFx0XHR0aGlzLnNldHVwX2N1c3RvbWl6YXRpb25fYnV0dG9ucyhjdXJyZW50X3BhZ2UpO1xuXHRcdFx0XHR0aGlzLnNob3dfc2lkZWJhcl9hY3Rpb25zKCk7XG5cdFx0XHRcdHRoaXMubWFrZV9ibG9ja3Nfc29ydGFibGUoKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5wYWdlLmFkZF9pbm5lcl9idXR0b24oX18oJ0NyZWF0ZSBXb3Jrc3BhY2UnKSwgKCkgPT4ge1xuXHRcdFx0dGhpcy5pbml0aWFsaXplX25ld19wYWdlKCk7XG5cdFx0fSk7XG5cdH1cblxuXHRpbml0aWFsaXplX2VkaXRvcmpzX3VuZG8oKSB7XG5cdFx0dGhpcy51bmRvID0gbmV3IFVuZG8oeyBlZGl0b3I6IHRoaXMuZWRpdG9yIH0pO1xuXHRcdHRoaXMudW5kby5pbml0aWFsaXplKHsgYmxvY2tzOiB0aGlzLmNvbnRlbnQgfHwgW10gfSk7XG5cdFx0dGhpcy51bmRvLnJlYWRPbmx5ID0gZmFsc2U7XG5cdH1cblxuXHRjbGVhcl9wYWdlX2FjdGlvbnMoKSB7XG5cdFx0dGhpcy5wYWdlLmNsZWFyX3ByaW1hcnlfYWN0aW9uKCk7XG5cdFx0dGhpcy5wYWdlLmNsZWFyX3NlY29uZGFyeV9hY3Rpb24oKTtcblx0XHR0aGlzLnBhZ2UuY2xlYXJfaW5uZXJfdG9vbGJhcigpO1xuXHR9XG5cblx0c2V0dXBfY3VzdG9taXphdGlvbl9idXR0b25zKHBhZ2UpIHtcblx0XHR0aGlzLmNsZWFyX3BhZ2VfYWN0aW9ucygpO1xuXG5cdFx0cGFnZS5pc19lZGl0YWJsZSAmJlxuXHRcdFx0dGhpcy5wYWdlLnNldF9wcmltYXJ5X2FjdGlvbihcblx0XHRcdFx0X18oJ1NhdmUnKSxcblx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuY2xlYXJfcGFnZV9hY3Rpb25zKCk7XG5cdFx0XHRcdFx0dGhpcy5zYXZlX3BhZ2UocGFnZSkudGhlbihzYXZlZCA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoIXNhdmVkKSB7IHJldHVybjsgfVxuXHRcdFx0XHRcdFx0dGhpcy51bmRvLnJlYWRPbmx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHRoaXMuZWRpdG9yLnJlYWRPbmx5LnRvZ2dsZSgpO1xuXHRcdFx0XHRcdFx0dGhpcy5pc19yZWFkX29ubHkgPSB0cnVlO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHRfXygnU2F2aW5nJyksXG5cdFx0XHQpO1xuXG5cdFx0dGhpcy5wYWdlLnNldF9zZWNvbmRhcnlfYWN0aW9uKF9fKCdEaXNjYXJkJyksIGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMuZGlzY2FyZCA9IHRydWU7XG5cdFx0XHR0aGlzLmNsZWFyX3BhZ2VfYWN0aW9ucygpO1xuXHRcdFx0dGhpcy50b2dnbGVfaGlkZGVuX3dvcmtzcGFjZXMoZmFsc2UpO1xuXHRcdFx0YXdhaXQgdGhpcy5lZGl0b3IucmVhZE9ubHkudG9nZ2xlKCk7XG5cdFx0XHR0aGlzLmlzX3JlYWRfb25seSA9IHRydWU7XG5cdFx0XHR0aGlzLnNpZGViYXJfcGFnZXMgPSB0aGlzLmNhY2hlZF9wYWdlcztcblx0XHRcdHRoaXMucmVsb2FkKCk7XG5cdFx0XHRmcmFwcGUuc2hvd19hbGVydCh7IG1lc3NhZ2U6IF9fKCdDdXN0b21pemF0aW9ucyBEaXNjYXJkZWQnKSwgaW5kaWNhdG9yOiAnaW5mbycgfSk7XG5cdFx0fSk7XG5cblx0XHRpZiAocGFnZS5uYW1lICYmIHRoaXMuaGFzX2FjY2Vzcykge1xuXHRcdFx0dGhpcy5wYWdlLmFkZF9pbm5lcl9idXR0b24oX18oJ1NldHRpbmdzJyksICgpID0+IHtcblx0XHRcdFx0ZnJhcHBlLnNldF9yb3V0ZShgd29ya3NwYWNlLyR7cGFnZS5uYW1lfWApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dG9nZ2xlX2hpZGRlbl93b3Jrc3BhY2VzKHNob3cpIHtcblx0XHQkKCcuZGVzay1zaWRlYmFyJykudG9nZ2xlQ2xhc3MoJ3Nob3ctaGlkZGVuLXdvcmtzcGFjZXMnLCBzaG93KTtcblx0fVxuXG5cdHNob3dfc2lkZWJhcl9hY3Rpb25zKCkge1xuXHRcdHRoaXMuc2lkZWJhci5maW5kKCcuc3RhbmRhcmQtc2lkZWJhci1zZWN0aW9uJykuYWRkQ2xhc3MoJ3Nob3ctY29udHJvbCcpO1xuXHRcdHRoaXMubWFrZV9zaWRlYmFyX3NvcnRhYmxlKCk7XG5cdH1cblxuXHRhZGRfc2lkZWJhcl9hY3Rpb25zKGl0ZW0sIHNpZGViYXJfY29udHJvbCwgaXNfbmV3KSB7XG5cdFx0aWYgKCFpdGVtLmlzX2VkaXRhYmxlKSB7XG5cdFx0XHRzaWRlYmFyX2NvbnRyb2wucGFyZW50KCkuY2xpY2soKCkgPT4ge1xuXHRcdFx0XHQhdGhpcy5pc19yZWFkX29ubHkgJiZcblx0XHRcdFx0XHRmcmFwcGUuc2hvd19hbGVydChcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bWVzc2FnZTogX18oJ09ubHkgV29ya3NwYWNlIE1hbmFnZXIgY2FuIHNvcnQgb3IgZWRpdCB0aGlzIHBhZ2UnKSxcblx0XHRcdFx0XHRcdFx0aW5kaWNhdG9yOiAnaW5mbycsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0NSxcblx0XHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGZyYXBwZS51dGlscy5hZGRfY3VzdG9tX2J1dHRvbihcblx0XHRcdFx0ZnJhcHBlLnV0aWxzLmljb24oJ2R1cGxpY2F0ZScsICdzbScpLFxuXHRcdFx0XHQoKSA9PiB0aGlzLmR1cGxpY2F0ZV9wYWdlKGl0ZW0pLFxuXHRcdFx0XHQnZHVwbGljYXRlLXBhZ2UnLFxuXHRcdFx0XHRfXygnRHVwbGljYXRlIFdvcmtzcGFjZScpLFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHRzaWRlYmFyX2NvbnRyb2wsXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSBpZiAoaXRlbS5pc19oaWRkZW4pIHtcblx0XHRcdGZyYXBwZS51dGlscy5hZGRfY3VzdG9tX2J1dHRvbihcblx0XHRcdFx0ZnJhcHBlLnV0aWxzLmljb24oJ3VuaGlkZScsICdzbScpLFxuXHRcdFx0XHRlID0+IHRoaXMudW5oaWRlX3dvcmtzcGFjZShpdGVtLCBlKSxcblx0XHRcdFx0J3VuaGlkZS13b3Jrc3BhY2UtYnRuJyxcblx0XHRcdFx0X18oJ1VuaGlkZSBXb3Jrc3BhY2UnKSxcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0c2lkZWJhcl9jb250cm9sLFxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZnJhcHBlLnV0aWxzLmFkZF9jdXN0b21fYnV0dG9uKFxuXHRcdFx0XHRmcmFwcGUudXRpbHMuaWNvbignZHJhZycsICd4cycpLFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHQnZHJhZy1oYW5kbGUnLFxuXHRcdFx0XHRfXygnRHJhZycpLFxuXHRcdFx0XHRudWxsLFxuXHRcdFx0XHRzaWRlYmFyX2NvbnRyb2wsXG5cdFx0XHQpO1xuXG5cdFx0XHQhaXNfbmV3ICYmIHRoaXMuYWRkX3NldHRpbmdzX2J1dHRvbihpdGVtLCBzaWRlYmFyX2NvbnRyb2wpO1xuXHRcdH1cblx0fVxuXG5cdGdldF9wYXJlbnRfcGFnZXMocGFnZSkge1xuXHRcdHRoaXMucHVibGljX3BhcmVudF9wYWdlcyA9IFtcblx0XHRcdCcnLFxuXHRcdFx0Li4udGhpcy5wdWJsaWNfcGFnZXMuZmlsdGVyKHAgPT4gcC5vcmdhbml6YXRpb249PT10aGlzLm9yZ2FuaXphdGlvbl9uYW1lKS5tYXAocCA9PiBwLnRpdGxlKSxcblx0XHRdO1xuXHRcdHRoaXMucHJpdmF0ZV9wYXJlbnRfcGFnZXMgPSBbXG5cdFx0XHQnJyxcblx0XHRcdC4uLnRoaXMucHJpdmF0ZV9wYWdlcy5maWx0ZXIocCA9PiBwLm9yZ2FuaXphdGlvbj09PXRoaXMub3JnYW5pemF0aW9uX25hbWUpLm1hcChwID0+IHAudGl0bGUpLFxuXHRcdF07XG5cblx0XHRpZiAocGFnZSkge1xuXHRcdFx0cmV0dXJuIHBhZ2UucHVibGljID8gdGhpcy5wdWJsaWNfcGFyZW50X3BhZ2VzIDogdGhpcy5wcml2YXRlX3BhcmVudF9wYWdlcztcblx0XHR9XG5cdH1cblxuXHRlZGl0X3BhZ2UoaXRlbSkge1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0bGV0IG9sZF9pdGVtID0gaXRlbTtcblx0XHRsZXQgcGFyZW50X3BhZ2VzID0gdGhpcy5nZXRfcGFyZW50X3BhZ2VzKGl0ZW0pO1xuXHRcdGxldCBpZHggPSBwYXJlbnRfcGFnZXMuZmluZEluZGV4KHggPT4geCA9PSBpdGVtLnRpdGxlKTtcblx0XHRpZiAoaWR4ICE9PSAtMSkgeyBwYXJlbnRfcGFnZXMuc3BsaWNlKGlkeCwgMSk7IH1cblx0XHRjb25zdCB0aXRsZSA9IGl0ZW0udGl0bGUucmVwbGFjZUFsbCgve3soW159XSspfX0vZywgJycpO1xuXHRcdGNvbnN0IHJlcyA9IGl0ZW0udGl0bGUubWF0Y2goL3t7KFtefV0rKX19Lyk7XG5cdFx0Y29uc3Qgc3VmZml4ID0gcmVzPy5bMV0gfHwgJyc7XG5cdFx0Y29uc3QgZCA9IG5ldyBmcmFwcGUudWkuRGlhbG9nKHtcblx0XHRcdHRpdGxlOiBfXygnVXBkYXRlIERldGFpbHMnKSxcblx0XHRcdGZpZWxkczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IF9fKCdUaXRsZScpLFxuXHRcdFx0XHRcdGZpZWxkdHlwZTogJ0RhdGEnLFxuXHRcdFx0XHRcdGZpZWxkbmFtZTogJ3RpdGxlJyxcblx0XHRcdFx0XHRyZXFkOiAxLFxuXHRcdFx0XHRcdGRlZmF1bHQ6IHRpdGxlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IF9fKCdTdWZmaXgnKSxcblx0XHRcdFx0XHRmaWVsZHR5cGU6ICdEYXRhJyxcblx0XHRcdFx0XHRmaWVsZG5hbWU6ICdzdWZmaXgnLFxuXHRcdFx0XHRcdGRlZmF1bHQ6IHN1ZmZpeCxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBfXygnUGFyZW50JyksXG5cdFx0XHRcdFx0ZmllbGR0eXBlOiAnU2VsZWN0Jyxcblx0XHRcdFx0XHRmaWVsZG5hbWU6ICdwYXJlbnQnLFxuXHRcdFx0XHRcdG9wdGlvbnM6IHBhcmVudF9wYWdlcyxcblx0XHRcdFx0XHRkZWZhdWx0OiBpdGVtLnBhcmVudF9wYWdlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IF9fKCdEZWZhdWx0JyksXG5cdFx0XHRcdFx0ZmllbGR0eXBlOiAnQ2hlY2snLFxuXHRcdFx0XHRcdGZpZWxkbmFtZTogJ2RlZmF1bHQnLFxuXHRcdFx0XHRcdGRlZmF1bHQ6aXRlbS5kZWZhdWx0LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZmllbGR0eXBlOiAnQ29sdW1uIEJyZWFrJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBfXygnSWNvbicpLFxuXHRcdFx0XHRcdGZpZWxkdHlwZTogJ0ljb24nLFxuXHRcdFx0XHRcdGZpZWxkbmFtZTogJ2ljb24nLFxuXHRcdFx0XHRcdGRlZmF1bHQ6IGl0ZW0uaWNvbixcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0XHRwcmltYXJ5X2FjdGlvbl9sYWJlbDogX18oJ1VwZGF0ZScpLFxuXHRcdFx0cHJpbWFyeV9hY3Rpb246IHZhbHVlcyA9PiB7XG5cdFx0XHRcdHZhbHVlcy50aXRsZSA9IGZyYXBwZS51dGlscy5lc2NhcGVfaHRtbChgJHt2YWx1ZXMudGl0bGV9JHt2YWx1ZXMuc3VmZml4ID8gYHt7JHt2YWx1ZXMuc3VmZml4fX19YCA6ICcnfWApO1xuXHRcdFx0XHR2YWx1ZXMuaXNfcHVibGljID0gMTtcblx0XHRcdFx0bGV0IGlzX3RpdGxlX2NoYW5nZWQgPSB2YWx1ZXMudGl0bGUgIT0gb2xkX2l0ZW0udGl0bGU7XG5cdFx0XHRcdGxldCBpc19zZWN0aW9uX2NoYW5nZWQgPSB2YWx1ZXMuaXNfcHVibGljICE9IG9sZF9pdGVtLnB1YmxpYztcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdChpc190aXRsZV9jaGFuZ2VkIHx8IGlzX3NlY3Rpb25fY2hhbmdlZCkgJiZcblx0XHRcdFx0XHQhdGhpcy52YWxpZGF0ZV9wYWdlKHZhbHVlcywgb2xkX2l0ZW0pXG5cdFx0XHRcdCkgeyByZXR1cm47IH1cblx0XHRcdFx0ZC5oaWRlKCk7XG5cdFx0XHRcdGZyYXBwZS5jYWxsKHtcblx0XHRcdFx0XHRtZXRob2Q6ICdmcmFwcGUuZGVzay5kb2N0eXBlLndvcmtzcGFjZS53b3Jrc3BhY2UudXBkYXRlX3BhZ2UnLFxuXHRcdFx0XHRcdGFyZ3M6IHtcblx0XHRcdFx0XHRcdG5hbWU6IG9sZF9pdGVtLm5hbWUsXG5cdFx0XHRcdFx0XHR0aXRsZTogdmFsdWVzLnRpdGxlLFxuXHRcdFx0XHRcdFx0aWNvbjogdmFsdWVzLmljb24gfHwgJycsXG5cdFx0XHRcdFx0XHRwYXJlbnQ6IHZhbHVlcy5wYXJlbnQgfHwgJycsXG5cdFx0XHRcdFx0XHRwdWJsaWM6IHZhbHVlcy5pc19wdWJsaWMgfHwgMCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGNhbGxiYWNrKHJlcykge1xuXHRcdFx0XHRcdFx0aWYgKHJlcy5tZXNzYWdlKSB7XG5cdFx0XHRcdFx0XHRcdGZyYXBwZS5jYWxsKHtcblx0XHRcdFx0XHRcdFx0XHRtZXRob2Q6ICd0aWFuanlfb3JnYW5pemF0aW9uLnRpYW5qeV9vcmdhbml6YXRpb24ucGFnZS50aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy50aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy5zZXRfb3JnYW5pemF0aW9uX3dvcmtzcGFjZScsXG5cdFx0XHRcdFx0XHRcdFx0YXJnczoge1xuXHRcdFx0XHRcdFx0XHRcdFx0d29ya3NwYWNlX25hbWU6IHJlcy5tZXNzYWdlLm5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmdhbml6YXRpb25fbmFtZTogbWUub3JnYW5pemF0aW9uX25hbWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OiB2YWx1ZXMuZGVmYXVsdCxcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0bGV0IG1lc3NhZ2UgPSBfXygnV29ya3NwYWNlIHswfSBFZGl0ZWQgU3VjY2Vzc2Z1bGx5JywgW1xuXHRcdFx0XHRcdFx0XHRcdG9sZF9pdGVtLnRpdGxlLmJvbGQoKSxcblx0XHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHRcdGZyYXBwZS5zaG93X2FsZXJ0KHsgbWVzc2FnZSwgaW5kaWNhdG9yOiAnZ3JlZW4nIH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRoaXMudXBkYXRlX3NpZGViYXIob2xkX2l0ZW0sIHZhbHVlcyk7XG5cblx0XHRcdFx0aWYgKHRoaXMubWFrZV9wYWdlX3NlbGVjdGVkKSB7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVfc2VsZWN0ZWRfc2lkZWJhcih0aGlzLmN1cnJlbnRfcGFnZSwgZmFsc2UpO1xuXHRcdFx0XHRcdHRoaXMuY3VycmVudF9wYWdlPXtcblx0XHRcdFx0XHRcdG5hbWU6IHZhbHVlcy50aXRsZSxcblx0XHRcdFx0XHRcdHB1YmxpYzogdmFsdWVzLmlzX3B1YmxpYyxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHRoaXMuc2hvdygpO1xuXHRcdFx0XHRcdHRoaXMubWFrZV9wYWdlX3NlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLm1ha2Vfc2lkZWJhcigpO1xuXHRcdFx0XHR0aGlzLnNob3dfc2lkZWJhcl9hY3Rpb25zKCk7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdGQuc2hvdygpO1xuXHR9XG5cblx0dXBkYXRlX3NpZGViYXIob2xkX2l0ZW0sIG5ld19pdGVtKSB7XG5cdFx0bGV0IGlzX3NlY3Rpb25fY2hhbmdlZCA9IG9sZF9pdGVtLnB1YmxpYyAhPSAobmV3X2l0ZW0uaXNfcHVibGljIHx8IDApO1xuXHRcdGxldCBpc190aXRsZV9jaGFuZ2VkID0gb2xkX2l0ZW0udGl0bGUgIT0gbmV3X2l0ZW0udGl0bGU7XG5cdFx0bGV0IG5ld191cGRhdGVkX2l0ZW0gPSB7IC4uLm9sZF9pdGVtIH07XG5cblx0XHRsZXQgcGFnZXMgPSBvbGRfaXRlbS5wdWJsaWMgPyB0aGlzLnB1YmxpY19wYWdlcyA6IHRoaXMucHJpdmF0ZV9wYWdlcztcblxuXHRcdGxldCBjaGlsZF9pdGVtcyA9IHBhZ2VzLmZpbHRlcihwYWdlID0+IHBhZ2UucGFyZW50X3BhZ2UgPT0gb2xkX2l0ZW0udGl0bGUpO1xuXG5cdFx0dGhpcy5tYWtlX3BhZ2Vfc2VsZWN0ZWQgPSBvbGRfaXRlbS5zZWxlY3RlZDtcblxuXHRcdG5ld191cGRhdGVkX2l0ZW0udGl0bGUgPSBuZXdfaXRlbS50aXRsZTtcblx0XHRuZXdfdXBkYXRlZF9pdGVtLmljb24gPSBuZXdfaXRlbS5pY29uO1xuXHRcdG5ld191cGRhdGVkX2l0ZW0ucGFyZW50X3BhZ2UgPSBuZXdfaXRlbS5wYXJlbnQgfHwgJyc7XG5cdFx0bmV3X3VwZGF0ZWRfaXRlbS5wdWJsaWMgPSBuZXdfaXRlbS5pc19wdWJsaWM7XG5cblx0XHRpZiAoaXNfdGl0bGVfY2hhbmdlZCB8fCBpc19zZWN0aW9uX2NoYW5nZWQpIHtcblx0XHRcdGlmIChuZXdfaXRlbS5pc19wdWJsaWMpIHtcblx0XHRcdFx0bmV3X3VwZGF0ZWRfaXRlbS5uYW1lID0gbmV3X2l0ZW0udGl0bGU7XG5cdFx0XHRcdG5ld191cGRhdGVkX2l0ZW0ubGFiZWwgPSBuZXdfaXRlbS50aXRsZTtcblx0XHRcdFx0bmV3X3VwZGF0ZWRfaXRlbS5mb3JfdXNlciA9ICcnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGV0IHt1c2VyfSA9IGZyYXBwZS5zZXNzaW9uO1xuXHRcdFx0XHRuZXdfdXBkYXRlZF9pdGVtLm5hbWUgPSBgJHtuZXdfaXRlbS50aXRsZX0tJHt1c2VyfWA7XG5cdFx0XHRcdG5ld191cGRhdGVkX2l0ZW0ubGFiZWwgPSBgJHtuZXdfaXRlbS50aXRsZX0tJHt1c2VyfWA7XG5cdFx0XHRcdG5ld191cGRhdGVkX2l0ZW0uZm9yX3VzZXIgPSB1c2VyO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLnVwZGF0ZV9jYWNoZWRfdmFsdWVzKG9sZF9pdGVtLCBuZXdfdXBkYXRlZF9pdGVtKTtcblxuXHRcdGlmIChjaGlsZF9pdGVtcy5sZW5ndGgpIHtcblx0XHRcdGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRfaXRlbXMpIHtcblx0XHRcdFx0Y2hpbGQucGFyZW50X3BhZ2UgPSBuZXdfaXRlbS50aXRsZTtcblx0XHRcdFx0aXNfc2VjdGlvbl9jaGFuZ2VkICYmIHRoaXMudXBkYXRlX2NoaWxkX3NpZGViYXIoY2hpbGQsIG5ld19pdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR1cGRhdGVfY2hpbGRfc2lkZWJhcihjaGlsZCwgbmV3X2l0ZW0pIHtcblx0XHRsZXQgb2xkX2NoaWxkID0geyAuLi5jaGlsZCB9O1xuXHRcdHRoaXMubWFrZV9wYWdlX3NlbGVjdGVkID0gY2hpbGQuc2VsZWN0ZWQ7XG5cblx0XHRjaGlsZC5wdWJsaWMgPSBuZXdfaXRlbS5pc19wdWJsaWM7XG5cdFx0aWYgKG5ld19pdGVtLmlzX3B1YmxpYykge1xuXHRcdFx0Y2hpbGQubmFtZSA9IGNoaWxkLnRpdGxlO1xuXHRcdFx0Y2hpbGQubGFiZWwgPSBjaGlsZC50aXRsZTtcblx0XHRcdGNoaWxkLmZvcl91c2VyID0gJyc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCB7dXNlcn0gPSBmcmFwcGUuc2Vzc2lvbjtcblx0XHRcdGNoaWxkLm5hbWUgPSBgJHtjaGlsZC50aXRsZX0tJHt1c2VyfWA7XG5cdFx0XHRjaGlsZC5sYWJlbCA9IGAke2NoaWxkLnRpdGxlfS0ke3VzZXJ9YDtcblx0XHRcdGNoaWxkLmZvcl91c2VyID0gdXNlcjtcblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZV9jYWNoZWRfdmFsdWVzKG9sZF9jaGlsZCwgY2hpbGQpO1xuXHR9XG5cblx0dXBkYXRlX2NhY2hlZF92YWx1ZXMob2xkX2l0ZW0sIG5ld19pdGVtLCBkdXBsaWNhdGUsIG5ld19wYWdlKSB7XG5cdFx0bGV0IFtmcm9tX3BhZ2VzLCB0b19wYWdlc10gPSBvbGRfaXRlbS5wdWJsaWNcblx0XHRcdD8gW3RoaXMucHVibGljX3BhZ2VzLCB0aGlzLnByaXZhdGVfcGFnZXNdXG5cdFx0XHQ6IFt0aGlzLnByaXZhdGVfcGFnZXMsIHRoaXMucHVibGljX3BhZ2VzXTtcblxuXHRcdGxldCBvbGRfaXRlbV9pbmRleCA9IGZyb21fcGFnZXMuZmluZEluZGV4KHBhZ2UgPT4gcGFnZS50aXRsZSA9PSBvbGRfaXRlbS50aXRsZSk7XG5cdFx0ZHVwbGljYXRlICYmIG9sZF9pdGVtX2luZGV4Kys7XG5cblx0XHQvLyB1cGRhdGUgZnJhcHBlLndvcmtzcGFjZXNcblx0XHRpZiAoZnJhcHBlLndvcmtzcGFjZXNbZnJhcHBlLnJvdXRlci5zbHVnKG9sZF9pdGVtLm5hbWUpXSB8fCBuZXdfcGFnZSkge1xuXHRcdFx0IWR1cGxpY2F0ZSAmJiBkZWxldGUgZnJhcHBlLndvcmtzcGFjZXNbZnJhcHBlLnJvdXRlci5zbHVnKG9sZF9pdGVtLm5hbWUpXTtcblx0XHRcdGlmIChuZXdfaXRlbSkge1xuXHRcdFx0XHRmcmFwcGUud29ya3NwYWNlc1tmcmFwcGUucm91dGVyLnNsdWcobmV3X2l0ZW0ubmFtZSldID0geyB0aXRsZTogbmV3X2l0ZW0udGl0bGUgfTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgcGFnZSBibG9jayBkYXRhXG5cdFx0aWYgKCh0aGlzLnBhZ2VzICYmIHRoaXMucGFnZXNbb2xkX2l0ZW0ubmFtZV0pIHx8IG5ld19wYWdlKSB7XG5cdFx0XHRpZiAobmV3X2l0ZW0pIHtcblx0XHRcdFx0dGhpcy5wYWdlc1tuZXdfaXRlbS5uYW1lXSA9IHRoaXMucGFnZXNbb2xkX2l0ZW0ubmFtZV0gfHwge307XG5cdFx0XHR9XG5cdFx0XHQhZHVwbGljYXRlICYmIGRlbGV0ZSB0aGlzLnBhZ2VzW29sZF9pdGVtLm5hbWVdO1xuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBwdWJsaWMgYW5kIHByaXZhdGUgcGFnZXNcblx0XHRpZiAobmV3X2l0ZW0pIHtcblx0XHRcdGxldCBpc19zZWN0aW9uX2NoYW5nZWQgPVxuXHRcdFx0XHRvbGRfaXRlbS5wdWJsaWMgIT0gKG5ld19pdGVtLmlzX3B1YmxpYyB8fCBuZXdfaXRlbS5wdWJsaWMgfHwgMCk7XG5cblx0XHRcdGlmIChpc19zZWN0aW9uX2NoYW5nZWQpIHtcblx0XHRcdFx0IWR1cGxpY2F0ZSAmJiBmcm9tX3BhZ2VzLnNwbGljZShvbGRfaXRlbV9pbmRleCwgMSk7XG5cdFx0XHRcdHRvX3BhZ2VzLnB1c2gobmV3X2l0ZW0pO1xuXHRcdFx0fSBlbHNlIGlmIChuZXdfcGFnZSkge1xuXHRcdFx0XHRmcm9tX3BhZ2VzLnB1c2gobmV3X2l0ZW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnJvbV9wYWdlcy5zcGxpY2Uob2xkX2l0ZW1faW5kZXgsIGR1cGxpY2F0ZSA/IDAgOiAxLCBuZXdfaXRlbSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZyb21fcGFnZXMuc3BsaWNlKG9sZF9pdGVtX2luZGV4LCAxKTtcblx0XHR9XG5cblx0XHR0aGlzLnNpZGViYXJfcGFnZXMucGFnZXMgPSBbLi4udGhpcy5wdWJsaWNfcGFnZXMsIC4uLnRoaXMucHJpdmF0ZV9wYWdlc107XG5cdFx0dGhpcy5jYWNoZWRfcGFnZXMgPSB0aGlzLnNpZGViYXJfcGFnZXM7XG5cdH1cblxuXHRhZGRfc2V0dGluZ3NfYnV0dG9uKGl0ZW0sIHNpZGViYXJfY29udHJvbCkge1xuXHRcdHRoaXMuZHJvcGRvd25fbGlzdCA9IFtcblx0XHRcdHtcblx0XHRcdFx0bGFiZWw6IF9fKCdFZGl0JyksXG5cdFx0XHRcdHRpdGxlOiBfXygnRWRpdCBXb3Jrc3BhY2UnKSxcblx0XHRcdFx0aWNvbjogZnJhcHBlLnV0aWxzLmljb24oJ2VkaXQnLCAnc20nKSxcblx0XHRcdFx0YWN0aW9uOiAoKSA9PiB0aGlzLmVkaXRfcGFnZShpdGVtKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGxhYmVsOiBfXygnRHVwbGljYXRlJyksXG5cdFx0XHRcdHRpdGxlOiBfXygnRHVwbGljYXRlIFdvcmtzcGFjZScpLFxuXHRcdFx0XHRpY29uOiBmcmFwcGUudXRpbHMuaWNvbignZHVwbGljYXRlJywgJ3NtJyksXG5cdFx0XHRcdGFjdGlvbjogKCkgPT4gdGhpcy5kdXBsaWNhdGVfcGFnZShpdGVtKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGxhYmVsOiBfXygnSGlkZScpLFxuXHRcdFx0XHR0aXRsZTogX18oJ0hpZGUgV29ya3NwYWNlJyksXG5cdFx0XHRcdGljb246IGZyYXBwZS51dGlscy5pY29uKCdoaWRlJywgJ3NtJyksXG5cdFx0XHRcdGFjdGlvbjogZSA9PiB0aGlzLmhpZGVfd29ya3NwYWNlKGl0ZW0sIGUpLFxuXHRcdFx0fSxcblx0XHRdO1xuXG5cdFx0aWYgKHRoaXMuaXNfaXRlbV9kZWxldGFibGUoaXRlbSkpIHtcblx0XHRcdHRoaXMuZHJvcGRvd25fbGlzdC5wdXNoKHtcblx0XHRcdFx0bGFiZWw6IF9fKCdEZWxldGUnKSxcblx0XHRcdFx0dGl0bGU6IF9fKCdEZWxldGUgV29ya3NwYWNlJyksXG5cdFx0XHRcdGljb246IGZyYXBwZS51dGlscy5pY29uKCdkZWxldGUtYWN0aXZlJywgJ3NtJyksXG5cdFx0XHRcdGFjdGlvbjogKCkgPT4gdGhpcy5kZWxldGVfcGFnZShpdGVtKSxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGxldCAkYnV0dG9uID0gJChgXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnkgYnRuLXhzIHNldHRpbmctYnRuIGRyb3Bkb3duLWJ0blwiIHRpdGxlPVwiJHtfXygnU2V0dGluZycpfVwiPlxuXHRcdFx0XHQke2ZyYXBwZS51dGlscy5pY29uKCdkb3QtaG9yaXpvbnRhbCcsICd4cycpfVxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiZHJvcGRvd24tbGlzdCBoaWRkZW5cIj48L2Rpdj5cblx0XHRgKTtcblxuXHRcdGxldCBkcm9wZG93bl9pdGVtID0gZnVuY3Rpb24gKGxhYmVsLCB0aXRsZSwgaWNvbiwgYWN0aW9uKSB7XG5cdFx0XHRsZXQgaHRtbCA9ICQoYFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIHRpdGxlPVwiJHt0aXRsZX1cIj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImRyb3Bkb3duLWl0ZW0taWNvblwiPiR7aWNvbn08L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJkcm9wZG93bi1pdGVtLWxhYmVsXCI+JHtsYWJlbH08L3NwYW4+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0YCk7XG5cblx0XHRcdGh0bWwuY2xpY2soZXZlbnQgPT4ge1xuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0YWN0aW9uICYmIGFjdGlvbihldmVudCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGh0bWw7XG5cdFx0fTtcblxuXHRcdCRidXR0b24uZmlsdGVyKCcuZHJvcGRvd24tYnRuJykuY2xpY2soZXZlbnQgPT4ge1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRpZiAoJGJ1dHRvbi5maWx0ZXIoJy5kcm9wZG93bi1saXN0LmhpZGRlbicpLmxlbmd0aCkge1xuXHRcdFx0XHQkKCcuZHJvcGRvd24tbGlzdDpub3QoLmhpZGRlbiknKS5hZGRDbGFzcygnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0XHQkYnV0dG9uLmZpbHRlcignLmRyb3Bkb3duLWxpc3QnKS50b2dnbGVDbGFzcygnaGlkZGVuJyk7XG5cdFx0fSk7XG5cblx0XHRzaWRlYmFyX2NvbnRyb2wuYXBwZW5kKCRidXR0b24pO1xuXG5cdFx0Zm9yIChjb25zdCBpIG9mIHRoaXMuZHJvcGRvd25fbGlzdCkge1xuXHRcdFx0JGJ1dHRvblxuXHRcdFx0XHQuZmlsdGVyKCcuZHJvcGRvd24tbGlzdCcpXG5cdFx0XHRcdC5hcHBlbmQoZHJvcGRvd25faXRlbShpLmxhYmVsLCBpLnRpdGxlLCBpLmljb24sIGkuYWN0aW9uKSk7XG5cdFx0fVxuXHR9XG5cblx0aXNfaXRlbV9kZWxldGFibGUoaXRlbSkge1xuXHRcdC8vIGlmIGl0ZW0gaXMgcHJpdmF0ZVxuXHRcdC8vIGlmIGl0ZW0gaXMgcHVibGljIGJ1dCBkb2Vzbid0IGhhdmUgbW9kdWxlIHNldFxuXHRcdC8vIGlmIGl0ZW0gaXMgcHVibGljIGFuZCBoYXMgbW9kdWxlIHNldCBidXQgZGV2ZWxvcGVyIG1vZGUgaXMgb25cblx0XHQvLyB0aGVuIGl0ZW0gaXMgZGVsZXRhYmxlXG5cdFx0aWYgKFxuXHRcdFx0IWl0ZW0ucHVibGljIHx8XG5cdFx0XHQoaXRlbS5wdWJsaWMgJiYgKCFpdGVtLm1vZHVsZSB8fCAoaXRlbS5tb2R1bGUgJiYgZnJhcHBlLmJvb3QuZGV2ZWxvcGVyX21vZGUpKSlcblx0XHQpXG5cdFx0eyByZXR1cm4gdHJ1ZTsgfVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGRlbGV0ZV9wYWdlKHBhZ2UpIHtcblx0XHRmcmFwcGUuY29uZmlybShcblx0XHRcdF9fKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHBhZ2UgezB9PycsIFtwYWdlLnRpdGxlLmJvbGQoKV0pLFxuXHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRmcmFwcGUuY2FsbCh7XG5cdFx0XHRcdFx0bWV0aG9kOiAndGlhbmp5X29yZ2FuaXphdGlvbi50aWFuanlfb3JnYW5pemF0aW9uLnBhZ2UudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcuZGVsZXRlX3BhZ2UnLFxuXHRcdFx0XHRcdGFyZ3M6IHsgcGFnZTogcGFnZSB9LFxuXHRcdFx0XHRcdGNhbGxiYWNrOiBmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdFx0XHRpZiAocmVzLm1lc3NhZ2UpIHtcblxuXHRcdFx0XHRcdFx0XHRsZXQgcGFnZSA9IHJlcy5tZXNzYWdlO1xuXHRcdFx0XHRcdFx0XHRsZXQgbWVzc2FnZSA9IF9fKCdXb3Jrc3BhY2UgezB9IERlbGV0ZWQgU3VjY2Vzc2Z1bGx5JywgW1xuXHRcdFx0XHRcdFx0XHRcdHBhZ2UudGl0bGUuYm9sZCgpLFxuXHRcdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdFx0ZnJhcHBlLnNob3dfYWxlcnQoeyBtZXNzYWdlOiBtZXNzYWdlLCBpbmRpY2F0b3I6ICdncmVlbicgfSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy5wYWdlLmNsZWFyX3ByaW1hcnlfYWN0aW9uKCk7XG5cdFx0XHRcdHRoaXMudXBkYXRlX2NhY2hlZF92YWx1ZXMocGFnZSk7XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHRoaXMuY3VycmVudF9wYWdlLm5hbWUgPT0gcGFnZS50aXRsZSAmJlxuXHRcdFx0XHRcdHRoaXMuY3VycmVudF9wYWdlLnB1YmxpYyA9PSBwYWdlLnB1YmxpY1xuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZV9zZWxlY3RlZF9zaWRlYmFyKHRoaXMuY3VycmVudF9wYWdlLCBmYWxzZSk7XG5cdFx0XHRcdFx0dGhpcy5jdXJyZW50X3BhZ2UgPSB7fTtcblx0XHRcdFx0XHR0aGlzLmN1cnJlbnRfcGFnZSA9IHRoaXMuZ2V0X3BhZ2VfdG9fc2hvdygpO1xuXHRcdFx0XHRcdHRoaXMuc2hvdygpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5tYWtlX3NpZGViYXIoKTtcblx0XHRcdFx0dGhpcy5zaG93X3NpZGViYXJfYWN0aW9ucygpO1xuXHRcdFx0fSxcblx0XHQpO1xuXHR9XG5cblx0ZHVwbGljYXRlX3BhZ2UocGFnZSkge1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0bGV0IG5ld19wYWdlID0geyAuLi5wYWdlIH07XG5cdFx0aWYgKCF0aGlzLmhhc19hY2Nlc3MgJiYgbmV3X3BhZ2UucHVibGljKSB7XG5cdFx0XHRuZXdfcGFnZS5wdWJsaWMgPSAwO1xuXHRcdH1cblx0XHRsZXQgcGFyZW50X3BhZ2VzID0gdGhpcy5nZXRfcGFyZW50X3BhZ2VzKHsgcHVibGljOiBuZXdfcGFnZS5wdWJsaWMgfSk7XG5cdFx0Y29uc3QgZCA9IG5ldyBmcmFwcGUudWkuRGlhbG9nKHtcblx0XHRcdHRpdGxlOiBfXygnQ3JlYXRlIER1cGxpY2F0ZScpLFxuXHRcdFx0ZmllbGRzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogX18oJ1RpdGxlJyksXG5cdFx0XHRcdFx0ZmllbGR0eXBlOiAnRGF0YScsXG5cdFx0XHRcdFx0ZmllbGRuYW1lOiAndGl0bGUnLFxuXHRcdFx0XHRcdHJlcWQ6IDEsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogX18oJ1N1ZmZpeCcpLFxuXHRcdFx0XHRcdGZpZWxkdHlwZTogJ0RhdGEnLFxuXHRcdFx0XHRcdGZpZWxkbmFtZTogJ3N1ZmZpeCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogX18oJ1BhcmVudCcpLFxuXHRcdFx0XHRcdGZpZWxkdHlwZTogJ1NlbGVjdCcsXG5cdFx0XHRcdFx0ZmllbGRuYW1lOiAncGFyZW50Jyxcblx0XHRcdFx0XHRvcHRpb25zOiBwYXJlbnRfcGFnZXMsXG5cdFx0XHRcdFx0ZGVmYXVsdDogbmV3X3BhZ2UucGFyZW50X3BhZ2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogX18oJ0RlZmF1bHQnKSxcblx0XHRcdFx0XHRmaWVsZHR5cGU6ICdDaGVjaycsXG5cdFx0XHRcdFx0ZmllbGRuYW1lOiAnZGVmYXVsdCcsXG5cdFx0XHRcdFx0ZGVmYXVsdDppdGVtLmRlZmF1bHQsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRmaWVsZHR5cGU6ICdDb2x1bW4gQnJlYWsnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IF9fKCdJY29uJyksXG5cdFx0XHRcdFx0ZmllbGR0eXBlOiAnSWNvbicsXG5cdFx0XHRcdFx0ZmllbGRuYW1lOiAnaWNvbicsXG5cdFx0XHRcdFx0ZGVmYXVsdDogbmV3X3BhZ2UuaWNvbixcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0XHRwcmltYXJ5X2FjdGlvbl9sYWJlbDogX18oJ0R1cGxpY2F0ZScpLFxuXHRcdFx0cHJpbWFyeV9hY3Rpb246IHZhbHVlcyA9PiB7XG5cdFx0XHRcdHZhbHVlcy50aXRsZSA9IGAke3ZhbHVlcy50aXRsZX0ke3ZhbHVlcy5zdWZmaXggPyBge3ske3ZhbHVlcy5zdWZmaXh9fX1gIDogJyd9YDtcblx0XHRcdFx0dmFsdWVzLmlzX3B1YmxpYyA9IDE7XG5cdFx0XHRcdGlmICghdGhpcy52YWxpZGF0ZV9wYWdlKHZhbHVlcykpIHsgcmV0dXJuOyB9XG5cdFx0XHRcdGQuaGlkZSgpO1xuXHRcdFx0XHRmcmFwcGUuY2FsbCh7XG5cdFx0XHRcdFx0bWV0aG9kOiAnZnJhcHBlLmRlc2suZG9jdHlwZS53b3Jrc3BhY2Uud29ya3NwYWNlLmR1cGxpY2F0ZV9wYWdlJyxcblx0XHRcdFx0XHRhcmdzOiB7XG5cdFx0XHRcdFx0XHRwYWdlX25hbWU6IHBhZ2UubmFtZSxcblx0XHRcdFx0XHRcdG5ld19wYWdlOiB2YWx1ZXMsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjYWxsYmFjayhyZXMpIHtcblx0XHRcdFx0XHRcdGlmIChyZXMubWVzc2FnZSkge1xuXHRcdFx0XHRcdFx0XHRmcmFwcGUuY2FsbCh7XG5cdFx0XHRcdFx0XHRcdFx0bWV0aG9kOiAndGlhbmp5X29yZ2FuaXphdGlvbi50aWFuanlfb3JnYW5pemF0aW9uLnBhZ2UudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcuc2F2ZV9vcmdhbml6YXRpb25fd29ya3NwYWNlJyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHR3b3Jrc3BhY2VfbmFtZTogcmVzLm1lc3NhZ2UubmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdG9yZ2FuaXphdGlvbl9uYW1lOiBtZS5vcmdhbml6YXRpb25fbmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IHZhbHVlcy5kZWZhdWx0LFxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRsZXQgbmV3X3BhZ2UgPSByZXMubWVzc2FnZTtcblx0XHRcdFx0XHRcdFx0bGV0IG1lc3NhZ2UgPSBfXyhcblx0XHRcdFx0XHRcdFx0XHQnRHVwbGljYXRlIG9mIHswfSBuYW1lZCBhcyB7MX0gaXMgY3JlYXRlZCBzdWNjZXNzZnVsbHknLFxuXHRcdFx0XHRcdFx0XHRcdFtwYWdlLnRpdGxlLmJvbGQoKSwgbmV3X3BhZ2UudGl0bGUuYm9sZCgpXSxcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0ZnJhcHBlLnNob3dfYWxlcnQoeyBtZXNzYWdlLCBpbmRpY2F0b3I6ICdncmVlbicgfSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0bmV3X3BhZ2UudGl0bGUgPSB2YWx1ZXMudGl0bGU7XG5cdFx0XHRcdG5ld19wYWdlLnB1YmxpYyA9IHZhbHVlcy5pc19wdWJsaWMgfHwgMDtcblx0XHRcdFx0bmV3X3BhZ2UubmFtZSA9IHZhbHVlcy50aXRsZSArIChuZXdfcGFnZS5wdWJsaWMgPyAnJyA6IGAtJHtmcmFwcGUuc2Vzc2lvbi51c2VyfWApO1xuXHRcdFx0XHRuZXdfcGFnZS5sYWJlbCA9IG5ld19wYWdlLm5hbWU7XG5cdFx0XHRcdG5ld19wYWdlLmljb24gPSB2YWx1ZXMuaWNvbjtcblx0XHRcdFx0bmV3X3BhZ2UucGFyZW50X3BhZ2UgPSB2YWx1ZXMucGFyZW50IHx8ICcnO1xuXHRcdFx0XHRuZXdfcGFnZS5mb3JfdXNlciA9IG5ld19wYWdlLnB1YmxpYyA/ICcnIDogZnJhcHBlLnNlc3Npb24udXNlcjtcblx0XHRcdFx0bmV3X3BhZ2UuaXNfZWRpdGFibGUgPSAhbmV3X3BhZ2UucHVibGljO1xuXHRcdFx0XHRuZXdfcGFnZS5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRcdG5ld19wYWdlLm9yZ2FuaXphdGlvbiA9IHRoaXMub3JnYW5pemF0aW9uX25hbWU7XG5cdFx0XHRcdHRoaXMudXBkYXRlX2NhY2hlZF92YWx1ZXMocGFnZSwgbmV3X3BhZ2UsIHRydWUpO1xuXG5cdFx0XHRcdHRoaXMudXBkYXRlX3NlbGVjdGVkX3NpZGViYXIodGhpcy5jdXJyZW50X3BhZ2UsIGZhbHNlKTtcblx0XHRcdFx0dGhpcy5jdXJyZW50X3BhZ2U9e1xuXHRcdFx0XHRcdG5hbWU6IG5ld19wYWdlLm5hbWUsXG5cdFx0XHRcdFx0cHVibGljOiBuZXdfcGFnZS5wdWJsaWMsXG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMuc2hvdygpO1xuXG5cdFx0XHRcdG1lLm1ha2Vfc2lkZWJhcigpO1xuXHRcdFx0XHRtZS5zaG93X3NpZGViYXJfYWN0aW9ucygpO1xuXHRcdFx0fSxcblx0XHR9KTtcblx0XHRkLnNob3coKTtcblx0fVxuXG5cdGhpZGVfdW5oaWRlX3dvcmtzcGFjZShwYWdlLCBldmVudCwgaGlkZSkge1xuXHRcdHBhZ2UuaXNfaGlkZGVuID0gaGlkZTtcblxuXHRcdGxldCBzaWRlYmFyX2NvbnRyb2wgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLnNpZGViYXItaXRlbS1jb250cm9sJyk7XG5cdFx0bGV0IHNpZGViYXJfaXRlbV9jb250YWluZXIgPSBzaWRlYmFyX2NvbnRyb2wuY2xvc2VzdCgnLnNpZGViYXItaXRlbS1jb250YWluZXInKTtcblx0XHQkKHNpZGViYXJfaXRlbV9jb250YWluZXIpLmF0dHIoJ2l0ZW0taXMtaGlkZGVuJywgaGlkZSk7XG5cblx0XHQkKHNpZGViYXJfY29udHJvbCkuZW1wdHkoKTtcblx0XHR0aGlzLmFkZF9zaWRlYmFyX2FjdGlvbnMocGFnZSwgJChzaWRlYmFyX2NvbnRyb2wpKTtcblxuXHRcdHRoaXMuYWRkX2Ryb3BfaWNvbihwYWdlLCAkKHNpZGViYXJfY29udHJvbCksICQoc2lkZWJhcl9pdGVtX2NvbnRhaW5lcikpO1xuXG5cdFx0bGV0IGNhY2hlZF9wYWdlID0gdGhpcy5jYWNoZWRfcGFnZXMucGFnZXMuZmluZEluZGV4KHAgPT4gcC5uYW1lID09PSBwYWdlLm5hbWUpO1xuXHRcdGlmIChjYWNoZWRfcGFnZSAhPT0gLTEpIHtcblx0XHRcdHRoaXMuY2FjaGVkX3BhZ2VzLnBhZ2VzW2NhY2hlZF9wYWdlXS5pc19oaWRkZW4gPSBoaWRlO1xuXHRcdH1cblxuXHRcdGxldCBtZXRob2QgPSBoaWRlID8gJ2hpZGVfcGFnZScgOiAndW5oaWRlX3BhZ2UnO1xuXHRcdGZyYXBwZS5jYWxsKHtcblx0XHRcdG1ldGhvZDogYGZyYXBwZS5kZXNrLmRvY3R5cGUud29ya3NwYWNlLndvcmtzcGFjZS4ke21ldGhvZH1gLFxuXHRcdFx0YXJnczoge1xuXHRcdFx0XHRwYWdlX25hbWU6IHBhZ2UubmFtZSxcblx0XHRcdH0sXG5cdFx0XHRjYWxsYmFjazogciA9PiB7XG5cdFx0XHRcdGlmICghci5tZXNzYWdlKSB7IHJldHVybjsgfVxuXG5cdFx0XHRcdGxldCBtZXNzYWdlID0gaGlkZSA/ICd7MH0gaXMgaGlkZGVuIHN1Y2Nlc3NmdWxseScgOiAnezB9IGlzIHVuaGlkZGVuIHN1Y2Nlc3NmdWxseSc7XG5cdFx0XHRcdG1lc3NhZ2UgPSBfXyhtZXNzYWdlLCBbcGFnZS50aXRsZS5ib2xkKCldKTtcblx0XHRcdFx0ZnJhcHBlLnNob3dfYWxlcnQoeyBtZXNzYWdlOiBtZXNzYWdlLCBpbmRpY2F0b3I6ICdncmVlbicgfSk7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG5cblx0aGlkZV93b3Jrc3BhY2UocGFnZSwgZXZlbnQpIHtcblx0XHR0aGlzLmhpZGVfdW5oaWRlX3dvcmtzcGFjZShwYWdlLCBldmVudCwgMSk7XG5cdH1cblxuXHR1bmhpZGVfd29ya3NwYWNlKHBhZ2UsIGV2ZW50KSB7XG5cdFx0dGhpcy5oaWRlX3VuaGlkZV93b3Jrc3BhY2UocGFnZSwgZXZlbnQsIDApO1xuXHR9XG5cblx0bWFrZV9zaWRlYmFyX3NvcnRhYmxlKCkge1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0JCgnLm5lc3RlZC1jb250YWluZXInKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdG5ldyBTb3J0YWJsZSh0aGlzLCB7XG5cdFx0XHRcdGhhbmRsZTogJy5kcmFnLWhhbmRsZScsXG5cdFx0XHRcdGRyYWdnYWJsZTogJy5zaWRlYmFyLWl0ZW0tY29udGFpbmVyLmlzLWRyYWdnYWJsZScsXG5cdFx0XHRcdGdyb3VwOiAnbmVzdGVkJyxcblx0XHRcdFx0YW5pbWF0aW9uOiAxNTAsXG5cdFx0XHRcdGZhbGxiYWNrT25Cb2R5OiB0cnVlLFxuXHRcdFx0XHRzd2FwVGhyZXNob2xkOiAwLjY1LFxuXHRcdFx0XHRvbkVuZDogZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0XHRcdGxldCBpc19wdWJsaWMgPSAkKGV2dC5pdGVtKS5hdHRyKCdpdGVtLXB1YmxpYycpID09ICcxJztcblx0XHRcdFx0XHRtZS5wcmVwYXJlX3NvcnRlZF9zaWRlYmFyKGlzX3B1YmxpYyk7XG5cdFx0XHRcdFx0bWUudXBkYXRlX3NvcnRlZF9zaWRlYmFyKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdHByZXBhcmVfc29ydGVkX3NpZGViYXIoaXNfcHVibGljKSB7XG5cdFx0bGV0IHBhZ2VzID0gaXNfcHVibGljID8gdGhpcy5wdWJsaWNfcGFnZXMgOiB0aGlzLnByaXZhdGVfcGFnZXM7XG5cdFx0aWYgKGlzX3B1YmxpYykge1xuXHRcdFx0dGhpcy5zb3J0ZWRfcHVibGljX2l0ZW1zID0gdGhpcy5zb3J0X3NpZGViYXIoXG5cdFx0XHRcdHRoaXMuc2lkZWJhci5maW5kKCcuc3RhbmRhcmQtc2lkZWJhci1zZWN0aW9uJykubGFzdCgpLFxuXHRcdFx0XHRwYWdlcyxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc29ydGVkX3ByaXZhdGVfaXRlbXMgPSB0aGlzLnNvcnRfc2lkZWJhcihcblx0XHRcdFx0dGhpcy5zaWRlYmFyLmZpbmQoJy5zdGFuZGFyZC1zaWRlYmFyLXNlY3Rpb24nKS5maXJzdCgpLFxuXHRcdFx0XHRwYWdlcyxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zaWRlYmFyX3BhZ2VzLnBhZ2VzID0gWy4uLnRoaXMucHVibGljX3BhZ2VzLCAuLi50aGlzLnByaXZhdGVfcGFnZXNdO1xuXHRcdHRoaXMuY2FjaGVkX3BhZ2VzID0gdGhpcy5zaWRlYmFyX3BhZ2VzO1xuXHR9XG5cblx0c29ydF9zaWRlYmFyKCRzaWRlYmFyX3NlY3Rpb24sIHBhZ2VzKSB7XG5cdFx0bGV0IHNvcnRlZF9pdGVtcyA9IFtdO1xuXHRcdGZvciAoY29uc3QgW2ksIHBhZ2VdIG9mIEFycmF5LmZyb20oJHNpZGViYXJfc2VjdGlvbi5maW5kKCcuc2lkZWJhci1pdGVtLWNvbnRhaW5lcicpKS5lbnRyaWVzKCkpIHtcblx0XHRcdGxldCBwYXJlbnRfcGFnZSA9ICcnO1xuXG5cdFx0XHRpZiAocGFnZS5jbG9zZXN0KCcubmVzdGVkLWNvbnRhaW5lcicpLmNsYXNzTGlzdC5jb250YWlucygnc2lkZWJhci1jaGlsZC1pdGVtJykpIHtcblx0XHRcdFx0cGFyZW50X3BhZ2UgPSBwYWdlLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5hdHRyaWJ1dGVzWydpdGVtLW5hbWUnXS52YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0c29ydGVkX2l0ZW1zLnB1c2goe1xuXHRcdFx0XHR0aXRsZTogcGFnZS5hdHRyaWJ1dGVzWydpdGVtLW5hbWUnXS52YWx1ZSxcblx0XHRcdFx0cGFyZW50X3BhZ2U6IHBhcmVudF9wYWdlLFxuXHRcdFx0XHRwdWJsaWM6IHBhZ2UuYXR0cmlidXRlc1snaXRlbS1wdWJsaWMnXS52YWx1ZSxcblx0XHRcdH0pO1xuXG5cdFx0XHRsZXQgJGRyb3BfaWNvbiA9ICQocGFnZSkuZmluZCgnLnNpZGViYXItaXRlbS1jb250cm9sIC5kcm9wLWljb24nKS5maXJzdCgpO1xuXHRcdFx0aWYgKCQocGFnZSkuZmluZCgnLnNpZGViYXItY2hpbGQtaXRlbSA+IConKS5sZW5ndGggPT0gMCkge1xuXHRcdFx0XHQkZHJvcF9pY29uLmFkZENsYXNzKCdoaWRkZW4nKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCRkcm9wX2ljb24ucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgZnJvbV9pbmRleCA9IHBhZ2VzLmZpbmRJbmRleChwID0+IHAudGl0bGUgPT0gcGFnZS5hdHRyaWJ1dGVzWydpdGVtLW5hbWUnXS52YWx1ZSk7XG5cdFx0XHRsZXQgZWxlbWVudCA9IHBhZ2VzW2Zyb21faW5kZXhdO1xuXHRcdFx0ZWxlbWVudC5wYXJlbnRfcGFnZSA9IHBhcmVudF9wYWdlO1xuXHRcdFx0aWYgKGZyb21faW5kZXggIT0gaSkge1xuXHRcdFx0XHRwYWdlcy5zcGxpY2UoZnJvbV9pbmRleCwgMSk7XG5cdFx0XHRcdHBhZ2VzLnNwbGljZShpLCAwLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHNvcnRlZF9pdGVtcztcblx0fVxuXG5cdHVwZGF0ZV9zb3J0ZWRfc2lkZWJhcigpIHtcblx0XHRpZiAodGhpcy5zb3J0ZWRfcHVibGljX2l0ZW1zIHx8IHRoaXMuc29ydGVkX3ByaXZhdGVfaXRlbXMpIHtcblx0XHRcdGZyYXBwZS5jYWxsKHtcblx0XHRcdFx0bWV0aG9kOiAnZnJhcHBlLmRlc2suZG9jdHlwZS53b3Jrc3BhY2Uud29ya3NwYWNlLnNvcnRfcGFnZXMnLFxuXHRcdFx0XHRhcmdzOiB7XG5cdFx0XHRcdFx0c2JfcHVibGljX2l0ZW1zOiB0aGlzLnNvcnRlZF9wdWJsaWNfaXRlbXMsXG5cdFx0XHRcdFx0c2JfcHJpdmF0ZV9pdGVtczogdGhpcy5zb3J0ZWRfcHJpdmF0ZV9pdGVtcyxcblx0XHRcdFx0fSxcblx0XHRcdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdFx0XHRpZiAocmVzLm1lc3NhZ2UpIHtcblx0XHRcdFx0XHRcdGxldCBtZXNzYWdlID0gYFNpZGViYXIgVXBkYXRlZCBTdWNjZXNzZnVsbHlgO1xuXHRcdFx0XHRcdFx0ZnJhcHBlLnNob3dfYWxlcnQoeyBtZXNzYWdlOiBfXyhtZXNzYWdlKSwgaW5kaWNhdG9yOiAnZ3JlZW4nIH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdG1ha2VfYmxvY2tzX3NvcnRhYmxlKCkge1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cdFx0dGhpcy5wYWdlX3NvcnRhYmxlID0gU29ydGFibGUuY3JlYXRlKFxuXHRcdFx0dGhpcy5wYWdlLm1haW4uZmluZCgnLmNvZGV4LWVkaXRvcl9fcmVkYWN0b3InKS5nZXQoMCksXG5cdFx0XHR7XG5cdFx0XHRcdGhhbmRsZTogJy5kcmFnLWhhbmRsZScsXG5cdFx0XHRcdGRyYWdnYWJsZTogJy5jZS1ibG9jaycsXG5cdFx0XHRcdGFuaW1hdGlvbjogMTUwLFxuXHRcdFx0XHRvbkVuZDogZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0XHRcdG1lLmVkaXRvci5ibG9ja3MubW92ZShldnQubmV3SW5kZXgsIGV2dC5vbGRJbmRleCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNldERhdGE6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHQvL0RvIE5vdGhpbmdcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0KTtcblx0fVxuXG5cdGluaXRpYWxpemVfbmV3X3BhZ2UoKSB7XG5cdFx0bGV0IG1lID0gdGhpcztcblx0XHR0aGlzLmdldF9wYXJlbnRfcGFnZXMoKTtcblx0XHRjb25zdCBkID0gbmV3IGZyYXBwZS51aS5EaWFsb2coe1xuXHRcdFx0dGl0bGU6IF9fKCdOZXcgV29ya3NwYWNlJyksXG5cdFx0XHRmaWVsZHM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBfXygnVGl0bGUnKSxcblx0XHRcdFx0XHRmaWVsZHR5cGU6ICdEYXRhJyxcblx0XHRcdFx0XHRmaWVsZG5hbWU6ICd0aXRsZScsXG5cdFx0XHRcdFx0cmVxZDogMSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBfXygnU3VmZml4JyksXG5cdFx0XHRcdFx0ZmllbGR0eXBlOiAnRGF0YScsXG5cdFx0XHRcdFx0ZmllbGRuYW1lOiAnc3VmZml4Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBfXygnUGFyZW50JyksXG5cdFx0XHRcdFx0ZmllbGR0eXBlOiAnU2VsZWN0Jyxcblx0XHRcdFx0XHRmaWVsZG5hbWU6ICdwYXJlbnQnLFxuXHRcdFx0XHRcdG9wdGlvbnM6IHRoaXMucHVibGljX3BhcmVudF9wYWdlcyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBfXygnRGVmYXVsdCcpLFxuXHRcdFx0XHRcdGZpZWxkdHlwZTogJ0NoZWNrJyxcblx0XHRcdFx0XHRmaWVsZG5hbWU6ICdkZWZhdWx0Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGZpZWxkdHlwZTogJ0NvbHVtbiBCcmVhaycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogX18oJ0ljb24nKSxcblx0XHRcdFx0XHRmaWVsZHR5cGU6ICdJY29uJyxcblx0XHRcdFx0XHRmaWVsZG5hbWU6ICdpY29uJyxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0XHRwcmltYXJ5X2FjdGlvbl9sYWJlbDogX18oJ0NyZWF0ZScpLFxuXHRcdFx0cHJpbWFyeV9hY3Rpb246IHZhbHVlcyA9PiB7XG5cdFx0XHRcdHZhbHVlcy50aXRsZSA9IGZyYXBwZS51dGlscy5lc2NhcGVfaHRtbChgJHt2YWx1ZXMudGl0bGV9JHt2YWx1ZXMuc3VmZml4ID8gYHt7JHt2YWx1ZXMuc3VmZml4fX19YCA6ICcnfWApO1xuXHRcdFx0XHR2YWx1ZXMuaXNfcHVibGljID0gMTtcblx0XHRcdFx0aWYgKCF0aGlzLnZhbGlkYXRlX3BhZ2UodmFsdWVzKSkgeyByZXR1cm47IH1cblx0XHRcdFx0ZC5oaWRlKCk7XG5cdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZV9lZGl0b3Jqc191bmRvKCk7XG5cdFx0XHRcdHRoaXMuc2V0dXBfY3VzdG9taXphdGlvbl9idXR0b25zKHsgaXNfZWRpdGFibGU6IHRydWUgfSk7XG5cblx0XHRcdFx0bGV0IG5hbWUgPSB2YWx1ZXMudGl0bGUgKyAodmFsdWVzLmlzX3B1YmxpYyA/ICcnIDogYC0ke2ZyYXBwZS5zZXNzaW9uLnVzZXJ9YCk7XG5cdFx0XHRcdGxldCBibG9ja3MgPSBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dHlwZTogJ2hlYWRlcicsXG5cdFx0XHRcdFx0XHRkYXRhOiB7IHRleHQ6IHZhbHVlcy50aXRsZSB9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdF07XG5cblx0XHRcdFx0bGV0IG5ld19wYWdlID0ge1xuXHRcdFx0XHRcdGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KGJsb2NrcyksXG5cdFx0XHRcdFx0bmFtZTogbmFtZSxcblx0XHRcdFx0XHRsYWJlbDogbmFtZSxcblx0XHRcdFx0XHR0aXRsZTogdmFsdWVzLnRpdGxlLFxuXHRcdFx0XHRcdHB1YmxpYzogdmFsdWVzLmlzX3B1YmxpYyB8fCAwLFxuXHRcdFx0XHRcdGZvcl91c2VyOiB2YWx1ZXMuaXNfcHVibGljID8gJycgOiBmcmFwcGUuc2Vzc2lvbi51c2VyLFxuXHRcdFx0XHRcdGljb246IHZhbHVlcy5pY29uLFxuXHRcdFx0XHRcdHBhcmVudF9wYWdlOiB2YWx1ZXMucGFyZW50IHx8ICcnLFxuXHRcdFx0XHRcdGlzX2VkaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHNlbGVjdGVkOiB0cnVlLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRjb25zdCBtZSA9IHRoaXM7XG5cdFx0XHRcdHRoaXMuZWRpdG9yXG5cdFx0XHRcdFx0LnJlbmRlcih7XG5cdFx0XHRcdFx0XHRibG9ja3M6IGJsb2Nrcyxcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmVkaXRvci5jb25maWd1cmF0aW9uLnJlYWRPbmx5KSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuaXNfcmVhZF9vbmx5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuZWRpdG9yLnJlYWRPbmx5LnRvZ2dsZSgpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRmcmFwcGUuY2FsbCh7XG5cdFx0XHRcdFx0XHRcdG1ldGhvZDogJ2ZyYXBwZS5kZXNrLmRvY3R5cGUud29ya3NwYWNlLndvcmtzcGFjZS5uZXdfcGFnZScsXG5cdFx0XHRcdFx0XHRcdGFyZ3M6IHtcblx0XHRcdFx0XHRcdFx0XHRuZXdfcGFnZTogbmV3X3BhZ2UsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrOiBmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHJlcy5tZXNzYWdlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmcmFwcGUuY2FsbCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1ldGhvZDogJ3RpYW5qeV9vcmdhbml6YXRpb24udGlhbmp5X29yZ2FuaXphdGlvbi5wYWdlLnRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnLnRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnLnNhdmVfb3JnYW5pemF0aW9uX3dvcmtzcGFjZScsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3M6IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR3b3Jrc3BhY2VfbmFtZTogcmVzLm1lc3NhZ2UubmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcmdhbml6YXRpb25fbmFtZTogbWUub3JnYW5pemF0aW9uX25hbWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDogdmFsdWVzLmRlZmF1bHQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdGxldCBtZXNzYWdlID0gX18oJ1dvcmtzcGFjZSB7MH0gQ3JlYXRlZCBTdWNjZXNzZnVsbHknLCBbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5ld19wYWdlLnRpdGxlLmJvbGQoKSxcblx0XHRcdFx0XHRcdFx0XHRcdF0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZnJhcHBlLnNob3dfYWxlcnQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpbmRpY2F0b3I6ICdncmVlbicsXG5cdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdG5ld19wYWdlLm9yZ2FuaXphdGlvbiA9IHRoaXMub3JnYW5pemF0aW9uX25hbWU7XG5cdFx0XHRcdFx0XHR0aGlzLnVwZGF0ZV9jYWNoZWRfdmFsdWVzKG5ld19wYWdlLCBuZXdfcGFnZSwgdHJ1ZSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHRcdHRoaXMubWFrZV9zaWRlYmFyKCk7XG5cdFx0XHRcdFx0XHR0aGlzLnNob3dfc2lkZWJhcl9hY3Rpb25zKCk7XG5cblx0XHRcdFx0XHRcdC8vIFRPRE8gXHU2NjNFXHU3OTNBXHU2NUIwXHU1REU1XHU0RjVDXHU1MzNBXG5cdFx0XHRcdFx0XHR0aGlzLnVwZGF0ZV9zZWxlY3RlZF9zaWRlYmFyKHRoaXMuY3VycmVudF9wYWdlLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHR0aGlzLmN1cnJlbnRfcGFnZT17XG5cdFx0XHRcdFx0XHRcdG5hbWU6IG5ld19wYWdlLnRpdGxlLFxuXHRcdFx0XHRcdFx0XHRwdWJsaWM6IG5ld19wYWdlLnB1YmxpYyxcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR0aGlzLnNob3coKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0ZC5zaG93KCk7XG5cdH1cblxuXHR2YWxpZGF0ZV9wYWdlKG5ld19wYWdlLCBvbGRfcGFnZSkge1xuXHRcdGxldCBtZXNzYWdlID0gJyc7XG5cdFx0bGV0IFtmcm9tX3BhZ2VzLCB0b19wYWdlc10gPSBuZXdfcGFnZS5pc19wdWJsaWNcblx0XHRcdD8gW3RoaXMucHJpdmF0ZV9wYWdlcywgdGhpcy5wdWJsaWNfcGFnZXNdXG5cdFx0XHQ6IFt0aGlzLnB1YmxpY19wYWdlcywgdGhpcy5wcml2YXRlX3BhZ2VzXTtcblxuXHRcdGxldCBzZWN0aW9uID0gdGhpcy5zaWRlYmFyX2NhdGVnb3JpZXNbbmV3X3BhZ2UuaXNfcHVibGljXTtcblxuXHRcdGlmICh0b19wYWdlcyAmJiB0b19wYWdlcy5maW5kKHAgPT4gcC50aXRsZSA9PSBuZXdfcGFnZS50aXRsZSkpIHtcblx0XHRcdG1lc3NhZ2UgPSBfXygnUGFnZSB3aXRoIHRpdGxlIHswfSBhbHJlYWR5IGV4aXN0LicsIFtuZXdfcGFnZS50aXRsZS5ib2xkKCldKTtcblx0XHR9XG5cblx0XHRpZiAoZnJhcHBlLnJvdXRlci5kb2N0eXBlX3JvdXRlX2V4aXN0KGZyYXBwZS5yb3V0ZXIuc2x1ZyhuZXdfcGFnZS50aXRsZSkpKSB7XG5cdFx0XHRtZXNzYWdlID0gX18oJ0RvY3R5cGUgd2l0aCBzYW1lIHJvdXRlIGFscmVhZHkgZXhpc3QuIFBsZWFzZSBjaG9vc2UgZGlmZmVyZW50IHRpdGxlLicpO1xuXHRcdH1cblxuXHRcdGxldCBjaGlsZF9wYWdlcyA9IG9sZF9wYWdlICYmIGZyb21fcGFnZXMuZmlsdGVyKHAgPT4gcC5wYXJlbnRfcGFnZSA9PSBvbGRfcGFnZS50aXRsZSk7XG5cdFx0aWYgKGNoaWxkX3BhZ2VzKSB7XG5cdFx0XHRjaGlsZF9wYWdlcy5ldmVyeShjaGlsZF9wYWdlID0+IHtcblx0XHRcdFx0aWYgKHRvX3BhZ2VzICYmIHRvX3BhZ2VzLmZpbmQocCA9PiBwLnRpdGxlID09IGNoaWxkX3BhZ2UudGl0bGUpKSB7XG5cdFx0XHRcdFx0bWVzc2FnZSA9IF9fKFxuXHRcdFx0XHRcdFx0J09uZSBvZiB0aGUgY2hpbGQgcGFnZSB3aXRoIG5hbWUgezB9IGFscmVhZHkgZXhpc3QgaW4gezF9IFNlY3Rpb24uIFBsZWFzZSB1cGRhdGUgdGhlIG5hbWUgb2YgdGhlIGNoaWxkIHBhZ2UgZmlyc3QgYmVmb3JlIG1vdmluZycsXG5cdFx0XHRcdFx0XHRbY2hpbGRfcGFnZS50aXRsZS5ib2xkKCksIHNlY3Rpb24uYm9sZCgpXSxcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGN1cl9kaWFsb2cuaGlkZSgpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChtZXNzYWdlKSB7XG5cdFx0XHRmcmFwcGUudGhyb3coX18obWVzc2FnZSkpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGFkZF9wYWdlX3RvX3NpZGViYXIocGFnZSkge1xuXHRcdGxldCAkc2lkZWJhciA9ICQoJy5zdGFuZGFyZC1zaWRlYmFyLXNlY3Rpb24nKTtcblx0XHRsZXQgaXRlbSA9IHsgLi4ucGFnZSB9O1xuXG5cdFx0aXRlbS5zZWxlY3RlZCA9IHRydWU7XG5cdFx0aXRlbS5pc19lZGl0YWJsZSA9IHRydWU7XG5cblx0XHRsZXQgJHNpZGViYXJfaXRlbSA9IHRoaXMuc2lkZWJhcl9pdGVtX2NvbnRhaW5lcihpdGVtKTtcblxuXHRcdHRoaXMuYWRkX3NpZGViYXJfYWN0aW9ucyhpdGVtLCAkc2lkZWJhcl9pdGVtLmZpbmQoJy5zaWRlYmFyLWl0ZW0tY29udHJvbCcpLCB0cnVlKTtcblxuXHRcdCRzaWRlYmFyX2l0ZW0uZmluZCgnLnNpZGViYXItaXRlbS1jb250cm9sIC5kcmFnLWhhbmRsZScpLmNzcygnbWFyZ2luLXJpZ2h0JywgJzhweCcpO1xuXG5cdFx0bGV0IHNpZGViYXJfc2VjdGlvbiA9IGl0ZW0uaXNfcHVibGljID8gJHNpZGViYXJbMV0gOiAkc2lkZWJhclswXTtcblxuXHRcdGlmIChpdGVtLnBhcmVudCkge1xuXHRcdFx0bGV0ICRpdGVtX2NvbnRhaW5lciA9ICQoc2lkZWJhcl9zZWN0aW9uKS5maW5kKGBbaXRlbS1uYW1lPVwiJHtpdGVtLnBhcmVudH1cIl1gKTtcblx0XHRcdGxldCAkY2hpbGRfc2VjdGlvbiA9ICRpdGVtX2NvbnRhaW5lci5maW5kKCcuc2lkZWJhci1jaGlsZC1pdGVtJyk7XG5cdFx0XHRsZXQgJGRyb3BfaWNvbiA9ICRpdGVtX2NvbnRhaW5lci5maW5kKCcuZHJvcC1pY29uJyk7XG5cdFx0XHRpZiAoISRjaGlsZF9zZWN0aW9uWzBdKSB7XG5cdFx0XHRcdCRjaGlsZF9zZWN0aW9uID0gJChcblx0XHRcdFx0XHRgPGRpdiBjbGFzcz1cInNpZGViYXItY2hpbGQtaXRlbSBoaWRkZW4gbmVzdGVkLWNvbnRhaW5lclwiPjwvZGl2PmAsXG5cdFx0XHRcdCkuYXBwZW5kVG8oJGl0ZW1fY29udGFpbmVyKTtcblx0XHRcdFx0JGRyb3BfaWNvbi50b2dnbGVDbGFzcygnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0XHQkc2lkZWJhcl9pdGVtLmFwcGVuZFRvKCRjaGlsZF9zZWN0aW9uKTtcblx0XHRcdCRjaGlsZF9zZWN0aW9uLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblx0XHRcdCRpdGVtX2NvbnRhaW5lci5maW5kKCcuZHJvcC1pY29uLmhpZGRlbicpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblx0XHRcdCRpdGVtX2NvbnRhaW5lci5maW5kKCcuZHJvcC1pY29uIHVzZScpLmF0dHIoJ2hyZWYnLCAnI2ljb24tc21hbGwtdXAnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0IWl0ZW0uaXNfcHVibGljICYmICRzaWRlYmFyLmZpcnN0KCkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdFx0JHNpZGViYXJfaXRlbS5hcHBlbmRUbyhzaWRlYmFyX3NlY3Rpb24pO1xuXHRcdH1cblxuXHRcdGxldCBzZWN0aW9uID0gaXRlbS5pc19wdWJsaWMgPyAncHVibGljJyA6ICdwcml2YXRlJztcblx0XHRpZiAoXG5cdFx0XHR0aGlzLnNpZGViYXJfaXRlbXMgJiZcblx0XHRcdHRoaXMuc2lkZWJhcl9pdGVtc1tzZWN0aW9uXSAmJlxuXHRcdFx0IXRoaXMuc2lkZWJhcl9pdGVtc1tzZWN0aW9uXVtpdGVtLnRpdGxlXVxuXHRcdCkge1xuXHRcdFx0dGhpcy5zaWRlYmFyX2l0ZW1zW3NlY3Rpb25dW2l0ZW0udGl0bGVdID0gJHNpZGViYXJfaXRlbTtcblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplX2VkaXRvcmpzKGJsb2Nrcykge1xuXHRcdHRoaXMudG9vbHMgPSB7XG5cdFx0XHRoZWFkZXI6IHtcblx0XHRcdFx0Y2xhc3M6IHRoaXMuYmxvY2tzLmhlYWRlcixcblx0XHRcdFx0aW5saW5lVG9vbGJhcjogWydIZWFkZXJTaXplJywgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnXSxcblx0XHRcdFx0Y29uZmlnOiB7XG5cdFx0XHRcdFx0ZGVmYXVsdF9zaXplOiA0LFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHBhcmFncmFwaDoge1xuXHRcdFx0XHRjbGFzczogdGhpcy5ibG9ja3MucGFyYWdyYXBoLFxuXHRcdFx0XHRpbmxpbmVUb29sYmFyOiBbJ0hlYWRlclNpemUnLCAnYm9sZCcsICdpdGFsaWMnLCAnbGluayddLFxuXHRcdFx0XHRjb25maWc6IHtcblx0XHRcdFx0XHRwbGFjZWhvbGRlcjogX18oJ0Nob29zZSBhIGJsb2NrIG9yIGNvbnRpbnVlIHR5cGluZycpLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdGNoYXJ0OiB7XG5cdFx0XHRcdGNsYXNzOiB0aGlzLmJsb2Nrcy5jaGFydCxcblx0XHRcdFx0Y29uZmlnOiB7XG5cdFx0XHRcdFx0cGFnZV9kYXRhOiB0aGlzLnBhZ2VfZGF0YSB8fCBbXSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRjYXJkOiB7XG5cdFx0XHRcdGNsYXNzOiB0aGlzLmJsb2Nrcy5jYXJkLFxuXHRcdFx0XHRjb25maWc6IHtcblx0XHRcdFx0XHRwYWdlX2RhdGE6IHRoaXMucGFnZV9kYXRhIHx8IFtdLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHNob3J0Y3V0OiB7XG5cdFx0XHRcdGNsYXNzOiB0aGlzLmJsb2Nrcy5zaG9ydGN1dCxcblx0XHRcdFx0Y29uZmlnOiB7XG5cdFx0XHRcdFx0cGFnZV9kYXRhOiB0aGlzLnBhZ2VfZGF0YSB8fCBbXSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRvbmJvYXJkaW5nOiB7XG5cdFx0XHRcdGNsYXNzOiB0aGlzLmJsb2Nrcy5vbmJvYXJkaW5nLFxuXHRcdFx0XHRjb25maWc6IHtcblx0XHRcdFx0XHRwYWdlX2RhdGE6IHRoaXMucGFnZV9kYXRhIHx8IFtdLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHF1aWNrX2xpc3Q6IHtcblx0XHRcdFx0Y2xhc3M6IHRoaXMuYmxvY2tzLnF1aWNrX2xpc3QsXG5cdFx0XHRcdGNvbmZpZzoge1xuXHRcdFx0XHRcdHBhZ2VfZGF0YTogdGhpcy5wYWdlX2RhdGEgfHwgW10sXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0bnVtYmVyX2NhcmQ6IHtcblx0XHRcdFx0Y2xhc3M6IHRoaXMuYmxvY2tzLm51bWJlcl9jYXJkLFxuXHRcdFx0XHRjb25maWc6IHtcblx0XHRcdFx0XHRwYWdlX2RhdGE6IHRoaXMucGFnZV9kYXRhIHx8IFtdLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdGN1c3RvbV9ibG9jazoge1xuXHRcdFx0XHRjbGFzczogdGhpcy5ibG9ja3MuY3VzdG9tX2Jsb2NrLFxuXHRcdFx0XHRjb25maWc6IHtcblx0XHRcdFx0XHRwYWdlX2RhdGE6IHRoaXMucGFnZV9kYXRhIHx8IFtdLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHNwYWNlcjogdGhpcy5ibG9ja3Muc3BhY2VyLFxuXHRcdFx0SGVhZGVyU2l6ZTogZnJhcHBlLndvcmtzcGFjZV9ibG9jay50dW5lcy5oZWFkZXJfc2l6ZSxcblx0XHR9O1xuXHRcdHRoaXMuZWRpdG9yID0gbmV3IEVkaXRvckpTKHtcblx0XHRcdGRhdGE6IHtcblx0XHRcdFx0YmxvY2tzOiBibG9ja3MgfHwgW10sXG5cdFx0XHR9LFxuXHRcdFx0dG9vbHM6IHRoaXMudG9vbHMsXG5cdFx0XHRhdXRvZm9jdXM6IGZhbHNlLFxuXHRcdFx0cmVhZE9ubHk6IHRydWUsXG5cdFx0XHRsb2dMZXZlbDogJ0VSUk9SJyxcblx0XHR9KTtcblx0fVxuXG5cdHNhdmVfcGFnZShwYWdlKSB7XG5cdFx0bGV0IG1lID0gdGhpcztcblx0XHR0aGlzLmN1cnJlbnRfcGFnZSA9IHsgbmFtZTogcGFnZS50aXRsZSwgcHVibGljOiBwYWdlLnB1YmxpYyB9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZWRpdG9yXG5cdFx0XHQuc2F2ZSgpXG5cdFx0XHQudGhlbihvdXRwdXREYXRhID0+IHtcblx0XHRcdFx0bGV0IG5ld193aWRnZXRzID0ge307XG5cblx0XHRcdFx0Zm9yIChjb25zdCBpdGVtIG9mIG91dHB1dERhdGEuYmxvY2tzKSB7XG5cdFx0XHRcdFx0aWYgKGl0ZW0uZGF0YS5uZXcpIHtcblx0XHRcdFx0XHRcdGlmICghbmV3X3dpZGdldHNbaXRlbS50eXBlXSkge1xuXHRcdFx0XHRcdFx0XHRuZXdfd2lkZ2V0c1tpdGVtLnR5cGVdID0gW107XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRuZXdfd2lkZ2V0c1tpdGVtLnR5cGVdLnB1c2goaXRlbS5kYXRhLm5ldyk7XG5cdFx0XHRcdFx0XHRkZWxldGUgaXRlbS5kYXRhLm5ldztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgYmxvY2tzID0gb3V0cHV0RGF0YS5ibG9ja3MuZmlsdGVyKFxuXHRcdFx0XHRcdGl0ZW0gPT5cblx0XHRcdFx0XHRcdGl0ZW0udHlwZSAhPSAnY2FyZCcgfHxcblx0XHRcdFx0XHRcdChpdGVtLmRhdGEuY2FyZF9uYW1lICE9PSAnQ3VzdG9tIERvY3VtZW50cycgJiZcblx0XHRcdFx0XHRcdFx0aXRlbS5kYXRhLmNhcmRfbmFtZSAhPT0gJ0N1c3RvbSBSZXBvcnRzJyksXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHBhZ2UuY29udGVudCA9PSBKU09OLnN0cmluZ2lmeShibG9ja3MpICYmXG5cdFx0XHRcdFx0T2JqZWN0LmtleXMobmV3X3dpZGdldHMpLmxlbmd0aCA9PT0gMFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0aGlzLnNldHVwX2N1c3RvbWl6YXRpb25fYnV0dG9ucyhwYWdlKTtcblx0XHRcdFx0XHRmcmFwcGUuc2hvd19hbGVydCh7XG5cdFx0XHRcdFx0XHRtZXNzYWdlOiBfXygnTm8gY2hhbmdlcyBtYWRlIG9uIHRoZSBwYWdlJyksXG5cdFx0XHRcdFx0XHRpbmRpY2F0b3I6ICd3YXJuaW5nJyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmNyZWF0ZV9wYWdlX3NrZWxldG9uKCk7XG5cdFx0XHRcdHBhZ2UuY29udGVudCA9IEpTT04uc3RyaW5naWZ5KGJsb2Nrcyk7XG5cdFx0XHRcdGZyYXBwZS5jYWxsKHtcblx0XHRcdFx0XHRtZXRob2Q6ICdmcmFwcGUuZGVzay5kb2N0eXBlLndvcmtzcGFjZS53b3Jrc3BhY2Uuc2F2ZV9wYWdlJyxcblx0XHRcdFx0XHRhcmdzOiB7XG5cdFx0XHRcdFx0XHR0aXRsZTogcGFnZS50aXRsZSxcblx0XHRcdFx0XHRcdHB1YmxpYzogcGFnZS5wdWJsaWMgfHwgMCxcblx0XHRcdFx0XHRcdG5ld193aWRnZXRzOiBuZXdfd2lkZ2V0cyxcblx0XHRcdFx0XHRcdGJsb2NrczogSlNPTi5zdHJpbmdpZnkoYmxvY2tzKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGNhbGxiYWNrOiBmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdFx0XHRpZiAocmVzLm1lc3NhZ2UpIHtcblx0XHRcdFx0XHRcdFx0bWUuZGlzY2FyZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdG1lLnVwZGF0ZV9jYWNoZWRfdmFsdWVzKHBhZ2UsIHBhZ2UpO1xuXHRcdFx0XHRcdFx0XHRtZS5yZWxvYWQoKTtcblx0XHRcdFx0XHRcdFx0ZnJhcHBlLnNob3dfYWxlcnQoe1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6IF9fKCdQYWdlIFNhdmVkIFN1Y2Nlc3NmdWxseScpLFxuXHRcdFx0XHRcdFx0XHRcdGluZGljYXRvcjogJ2dyZWVuJyxcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChlcnJvciA9PiB7XG5cdFx0XHRcdGVycm9yO1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZygnU2F2aW5nIGZhaWxlZDogJywgZXJyb3IpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRyZWxvYWQoKSB7XG5cdFx0dGhpcy5zb3J0ZWRfcHVibGljX2l0ZW1zID0gW107XG5cdFx0dGhpcy5zb3J0ZWRfcHJpdmF0ZV9pdGVtcyA9IFtdO1xuXHRcdHRoaXMuc2V0dXBfcGFnZXModHJ1ZSk7XG5cdFx0dGhpcy5kaXNjYXJkID0gZmFsc2U7XG5cdFx0dGhpcy51bmRvLnJlYWRPbmx5ID0gdHJ1ZTtcblx0fVxuXG5cdGNyZWF0ZV9wYWdlX3NrZWxldG9uKCkge1xuXHRcdGlmICh0aGlzLmJvZHkuZmluZCgnLndvcmtzcGFjZS1za2VsZXRvbicpLmxlbmd0aCkgeyByZXR1cm47IH1cblxuXHRcdHRoaXMuYm9keS5wcmVwZW5kKGZyYXBwZS5yZW5kZXJfdGVtcGxhdGUoJ3dvcmtzcGFjZV9sb2FkaW5nX3NrZWxldG9uJykpO1xuXHRcdHRoaXMuYm9keS5maW5kKCcuY29kZXgtZWRpdG9yJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuXHR9XG5cblx0cmVtb3ZlX3BhZ2Vfc2tlbGV0b24oKSB7XG5cdFx0dGhpcy5ib2R5LmZpbmQoJy5jb2RleC1lZGl0b3InKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG5cdFx0dGhpcy5ib2R5LmZpbmQoJy53b3Jrc3BhY2Utc2tlbGV0b24nKS5yZW1vdmUoKTtcblx0fVxuXG5cdGNyZWF0ZV9zaWRlYmFyX3NrZWxldG9uKCkge1xuXHRcdGlmICgkKCcud29ya3NwYWNlLXNpZGViYXItc2tlbGV0b24nKS5sZW5ndGgpIHsgcmV0dXJuOyB9XG5cblx0XHQkKGZyYXBwZS5yZW5kZXJfdGVtcGxhdGUoJ3dvcmtzcGFjZV9zaWRlYmFyX2xvYWRpbmdfc2tlbGV0b24nKSkuaW5zZXJ0QmVmb3JlKHRoaXMuc2lkZWJhcik7XG5cdFx0dGhpcy5zaWRlYmFyLmFkZENsYXNzKCdoaWRkZW4nKTtcblx0fVxuXG5cdHJlbW92ZV9zaWRlYmFyX3NrZWxldG9uKCkge1xuXHRcdHRoaXMuc2lkZWJhci5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG5cdFx0JCgnLndvcmtzcGFjZS1zaWRlYmFyLXNrZWxldG9uJykucmVtb3ZlKCk7XG5cdH1cblxuXHRyZWdpc3Rlcl9hd2Vzb21lYmFyX3Nob3J0Y3V0KCkge1xuXHRcdGlmICghdGhpcy5vcmdhbml6YXRpb25fbmFtZSl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGZvciAoY29uc3QgbGV0dGVyIG9mICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicuc3BsaXQoJycpKSB7XG5cdFx0XHRjb25zdCBkZWZhdWx0X3Nob3J0Y3V0ID0ge1xuXHRcdFx0XHRhY3Rpb246IGUgPT4ge1xuXHRcdFx0XHRcdCQoJyNuYXZiYXItc2VhcmNoJykuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7IC8vIGRvbid0IHByZXZlbnQgZGVmYXVsdCA9IHR5cGUgdGhlIGxldHRlciBpbiBhd2Vzb21lYmFyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHBhZ2U6IHRoaXMucGFnZSxcblx0XHRcdH07XG5cdFx0XHRmcmFwcGUudWkua2V5cy5hZGRfc2hvcnRjdXQoeyBzaG9ydGN1dDogbGV0dGVyLCAuLi5kZWZhdWx0X3Nob3J0Y3V0IH0pO1xuXHRcdFx0ZnJhcHBlLnVpLmtleXMuYWRkX3Nob3J0Y3V0KHsgc2hvcnRjdXQ6IGBzaGlmdCske2xldHRlcn1gLCAuLi5kZWZhdWx0X3Nob3J0Y3V0IH0pO1xuXHRcdH1cblx0fVxufVxuIiwgImltcG9ydCBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Xb3Jrc3BhY2UudnVlP3R5cGU9c3R5bGUtY3NzJmluZGV4PTBcIjtleHBvcnQgZGVmYXVsdCAoKSA9Pnt9IiwgImltcG9ydCB7IG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSBcInZ1ZVwiXG5cbmNvbnN0IF93aXRoU2NvcGVJZCA9IG4gPT4gKF9wdXNoU2NvcGVJZChcImRhdGEtdi04OWEwMjdmM1wiKSxuPW4oKSxfcG9wU2NvcGVJZCgpLG4pXG5jb25zdCBfaG9pc3RlZF8xID0ge1xuICByZWY6IFwid3JhcHBlclJlZlwiLFxuICBjbGFzczogXCJjb250ZW50IHBhZ2UtY29udGFpbmVyXCIsXG4gIGlkOiBcInBhZ2UtV29ya3NwYWNlc1wiLFxuICBcImRhdGEtcGFnZS1yb3V0ZVwiOiBcIldvcmtzcGFjZXNcIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF8xLCBudWxsLCA1MTIgLyogTkVFRF9QQVRDSCAqLykpXG59IiwgImltcG9ydCBzY3JpcHQgZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Xb3Jrc3BhY2UudnVlP3R5cGU9c2NyaXB0XCI7aW1wb3J0IHN0eWxlMCBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL1dvcmtzcGFjZS52dWU/dHlwZT1zdHlsZSZpbmRleD0wXCI7c3R5bGUwKHNjcmlwdCk7aW1wb3J0IHtyZW5kZXIgfSBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL1dvcmtzcGFjZS52dWU/dHlwZT10ZW1wbGF0ZVwiOyBzY3JpcHQucmVuZGVyID0gcmVuZGVyO3NjcmlwdC5fX2ZpbGUgPSBcIi4uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Xb3Jrc3BhY2UudnVlXCI7c2NyaXB0Ll9fc2NvcGVJZCA9IFwiZGF0YS12LTg5YTAyN2YzXCI7ZXhwb3J0IGRlZmF1bHQgc2NyaXB0OyIsICI8dGVtcGxhdGU+XG5cdDxkaXYgY2xhc3M9XCJtZW1iZXJcIiB2LWxvYWRpbmc9XCJsb2FkaW5nXCI+XG5cdFx0PGRpdiBjbGFzcz1cImJ0bi1jb250YWluZXJcIj5cblx0XHRcdDxFbEJ1dHRvbiB2LWlmPVwicGVybWlzc2lvbnMuY3JlYXRlUGVybWlzc2lvblwiIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwiY3JlYXRlTWVtYmVyXCI+XHU2NUIwXHU1ODlFXHU0RUJBXHU1NDU4PC9FbEJ1dHRvbj5cblx0XHQ8L2Rpdj5cblx0XHQ8ZWwtdGFibGUgOmRhdGE9XCJtZW1iZXJMaXN0XCIgYm9yZGVyIHN0eWxlPVwid2lkdGg6IDEwMCVcIiBoZWlnaHQ9XCIxMDAlXCI+XG5cdFx0XHQ8ZWwtdGFibGUtY29sdW1uIGZpeGVkIHByb3A9XCJ1c2VyX2RvYy5mdWxsX25hbWVcIiBsYWJlbD1cIlx1NzUyOFx1NjIzN1wiIHdpZHRoPVwiMTgwXCIgLz5cblx0XHRcdDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInJvbGVcIiBsYWJlbD1cIlx1ODlEMlx1ODI3MlwiID5cblx0XHRcdFx0PHRlbXBsYXRlICNkZWZhdWx0PVwic2NvcGVcIj5cblx0XHRcdFx0XHQ8c3Bhbj57eyBzY29wZS5yb3cucm9sZXMubWFwKGk9PnR0KGkucm9sZSkpLmpvaW4oJywnKSB9fTwvc3Bhbj5cblx0XHRcdFx0PC90ZW1wbGF0ZT5cblx0XHRcdDwvZWwtdGFibGUtY29sdW1uPlxuXHRcdFx0PGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwidmlzaWJsZVwiIGxhYmVsPVwiXHU1M0VGXHU4OUMxXCIgd2lkdGg9XCI2MFwiID5cblx0XHRcdFx0PHRlbXBsYXRlICNkZWZhdWx0PVwic2NvcGVcIj5cblx0XHRcdFx0XHR7eyBzY29wZS5yb3cudmlzaWJsZT8nXHU2NjJGJzonXHU1NDI2JyB9fVxuXHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0PC9lbC10YWJsZS1jb2x1bW4+XG5cdFx0XHQ8ZWwtdGFibGUtY29sdW1uIHByb3A9XCJ2aWV3YWJsZVwiIGxhYmVsPVwiXHU1M0VGXHU2N0U1XHU3NzBCXCIgd2lkdGg9XCI2MFwiID5cblx0XHRcdFx0PHRlbXBsYXRlICNkZWZhdWx0PVwic2NvcGVcIj5cblx0XHRcdFx0XHR7eyBzY29wZS5yb3cudmlld2FibGU/J1x1NjYyRic6J1x1NTQyNicgfX1cblx0XHRcdFx0PC90ZW1wbGF0ZT5cblx0XHRcdDwvZWwtdGFibGUtY29sdW1uPlxuXHRcdFx0PGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwiYWRkaWJsZVwiIGxhYmVsPVwiXHU1M0VGXHU2REZCXHU1MkEwXCIgd2lkdGg9XCI2MFwiID5cblx0XHRcdFx0PHRlbXBsYXRlICNkZWZhdWx0PVwic2NvcGVcIj5cblx0XHRcdFx0XHR7eyBzY29wZS5yb3cuYWRkaWJsZT8nXHU2NjJGJzonXHU1NDI2JyB9fVxuXHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0PC9lbC10YWJsZS1jb2x1bW4+XG5cdFx0XHQ8ZWwtdGFibGUtY29sdW1uIHByb3A9XCJlZGl0YWJsZVwiIGxhYmVsPVwiXHU1M0VGXHU3RjE2XHU4RjkxXCIgd2lkdGg9XCI2MFwiID5cblx0XHRcdFx0PHRlbXBsYXRlICNkZWZhdWx0PVwic2NvcGVcIj5cblx0XHRcdFx0XHR7eyBzY29wZS5yb3cuZWRpdGFibGU/J1x1NjYyRic6J1x1NTQyNicgfX1cblx0XHRcdFx0PC90ZW1wbGF0ZT5cblx0XHRcdDwvZWwtdGFibGUtY29sdW1uPlxuXHRcdFx0PGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwiZGVsZXRhYmxlXCIgbGFiZWw9XCJcdTUzRUZcdTUyMjBcdTk2NjRcIiB3aWR0aD1cIjYwXCIgPlxuXHRcdFx0XHQ8dGVtcGxhdGUgI2RlZmF1bHQ9XCJzY29wZVwiPlxuXHRcdFx0XHRcdHt7IHNjb3BlLnJvdy5kZWxldGFibGU/J1x1NjYyRic6J1x1NTQyNicgfX1cblx0XHRcdFx0PC90ZW1wbGF0ZT5cblx0XHRcdDwvZWwtdGFibGUtY29sdW1uPlxuXHRcdFx0PGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibWFuYWdlYWJsZVwiIGxhYmVsPVwiXHU1M0VGXHU3QkExXHU3NDA2XCIgd2lkdGg9XCI2MFwiID5cblx0XHRcdFx0PHRlbXBsYXRlICNkZWZhdWx0PVwic2NvcGVcIj5cblx0XHRcdFx0XHR7eyBzY29wZS5yb3cubWFuYWdlYWJsZT8nXHU2NjJGJzonXHU1NDI2JyB9fVxuXHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0PC9lbC10YWJsZS1jb2x1bW4+XG5cblx0XHRcdDxlbC10YWJsZS1jb2x1bW4gdi1pZj1cInBlcm1pc3Npb25zLndyaXRlUGVybWlzc2lvbnx8cGVybWlzc2lvbnMuZGVsZXRlUGVybWlzc2lvblwiIHByb3A9XCJhZGRyZXNzXCIgbGFiZWw9XCJcdTY0Q0RcdTRGNUNcIiB3aWR0aD1cIjEzMFwiID5cblx0XHRcdFx0PHRlbXBsYXRlICNkZWZhdWx0PVwic2NvcGVcIj5cblx0XHRcdFx0XHQ8RWxCdXR0b24gdi1pZj1cInBlcm1pc3Npb25zLndyaXRlUGVybWlzc2lvblwiIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwiZWRpdE1lbWJlcihzY29wZS5yb3cpXCI+XHU3RjE2XHU4RjkxPC9FbEJ1dHRvbj5cblx0XHRcdFx0XHQ8RWxCdXR0b24gdi1pZj1cInBlcm1pc3Npb25zLmRlbGV0ZVBlcm1pc3Npb25cIiB0eXBlPVwiZGFuZ2VyXCIgQGNsaWNrPVwiZGVsZXRlTWVtYmVyKHNjb3BlLnJvdylcIj5cdTUyMjBcdTk2NjQ8L0VsQnV0dG9uPlxuXHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0PC9lbC10YWJsZS1jb2x1bW4+XG5cdFx0PC9lbC10YWJsZT5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwIGxhbmc9J3RzJz5cbmltcG9ydCB7IG9uTW91bnRlZCwgb25Vbm1vdW50ZWQsIHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgRWxNZXNzYWdlQm94LCBFbE1lc3NhZ2UgfSBmcm9tICdlbGVtZW50LXBsdXMnO1xuXG5pbXBvcnQgdHlwZSB7IE1lbWJlciwgUGVybWlzc2lvbnMgfSBmcm9tICcuLi90eXBlJztcblxuaW50ZXJmYWNlIFByb3Bze1xuXHRvcmdhbml6YXRpb246c3RyaW5nXG5cdHBlcm1pc3Npb25zOlBlcm1pc3Npb25zXG59XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzPFByb3BzPigpO1xuY29uc3QgbWVtYmVyTGlzdCA9IHJlZjxNZW1iZXJbXT4oW10pO1xuY29uc3QgbG9hZGluZyA9IHJlZjxib29sZWFuPihmYWxzZSk7XG5jb25zdCB0dCA9IF9fO1xuXG53YXRjaCgoKT0+cHJvcHMub3JnYW5pemF0aW9uLCAoKT0+e1xuXHRnZXRNZW1iZXJzKCk7XG59LCB7aW1tZWRpYXRlOiB0cnVlfSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE1lbWJlcnMoKXtcblx0aWYgKCFwcm9wcy5vcmdhbml6YXRpb24pe1xuXHRcdHJldHVybjtcblx0fVxuXHRsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcblx0Y29uc3QgcmVzID0gYXdhaXQgZnJhcHBlLmNhbGw8eyBtZXNzYWdlOiBNZW1iZXJbXSB9Pih7XG5cdFx0bWV0aG9kOiAndGlhbmp5X29yZ2FuaXphdGlvbi50aWFuanlfb3JnYW5pemF0aW9uLnBhZ2UudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcuZ2V0X21lbWJlcnMnLFxuXHRcdGFyZ3M6e1xuXHRcdFx0b3JnYW5pemF0aW9uX25hbWU6cHJvcHMub3JnYW5pemF0aW9uLFxuXHRcdH0sXG5cdH0pO1xuXHRtZW1iZXJMaXN0LnZhbHVlID0gcmVzPy5tZXNzYWdlfHxbXTtcblx0bG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNZW1iZXIoKXtcblx0Y29uc3QgbmV3RG9jID0gZnJhcHBlLm1vZGVsLm1ha2VfbmV3X2RvY19hbmRfZ2V0X25hbWUoJ1RpYW5qeSBPcmdhbml6YXRpb24gTWVtYmVyJyk7XG5cdGZyYXBwZS5tb2RlbC5zZXRfdmFsdWUoJ1RpYW5qeSBPcmdhbml6YXRpb24gTWVtYmVyJywgbmV3RG9jLCAnb3JnYW5pemF0aW9uJywgcHJvcHMub3JnYW5pemF0aW9uKTtcblx0ZnJhcHBlLnNldF9yb3V0ZShbJ2Zvcm0nLCAnVGlhbmp5IE9yZ2FuaXphdGlvbiBNZW1iZXInLCBuZXdEb2NdKTtcbn1cblxuZnVuY3Rpb24gZWRpdE1lbWJlcihtZW1iZXI6TWVtYmVyKXtcblx0ZnJhcHBlLnNldF9yb3V0ZShbJ2Zvcm0nLCAnVGlhbmp5IE9yZ2FuaXphdGlvbiBNZW1iZXInLCBtZW1iZXIubmFtZV0pO1xufVxuZnVuY3Rpb24gZGVsZXRlTWVtYmVyKG1lbWJlcjpNZW1iZXIpe1xuXHRFbE1lc3NhZ2VCb3guY29uZmlybShcblx0XHQnXHU2MEE4XHU3ODZFXHU4QkE0XHU1MjIwXHU5NjY0XHU2QjY0XHU0RUJBXHU1NDU4XHU1NDE3PycsXG5cdFx0J1x1OEJGN1x1Nzg2RVx1OEJBNCcsXG5cdFx0e1xuXHRcdFx0Y29uZmlybUJ1dHRvblRleHQ6ICdcdTc4NkVcdTVCOUEnLFxuXHRcdFx0Y2FuY2VsQnV0dG9uVGV4dDogJ1x1NTNENlx1NkQ4OCcsXG5cdFx0XHR0eXBlOiAnd2FybmluZycsXG5cdFx0fSxcblx0KS50aGVuKGFzeW5jICgpID0+IHtcblx0XHRsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcblx0XHRhd2FpdCBmcmFwcGUuZGIuZGVsZXRlX2RvYygnVGlhbmp5IE9yZ2FuaXphdGlvbiBNZW1iZXInLCBtZW1iZXIubmFtZSk7XG5cdFx0Z2V0TWVtYmVycygpO1xuXHRcdEVsTWVzc2FnZSh7XG5cdFx0XHR0eXBlOiAnc3VjY2VzcycsXG5cdFx0XHRtZXNzYWdlOiAnXHU1MjIwXHU5NjY0XHU2MjEwXHU1MjlGJyxcblx0XHR9KTtcblx0fSkuY2F0Y2goKCkgPT4ge1xuXHRcdEVsTWVzc2FnZSh7XG5cdFx0XHR0eXBlOiAnaW5mbycsXG5cdFx0XHRtZXNzYWdlOiAnXHU1M0Q2XHU2RDg4XHU1MjIwXHU5NjY0Jyxcblx0XHR9KTtcblx0fSk7XG59XG5cbmZyYXBwZS5zb2NrZXRpby5kb2N0eXBlX3N1YnNjcmliZSgnVGlhbmp5IE9yZ2FuaXphdGlvbiBNZW1iZXInKTtcblxuZnJhcHBlLnJlYWx0aW1lLm9uKCdsaXN0X3VwZGF0ZScsIHAgPT4ge1xuXHRpZiAocC5kb2N0eXBlICE9PSAnVGlhbmp5IE9yZ2FuaXphdGlvbiBNZW1iZXInJiZwLmRvY3R5cGUgIT09ICdUaWFuankgT3JnYW5pemF0aW9uIFJvbGUnKSB7IHJldHVybjsgfVxuXHRnZXRNZW1iZXJzKCk7XG59KTtcblxuY29uc3QgcG9wc3RhdGVMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudDphbnkpIHtcblx0Z2V0TWVtYmVycygpO1xufTtcbm9uTW91bnRlZCgoKSA9PiB7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHBvcHN0YXRlTGlzdGVuZXIpO1xufSk7XG5vblVubW91bnRlZCgoKSA9PiB7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHBvcHN0YXRlTGlzdGVuZXIpO1xufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9J2xlc3MnIHNjb3BlZD5cbi5tZW1iZXJ7XG5cdGhlaWdodDogMTAwJTtcblx0ZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHQuYnRuLWNvbnRhaW5lcntcblx0XHR0ZXh0LWFsaWduOiByaWdodDtcblx0XHRtYXJnaW4tYm90dG9tOiA4cHg7XG5cdH1cbn1cblxuPC9zdHlsZT5cbiIsICJpbXBvcnQgXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvTWVtYmVyLnZ1ZT90eXBlPXN0eWxlLWNzcyZpbmRleD0wXCI7ZXhwb3J0IGRlZmF1bHQgKCkgPT57fSIsICJpbXBvcnQgeyBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tIFwidnVlXCJcblxuY29uc3QgX3dpdGhTY29wZUlkID0gbiA9PiAoX3B1c2hTY29wZUlkKFwiZGF0YS12LWI0ODdkYzIyXCIpLG49bigpLF9wb3BTY29wZUlkKCksbilcbmNvbnN0IF9ob2lzdGVkXzEgPSB7IGNsYXNzOiBcIm1lbWJlclwiIH1cbmNvbnN0IF9ob2lzdGVkXzIgPSB7IGNsYXNzOiBcImJ0bi1jb250YWluZXJcIiB9XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfRWxCdXR0b24gPSBfcmVzb2x2ZUNvbXBvbmVudChcIkVsQnV0dG9uXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfdGFibGVfY29sdW1uID0gX3Jlc29sdmVDb21wb25lbnQoXCJlbC10YWJsZS1jb2x1bW5cIilcbiAgY29uc3QgX2NvbXBvbmVudF9lbF90YWJsZSA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtdGFibGVcIilcbiAgY29uc3QgX2RpcmVjdGl2ZV9sb2FkaW5nID0gX3Jlc29sdmVEaXJlY3RpdmUoXCJsb2FkaW5nXCIpXG5cbiAgcmV0dXJuIF93aXRoRGlyZWN0aXZlcygoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIF9ob2lzdGVkXzEsIFtcbiAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzIsIFtcbiAgICAgICgkcHJvcHMucGVybWlzc2lvbnMuY3JlYXRlUGVybWlzc2lvbilcbiAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9FbEJ1dHRvbiwge1xuICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgdHlwZTogXCJwcmltYXJ5XCIsXG4gICAgICAgICAgICBvbkNsaWNrOiAkc2V0dXAuY3JlYXRlTWVtYmVyXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiXHU2NUIwXHU1ODlFXHU0RUJBXHU1NDU4XCIpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgICAgfSkpXG4gICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICBdKSxcbiAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZSwge1xuICAgICAgZGF0YTogJHNldHVwLm1lbWJlckxpc3QsXG4gICAgICBib3JkZXI6IFwiXCIsXG4gICAgICBzdHlsZToge1wid2lkdGhcIjpcIjEwMCVcIn0sXG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICBmaXhlZDogXCJcIixcbiAgICAgICAgICBwcm9wOiBcInVzZXJfZG9jLmZ1bGxfbmFtZVwiLFxuICAgICAgICAgIGxhYmVsOiBcIlx1NzUyOFx1NjIzN1wiLFxuICAgICAgICAgIHdpZHRoOiBcIjE4MFwiXG4gICAgICAgIH0pLFxuICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICBwcm9wOiBcInJvbGVcIixcbiAgICAgICAgICBsYWJlbDogXCJcdTg5RDJcdTgyNzJcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHNjb3BlKSA9PiBbXG4gICAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKHNjb3BlLnJvdy5yb2xlcy5tYXAoaT0+JHNldHVwLnR0KGkucm9sZSkpLmpvaW4oJywnKSksIDEgLyogVEVYVCAqLylcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAxIC8qIFNUQUJMRSAqL1xuICAgICAgICB9KSxcbiAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfdGFibGVfY29sdW1uLCB7XG4gICAgICAgICAgcHJvcDogXCJ2aXNpYmxlXCIsXG4gICAgICAgICAgbGFiZWw6IFwiXHU1M0VGXHU4OUMxXCIsXG4gICAgICAgICAgd2lkdGg6IFwiNjBcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHNjb3BlKSA9PiBbXG4gICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoc2NvcGUucm93LnZpc2libGU/J1x1NjYyRic6J1x1NTQyNicpLCAxIC8qIFRFWFQgKi8pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgfSksXG4gICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3RhYmxlX2NvbHVtbiwge1xuICAgICAgICAgIHByb3A6IFwidmlld2FibGVcIixcbiAgICAgICAgICBsYWJlbDogXCJcdTUzRUZcdTY3RTVcdTc3MEJcIixcbiAgICAgICAgICB3aWR0aDogXCI2MFwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoc2NvcGUpID0+IFtcbiAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhzY29wZS5yb3cudmlld2FibGU/J1x1NjYyRic6J1x1NTQyNicpLCAxIC8qIFRFWFQgKi8pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgfSksXG4gICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3RhYmxlX2NvbHVtbiwge1xuICAgICAgICAgIHByb3A6IFwiYWRkaWJsZVwiLFxuICAgICAgICAgIGxhYmVsOiBcIlx1NTNFRlx1NkRGQlx1NTJBMFwiLFxuICAgICAgICAgIHdpZHRoOiBcIjYwXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KChzY29wZSkgPT4gW1xuICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHNjb3BlLnJvdy5hZGRpYmxlPydcdTY2MkYnOidcdTU0MjYnKSwgMSAvKiBURVhUICovKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgIH0pLFxuICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICBwcm9wOiBcImVkaXRhYmxlXCIsXG4gICAgICAgICAgbGFiZWw6IFwiXHU1M0VGXHU3RjE2XHU4RjkxXCIsXG4gICAgICAgICAgd2lkdGg6IFwiNjBcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHNjb3BlKSA9PiBbXG4gICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoc2NvcGUucm93LmVkaXRhYmxlPydcdTY2MkYnOidcdTU0MjYnKSwgMSAvKiBURVhUICovKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgIH0pLFxuICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICBwcm9wOiBcImRlbGV0YWJsZVwiLFxuICAgICAgICAgIGxhYmVsOiBcIlx1NTNFRlx1NTIyMFx1OTY2NFwiLFxuICAgICAgICAgIHdpZHRoOiBcIjYwXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KChzY29wZSkgPT4gW1xuICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHNjb3BlLnJvdy5kZWxldGFibGU/J1x1NjYyRic6J1x1NTQyNicpLCAxIC8qIFRFWFQgKi8pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgfSksXG4gICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3RhYmxlX2NvbHVtbiwge1xuICAgICAgICAgIHByb3A6IFwibWFuYWdlYWJsZVwiLFxuICAgICAgICAgIGxhYmVsOiBcIlx1NTNFRlx1N0JBMVx1NzQwNlwiLFxuICAgICAgICAgIHdpZHRoOiBcIjYwXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KChzY29wZSkgPT4gW1xuICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHNjb3BlLnJvdy5tYW5hZ2VhYmxlPydcdTY2MkYnOidcdTU0MjYnKSwgMSAvKiBURVhUICovKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgIH0pLFxuICAgICAgICAoJHByb3BzLnBlcm1pc3Npb25zLndyaXRlUGVybWlzc2lvbnx8JHByb3BzLnBlcm1pc3Npb25zLmRlbGV0ZVBlcm1pc3Npb24pXG4gICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICBwcm9wOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgbGFiZWw6IFwiXHU2NENEXHU0RjVDXCIsXG4gICAgICAgICAgICAgIHdpZHRoOiBcIjEzMFwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KChzY29wZSkgPT4gW1xuICAgICAgICAgICAgICAgICgkcHJvcHMucGVybWlzc2lvbnMud3JpdGVQZXJtaXNzaW9uKVxuICAgICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9FbEJ1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiAkZXZlbnQgPT4gKCRzZXR1cC5lZGl0TWVtYmVyKHNjb3BlLnJvdykpXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiXHU3RjE2XHU4RjkxXCIpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXzogMiAvKiBEWU5BTUlDICovXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMzIgLyogUFJPUFMsIERZTkFNSUNfU0xPVFMgKi8sIFtcIm9uQ2xpY2tcIl0pKVxuICAgICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAoJHByb3BzLnBlcm1pc3Npb25zLmRlbGV0ZVBlcm1pc3Npb24pXG4gICAgICAgICAgICAgICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X0VsQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAga2V5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGFuZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljazogJGV2ZW50ID0+ICgkc2V0dXAuZGVsZXRlTWVtYmVyKHNjb3BlLnJvdykpXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiXHU1MjIwXHU5NjY0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXzogMiAvKiBEWU5BTUlDICovXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMzIgLyogUFJPUFMsIERZTkFNSUNfU0xPVFMgKi8sIFtcIm9uQ2xpY2tcIl0pKVxuICAgICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgIF0pLFxuICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICB9LCA4IC8qIFBST1BTICovLCBbXCJkYXRhXCJdKVxuICBdKSksIFtcbiAgICBbX2RpcmVjdGl2ZV9sb2FkaW5nLCAkc2V0dXAubG9hZGluZ11cbiAgXSlcbn0iLCAiaW1wb3J0IHNjcmlwdCBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL01lbWJlci52dWU/dHlwZT1zY3JpcHRcIjtpbXBvcnQgc3R5bGUwIGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvTWVtYmVyLnZ1ZT90eXBlPXN0eWxlJmluZGV4PTBcIjtzdHlsZTAoc2NyaXB0KTtpbXBvcnQge3JlbmRlciB9IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvTWVtYmVyLnZ1ZT90eXBlPXRlbXBsYXRlXCI7IHNjcmlwdC5yZW5kZXIgPSByZW5kZXI7c2NyaXB0Ll9fZmlsZSA9IFwiLi4vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL01lbWJlci52dWVcIjtzY3JpcHQuX19zY29wZUlkID0gXCJkYXRhLXYtYjQ4N2RjMjJcIjtleHBvcnQgZGVmYXVsdCBzY3JpcHQ7IiwgIjx0ZW1wbGF0ZT5cblx0PGRpdiBjbGFzcz1cImluaGVyaXRhYmxlLW9yZ2FuaXphdGlvbiBcIiB2LWxvYWRpbmc9XCJsb2FkaW5nXCI+XG5cdFx0PGRpdiBjbGFzcz1cImJ0bi1jb250YWluZXJcIj5cblx0XHRcdDxFbEJ1dHRvbiB2LWlmPVwicGVybWlzc2lvbnMuY3JlYXRlUGVybWlzc2lvblwiIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwiY3JlYXRlSW5oZXJpdFwiPlx1N0VFN1x1NjI3Rlx1N0VDNFx1N0VDNzwvRWxCdXR0b24+XG5cdFx0PC9kaXY+XG5cdFx0PGVsLXRhYmxlIDpkYXRhPVwiaW5oZXJpdExpc3RcIiBib3JkZXIgc3R5bGU9XCJ3aWR0aDogMTAwJVwiIGhlaWdodD1cIjEwMCVcIj5cblx0XHRcdDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImluaGVyaXRfZnJvbV9vcmdhbml6YXRpb25fZG9jLmxhYmVsXCIgbGFiZWw9XCJcdTdFRTdcdTYyN0ZcdTgxRUFcIiA+PC9lbC10YWJsZS1jb2x1bW4+XG5cdFx0XHQ8ZWwtdGFibGUtY29sdW1uIHByb3A9XCJ2aXNpYmxlXCIgbGFiZWw9XCJcdTUzRUZcdTg5QzFcIiB3aWR0aD1cIjYwXCIgPlxuXHRcdFx0XHQ8dGVtcGxhdGUgI2RlZmF1bHQ9XCJzY29wZVwiPlxuXHRcdFx0XHRcdHt7IHNjb3BlLnJvdy52aXNpYmxlPydcdTY2MkYnOidcdTU0MjYnIH19XG5cdFx0XHRcdDwvdGVtcGxhdGU+XG5cdFx0XHQ8L2VsLXRhYmxlLWNvbHVtbj5cblx0XHRcdDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInZpZXdhYmxlXCIgbGFiZWw9XCJcdTUzRUZcdTY3RTVcdTc3MEJcIiB3aWR0aD1cIjYwXCIgPlxuXHRcdFx0XHQ8dGVtcGxhdGUgI2RlZmF1bHQ9XCJzY29wZVwiPlxuXHRcdFx0XHRcdHt7IHNjb3BlLnJvdy52aWV3YWJsZT8nXHU2NjJGJzonXHU1NDI2JyB9fVxuXHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0PC9lbC10YWJsZS1jb2x1bW4+XG5cdFx0XHQ8ZWwtdGFibGUtY29sdW1uIHByb3A9XCJhZGRpYmxlXCIgbGFiZWw9XCJcdTUzRUZcdTZERkJcdTUyQTBcIiB3aWR0aD1cIjYwXCIgPlxuXHRcdFx0XHQ8dGVtcGxhdGUgI2RlZmF1bHQ9XCJzY29wZVwiPlxuXHRcdFx0XHRcdHt7IHNjb3BlLnJvdy5hZGRpYmxlPydcdTY2MkYnOidcdTU0MjYnIH19XG5cdFx0XHRcdDwvdGVtcGxhdGU+XG5cdFx0XHQ8L2VsLXRhYmxlLWNvbHVtbj5cblx0XHRcdDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImVkaXRhYmxlXCIgbGFiZWw9XCJcdTUzRUZcdTdGMTZcdThGOTFcIiB3aWR0aD1cIjYwXCIgPlxuXHRcdFx0XHQ8dGVtcGxhdGUgI2RlZmF1bHQ9XCJzY29wZVwiPlxuXHRcdFx0XHRcdHt7IHNjb3BlLnJvdy5lZGl0YWJsZT8nXHU2NjJGJzonXHU1NDI2JyB9fVxuXHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0PC9lbC10YWJsZS1jb2x1bW4+XG5cdFx0XHQ8ZWwtdGFibGUtY29sdW1uIHByb3A9XCJkZWxldGFibGVcIiBsYWJlbD1cIlx1NTNFRlx1NTIyMFx1OTY2NFwiIHdpZHRoPVwiNjBcIiA+XG5cdFx0XHRcdDx0ZW1wbGF0ZSAjZGVmYXVsdD1cInNjb3BlXCI+XG5cdFx0XHRcdFx0e3sgc2NvcGUucm93LmRlbGV0YWJsZT8nXHU2NjJGJzonXHU1NDI2JyB9fVxuXHRcdFx0XHQ8L3RlbXBsYXRlPlxuXHRcdFx0PC9lbC10YWJsZS1jb2x1bW4+XG5cdFx0XHQ8ZWwtdGFibGUtY29sdW1uIHByb3A9XCJtYW5hZ2VhYmxlXCIgbGFiZWw9XCJcdTUzRUZcdTdCQTFcdTc0MDZcIiB3aWR0aD1cIjYwXCIgPlxuXHRcdFx0XHQ8dGVtcGxhdGUgI2RlZmF1bHQ9XCJzY29wZVwiPlxuXHRcdFx0XHRcdHt7IHNjb3BlLnJvdy5tYW5hZ2VhYmxlPydcdTY2MkYnOidcdTU0MjYnIH19XG5cdFx0XHRcdDwvdGVtcGxhdGU+XG5cdFx0XHQ8L2VsLXRhYmxlLWNvbHVtbj5cblxuXHRcdFx0PGVsLXRhYmxlLWNvbHVtbiB2LWlmPVwicGVybWlzc2lvbnMud3JpdGVQZXJtaXNzaW9ufHxwZXJtaXNzaW9ucy5kZWxldGVQZXJtaXNzaW9uXCIgcHJvcD1cImFkZHJlc3NcIiBsYWJlbD1cIlx1NjRDRFx1NEY1Q1wiIHdpZHRoPVwiMTMwXCIgPlxuXHRcdFx0XHQ8dGVtcGxhdGUgI2RlZmF1bHQ9XCJzY29wZVwiPlxuXHRcdFx0XHRcdDxFbEJ1dHRvbiB2LWlmPVwicGVybWlzc2lvbnMud3JpdGVQZXJtaXNzaW9uXCIgdHlwZT1cInByaW1hcnlcIiBAY2xpY2s9XCJlZGl0SW5oZXJpdChzY29wZS5yb3cpXCI+XHU3RjE2XHU4RjkxPC9FbEJ1dHRvbj5cblx0XHRcdFx0XHQ8RWxCdXR0b24gdi1pZj1cInBlcm1pc3Npb25zLmRlbGV0ZVBlcm1pc3Npb25cIiB0eXBlPVwiZGFuZ2VyXCIgQGNsaWNrPVwiZGVsZXRlSW5oZXJpdChzY29wZS5yb3cpXCI+XHU1MjIwXHU5NjY0PC9FbEJ1dHRvbj5cblx0XHRcdFx0PC90ZW1wbGF0ZT5cblx0XHRcdDwvZWwtdGFibGUtY29sdW1uPlxuXHRcdDwvZWwtdGFibGU+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cCBsYW5nPSd0cyc+XG5pbXBvcnQgeyBvbk1vdW50ZWQsIG9uVW5tb3VudGVkLCByZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEVsTWVzc2FnZUJveCwgRWxNZXNzYWdlIH0gZnJvbSAnZWxlbWVudC1wbHVzJztcblxuaW1wb3J0IHR5cGUgeyBJbmhlcml0T3JnYW5pemF0aW9uLCBQZXJtaXNzaW9ucyB9IGZyb20gJy4uL3R5cGUnO1xuXG5pbnRlcmZhY2UgUHJvcHN7XG5cdG9yZ2FuaXphdGlvbjpzdHJpbmdcblx0cGVybWlzc2lvbnM6UGVybWlzc2lvbnNcbn1cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHM8UHJvcHM+KCk7XG5jb25zdCBpbmhlcml0TGlzdCA9IHJlZjxJbmhlcml0T3JnYW5pemF0aW9uW10+KFtdKTtcbmNvbnN0IGxvYWRpbmcgPSByZWY8Ym9vbGVhbj4oZmFsc2UpO1xuXG53YXRjaCgoKT0+cHJvcHMub3JnYW5pemF0aW9uLCAoKT0+e1xuXHRnZXRJbmhlcml0cygpO1xufSwge2ltbWVkaWF0ZTogdHJ1ZX0pO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRJbmhlcml0cygpe1xuXHRpZiAoIXByb3BzLm9yZ2FuaXphdGlvbil7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuXHRjb25zdCByZXMgPSBhd2FpdCBmcmFwcGUuY2FsbDx7IG1lc3NhZ2U6IEluaGVyaXRPcmdhbml6YXRpb25bXSB9Pih7XG5cdFx0bWV0aG9kOiAndGlhbmp5X29yZ2FuaXphdGlvbi50aWFuanlfb3JnYW5pemF0aW9uLnBhZ2UudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcudGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcuZ2V0X2luaGVyaXQnLFxuXHRcdGFyZ3M6e1xuXHRcdFx0b3JnYW5pemF0aW9uX25hbWU6cHJvcHMub3JnYW5pemF0aW9uLFxuXHRcdH0sXG5cdH0pO1xuXHRpbmhlcml0TGlzdC52YWx1ZSA9IHJlcz8ubWVzc2FnZXx8W107XG5cdGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5oZXJpdCgpe1xuXHRjb25zdCBuZXdEb2MgPSBmcmFwcGUubW9kZWwubWFrZV9uZXdfZG9jX2FuZF9nZXRfbmFtZSgnVGlhbmp5IE9yZ2FuaXphdGlvbiBJbmhlcml0YWJsZScpO1xuXHRmcmFwcGUubW9kZWwuc2V0X3ZhbHVlKCdUaWFuankgT3JnYW5pemF0aW9uIEluaGVyaXRhYmxlJywgbmV3RG9jLCAnb3JnYW5pemF0aW9uJywgcHJvcHMub3JnYW5pemF0aW9uKTtcblx0ZnJhcHBlLnNldF9yb3V0ZShbJ2Zvcm0nLCAnVGlhbmp5IE9yZ2FuaXphdGlvbiBJbmhlcml0YWJsZScsIG5ld0RvY10pO1xufVxuXG5mdW5jdGlvbiBlZGl0SW5oZXJpdChpbmhlcml0T3JnYW5pemF0aW9uOkluaGVyaXRPcmdhbml6YXRpb24pe1xuXHRmcmFwcGUuc2V0X3JvdXRlKFsnZm9ybScsICdUaWFuankgT3JnYW5pemF0aW9uIEluaGVyaXRhYmxlJywgaW5oZXJpdE9yZ2FuaXphdGlvbi5uYW1lXSk7XG59XG5mdW5jdGlvbiBkZWxldGVJbmhlcml0KGluaGVyaXRPcmdhbml6YXRpb246SW5oZXJpdE9yZ2FuaXphdGlvbil7XG5cdEVsTWVzc2FnZUJveC5jb25maXJtKFxuXHRcdCdcdTYwQThcdTc4NkVcdThCQTRcdTUyMjBcdTk2NjRcdTZCNjRcdTRFQkFcdTU0NThcdTU0MTc/Jyxcblx0XHQnXHU4QkY3XHU3ODZFXHU4QkE0Jyxcblx0XHR7XG5cdFx0XHRjb25maXJtQnV0dG9uVGV4dDogJ1x1Nzg2RVx1NUI5QScsXG5cdFx0XHRjYW5jZWxCdXR0b25UZXh0OiAnXHU1M0Q2XHU2RDg4Jyxcblx0XHRcdHR5cGU6ICd3YXJuaW5nJyxcblx0XHR9LFxuXHQpLnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuXHRcdGF3YWl0IGZyYXBwZS5kYi5kZWxldGVfZG9jKCdUaWFuankgT3JnYW5pemF0aW9uIEluaGVyaXRhYmxlJywgaW5oZXJpdE9yZ2FuaXphdGlvbi5uYW1lKTtcblx0XHRnZXRJbmhlcml0cygpO1xuXHRcdEVsTWVzc2FnZSh7XG5cdFx0XHR0eXBlOiAnc3VjY2VzcycsXG5cdFx0XHRtZXNzYWdlOiAnXHU1MjIwXHU5NjY0XHU2MjEwXHU1MjlGJyxcblx0XHR9KTtcblx0fSkuY2F0Y2goKCkgPT4ge1xuXHRcdEVsTWVzc2FnZSh7XG5cdFx0XHR0eXBlOiAnaW5mbycsXG5cdFx0XHRtZXNzYWdlOiAnXHU1M0Q2XHU2RDg4XHU1MjIwXHU5NjY0Jyxcblx0XHR9KTtcblx0fSk7XG59XG5cbmZyYXBwZS5zb2NrZXRpby5kb2N0eXBlX3N1YnNjcmliZSgnVGlhbmp5IE9yZ2FuaXphdGlvbiBJbmhlcml0YWJsZScpO1xuXG5mcmFwcGUucmVhbHRpbWUub24oJ2xpc3RfdXBkYXRlJywgcCA9PiB7XG5cdGlmIChwLmRvY3R5cGUgIT09ICdUaWFuankgT3JnYW5pemF0aW9uIEluaGVyaXRhYmxlJykgeyByZXR1cm47IH1cblx0Z2V0SW5oZXJpdHMoKTtcbn0pO1xuXG4vLyBjb25zdCBwb3BzdGF0ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50OmFueSkge1xuLy8gXHRnZXRJbmhlcml0cygpO1xuLy8gfTtcbi8vIG9uTW91bnRlZCgoKSA9PiB7XG4vLyBcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHBvcHN0YXRlTGlzdGVuZXIpO1xuLy8gfSk7XG4vLyBvblVubW91bnRlZCgoKSA9PiB7XG4vLyBcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHBvcHN0YXRlTGlzdGVuZXIpO1xuLy8gfSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9J2xlc3MnIHNjb3BlZD5cbi5pbmhlcml0YWJsZS1vcmdhbml6YXRpb257XG5cdGhlaWdodDogMTAwJTtcblx0ZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHQuYnRuLWNvbnRhaW5lcntcblx0XHR0ZXh0LWFsaWduOiByaWdodDtcblx0XHRtYXJnaW4tYm90dG9tOiA4cHg7XG5cdH1cbn1cblxuPC9zdHlsZT5cbiIsICJpbXBvcnQgXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2NvbXBvbmVudHMvSW5oZXJpdC52dWU/dHlwZT1zdHlsZS1jc3MmaW5kZXg9MFwiO2V4cG9ydCBkZWZhdWx0ICgpID0+e30iLCAiaW1wb3J0IHsgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIHdpdGhDdHggYXMgX3dpdGhDdHgsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSBcInZ1ZVwiXG5cbmNvbnN0IF93aXRoU2NvcGVJZCA9IG4gPT4gKF9wdXNoU2NvcGVJZChcImRhdGEtdi00ZTJjOWNiNlwiKSxuPW4oKSxfcG9wU2NvcGVJZCgpLG4pXG5jb25zdCBfaG9pc3RlZF8xID0geyBjbGFzczogXCJpbmhlcml0YWJsZS1vcmdhbml6YXRpb25cIiB9XG5jb25zdCBfaG9pc3RlZF8yID0geyBjbGFzczogXCJidG4tY29udGFpbmVyXCIgfVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykge1xuICBjb25zdCBfY29tcG9uZW50X0VsQnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoXCJFbEJ1dHRvblwiKVxuICBjb25zdCBfY29tcG9uZW50X2VsX3RhYmxlX2NvbHVtbiA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtdGFibGUtY29sdW1uXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfdGFibGUgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLXRhYmxlXCIpXG4gIGNvbnN0IF9kaXJlY3RpdmVfbG9hZGluZyA9IF9yZXNvbHZlRGlyZWN0aXZlKFwibG9hZGluZ1wiKVxuXG4gIHJldHVybiBfd2l0aERpcmVjdGl2ZXMoKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF8xLCBbXG4gICAgX2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCBfaG9pc3RlZF8yLCBbXG4gICAgICAoJHByb3BzLnBlcm1pc3Npb25zLmNyZWF0ZVBlcm1pc3Npb24pXG4gICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfRWxCdXR0b24sIHtcbiAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgIHR5cGU6IFwicHJpbWFyeVwiLFxuICAgICAgICAgICAgb25DbGljazogJHNldHVwLmNyZWF0ZUluaGVyaXRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJcdTdFRTdcdTYyN0ZcdTdFQzRcdTdFQzdcIilcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgICB9KSlcbiAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgIF0pLFxuICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3RhYmxlLCB7XG4gICAgICBkYXRhOiAkc2V0dXAuaW5oZXJpdExpc3QsXG4gICAgICBib3JkZXI6IFwiXCIsXG4gICAgICBzdHlsZToge1wid2lkdGhcIjpcIjEwMCVcIn0sXG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICBwcm9wOiBcImluaGVyaXRfZnJvbV9vcmdhbml6YXRpb25fZG9jLmxhYmVsXCIsXG4gICAgICAgICAgbGFiZWw6IFwiXHU3RUU3XHU2MjdGXHU4MUVBXCJcbiAgICAgICAgfSksXG4gICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3RhYmxlX2NvbHVtbiwge1xuICAgICAgICAgIHByb3A6IFwidmlzaWJsZVwiLFxuICAgICAgICAgIGxhYmVsOiBcIlx1NTNFRlx1ODlDMVwiLFxuICAgICAgICAgIHdpZHRoOiBcIjYwXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KChzY29wZSkgPT4gW1xuICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHNjb3BlLnJvdy52aXNpYmxlPydcdTY2MkYnOidcdTU0MjYnKSwgMSAvKiBURVhUICovKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgIH0pLFxuICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICBwcm9wOiBcInZpZXdhYmxlXCIsXG4gICAgICAgICAgbGFiZWw6IFwiXHU1M0VGXHU2N0U1XHU3NzBCXCIsXG4gICAgICAgICAgd2lkdGg6IFwiNjBcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHNjb3BlKSA9PiBbXG4gICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoc2NvcGUucm93LnZpZXdhYmxlPydcdTY2MkYnOidcdTU0MjYnKSwgMSAvKiBURVhUICovKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgIH0pLFxuICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICBwcm9wOiBcImFkZGlibGVcIixcbiAgICAgICAgICBsYWJlbDogXCJcdTUzRUZcdTZERkJcdTUyQTBcIixcbiAgICAgICAgICB3aWR0aDogXCI2MFwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoc2NvcGUpID0+IFtcbiAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhzY29wZS5yb3cuYWRkaWJsZT8nXHU2NjJGJzonXHU1NDI2JyksIDEgLyogVEVYVCAqLylcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAxIC8qIFNUQUJMRSAqL1xuICAgICAgICB9KSxcbiAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfdGFibGVfY29sdW1uLCB7XG4gICAgICAgICAgcHJvcDogXCJlZGl0YWJsZVwiLFxuICAgICAgICAgIGxhYmVsOiBcIlx1NTNFRlx1N0YxNlx1OEY5MVwiLFxuICAgICAgICAgIHdpZHRoOiBcIjYwXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KChzY29wZSkgPT4gW1xuICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHNjb3BlLnJvdy5lZGl0YWJsZT8nXHU2NjJGJzonXHU1NDI2JyksIDEgLyogVEVYVCAqLylcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAxIC8qIFNUQUJMRSAqL1xuICAgICAgICB9KSxcbiAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfdGFibGVfY29sdW1uLCB7XG4gICAgICAgICAgcHJvcDogXCJkZWxldGFibGVcIixcbiAgICAgICAgICBsYWJlbDogXCJcdTUzRUZcdTUyMjBcdTk2NjRcIixcbiAgICAgICAgICB3aWR0aDogXCI2MFwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoc2NvcGUpID0+IFtcbiAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhzY29wZS5yb3cuZGVsZXRhYmxlPydcdTY2MkYnOidcdTU0MjYnKSwgMSAvKiBURVhUICovKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgIH0pLFxuICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJsZV9jb2x1bW4sIHtcbiAgICAgICAgICBwcm9wOiBcIm1hbmFnZWFibGVcIixcbiAgICAgICAgICBsYWJlbDogXCJcdTUzRUZcdTdCQTFcdTc0MDZcIixcbiAgICAgICAgICB3aWR0aDogXCI2MFwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoc2NvcGUpID0+IFtcbiAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhzY29wZS5yb3cubWFuYWdlYWJsZT8nXHU2NjJGJzonXHU1NDI2JyksIDEgLyogVEVYVCAqLylcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAxIC8qIFNUQUJMRSAqL1xuICAgICAgICB9KSxcbiAgICAgICAgKCRwcm9wcy5wZXJtaXNzaW9ucy53cml0ZVBlcm1pc3Npb258fCRwcm9wcy5wZXJtaXNzaW9ucy5kZWxldGVQZXJtaXNzaW9uKVxuICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfdGFibGVfY29sdW1uLCB7XG4gICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgcHJvcDogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIGxhYmVsOiBcIlx1NjRDRFx1NEY1Q1wiLFxuICAgICAgICAgICAgICB3aWR0aDogXCIxMzBcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoc2NvcGUpID0+IFtcbiAgICAgICAgICAgICAgICAoJHByb3BzLnBlcm1pc3Npb25zLndyaXRlUGVybWlzc2lvbilcbiAgICAgICAgICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfRWxCdXR0b24sIHtcbiAgICAgICAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJwcmltYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljazogJGV2ZW50ID0+ICgkc2V0dXAuZWRpdEluaGVyaXQoc2NvcGUucm93KSlcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoXCJcdTdGMTZcdThGOTFcIilcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfOiAyIC8qIERZTkFNSUMgKi9cbiAgICAgICAgICAgICAgICAgICAgfSwgMTAzMiAvKiBQUk9QUywgRFlOQU1JQ19TTE9UUyAqLywgW1wib25DbGlja1wiXSkpXG4gICAgICAgICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICAgICAgICAgICgkcHJvcHMucGVybWlzc2lvbnMuZGVsZXRlUGVybWlzc2lvbilcbiAgICAgICAgICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfRWxCdXR0b24sIHtcbiAgICAgICAgICAgICAgICAgICAgICBrZXk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYW5nZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiAkZXZlbnQgPT4gKCRzZXR1cC5kZWxldGVJbmhlcml0KHNjb3BlLnJvdykpXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKFwiXHU1MjIwXHU5NjY0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXzogMiAvKiBEWU5BTUlDICovXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMzIgLyogUFJPUFMsIERZTkFNSUNfU0xPVFMgKi8sIFtcIm9uQ2xpY2tcIl0pKVxuICAgICAgICAgICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIDogX2NyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgIF0pLFxuICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICB9LCA4IC8qIFBST1BTICovLCBbXCJkYXRhXCJdKVxuICBdKSksIFtcbiAgICBbX2RpcmVjdGl2ZV9sb2FkaW5nLCAkc2V0dXAubG9hZGluZ11cbiAgXSlcbn0iLCAiaW1wb3J0IHNjcmlwdCBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL0luaGVyaXQudnVlP3R5cGU9c2NyaXB0XCI7aW1wb3J0IHN0eWxlMCBmcm9tIFwiL1VzZXJzL3B4L0NvZGUvZnJhcHBlLWJlbmNoL2FwcHMvdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL0luaGVyaXQudnVlP3R5cGU9c3R5bGUmaW5kZXg9MFwiO3N0eWxlMChzY3JpcHQpO2ltcG9ydCB7cmVuZGVyIH0gZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvY29tcG9uZW50cy9Jbmhlcml0LnZ1ZT90eXBlPXRlbXBsYXRlXCI7IHNjcmlwdC5yZW5kZXIgPSByZW5kZXI7c2NyaXB0Ll9fZmlsZSA9IFwiLi4vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vcGFnZS90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy90aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZy9jb21wb25lbnRzL0luaGVyaXQudnVlXCI7c2NyaXB0Ll9fc2NvcGVJZCA9IFwiZGF0YS12LTRlMmM5Y2I2XCI7ZXhwb3J0IGRlZmF1bHQgc2NyaXB0OyIsICJpbXBvcnQgXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2luZGV4LnZ1ZT90eXBlPXN0eWxlLWNzcyZpbmRleD0wXCI7ZXhwb3J0IGRlZmF1bHQgKCkgPT57fSIsICJpbXBvcnQgeyBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSBcInZ1ZVwiXG5cbmNvbnN0IF93aXRoU2NvcGVJZCA9IG4gPT4gKF9wdXNoU2NvcGVJZChcImRhdGEtdi1jYjI4MGFjZFwiKSxuPW4oKSxfcG9wU2NvcGVJZCgpLG4pXG5jb25zdCBfaG9pc3RlZF8xID0gLyojX19QVVJFX18qLyBfd2l0aFNjb3BlSWQoKCkgPT4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoXCJoM1wiLCB7IGNsYXNzOiBcInRpdGxlXCIgfSwgXCJcdTdFQzRcdTdFQzdcdThCQkVcdTdGNkVcIiwgLTEgLyogSE9JU1RFRCAqLykpXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfdGFiX3BhbmUgPSBfcmVzb2x2ZUNvbXBvbmVudChcImVsLXRhYi1wYW5lXCIpXG4gIGNvbnN0IF9jb21wb25lbnRfZWxfdGFicyA9IF9yZXNvbHZlQ29tcG9uZW50KFwiZWwtdGFic1wiKVxuXG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soJHNldHVwW1wiUGFnZVwiXSwgbnVsbCwge1xuICAgIHRpdGxlOiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICBfaG9pc3RlZF8xXG4gICAgXSksXG4gICAgc2lkZXI6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgIF9jcmVhdGVWTm9kZSgkc2V0dXBbXCJPcmdhbml6YXRpb25UcmVlXCJdLCB7XG4gICAgICAgIG1vZGVsVmFsdWU6ICRzZXR1cC5vcmdhbml6YXRpb24sXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICRldmVudCA9PiAoKCRzZXR1cC5vcmdhbml6YXRpb24pID0gJGV2ZW50KSksXG4gICAgICAgIHBlcm1pc3Npb25zOiAkc2V0dXAub3JnYW5pemF0aW9uUGVybWlzc2lvbnNcbiAgICAgIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFtcIm1vZGVsVmFsdWVcIiwgXCJwZXJtaXNzaW9uc1wiXSlcbiAgICBdKSxcbiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF90YWJzLCB7XG4gICAgICAgIG1vZGVsVmFsdWU6ICRzZXR1cC5hY3RpdmVOYW1lLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAkZXZlbnQgPT4gKCgkc2V0dXAuYWN0aXZlTmFtZSkgPSAkZXZlbnQpKSxcbiAgICAgICAgY2xhc3M6IFwib3JnYW5pemF0aW9uLXRhYnNcIlxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfdGFiX3BhbmUsIHtcbiAgICAgICAgICAgIGNsYXNzOiBcInRhYi1jb250YWluZXJcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIlx1NTdGQVx1NjcyQ1x1NEZFMVx1NjA2RlwiLFxuICAgICAgICAgICAgbmFtZTogXCJpbmZvXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgIF9jcmVhdGVWTm9kZSgkc2V0dXBbXCJGb3JtRGV0YWlsXCJdLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogJHNldHVwLm9yZ2FuaXphdGlvbj8ubmFtZSxcbiAgICAgICAgICAgICAgICBkb2N0eXBlOiBcIlRpYW5qeSBPcmdhbml6YXRpb25cIlxuICAgICAgICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJuYW1lXCJdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfOiAxIC8qIFNUQUJMRSAqL1xuICAgICAgICAgIH0pLFxuICAgICAgICAgICgkc2V0dXAub3JnYW5pemF0aW9uPy50eXBlX2RvYy5ub193b3Jrc3BhY2U9PT0wKVxuICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbF90YWJfcGFuZSwge1xuICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICBjbGFzczogXCJ0YWItY29udGFpbmVyXCIsXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiXHU1REU1XHU0RjVDXHU1MzNBXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ3b3Jrc3BhY2VcIlxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgKCRzZXR1cC5vcmdhbml6YXRpb24pXG4gICAgICAgICAgICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCRzZXR1cFtcIldvcmtzcGFjZVwiXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uOiAkc2V0dXAub3JnYW5pemF0aW9uLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICB9LCBudWxsLCA4IC8qIFBST1BTICovLCBbXCJvcmdhbml6YXRpb25cIl0pKVxuICAgICAgICAgICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXzogMSAvKiBTVEFCTEUgKi9cbiAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX3RhYl9wYW5lLCB7XG4gICAgICAgICAgICBjbGFzczogXCJ0YWItY29udGFpbmVyXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJcdTYyMTBcdTU0NThcIixcbiAgICAgICAgICAgIG5hbWU6IFwidXNlcnNcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgKCRzZXR1cC5vcmdhbml6YXRpb24pXG4gICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soJHNldHVwW1wiTWVtYmVyXCJdLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uOiAkc2V0dXAub3JnYW5pemF0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiAkc2V0dXAubWVtYmVyUGVybWlzc2lvbnNcbiAgICAgICAgICAgICAgICAgIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFtcIm9yZ2FuaXphdGlvblwiLCBcInBlcm1pc3Npb25zXCJdKSlcbiAgICAgICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfdGFiX3BhbmUsIHtcbiAgICAgICAgICAgIGNsYXNzOiBcInRhYi1jb250YWluZXJcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIlx1N0VFN1x1NjI3RlwiLFxuICAgICAgICAgICAgbmFtZTogXCJpbmhlcml0XCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICgkc2V0dXAub3JnYW5pemF0aW9uKVxuICAgICAgICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCRzZXR1cFtcIkluaGVyaXRcIl0sIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgICAgICBvcmdhbml6YXRpb246ICRzZXR1cC5vcmdhbml6YXRpb24ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbnM6ICRzZXR1cC5pbmhlcml0UGVybWlzc2lvbnNcbiAgICAgICAgICAgICAgICAgIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIFtcIm9yZ2FuaXphdGlvblwiLCBcInBlcm1pc3Npb25zXCJdKSlcbiAgICAgICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIF86IDEgLyogU1RBQkxFICovXG4gICAgICB9LCA4IC8qIFBST1BTICovLCBbXCJtb2RlbFZhbHVlXCJdKVxuICAgIF0pLFxuICAgIF86IDEgLyogU1RBQkxFICovXG4gIH0pKVxufSIsICJpbXBvcnQgc2NyaXB0IGZyb20gXCIvVXNlcnMvcHgvQ29kZS9mcmFwcGUtYmVuY2gvYXBwcy90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2luZGV4LnZ1ZT90eXBlPXNjcmlwdFwiO2ltcG9ydCBzdHlsZTAgZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvaW5kZXgudnVlP3R5cGU9c3R5bGUmaW5kZXg9MFwiO3N0eWxlMChzY3JpcHQpO2ltcG9ydCB7cmVuZGVyIH0gZnJvbSBcIi9Vc2Vycy9weC9Db2RlL2ZyYXBwZS1iZW5jaC9hcHBzL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi90aWFuanlfb3JnYW5pemF0aW9uL3BhZ2UvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvdGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWcvaW5kZXgudnVlP3R5cGU9dGVtcGxhdGVcIjsgc2NyaXB0LnJlbmRlciA9IHJlbmRlcjtzY3JpcHQuX19maWxlID0gXCIuLi90aWFuanlfb3JnYW5pemF0aW9uL3RpYW5qeV9vcmdhbml6YXRpb24vdGlhbmp5X29yZ2FuaXphdGlvbi9wYWdlL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL3RpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnL2luZGV4LnZ1ZVwiO3NjcmlwdC5fX3Njb3BlSWQgPSBcImRhdGEtdi1jYjI4MGFjZFwiO2V4cG9ydCBkZWZhdWx0IHNjcmlwdDsiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBLE9BQUMsU0FBUyxHQUFFLEdBQUU7QUFBQyxvQkFBVSxPQUFPLFdBQVMsWUFBVSxPQUFPLFNBQU8sT0FBTyxVQUFRLEVBQUUsSUFBRSxjQUFZLE9BQU8sVUFBUSxPQUFPLE1BQUksT0FBTyxDQUFDLEdBQUUsQ0FBQyxJQUFFLFlBQVUsT0FBTyxVQUFRLFFBQVEsT0FBSyxFQUFFLElBQUUsRUFBRSxPQUFLLEVBQUU7QUFBQSxNQUFDLEVBQUUsUUFBUSxXQUFVO0FBQUMsZUFBTyxTQUFTLEdBQUU7QUFBQyxjQUFJLElBQUUsQ0FBQztBQUFFLG1CQUFTLEVBQUUsR0FBRTtBQUFDLGdCQUFHLEVBQUU7QUFBRyxxQkFBTyxFQUFFLEdBQUc7QUFBUSxnQkFBSSxJQUFFLEVBQUUsS0FBRyxFQUFDLEdBQUksR0FBRSxPQUFHLFNBQVEsQ0FBQyxFQUFDO0FBQUUsbUJBQU8sRUFBRSxHQUFHLEtBQUssRUFBRSxTQUFRLEdBQUUsRUFBRSxTQUFRLENBQUMsR0FBRSxFQUFFLElB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O0FBRWpCLFNBQU8sTUFBTSw4QkFBOEIsZUFBZSxTQUFTLFNBQVM7QUFDM0UsUUFBSSxPQUFPLE9BQU8sR0FBRyxjQUFjO0FBQUEsTUFDbEMsUUFBUTtBQUFBLE1BQ1IsT0FBTztBQUFBLE1BQ1AsZUFBZTtBQUFBLElBQ2hCLENBQUM7QUFDRCxVQUFNLFVBQU0sd0JBQVVDLHFDQUFvQixDQUFDLENBQUM7QUFDNUMsUUFBSSxJQUFJLENBQUFDLFNBQU87QUFBRSxNQUFBQSxLQUFJLE9BQU8saUJBQWlCLFFBQVE7QUFBQSxJQUFNLENBQUM7QUFDNUQsUUFBSSxJQUFJLHFCQUFBQyxTQUFhLEVBQUUsTUFBTSxTQUFTLFFBQVEsYUFBQUMsUUFBSyxDQUFDO0FBQ3BELFFBQUksTUFBTSxLQUFLLE1BQU07QUFBQSxFQUN0QjsiLAogICJuYW1lcyI6IFsidCIsICJlIiwgIm4iLCAiaSIsICJvIiwgInIiLCAicyIsICJpbXBvcnRfdnVlIiwgImltcG9ydF92dWUiLCAiaW1wb3J0X3Z1ZSIsICJUb2dnbGVCdG5fZGVmYXVsdCIsICJpbXBvcnRfdnVlIiwgIl9wdXNoU2NvcGVJZCIsICJfcG9wU2NvcGVJZCIsICJfY3JlYXRlRWxlbWVudFZOb2RlIiwgIl9vcGVuQmxvY2siLCAiX2NyZWF0ZUVsZW1lbnRCbG9jayIsICJUb2dnbGVCdG5fZGVmYXVsdCIsICJfYSIsICJwYWdlX2RlZmF1bHQiLCAiaW1wb3J0X3Z1ZSIsICJfaG9pc3RlZF8xIiwgIl9ob2lzdGVkXzIiLCAiX2hvaXN0ZWRfMyIsICJfaG9pc3RlZF80IiwgInJlbmRlciIsICJfcmVzb2x2ZUNvbXBvbmVudCIsICJfb3BlbkJsb2NrIiwgIl9jcmVhdGVFbGVtZW50QmxvY2siLCAiX0ZyYWdtZW50IiwgIl9jcmVhdGVWTm9kZSIsICJfcmVuZGVyU2xvdCIsICJfY3JlYXRlQ29tbWVudFZOb2RlIiwgIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCAiX3dpdGhEaXJlY3RpdmVzIiwgIl92U2hvdyIsICJfY3JlYXRlQmxvY2siLCAiX3dpdGhDdHgiLCAiX25vcm1hbGl6ZUNsYXNzIiwgIl9ub3JtYWxpemVTdHlsZSIsICJwYWdlX2RlZmF1bHQiLCAicmVuZGVyIiwgImltcG9ydF92dWUiLCAiaXRlbSIsICJpbXBvcnRfdnVlIiwgImltcG9ydF9pY29uc192dWUiLCAiVHJlZUl0ZW1fZGVmYXVsdCIsICJpbXBvcnRfdnVlIiwgIl93aXRoU2NvcGVJZCIsICJfcHVzaFNjb3BlSWQiLCAiX3BvcFNjb3BlSWQiLCAiX2hvaXN0ZWRfMSIsICJfaG9pc3RlZF8yIiwgIl9ob2lzdGVkXzMiLCAiX2NyZWF0ZUVsZW1lbnRWTm9kZSIsICJfaG9pc3RlZF80IiwgInJlbmRlciIsICJfcmVzb2x2ZUNvbXBvbmVudCIsICJfb3BlbkJsb2NrIiwgIl9jcmVhdGVFbGVtZW50QmxvY2siLCAiX3RvRGlzcGxheVN0cmluZyIsICJfY3JlYXRlQmxvY2siLCAiX3dpdGhDdHgiLCAiX2NyZWF0ZVZOb2RlIiwgIl9GcmFnbWVudCIsICJfcmVuZGVyTGlzdCIsICJfY3JlYXRlVGV4dFZOb2RlIiwgIl9jcmVhdGVDb21tZW50Vk5vZGUiLCAiVHJlZUl0ZW1fZGVmYXVsdCIsICJyZW5kZXIiLCAiYmVmb3JlIiwgIk9yZ2FuaXphdGlvblRyZWVfZGVmYXVsdCIsICJpbXBvcnRfdnVlIiwgIl9ob2lzdGVkXzEiLCAiX2hvaXN0ZWRfMiIsICJfaG9pc3RlZF8zIiwgInJlbmRlciIsICJfcmVzb2x2ZUNvbXBvbmVudCIsICJfcmVzb2x2ZURpcmVjdGl2ZSIsICJfd2l0aERpcmVjdGl2ZXMiLCAiX29wZW5CbG9jayIsICJfY3JlYXRlRWxlbWVudEJsb2NrIiwgIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCAiX2NyZWF0ZUJsb2NrIiwgIl93aXRoQ3R4IiwgIl9jcmVhdGVUZXh0Vk5vZGUiLCAiX2NyZWF0ZUNvbW1lbnRWTm9kZSIsICJfY3JlYXRlVk5vZGUiLCAiT3JnYW5pemF0aW9uVHJlZV9kZWZhdWx0IiwgInJlbmRlciIsICJpbXBvcnRfdnVlIiwgImltcG9ydF92dWUiLCAiaW1wb3J0X3Z1ZSIsICJpbXBvcnRfdnVlIiwgInR0IiwgIkhlYWRlcl9kZWZhdWx0IiwgImltcG9ydF92dWUiLCAiX2hvaXN0ZWRfMSIsICJfaG9pc3RlZF8yIiwgIl9ob2lzdGVkXzMiLCAiX2NyZWF0ZUVsZW1lbnRWTm9kZSIsICJfaG9pc3RlZF80IiwgIl9ob2lzdGVkXzUiLCAiX2hvaXN0ZWRfNiIsICJfY3JlYXRlU3RhdGljVk5vZGUiLCAiX2hvaXN0ZWRfMTIiLCAiX2hvaXN0ZWRfMTMiLCAiX2hvaXN0ZWRfMTQiLCAiX2hvaXN0ZWRfMTUiLCAicmVuZGVyIiwgIl9vcGVuQmxvY2siLCAiX2NyZWF0ZUVsZW1lbnRCbG9jayIsICJfbm9ybWFsaXplQ2xhc3MiLCAiX2NyZWF0ZUNvbW1lbnRWTm9kZSIsICJfdG9EaXNwbGF5U3RyaW5nIiwgIkhlYWRlcl9kZWZhdWx0IiwgInJlbmRlciIsICJtZSIsICJsaSIsICJtZSIsICJpbnB1dF9uYW1lIiwgImoiLCAicmVuZGVyIiwgIm1lIiwgIm1lIiwgImR0IiwgImQiLCAia2V5IiwgImZpZWxkIiwgImNoaWxkIiwgIm5hbWUiLCAiaW1wb3J0X3Z1ZSIsICJ0dCIsICJpbXBvcnRfdnVlIiwgIl9ob2lzdGVkXzEiLCAiX2hvaXN0ZWRfMiIsICJfaG9pc3RlZF8zIiwgIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCAiX2hvaXN0ZWRfNCIsICJfaG9pc3RlZF81IiwgIl9ob2lzdGVkXzYiLCAiX2hvaXN0ZWRfNyIsICJfaG9pc3RlZF84IiwgIl9ob2lzdGVkXzkiLCAiX2NyZWF0ZVN0YXRpY1ZOb2RlIiwgIl9ob2lzdGVkXzEwIiwgInJlbmRlciIsICJfb3BlbkJsb2NrIiwgIl9jcmVhdGVFbGVtZW50QmxvY2siLCAiX2NyZWF0ZVZOb2RlIiwgIl9jcmVhdGVDb21tZW50Vk5vZGUiLCAicmVuZGVyIiwgIk1haW5fZGVmYXVsdCIsICJpbXBvcnRfdnVlIiwgInJlbmRlciIsICJfb3BlbkJsb2NrIiwgIl9jcmVhdGVCbG9jayIsICJfY3JlYXRlQ29tbWVudFZOb2RlIiwgInJlbmRlciIsICJGb3JtRGV0YWlsX2RlZmF1bHQiLCAiRGV0YWlsX2RlZmF1bHQiLCAiaW1wb3J0X3Z1ZSIsICJfaG9pc3RlZF8xIiwgInJlbmRlciIsICJfb3BlbkJsb2NrIiwgIl9jcmVhdGVFbGVtZW50QmxvY2siLCAiX2NyZWF0ZUJsb2NrIiwgIl9jcmVhdGVDb21tZW50Vk5vZGUiLCAiRGV0YWlsX2RlZmF1bHQiLCAicmVuZGVyIiwgImltcG9ydF92dWUiLCAiZSIsICIkIiwgIml0ZW0iLCAiZCIsICJwYWdlcyIsICJVbmRvIiwgIm1lIiwgInJlcyIsICJwYWdlIiwgIm5ld19wYWdlIiwgImJsb2NrcyIsICJXb3Jrc3BhY2VfZGVmYXVsdCIsICJpbXBvcnRfdnVlIiwgIl9ob2lzdGVkXzEiLCAicmVuZGVyIiwgIl9vcGVuQmxvY2siLCAiX2NyZWF0ZUVsZW1lbnRCbG9jayIsICJXb3Jrc3BhY2VfZGVmYXVsdCIsICJyZW5kZXIiLCAiaW1wb3J0X3Z1ZSIsICJpbXBvcnRfZWxlbWVudF9wbHVzIiwgInR0IiwgIk1lbWJlcl9kZWZhdWx0IiwgImltcG9ydF92dWUiLCAiX2hvaXN0ZWRfMSIsICJfaG9pc3RlZF8yIiwgInJlbmRlciIsICJfcmVzb2x2ZUNvbXBvbmVudCIsICJfcmVzb2x2ZURpcmVjdGl2ZSIsICJfd2l0aERpcmVjdGl2ZXMiLCAiX29wZW5CbG9jayIsICJfY3JlYXRlRWxlbWVudEJsb2NrIiwgIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCAiX2NyZWF0ZUJsb2NrIiwgIl93aXRoQ3R4IiwgIl9jcmVhdGVUZXh0Vk5vZGUiLCAiX2NyZWF0ZUNvbW1lbnRWTm9kZSIsICJfY3JlYXRlVk5vZGUiLCAiX3RvRGlzcGxheVN0cmluZyIsICJNZW1iZXJfZGVmYXVsdCIsICJyZW5kZXIiLCAiaW1wb3J0X3Z1ZSIsICJpbXBvcnRfZWxlbWVudF9wbHVzIiwgIkluaGVyaXRfZGVmYXVsdCIsICJpbXBvcnRfdnVlIiwgIl9ob2lzdGVkXzEiLCAiX2hvaXN0ZWRfMiIsICJyZW5kZXIiLCAiX3Jlc29sdmVDb21wb25lbnQiLCAiX3Jlc29sdmVEaXJlY3RpdmUiLCAiX3dpdGhEaXJlY3RpdmVzIiwgIl9vcGVuQmxvY2siLCAiX2NyZWF0ZUVsZW1lbnRCbG9jayIsICJfY3JlYXRlRWxlbWVudFZOb2RlIiwgIl9jcmVhdGVCbG9jayIsICJfd2l0aEN0eCIsICJfY3JlYXRlVGV4dFZOb2RlIiwgIl9jcmVhdGVDb21tZW50Vk5vZGUiLCAiX2NyZWF0ZVZOb2RlIiwgIl90b0Rpc3BsYXlTdHJpbmciLCAiSW5oZXJpdF9kZWZhdWx0IiwgInJlbmRlciIsICJ0aWFuanlfb3JnYW5pemF0aW9uX2NvbmZpZ19kZWZhdWx0IiwgImltcG9ydF92dWUiLCAiX3dpdGhTY29wZUlkIiwgIl9wdXNoU2NvcGVJZCIsICJfcG9wU2NvcGVJZCIsICJfaG9pc3RlZF8xIiwgIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCAicmVuZGVyIiwgIl9yZXNvbHZlQ29tcG9uZW50IiwgIl9vcGVuQmxvY2siLCAiX2NyZWF0ZUJsb2NrIiwgIl93aXRoQ3R4IiwgIl9jcmVhdGVWTm9kZSIsICJfYSIsICJfY3JlYXRlQ29tbWVudFZOb2RlIiwgInRpYW5qeV9vcmdhbml6YXRpb25fY29uZmlnX2RlZmF1bHQiLCAicmVuZGVyIiwgImltcG9ydF9lbGVtZW50X3BsdXMiLCAidGlhbmp5X29yZ2FuaXphdGlvbl9jb25maWdfZGVmYXVsdCIsICJhcHAiLCAiRWxlbWVudFBsdXMiLCAiemhDbiJdCn0K

})();